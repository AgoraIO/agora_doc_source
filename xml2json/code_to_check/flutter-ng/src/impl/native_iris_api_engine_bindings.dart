// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to IrisApiEngine
class NativeIrisApiEngineBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeIrisApiEngineBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeIrisApiEngineBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int CallIrisApi(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<ffi.Int8> func_name,
    ffi.Pointer<ffi.Int8> params,
    int paramLength,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
    int bufferLength,
    ffi.Pointer<ffi.Int8> result,
  ) {
    return _CallIrisApi(
      engine_ptr,
      func_name,
      params,
      paramLength,
      buffer,
      bufferLength,
      result,
    );
  }

  late final _CallIrisApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>)>>('CallIrisApi');
  late final _CallIrisApi = _CallIrisApiPtr.asFunction<
      int Function(
          IrisApiEnginePtr,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<ffi.Int8>)>();

  /// IrisRtcEngine
  IrisApiEnginePtr CreateIrisApiEngine() {
    return _CreateIrisApiEngine();
  }

  late final _CreateIrisApiEnginePtr =
      _lookup<ffi.NativeFunction<IrisApiEnginePtr Function()>>(
          'CreateIrisApiEngine');
  late final _CreateIrisApiEngine =
      _CreateIrisApiEnginePtr.asFunction<IrisApiEnginePtr Function()>();

  int InitLogger(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<ffi.Int8> dir,
    int maxSize,
  ) {
    return _InitLogger(
      engine_ptr,
      dir,
      maxSize,
    );
  }

  late final _InitLoggerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('InitLogger');
  late final _InitLogger = _InitLoggerPtr.asFunction<
      int Function(IrisApiEnginePtr, ffi.Pointer<ffi.Int8>, int)>();

  void DestroyIrisApiEngine(
    IrisApiEnginePtr engine_ptr,
  ) {
    return _DestroyIrisApiEngine(
      engine_ptr,
    );
  }

  late final _DestroyIrisApiEnginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IrisApiEnginePtr)>>(
          'DestroyIrisApiEngine');
  late final _DestroyIrisApiEngine =
      _DestroyIrisApiEnginePtr.asFunction<void Function(IrisApiEnginePtr)>();

  IrisEventHandlerHandle SetIrisRtcEngineEventHandler(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisCEventHandler> event_handler,
  ) {
    return _SetIrisRtcEngineEventHandler(
      engine_ptr,
      event_handler,
    );
  }

  late final _SetIrisRtcEngineEventHandlerPtr = _lookup<
      ffi.NativeFunction<
          IrisEventHandlerHandle Function(IrisApiEnginePtr,
              ffi.Pointer<IrisCEventHandler>)>>('SetIrisRtcEngineEventHandler');
  late final _SetIrisRtcEngineEventHandler =
      _SetIrisRtcEngineEventHandlerPtr.asFunction<
          IrisEventHandlerHandle Function(
              IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>();

  int UnsetIrisRtcEngineEventHandler(
    IrisApiEnginePtr engine_ptr,
    IrisEventHandlerHandle handle,
  ) {
    return _UnsetIrisRtcEngineEventHandler(
      engine_ptr,
      handle,
    );
  }

  late final _UnsetIrisRtcEngineEventHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr,
              IrisEventHandlerHandle)>>('UnsetIrisRtcEngineEventHandler');
  late final _UnsetIrisRtcEngineEventHandler =
      _UnsetIrisRtcEngineEventHandlerPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisEventHandlerHandle)>();

  /// IrisRtcRawData
  IrisRtcAudioFrameObserverHandle RegisterAudioFrameObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisRtcCAudioFrameObserver> observer,
    int order,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _RegisterAudioFrameObserver(
      engine_ptr,
      observer,
      order,
      identifier,
    );
  }

  late final _RegisterAudioFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisRtcAudioFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCAudioFrameObserver>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('RegisterAudioFrameObserver');
  late final _RegisterAudioFrameObserver =
      _RegisterAudioFrameObserverPtr.asFunction<
          IrisRtcAudioFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCAudioFrameObserver>,
              int,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterAudioFrameObserver(
    IrisApiEnginePtr engine_ptr,
    IrisRtcAudioFrameObserverHandle handle,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _UnRegisterAudioFrameObserver(
      engine_ptr,
      handle,
      identifier,
    );
  }

  late final _UnRegisterAudioFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr, IrisRtcAudioFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>>('UnRegisterAudioFrameObserver');
  late final _UnRegisterAudioFrameObserver =
      _UnRegisterAudioFrameObserverPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisRtcAudioFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisRtcVideoFrameObserverHandle RegisterVideoFrameObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisRtcCVideoFrameObserver> observer,
    int order,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _RegisterVideoFrameObserver(
      engine_ptr,
      observer,
      order,
      identifier,
    );
  }

  late final _RegisterVideoFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisRtcVideoFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCVideoFrameObserver>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('RegisterVideoFrameObserver');
  late final _RegisterVideoFrameObserver =
      _RegisterVideoFrameObserverPtr.asFunction<
          IrisRtcVideoFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCVideoFrameObserver>,
              int,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterVideoFrameObserver(
    IrisApiEnginePtr engine_ptr,
    IrisRtcVideoFrameObserverHandle handle,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _UnRegisterVideoFrameObserver(
      engine_ptr,
      handle,
      identifier,
    );
  }

  late final _UnRegisterVideoFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr, IrisRtcVideoFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>>('UnRegisterVideoFrameObserver');
  late final _UnRegisterVideoFrameObserver =
      _UnRegisterVideoFrameObserverPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisRtcVideoFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisRtcVideoEncodedImageReceiverHandle RegisterVideoEncodedImageReceiver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisRtcCVideoEncodedImageReceiver> receiver,
    int order,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _RegisterVideoEncodedImageReceiver(
      engine_ptr,
      receiver,
      order,
      identifier,
    );
  }

  late final _RegisterVideoEncodedImageReceiverPtr = _lookup<
      ffi.NativeFunction<
          IrisRtcVideoEncodedImageReceiverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCVideoEncodedImageReceiver>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('RegisterVideoEncodedImageReceiver');
  late final _RegisterVideoEncodedImageReceiver =
      _RegisterVideoEncodedImageReceiverPtr.asFunction<
          IrisRtcVideoEncodedImageReceiverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCVideoEncodedImageReceiver>,
              int,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterVideoEncodedImageReceiver(
    IrisApiEnginePtr engine_ptr,
    IrisRtcVideoEncodedImageReceiverHandle handle,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _UnRegisterVideoEncodedImageReceiver(
      engine_ptr,
      handle,
      identifier,
    );
  }

  late final _UnRegisterVideoEncodedImageReceiverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr,
              IrisRtcVideoEncodedImageReceiverHandle,
              ffi.Pointer<ffi.Int8>)>>('UnRegisterVideoEncodedImageReceiver');
  late final _UnRegisterVideoEncodedImageReceiver =
      _UnRegisterVideoEncodedImageReceiverPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisRtcVideoEncodedImageReceiverHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisAudioEncodedFrameObserverHandle RegisterAudioEncodedFrameObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisCAudioEncodedFrameObserver> observer,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _RegisterAudioEncodedFrameObserver(
      engine_ptr,
      observer,
      params,
    );
  }

  late final _RegisterAudioEncodedFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisAudioEncodedFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisCAudioEncodedFrameObserver>,
              ffi.Pointer<ffi.Int8>)>>('RegisterAudioEncodedFrameObserver');
  late final _RegisterAudioEncodedFrameObserver =
      _RegisterAudioEncodedFrameObserverPtr.asFunction<
          IrisAudioEncodedFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisCAudioEncodedFrameObserver>,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterAudioEncodedFrameObserver(
    IrisApiEnginePtr engine_ptr,
    IrisAudioEncodedFrameObserverHandle handle,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _UnRegisterAudioEncodedFrameObserver(
      engine_ptr,
      handle,
      identifier,
    );
  }

  late final _UnRegisterAudioEncodedFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr,
              IrisAudioEncodedFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>>('UnRegisterAudioEncodedFrameObserver');
  late final _UnRegisterAudioEncodedFrameObserver =
      _UnRegisterAudioEncodedFrameObserverPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisAudioEncodedFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisMetaDataObserverHandle RegisterMediaMetadataObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisCMediaMetadataObserver> observer,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _RegisterMediaMetadataObserver(
      engine_ptr,
      observer,
      params,
    );
  }

  late final _RegisterMediaMetadataObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisMetaDataObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisCMediaMetadataObserver>,
              ffi.Pointer<ffi.Int8>)>>('RegisterMediaMetadataObserver');
  late final _RegisterMediaMetadataObserver =
      _RegisterMediaMetadataObserverPtr.asFunction<
          IrisMetaDataObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisCMediaMetadataObserver>,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterMediaMetadataObserver(
    IrisApiEnginePtr engine_ptr,
    IrisMetaDataObserverHandle handle,
  ) {
    return _UnRegisterMediaMetadataObserver(
      engine_ptr,
      handle,
    );
  }

  late final _UnRegisterMediaMetadataObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr,
              IrisMetaDataObserverHandle)>>('UnRegisterMediaMetadataObserver');
  late final _UnRegisterMediaMetadataObserver =
      _UnRegisterMediaMetadataObserverPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisMetaDataObserverHandle)>();

  int Attach(
    IrisApiEnginePtr engine_ptr,
    IrisVideoFrameBufferManagerPtr manager_ptr,
  ) {
    return _Attach(
      engine_ptr,
      manager_ptr,
    );
  }

  late final _AttachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr, IrisVideoFrameBufferManagerPtr)>>('Attach');
  late final _Attach = _AttachPtr.asFunction<
      int Function(IrisApiEnginePtr, IrisVideoFrameBufferManagerPtr)>();

  int Detach(
    IrisApiEnginePtr engine_ptr,
    IrisVideoFrameBufferManagerPtr manager_ptr,
  ) {
    return _Detach(
      engine_ptr,
      manager_ptr,
    );
  }

  late final _DetachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr, IrisVideoFrameBufferManagerPtr)>>('Detach');
  late final _Detach = _DetachPtr.asFunction<
      int Function(IrisApiEnginePtr, IrisVideoFrameBufferManagerPtr)>();

  /// IrisMediaPlayerPtr
  IrisEventHandlerHandle SetIrisMediaPlayerEventHandler(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisCEventHandler> event_handler,
  ) {
    return _SetIrisMediaPlayerEventHandler(
      engine_ptr,
      event_handler,
    );
  }

  late final _SetIrisMediaPlayerEventHandlerPtr = _lookup<
          ffi.NativeFunction<
              IrisEventHandlerHandle Function(
                  IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>>(
      'SetIrisMediaPlayerEventHandler');
  late final _SetIrisMediaPlayerEventHandler =
      _SetIrisMediaPlayerEventHandlerPtr.asFunction<
          IrisEventHandlerHandle Function(
              IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>();

  int UnsetIrisMediaPlayerEventHandler(
    IrisApiEnginePtr engine_ptr,
    IrisEventHandlerHandle arg1,
  ) {
    return _UnsetIrisMediaPlayerEventHandler(
      engine_ptr,
      arg1,
    );
  }

  late final _UnsetIrisMediaPlayerEventHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr,
              IrisEventHandlerHandle)>>('UnsetIrisMediaPlayerEventHandler');
  late final _UnsetIrisMediaPlayerEventHandler =
      _UnsetIrisMediaPlayerEventHandlerPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisEventHandlerHandle)>();

  IrisMediaPlayerAudioFrameObserverHandle RegisterMediaPlayerAudioFrameObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisMediaPlayerCAudioFrameObserver> observer,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _RegisterMediaPlayerAudioFrameObserver(
      engine_ptr,
      observer,
      params,
    );
  }

  late final _RegisterMediaPlayerAudioFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisMediaPlayerAudioFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCAudioFrameObserver>,
              ffi.Pointer<ffi.Int8>)>>('RegisterMediaPlayerAudioFrameObserver');
  late final _RegisterMediaPlayerAudioFrameObserver =
      _RegisterMediaPlayerAudioFrameObserverPtr.asFunction<
          IrisMediaPlayerAudioFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCAudioFrameObserver>,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterMediaPlayerAudioSpectrumObserver(
    IrisApiEnginePtr engine_ptr,
    IrisMediaPlayerAudioSpectrumObserverHandle handle,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _UnRegisterMediaPlayerAudioSpectrumObserver(
      engine_ptr,
      handle,
      params,
    );
  }

  late final _UnRegisterMediaPlayerAudioSpectrumObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  IrisApiEnginePtr,
                  IrisMediaPlayerAudioSpectrumObserverHandle,
                  ffi.Pointer<ffi.Int8>)>>(
      'UnRegisterMediaPlayerAudioSpectrumObserver');
  late final _UnRegisterMediaPlayerAudioSpectrumObserver =
      _UnRegisterMediaPlayerAudioSpectrumObserverPtr.asFunction<
          int Function(
              IrisApiEnginePtr,
              IrisMediaPlayerAudioSpectrumObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisMediaPlayerAudioSpectrumObserverHandle
      RegisterMediaPlayerAudioSpectrumObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisMediaPlayerCAudioSpectrumObserver> observer,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _RegisterMediaPlayerAudioSpectrumObserver(
      engine_ptr,
      observer,
      params,
    );
  }

  late final _RegisterMediaPlayerAudioSpectrumObserverPtr = _lookup<
          ffi.NativeFunction<
              IrisMediaPlayerAudioSpectrumObserverHandle Function(
                  IrisApiEnginePtr,
                  ffi.Pointer<IrisMediaPlayerCAudioSpectrumObserver>,
                  ffi.Pointer<ffi.Int8>)>>(
      'RegisterMediaPlayerAudioSpectrumObserver');
  late final _RegisterMediaPlayerAudioSpectrumObserver =
      _RegisterMediaPlayerAudioSpectrumObserverPtr.asFunction<
          IrisMediaPlayerAudioSpectrumObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCAudioSpectrumObserver>,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterMediaPlayerAudioFrameObserver(
    IrisApiEnginePtr engine_ptr,
    IrisMediaPlayerAudioFrameObserverHandle handle,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _UnRegisterMediaPlayerAudioFrameObserver(
      engine_ptr,
      handle,
      params,
    );
  }

  late final _UnRegisterMediaPlayerAudioFrameObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  IrisApiEnginePtr,
                  IrisMediaPlayerAudioFrameObserverHandle,
                  ffi.Pointer<ffi.Int8>)>>(
      'UnRegisterMediaPlayerAudioFrameObserver');
  late final _UnRegisterMediaPlayerAudioFrameObserver =
      _UnRegisterMediaPlayerAudioFrameObserverPtr.asFunction<
          int Function(
              IrisApiEnginePtr,
              IrisMediaPlayerAudioFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  int MediaPlayerOpenWithSource(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisMediaPlayerCCustomProvider> provider,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _MediaPlayerOpenWithSource(
      engine_ptr,
      provider,
      params,
    );
  }

  late final _MediaPlayerOpenWithSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCCustomProvider>,
              ffi.Pointer<ffi.Int8>)>>('MediaPlayerOpenWithSource');
  late final _MediaPlayerOpenWithSource =
      _MediaPlayerOpenWithSourcePtr.asFunction<
          int Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCCustomProvider>,
              ffi.Pointer<ffi.Int8>)>();

  /// IrisCloudSpatialAudioEnginePtr
  IrisEventHandlerHandle SetIrisCloudAudioEngineEventHandler(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisCEventHandler> event_handler,
  ) {
    return _SetIrisCloudAudioEngineEventHandler(
      engine_ptr,
      event_handler,
    );
  }

  late final _SetIrisCloudAudioEngineEventHandlerPtr = _lookup<
          ffi.NativeFunction<
              IrisEventHandlerHandle Function(
                  IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>>(
      'SetIrisCloudAudioEngineEventHandler');
  late final _SetIrisCloudAudioEngineEventHandler =
      _SetIrisCloudAudioEngineEventHandlerPtr.asFunction<
          IrisEventHandlerHandle Function(
              IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>();

  int UnsetIrisCloudAudioEngineEventHandler(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisEventHandlerHandle> handle,
  ) {
    return _UnsetIrisCloudAudioEngineEventHandler(
      engine_ptr,
      handle,
    );
  }

  late final _UnsetIrisCloudAudioEngineEventHandlerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  IrisApiEnginePtr, ffi.Pointer<IrisEventHandlerHandle>)>>(
      'UnsetIrisCloudAudioEngineEventHandler');
  late final _UnsetIrisCloudAudioEngineEventHandler =
      _UnsetIrisCloudAudioEngineEventHandlerPtr.asFunction<
          int Function(
              IrisApiEnginePtr, ffi.Pointer<IrisEventHandlerHandle>)>();
}

abstract class IRIS_API_ERROR_CODE_TYPE {
  static const int IRIS_API_NOT_CREATE = 666666;
}

typedef IrisApiEnginePtr = ffi.Pointer<ffi.Void>;
typedef IrisEventHandlerHandle = ffi.Pointer<ffi.Void>;

class IrisCEventHandler extends ffi.Struct {
  external Func_Event OnEvent;
}

typedef Func_Event = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.Uint32>,
            ffi.Uint32)>>;
typedef IrisRtcAudioFrameObserverHandle = ffi.Pointer<ffi.Void>;

class IrisRtcCAudioFrameObserver extends ffi.Struct {
  external Func_AudioFrameLocal OnRecordAudioFrame;

  external Func_AudioFrameLocal OnPlaybackAudioFrame;

  external Func_AudioFrameLocal OnMixedAudioFrame;

  external Func_AudioFrameRemote OnPlaybackAudioFrameBeforeMixing;

  external Func_Bool IsMultipleChannelFrameWanted;
}

typedef Func_AudioFrameLocal = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<ffi.Int8>, ffi.Pointer<IrisAudioFrame>)>>;

class IrisAudioFrame extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int samples;

  @ffi.Int32()
  external int bytes_per_sample;

  @ffi.Int32()
  external int channels;

  @ffi.Int32()
  external int samples_per_sec;

  external ffi.Pointer<ffi.Void> buffer;

  @ffi.Uint32()
  external int buffer_length;

  @ffi.Int64()
  external int render_time_ms;

  @ffi.Int32()
  external int av_sync_type;
}

abstract class AudioFrameType {
  static const int kAudioFrameTypePCM16 = 0;
}

typedef Func_AudioFrameRemote = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<ffi.Int8>, ffi.Uint32, ffi.Pointer<IrisAudioFrame>)>>;
typedef Func_Bool = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function()>>;
typedef IrisRtcVideoFrameObserverHandle = ffi.Pointer<ffi.Void>;

class IrisRtcCVideoFrameObserver extends ffi.Struct {
  external Func_VideoCaptureLocal OnCaptureVideoFrame;

  external Func_VideoCaptureLocal OnPreEncodeVideoFrame;

  external Func_VideoFrameRemote OnRenderVideoFrame;

  external Func_Uint32_t GetObservedFramePosition;

  external Func_Bool IsMultipleChannelFrameWanted;
}

typedef Func_VideoCaptureLocal = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<IrisVideoFrame>,
            ffi.Pointer<IrisVideoFrameBufferConfig>)>>;

class IrisVideoFrame extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int y_stride;

  @ffi.Int32()
  external int u_stride;

  @ffi.Int32()
  external int v_stride;

  external ffi.Pointer<ffi.Void> y_buffer;

  external ffi.Pointer<ffi.Void> u_buffer;

  external ffi.Pointer<ffi.Void> v_buffer;

  @ffi.Uint32()
  external int y_buffer_length;

  @ffi.Uint32()
  external int u_buffer_length;

  @ffi.Uint32()
  external int v_buffer_length;

  @ffi.Int32()
  external int rotation;

  @ffi.Int64()
  external int render_time_ms;

  @ffi.Int32()
  external int av_sync_type;

  external ffi.Pointer<ffi.Void> metadata_buffer;

  @ffi.Int32()
  external int metadata_size;

  external ffi.Pointer<ffi.Void> sharedContext;

  @ffi.Int32()
  external int textureId;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Float> matrix;
}

abstract class IrisVideoFrameType {
  static const int kVideoFrameTypeYUV420 = 0;
  static const int kVideoFrameTypeYUV422 = 1;
  static const int kVideoFrameTypeRGBA = 2;
  static const int kVideoFrameTypeBGRA = 3;
}

class IrisVideoFrameBufferConfig extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Uint32()
  external int id;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Int8> key;
}

abstract class IrisVideoSourceType {
  static const int kVideoSourceTypeCameraPrimary = 0;
  static const int kVideoSourceTypeCameraSecondary = 1;
  static const int kVideoSourceTypeScreenPrimary = 2;
  static const int kVideoSourceTypeScreenSecondary = 3;
  static const int kVideoSourceTypeCustom = 4;
  static const int kVideoSourceTypeMediaPlayer = 5;
  static const int kVideoSourceTypeRtcImagePng = 6;
  static const int kVideoSourceTypeRtcImageJpeg = 7;
  static const int kVideoSourceTypeRtcImageGif = 8;
  static const int kVideoSourceTypeRemote = 9;
  static const int kVideoSourceTypeTranscoded = 10;
  static const int kVideoSourceTypePreEncode = 11;
  static const int kVideoSourceTypePreEncodeSecondaryCamera = 12;
  static const int kVideoSourceTypePreEncodeScreen = 13;
  static const int kVideoSourceTypePreEncodeSecondaryScreen = 14;
  static const int kVideoSourceTypeUnknown = 15;
}

typedef Func_VideoFrameRemote = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<ffi.Int8>, ffi.Uint32, ffi.Pointer<IrisVideoFrame>)>>;
typedef Func_Uint32_t = ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function()>>;
typedef IrisRtcVideoEncodedImageReceiverHandle = ffi.Pointer<ffi.Void>;

class IrisRtcCVideoEncodedImageReceiver extends ffi.Struct {
  external Func_EncodedVideoImageReceived OnEncodedVideoImageReceived;
}

typedef Func_EncodedVideoImageReceived = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Uint8>, ffi.Uint64,
            ffi.Pointer<IrisEncodedVideoFrameInfo>)>>;

class IrisEncodedVideoFrameInfo extends ffi.Struct {
  @ffi.Int32()
  external int codecType;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int framesPerSecond;

  @ffi.Int32()
  external int frameType;

  @ffi.Int32()
  external int rotation;

  @ffi.Int32()
  external int trackId;

  @ffi.Int64()
  external int renderTimeMs;

  @ffi.Uint64()
  external int internalSendTs;

  @ffi.Uint32()
  external int uid;

  @ffi.Int32()
  external int streamType;
}

typedef IrisAudioEncodedFrameObserverHandle = ffi.Pointer<ffi.Void>;

class IrisCAudioEncodedFrameObserver extends ffi.Struct {
  external Func_RecordAudioEncodedFrame onRecordAudioEncodedFrame;

  external Func_PlaybackAudioEncodedFrame OnPlaybackAudioEncodedFrame;

  external Func_MixedAudioEncodedFrame OnMixedAudioEncodedFrame;
}

typedef Func_RecordAudioEncodedFrame = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int32,
            ffi.Pointer<IrisEncodedAudioFrameInfo>)>>;

class IrisEncodedAudioFrameInfo extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int codec;

  @ffi.Int32()
  external int sampleRateHz;

  @ffi.Int32()
  external int samplesPerChannel;

  @ffi.Int32()
  external int numberOfChannels;

  external IrisEncodedAudioFrameAdvancedSettings advancedSettings;
}

abstract class IRIS_AUDIO_CODEC_TYPE {
  static const int AUDIO_CODEC_OPUS = 1;
  static const int AUDIO_CODEC_PCMA = 3;
  static const int AUDIO_CODEC_PCMU = 4;
  static const int AUDIO_CODEC_G722 = 5;
  static const int AUDIO_CODEC_AACLC = 8;
  static const int AUDIO_CODEC_HEAAC = 9;
  static const int AUDIO_CODEC_JC1 = 10;
  static const int AUDIO_CODEC_HEAAC2 = 11;
  static const int AUDIO_CODEC_LPCNET = 12;
}

class IrisEncodedAudioFrameAdvancedSettings extends ffi.Struct {
  @ffi.Uint8()
  external int speech;

  @ffi.Uint8()
  external int sendEvenIfEmpty;
}

typedef Func_PlaybackAudioEncodedFrame = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int32,
            ffi.Pointer<IrisEncodedAudioFrameInfo>)>>;
typedef Func_MixedAudioEncodedFrame = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int32,
            ffi.Pointer<IrisEncodedAudioFrameInfo>)>>;
typedef IrisMetaDataObserverHandle = ffi.Pointer<ffi.Void>;

class IrisCMediaMetadataObserver extends ffi.Struct {
  external Func_MaxMetadataSize getMaxMetadataSize;

  external Func_ReadyToSendMetadata onReadyToSendMetadata;

  external Func_MetadataReceived onMetadataReceived;
}

typedef Func_MaxMetadataSize
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>>;
typedef Func_ReadyToSendMetadata = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<IrisMetadata>, ffi.Int32)>>;

class IrisMetadata extends ffi.Struct {
  @ffi.Uint32()
  external int uid;

  @ffi.Uint32()
  external int size;

  external ffi.Pointer<ffi.Uint8> buffer;

  @ffi.Int64()
  external int timeStampMs;
}

abstract class IRIS_VIDEO_SOURCE_TYPE {
  /// Video captured by the camera.
  static const int IRIS_VIDEO_SOURCE_CAMERA_PRIMARY = 0;
  static const int IRIS_VIDEO_SOURCE_CAMERA = 0;

  /// Video captured by the secondary camera.
  static const int IRIS_VIDEO_SOURCE_CAMERA_SECONDARY = 1;

  /// Video for screen sharing.
  static const int IRIS_VIDEO_SOURCE_SCREEN_PRIMARY = 2;
  static const int IRIS_VIDEO_SOURCE_SCREEN = 2;

  /// Video for secondary screen sharing.
  static const int IRIS_VIDEO_SOURCE_SCREEN_SECONDARY = 3;

  /// Not define.
  static const int IRIS_VIDEO_SOURCE_CUSTOM = 4;

  /// Video for media player sharing.
  static const int IRIS_VIDEO_SOURCE_MEDIA_PLAYER = 5;

  /// Video for png image.
  static const int IRIS_VIDEO_SOURCE_RTC_IMAGE_PNG = 6;

  /// Video for png image.
  static const int IRIS_VIDEO_SOURCE_RTC_IMAGE_JPEG = 7;

  /// Video for png image.
  static const int IRIS_VIDEO_SOURCE_RTC_IMAGE_GIF = 8;

  /// Remote video received from network.
  static const int IRIS_VIDEO_SOURCE_REMOTE = 9;

  /// Video for transcoded.
  static const int IRIS_VIDEO_SOURCE_TRANSCODED = 10;
  static const int IRIS_VIDEO_SOURCE_UNKNOWN = 100;
}

typedef Func_MetadataReceived = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<IrisMetadata>)>>;
typedef IrisVideoFrameBufferManagerPtr = ffi.Pointer<ffi.Void>;
typedef IrisMediaPlayerAudioFrameObserverHandle = ffi.Pointer<ffi.Void>;

class IrisMediaPlayerCAudioFrameObserver extends ffi.Struct {
  external Func_AudioOnFrame onFrame;
}

typedef Func_AudioOnFrame = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<IrisAudioPcmFrame>, ffi.Int32)>>;

class IrisAudioPcmFrame extends ffi.Struct {
  @ffi.Uint32()
  external int capture_timestamp;

  @ffi.Uint64()
  external int samples_per_channel_;

  @ffi.Int32()
  external int sample_rate_hz_;

  @ffi.Int32()
  external int bytes_per_sample;

  @ffi.Uint64()
  external int num_channels_;

  @ffi.Array.multi([3840])
  external ffi.Array<ffi.Int16> data_;
}

abstract class IRIS_BYTES_PER_SAMPLE {
  static const int IRIS_TWO_BYTES_PER_SAMPLE = 2;
}

typedef IrisMediaPlayerAudioSpectrumObserverHandle = ffi.Pointer<ffi.Void>;

class IrisMediaPlayerCAudioSpectrumObserver extends ffi.Struct {
  external Func_LocalAudioSpectrum onLocalAudioSpectrum;

  external Func_RemoteAudioSpectrum onRemoteAudioSpectrum;
}

typedef Func_LocalAudioSpectrum = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<IrisAudioSpectrumData>)>>;

class IrisAudioSpectrumData extends ffi.Struct {
  external ffi.Pointer<ffi.Float> audioSpectrumData;

  @ffi.Int32()
  external int dataLength;
}

typedef Func_RemoteAudioSpectrum = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<IrisUserAudioSpectrumInfo>, ffi.Uint32)>>;

class IrisUserAudioSpectrumInfo extends ffi.Struct {
  @ffi.Uint32()
  external int uid;

  external IrisAudioSpectrumData spectrumData;
}

class IrisMediaPlayerCCustomProvider extends ffi.Struct {
  external Func_OnSeek onSeek;

  external Func_onReadData onReadData;
}

typedef Func_OnSeek = ffi.Pointer<
    ffi.NativeFunction<ffi.Int64 Function(ffi.Int64, ffi.Int32, ffi.Int32)>>;
typedef Func_onReadData = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Int32, ffi.Int32)>>;
