<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_rtcengineconfig">
    <title><ph keyref="RtcEngineConfig"/></title>
    <shortdesc id="short"><ph id="shortdesc"><apiname keyref="RtcEngineConfig"/> 定义。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class RtcEngineConfig {
  public Context mContext;
  public String mAppId;
  public Constants.AreaCode mAreaCode;
  public IAgoraEventHandler mEventHandler;
  public int mChannelProfile;
  public int mAudioScenario;
  public boolean mAutoRegisterAgoraExtensions;
  public List&lt;String&gt; mExtensionList;
  public IMediaExtensionObserver mExtensionObserver;
  public LogConfig mLogConfig;
  public String mNativeLibPath;
  public boolean mDomainLimit;

  public static class LogConfig {
    public String filePath;
    public int fileSizeInKB;
    public int level = Constants.LogLevel.getValue(Constants.LogLevel.LOG_LEVEL_INFO);

    @CalledByNative("LogConfig")
    public String getFilePath() {
      return filePath;
    }

    @CalledByNative("LogConfig")
    public int getFileSize() {
      return fileSizeInKB;
    }

    @CalledByNative("LogConfig")
    public int getLevel() {
      return level;
    }
  }

  public RtcEngineConfig() {
    mContext = null;
    mAppId = "";
    mChannelProfile = Constants.CHANNEL_PROFILE_LIVE_BROADCASTING;
    mEventHandler = null;
    mAreaCode = Constants.AreaCode.AREA_CODE_GLOB;
    mExtensionList = new ArrayList&lt;&gt;();
    mExtensionObserver = null;
    mLogConfig = new LogConfig();
    mDomainLimit = false;
    mAutoRegisterAgoraExtensions = true;
  }

  public void addExtension(String providerName) {
    mExtensionList.add(providerName);
  }

  @CalledByNative
  public Context getContext() {
    return mContext;
  }

  @CalledByNative
  public String getAppId() {
    return mAppId;
  }

  @CalledByNative
  public int getChannelProfile() {
    return mChannelProfile;
  }

  @CalledByNative
  public int getAudioScenario() {
    return mAudioScenario;
  }

  @CalledByNative
  public int getAreaCode() {
    return Constants.AreaCode.getValue(mAreaCode);
  }

  @CalledByNative
  public IMediaExtensionObserver getExtensionObserver() {
    return mExtensionObserver;
  }

  @CalledByNative
  public LogConfig getLogConfig() {
    return mLogConfig;
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcEngineConfig: NSObject

@property (copy, nonatomic) NSString * _Nullable appId;
@property (assign, nonatomic) AgoraChannelProfile channelProfile;
@property (assign, nonatomic) AgoraAudioScenario audioScenario;
@property (assign, nonatomic) AgoraAreaCodeType areaCode;
@property (strong, nonatomic) AgoraLogConfig * _Nullable logConfig;
@property (assign, nonatomic) BOOL domainLimit;
@property (assign, nonatomic) BOOL autoRegisterAgoraExtensions;
@property (copy, nonatomic) NSArray&lt;id&lt;AgoraMediaFilterExtensionDelegate&gt;&gt;* _Nullable mediaFilterExtensions;
@property (weak, nonatomic) id&lt;AgoraMediaFilterEventDelegate&gt; _Nullable eventDelegate;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct RtcEngineContext {
  IRtcEngineEventHandler* eventHandler;
  const char* appId;
  void* context;
  CHANNEL_PROFILE_TYPE channelProfile;
  AUDIO_SCENARIO_TYPE audioScenario;
  unsigned int areaCode;
  commons::LogConfig logConfig;
  bool domainLimit;
  bool autoRegisterAgoraExtensions;

  RtcEngineContext()
      : eventHandler(NULL), appId(NULL), context(NULL),
        channelProfile(CHANNEL_PROFILE_LIVE_BROADCASTING),
        audioScenario(AUDIO_SCENARIO_DEFAULT),
        areaCode(AREA_CODE_GLOB),
        logConfig(), domainLimit(false),
        autoRegisterAgoraExtensions(true) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FRtcEngineContext
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	FString appId;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	UIRtcEngineEventHandler* eventHandler;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	int64 context;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	FString license;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	ECHANNEL_PROFILE_TYPE channelProfile = ECHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_LIVE_BROADCASTING;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	EAUDIO_SCENARIO_TYPE audioScenario = EAUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_DEFAULT;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	bool threadPriority_SetValue;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	ETHREAD_PRIORITY_TYPE threadPriority;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	FLogConfig logConfig;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	FENUMWRAP_AREA_CODE areaCode = EENUMCUSTOM_AREA_CODE::AREA_CODE_GLOB;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	bool useExternalEglContext;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class RtcEngineContext {

  appId?: string;

  channelProfile?: ChannelProfileType;

  audioScenario?: AudioScenarioType;

  areaCode?: number;

  logConfig?: LogConfig;

  threadPriority?: ThreadPriorityType;

  useExternalEglContext?: boolean;

  domainLimit?: boolean;

  autoRegisterAgoraExtensions?: boolean;

}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class RtcEngineContext : OptionalJsonParse
    {

        public string appId;
        public UInt64 context;
        public CHANNEL_PROFILE_TYPE channelProfile;
        public AUDIO_SCENARIO_TYPE audioScenario;
        public AREA_CODE areaCode;
        public LogConfig logConfig;
        public bool domainLimit;
        public bool autoRegisterAgoraExtensions;
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class RtcEngineContext {

  appId?: string;

  channelProfile?: ChannelProfileType;

  audioScenario?: AudioScenarioType;

  areaCode?: number;

  logConfig?: LogConfig;

  threadPriority?: ThreadPriorityType;

  useExternalEglContext?: boolean;

  domainLimit?: boolean;

  autoRegisterAgoraExtensions?: boolean;

}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtcEngineContext {
  const RtcEngineContext(
      {this.appId,
      this.channelProfile,
      this.audioScenario,
      this.areaCode,
      this.logConfig,
      this.threadPriority,
      this.domainLimit,
      this.autoRegisterAgoraExtensions});

  @JsonKey(name: 'appId')
  final String? appId;

  @JsonKey(name: 'channelProfile')
  final ChannelProfileType? channelProfile;

  @JsonKey(name: 'audioScenario')
  final AudioScenarioType? audioScenario;

  @JsonKey(name: 'areaCode')
  final int? areaCode;

  @JsonKey(name: 'logConfig')
  final LogConfig? logConfig;

  @JsonKey(name: 'threadPriority')
  final ThreadPriorityType? threadPriority;

  @JsonKey(name: 'domainLimit')
  final bool? domainLimit;

  @JsonKey(name: 'autoRegisterAgoraExtensions')
  final bool? autoRegisterAgoraExtensions;

  factory RtcEngineContext.fromJson(Map&lt;String, dynamic> json) =>
      _$RtcEngineContextFromJson(json);

  Map&lt;String, dynamic> toJson() => _$RtcEngineContextToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="cpp unreal bp android unity">
                <pt props="cpp unreal bp unity">eventHandler</pt>
                <pt props="android">mEventHandler</pt>
                <pd id="eventhandler"><xref keyref="IRtcEngine"/> 的事件句柄，详见 <xref keyref="IRtcEngineEventHandler"/>。</pd>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp ios mac unity electron rn flutter">appId</pt>
                <pt props="android">mAppId</pt>
                <pd id="appid">声网为 app 开发者签发的 App ID。 使用同一个 App ID 的 app 才能进入同一个频道进行通话或直播。一个 App ID 只能用于创建一个 <apiname keyref="IRtcEngine"/>。如需更换 App ID，必须先调用 <xref keyref="release"/> 销毁当前 <apiname keyref="IRtcEngine"/> 再重新创建。</pd>
            </plentry>
            <plentry props="android cpp unreal bp unity cs">
                <pt props="cpp unreal bp unity cs">context</pt>
                <pt props="android">mContext</pt>
                <pd id="context">
                    <ul props="cpp unreal bp unity cs">
                    <li>Windows 平台上，context 是视窗句柄。如设值，则表示支持设备热插拔。</li>
                    <li props="cpp unreal bp unity">Android 平台上，context 是安卓活动上下文。</li>
                    </ul>
                    <p props="android">安卓活动上下文。</p>
                </pd>
            </plentry>
            <plentry props="android">
                <pt>mNativeLibPath</pt>
                <pd>
                    <p>指定 <codeph>.so</codeph> 文件的存储目录。存储目录必须为有效的 app 的私有目录，可以通过 <codeph>Context.getDir()</codeph> 获取。</p>
                    <ul>
                    <li>如果你设置了该参数，SDK 会在你指定的目录下自动加载 <codeph>.so</codeph> 文件，使 app 在运行时动态加载需要的 <codeph>.so</codeph> 文件，从而减小 app 的包体积。</li>
                    <li>如果你不设置该参数或将其设置为 null，SDK 会从 app 默认的 <codeph>native unreal bpLibraryPath</codeph> 中加载打包所需的 <codeph>.so</codeph> 文件，相对于上一种方式，app 的包体积会增加。</li>
                    </ul>
                    <note type="attention">
                    <ul>
                    <li>该设置仅适用于手动集成 SDK，不适用于通过 Maven Central 或 JitPack 集成 SDK 的情况。</li>
                    <li>务必确保你设置的路径为有效路径，否则会导致 <xref keyref="IRtcEngine"/> 创建失败。</li>
                    </ul></note> </pd>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp ios mac unity cs electron rn flutter">channelProfile</pt>
                <pt props="android">mChannelProfile</pt>
                <pd conkeyref="setChannelProfile/channelprofiletype"/>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp ios mac unity cs electron rn flutter">audioScenario</pt>
                <pt props="android">mAudioScenario</pt>
                <pd conkeyref="setAudioProfile/scenario-ng"/>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp ios mac unity cs electron rn flutter">areaCode</pt>
                <pt props="android">mAreaCode</pt>
                <pd>服务器的访问区域。该功能为高级设置，适用于有访问安全限制的场景。支持的区域详见 <xref keyref="AREA_CODE"/>。区域码支持位操作。</pd>
                <pd>指定访问区域后，集成了 SDK 的 app 会连接指定区域内的声网服务器。</pd>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp ios mac unity cs electron rn flutter">logConfig</pt>
                <pt props="android">mLogConfig</pt>
                <pd>
                    <p>设置 SDK 输出的日志文件。详见 <xref keyref="LogConfig"/>。</p>
                    <p>默认情况下，SDK 会生成 5 个 SDK 日志文件和 5 个 API 调用日志文件，规则如下：</p>
                    <ul conkeyref="setLogFileSize/logprinciple">
                    <li/>
                    </ul> </pd>
            </plentry>
            <plentry props="android">
                <pt>mExtensionList</pt>
                <pd>插件列表。</pd>
            </plentry>
            <plentry props="android ios mac">
                <pt props="android">mExtensionObserver</pt>
                <pt props="ios mac">eventDelegate</pt>
                <pd><xref keyref="IMediaExtensionObserver"/> 实例。</pd>
            </plentry>
            <plentry props="ios mac">
                <pt>mediaFilterExtensions</pt>
                <pd><xref keyref="AgoraMediaFilterExtensionDelegate"/> 实例。</pd>
            </plentry>
            <plentry>
                <pt props="android">mDomainLimit</pt>
                <pt props="cpp unreal bp ios mac electron unity cs rn flutter">domainLimit</pt>
                <pd>
                    <p>是否开启域名限制：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：开启域名限制。该设置适用于 IoT 设备使用物联网卡进行网络访问的场景。SDK 会仅连接到已向运营商报备的域名或 IP 白名单中的服务器。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）关闭域名限制。该设置适用于大部分普通场景。 </li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
              <pt props="android">mAutoRegisterAgoraExtensions</pt>
              <pt props="cpp unreal bp ios mac electron unity cs rn flutter">autoRegisterAgoraExtensions</pt>
              <pd>
                  <p>是否在初始化 <xref keyref="IRtcEngine"/> 时自动注册声网插件：
                  <ul>
                  <li><codeph><ph keyref="true"/></codeph>：（默认）初始化 <apiname keyref="IRtcEngine"/> 时自动注册声网插件。</li>
                  <li><codeph><ph keyref="false"/></codeph>：初始化 <apiname keyref="IRtcEngine"/> 时不注册声网插件。你需要调用 <xref keyref="enableExtension"/> 来注册声网插件。</li>
                  </ul></p>
              </pd>
          </plentry>
            </parml> </section>
            <section props="android">
              <title>方法</title>
              <parml>
                <plentry>
                  <pt>addExtension</pt>
                  <pd>添加插件。详见 <xref keyref="addExtension"/>。</pd>
                </plentry>
              </parml>
            </section>
    </refbody>
</reference>
