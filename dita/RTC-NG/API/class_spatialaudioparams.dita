<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_spatialaudioparams">
  <title><ph keyref="SpatialAudioParams"/></title>
  <shortdesc id="short"><ph id="shortdesc">空间音效参数。</ph></shortdesc>
  <refbody>
    <section id="prototype">
      <p outputclass="codeblock">
      <codeblock props="android" outputclass="language-java">public class SpatialAudioParams {
  public Double speaker_azimuth;
  public Double speaker_elevation;
  public Double speaker_distance;
  public Integer speaker_orientation;
  public Boolean enable_blur;
  public Boolean enable_air_absorb;
  public Double speaker_attenuation;
  public Boolean enable_doppler;
  @CalledByNative
  public Double getSpeakerAzimuth() {
    return speaker_azimuth;
  }
  @CalledByNative
  public Double getSpeakerElevation() {
    return speaker_elevation;
  }
  @CalledByNative
  public Double getSpeakerDistance() {
    return speaker_distance;
  }
  @CalledByNative
  public Integer getSpeakerOrientation() {
    return speaker_orientation;
  }
  @CalledByNative
  public Boolean getBlurFlag() {
    return enable_blur;
  }
  @CalledByNative
  public Boolean getAirAbsorbFlag() {
    return enable_air_absorb;
  }
  @CalledByNative
  public Double getSpeakerAttenuation() {
    return speaker_attenuation;
  }
  @CalledByNative
  public Boolean getDopplerFlag() {
    return enable_doppler;
  }
}</codeblock>
      <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraSpatialAudioParams : NSObject
@property(assign, nonatomic) double speaker_azimuth;
@property(assign, nonatomic) double speaker_elevation;
@property(assign, nonatomic) double speaker_distance;
@property(assign, nonatomic) NSInteger speaker_orientation;
@property(assign, nonatomic) BOOL enable_blur;
@property(assign, nonatomic) BOOL enable_air_absorb;
@property(assign, nonatomic) double speaker_attenuation;
@property(assign, nonatomic) BOOL enable_doppler;
@end</codeblock>
      <codeblock props="cpp" outputclass="language-cpp">struct SpatialAudioParams {
  Optional&lt;double> speaker_azimuth;
  Optional&lt;double> speaker_elevation;
  Optional&lt;double> speaker_distance;
  Optional&lt;int> speaker_orientation;
  Optional&lt;bool> enable_blur;
  Optional&lt;bool> enable_air_absorb;
  Optional&lt;double> speaker_attenuation;
  Optional&lt;bool> enable_doppler;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export class SpatialAudioParams {
  
  speaker_azimuth?: number;
  
  speaker_elevation?: number;
  
  speaker_distance?: number;
  
  speaker_orientation?: number;
  
  enable_blur?: boolean;
  
  enable_air_absorb?: boolean;
  
  speaker_attenuation?: number;

  enable_doppler?: boolean;
}</codeblock>
      <codeblock props="unity" outputclass="language-csharp">public class SpatialAudioParams : OptionalJsonParse
    {
        public Optional&lt;double&gt; speaker_azimuth = new Optional&lt;double&gt;();
        public Optional&lt;double&gt; speaker_elevation = new Optional&lt;double&gt;();
        public Optional&lt;double&gt; speaker_distance = new Optional&lt;double&gt;();
        public Optional&lt;int&gt; speaker_orientation = new Optional&lt;int&gt;();
        public Optional&lt;bool&gt; enable_blur = new Optional&lt;bool&gt;();
        public Optional&lt;bool&gt; enable_air_absorb = new Optional&lt;bool&gt;();
        public Optional&lt;double> speaker_attenuation = new Optional&lt;double>();
        public Optional&lt;bool> enable_doppler = new Optional&lt;bool>();
    }</codeblock>
      <codeblock props="rn" outputclass="language-typescript">export class SpatialAudioParams {
  
  speaker_azimuth?: number;
  
  speaker_elevation?: number;
  
  speaker_distance?: number;
  
  speaker_orientation?: number;
  
  enable_blur?: boolean;
  
  enable_air_absorb?: boolean;
  
  speaker_attenuation?: number;

  enable_doppler?: boolean;
}</codeblock>
      <codeblock props="flutter" outputclass="language-dart">lass SpatialAudioParams {
  const SpatialAudioParams(
      {this.speakerAzimuth,
      this.speakerElevation,
      this.speakerDistance,
      this.speakerOrientation,
      this.enableBlur,
      this.enableAirAbsorb,
      this.speakerAttenuation,
      this.enableDoppler});

  @JsonKey(name: 'speaker_azimuth')
  final double? speakerAzimuth;

  @JsonKey(name: 'speaker_elevation')
  final double? speakerElevation;

  @JsonKey(name: 'speaker_distance')
  final double? speakerDistance;

  @JsonKey(name: 'speaker_orientation')
  final int? speakerOrientation;

  @JsonKey(name: 'enable_blur')
  final bool? enableBlur;

  @JsonKey(name: 'enable_air_absorb')
  final bool? enableAirAbsorb;

  @JsonKey(name: 'speaker_attenuation')
  final double? speakerAttenuation;

  @JsonKey(name: 'enable_doppler')
  final bool? enableDoppler;

  factory SpatialAudioParams.fromJson(Map&lt;String, dynamic> json) =>
      _$SpatialAudioParamsFromJson(json);

  Map&lt;String, dynamic> toJson() => _$SpatialAudioParamsToJson(this);
}</codeblock>
            <codeblock props="unreal" outputclass="language-cpp"></codeblock></p>
    </section>
    <section id="parameters">
      <title><text
      conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"
      /></title>
      <parml>
      <plentry>
        <pt>speaker_azimuth</pt>
        <pd>远端用户或媒体播放器相对于本地用户的水平角。取值范围为 [0,360]，单位为度。其中：
          
          <ul>
          <li>0:（默认）0 度，表示水平面的正前方。</li>
          <li>90: 90 度，表示水平面的正左方。</li>
          <li>180: 180 度，表示水平面的正后方。</li>
          <li>270: 270 度，表示水平面的正右方。</li>
          <li>360: 360 度，表示水平面的正前方。</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>speaker_elevation</pt>
        <pd>远端用户或媒体播放器相对于本地用户的俯仰角。取值范围为 [-90,90]，单位为度。其中：
          
          <ul>
          <li>0:（默认）0 度，表示水平面无旋转。</li>
          <li>-90: -90 度，表示水平面向下旋转 90 度。</li>
          <li>90: 90 度，表示水平面向上旋转 90 度。</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>speaker_distance</pt>
        <pd>远端用户或媒体播放器相对于本地用户的距离。取值范围为 [1,50]，单位为米。默认值为 1 米。</pd>
      </plentry>
      <plentry>
        <pt>speaker_orientation</pt>
        <pd>远端用户或媒体播放器相对于本地用户的朝向。取值范围为 [0,180]，单位为度。其中：
          
          <ul>
          <li>0:（默认）0 度，表示声源和听者朝向同一方向。</li>
          <li>180: 180 度，表示声源和听者面对面。</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>enable_blur</pt>
        <pd>是否开启声音模糊处理：
          
          <ul>
          <li><codeph><ph keyref="true"/></codeph>: 开启模糊处理。</li>
          <li><codeph><ph keyref="false"/></codeph>: （默认）关闭模糊处理。</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>enable_air_absorb</pt>
        <pd>是否开启空气衰减，即模拟声音在空气中传播的音色衰减效果：在一定的传输距离下，高频声音衰减速度快、低频声音衰减速度慢。
          
          <ul>
          <li><codeph><ph keyref="true"
            /></codeph>: （默认）开启空气衰减。需确认 <parmname>speaker_attenuation</parmname> 的值不为 <codeph>0</codeph>，否则该设置不生效。</li>
          <li><codeph><ph keyref="false"/></codeph>: 关闭空气衰减。</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>speaker_attenuation</pt>
        <pd>远端用户或媒体播放器的声音衰减系数，取值范围为[0,1]。其中：
            
          <ul>
          <li>0：广播模式，即音量和音色均不随距离衰减，无论距离远近，本地用户听到的音量和音色都无变化。</li>
          <li>(0,0.5)：弱衰减模式，即音量和音色（需同时开启 <parmname>enable_air_absorb</parmname> ）在传播过程中仅发生微弱衰减，跟真实环境相比，声音可以传播得更远。</li>
          <li>0.5：（默认）模拟音量在真实环境下的衰减，效果等同于不设置 <parmname>speaker_attenuation</parmname> 参数。</li>
          <li>(0.5,1]：强衰减模式，即音量和音色（需同时开启 <parmname>enable_air_absorb</parmname> ）在传播过程中发生迅速衰减。</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>enable_doppler</pt>
        <pd>是否开启多普勒音效：当声源与接收声源者之间产生相对位移时，接收方听到的音调会发生变化。
            
          <ul>
          <li><codeph><ph keyref="true"/></codeph>: 开启多普勒音效。</li>
          <li><codeph><ph keyref="false"/></codeph>: （默认）关闭多普勒音效。</li>
          </ul>
          <note type="caution">
          <ul>
          <li>该参数适用于声源高速运动的场景（例如：赛车游戏），在普通音视频互动场景（语聊、连麦、在线 KTV）中不建议开启。</li>
          <li>开启该参数时，建议设定一个规律的周期（比如 30 ms），然后调用 <xref
            keyref="updatePlayerPositionInfo"/>、<xref
            keyref="updateSelfPosition"/> 和 <xref keyref="updateRemotePosition"
            /> 方法持续更新声源和接收方的相对距离。以下因素会导致多普勒效应达不到预期或者声音出现抖动：更新距离的周期过长，更新周期不规律，网络丢包或延迟导致距离信息丢失。</li>
          </ul> </note></pd>
      </plentry>
      </parml> </section>
  </refbody>
</reference>
