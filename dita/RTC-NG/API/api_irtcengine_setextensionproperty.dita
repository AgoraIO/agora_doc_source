<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setextensionproperty">
    <title><ph keyref="setExtensionProperty"/></title>
    <shortdesc id="short"><ph id="shortdesc">设置扩展属性。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setExtensionProperty"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setExtensionProperty(
      String provider, String extension, String key, String value);
</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setExtensionPropertyWithVendor:(NSString * _Nonnull)provider
                             extension:(NSString * _Nonnull)extension
                                   key:(NSString * _Nonnull)key
                                 value:(NSString * _Nonnull)value NS_SWIFT_NAME(setExtensionPropertyWithVendor(_:extension:key:value:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setExtensionProperty(const char* provider, const char* extension, const char* key, const char* value, agora::media::MEDIA_SOURCE_TYPE type = agora::media::UNKNOWN_MEDIA_SOURCE) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = "Agora|IRtcEngine")
	int SetExtensionProperty(const FString&amp; provider, const FString&amp; extension, const FString&amp; key, const FString&amp; value, EMEDIA_SOURCE_TYPE type = EMEDIA_SOURCE_TYPE::UNKNOWN_MEDIA_SOURCE);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setExtensionProperty(
    provider: string,
    extension: string,
    key: string,
    value: string,
    type?: MediaSourceType
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetExtensionProperty(string provider, string extension, string key, string value, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setExtensionProperty(
    provider: string,
    extension: string,
    key: string,
    value: string,
    type?: MediaSourceType
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setExtensionProperty(
    {required String provider,
    required String extension,
    required String key,
    required String value,
    MediaSourceType type = MediaSourceType.unknownMediaSource});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p></p>
            <note type="attention" props="apple cpp">如果你需要为多个扩展设置属性，需要多次调用该方法。</note>
            </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>在调用 <xref keyref="enableExtension"/> 方法之后调用。</p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <p>无。</p>
        </section>
        <section id="related" deliveryTarget="details">
            <title>相关回调</title>
            <p>成功调用该方法后，可能会触发 <xref keyref="onExtensionEventWithContext"/> 回调，具体触发逻辑取决于扩展本身。</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry id="vendor">
                <pt>provider</pt>
                <pd props="android bp cs electron flutter mac rn unity unreal">提供插件的服务商名称。</pd>
            <pd props="cpp ios">扩展提供方的名称。</pd>
                </plentry>
            <plentry id="extension">
                <pt>extension</pt>
                <pd props="android bp cs electron flutter mac rn unity unreal">插件的名称。</pd>
            <pd props="cpp ios">扩展的名称。</pd>
                </plentry>
            <plentry id="key">
                <pt>key</pt>
                <pd props="android bp cs electron flutter mac rn unity unreal">插件属性的 Key。</pd>
            <pd props="ios">扩展属性的键。</pd>
                <pd props="cpp">扩展属性的键名。</pd>
                </plentry>
            <plentry id="value">
                <pt>value</pt>
                <pd props="android bp cs electron flutter mac rn unity unreal">插件属性 Key 对应的值。</pd>
            <pd props="cpp ios">扩展属性键对应的值。</pd>
                </plentry>
            <plentry conkeyref="enableExtension/source" props="cpp framework">
                <pt/>
                <pd/>
            </plentry>
            <plentry props="cpp">
                <pt props="cpp">type</pt>
                <pd props="cpp">扩展的来源类型，详见 <xref keyref="MEDIA_SOURCE_TYPE"/>。</pd>
            </plentry>
        </parml> </section>
        <section id="return_values" props="bp cs electron flutter native rn unity unreal">
            <title><ph keyref="return-section-title"/></title>
        <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
        <ul props="android bp cs electron rn unity unreal">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul>
        <p props="apple cpp"><ul>
                        <li>0：方法调用成功。</li>
                        <li>&lt; 0：方法调用失败。</li>
                        </ul>
                    </p>
    </section>
    </refbody>
</reference>
