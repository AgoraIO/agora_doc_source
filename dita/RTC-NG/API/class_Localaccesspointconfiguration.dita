<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_Localaccesspointconfiguration">
    <title><ph keyref="LocalAccessPointConfiguration"/></title>
    <shortdesc id="short"><ph id="shortdesc"
        >Local Access Point 配置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class LocalAccessPointConfiguration {
  public static class LogUploadServerInfo {
    public String serverDomain = null;
    public String serverPath = null;
    public int serverPort = 0;
    public boolean serverHttps = true;
    public LogUploadServerInfo() {
      serverDomain = null;
      serverPath = null;
      serverPort = 0;
      serverHttps = true;
    }

    public LogUploadServerInfo(String domain, String path, int port, boolean https) {
      serverDomain = domain;
      serverPath = path;
      serverPort = port;
      serverHttps = https;
    }

    @CalledByNative("LogUploadServerInfo")
    public String getServerDomain() {
      return serverDomain;
    }

    @CalledByNative("LogUploadServerInfo")
    public String getServerPath() {
      return serverPath;
    }

    @CalledByNative("LogUploadServerInfo")
    public int getServerPort() {
      return serverPort;
    }

    @CalledByNative("LogUploadServerInfo")
    public boolean getServerHttps() {
      return serverHttps;
    }
  };

  public static class AdvancedConfigInfo {
    public LogUploadServerInfo logUploadServer = null;

    public AdvancedConfigInfo() {
      logUploadServer = new LogUploadServerInfo();
    }

    @CalledByNative("AdvancedConfigInfo")
    public LogUploadServerInfo getLogUploadServerInfo() {
      return logUploadServer;
    }
  };
  public ArrayList&lt;String> ipList = null;
  public ArrayList&lt;String> domainList = null;
  public String verifyDomainName = null;
  public int mode = Constants.LOCAL_RPOXY_CONNECTIVITY_FIRST;
  public AdvancedConfigInfo advancedConfig = null;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">NS_SWIFT_NAME(AgoraLocalAccessPointConfiguration) __attribute__((visibility("default"))) @interface AgoraLocalAccessPointConfiguration : NSObject
@property(copy, nonatomic) NSArray* _Nullable ipList NS_SWIFT_NAME(ipList);
@property(copy, nonatomic) NSArray* _Nullable domainList NS_SWIFT_NAME(domainList);
@property(copy, nonatomic) NSString* _Nullable verifyDomainName NS_SWIFT_NAME(verifyDomainName);
@property(assign, nonatomic) AgoraLocalProxyMode mode NS_SWIFT_NAME(mode);
@property(strong, nonatomic) AdvancedConfigInfo* _Nullable advancedConfig NS_SWIFT_NAME(advancedConfig);
@end</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">struct LocalAccessPointConfiguration {
  const char** ipList;
  int ipListSize;
  const char** domainList;
  int domainListSize;
  const char* verifyDomainName;
  LOCAL_PROXY_MODE mode;
  AdvancedConfigInfo advancedConfig;
  LocalAccessPointConfiguration() : ipList(NULL), ipListSize(0), domainList(NULL), domainListSize(0), verifyDomainName(NULL), mode(ConnectivityFirst) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class LocalAccessPointConfiguration {
  
  ipList?: string[];
  
  ipListSize?: number;
  
  domainList?: string[];
  
  domainListSize?: number;
  
  verifyDomainName?: string;
  
  mode?: LocalProxyMode;

  advancedConfig?: AdvancedConfigInfo;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class LocalAccessPointConfiguration
    {
        public string[] ipList { set; get; }
        public int ipListSize { set; get; }
        public string[] domainList { set; get; }
        public int domainListSize { set; get; }
        public string verifyDomainName { set; get; }
        public LOCAL_PROXY_MODE mode { set; get; }
        public AdvancedConfigInfo advancedConfig { set; get; }

        public LocalAccessPointConfiguration()
        {
            ipList = new string[0];
            ipListSize = 0;
            domainList = new string[0];
            domainListSize = 0;
            verifyDomainName = "";
            mode = LOCAL_PROXY_MODE.kConnectivityFirst;
            advancedConfig = new AdvancedConfigInfo();
        }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class LocalAccessPointConfiguration {
  
  ipList?: string[];
  
  ipListSize?: number;
  
  domainList?: string[];
  
  domainListSize?: number;
  
  verifyDomainName?: string;
  
  mode?: LocalProxyMode;

  advancedConfig?: AdvancedConfigInfo;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class LocalAccessPointConfiguration {
  const LocalAccessPointConfiguration(
      {this.ipList,
      this.ipListSize,
      this.domainList,
      this.domainListSize,
      this.verifyDomainName,
      this.mode,
      this.advancedConfig});

  @JsonKey(name: 'ipList')
  final List&lt;String>? ipList;

  @JsonKey(name: 'ipListSize')
  final int? ipListSize;

  @JsonKey(name: 'domainList')
  final List&lt;String>? domainList;

  @JsonKey(name: 'domainListSize')
  final int? domainListSize;

  @JsonKey(name: 'verifyDomainName')
  final String? verifyDomainName;

  @JsonKey(name: 'mode')
  final LocalProxyMode? mode;

  @JsonKey(name: 'advancedConfig')
  final AdvancedConfigInfo? advancedConfig;

  factory LocalAccessPointConfiguration.fromJson(Map&lt;String, dynamic> json) =>
      _$LocalAccessPointConfigurationFromJson(json);

  Map&lt;String, dynamic> toJson() => _$LocalAccessPointConfigurationToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>ipList</pt>
                <pd>Local Access Point 的对内 IP 地址列表。ipList 和 domainList 必须至少填一个。</pd>
            </plentry>
            <plentry props="cpp unreal bp electron unity rn flutter cs">
                <pt>ipListSize</pt>
                <pd>Local Access Point 对内 IP 地址的数量。该参数的值必须和你填入的 IP 地址的数量一致。</pd>
            </plentry>
            <plentry>
                <pt>domainList</pt>
                <pd>Local Access Point 的域名列表。SDK 会根据你填入的域名解析出 Local Access Point 的 IP 地址。域名解析的超时时间为 10 秒。ipList 和 domainList 必须至少填一个。如果你同时指定 IP 地址和域名，SDK 会将根据域名解析出来的 IP 地址和你指定的 IP 地址合并、去重，然后随机连接一个 IP 来实现负载均衡。</pd>
            </plentry>
            <plentry props="cpp unreal bp electron unity rn flutter cs">
                <pt>domainListSize</pt>
                <pd>Local Access Point 域名的数量。该参数的值必须和你填入的域名的数量一致。</pd>
            </plentry>
            <plentry>
                <pt>verifyDomainName</pt>
                <pd>内网证书验证域名。如果传值为空，则用 SDK 默认的证书验证域名 <codeph>secure-edge.local</codeph>。</pd>
            </plentry>
            <plentry>
                <pt>mode</pt>
                <pd>
                    <p props="ios mac cpp unreal bp electron unity rn flutter cs"
                    >连接模式。详见 <xref keyref="LOCAL_PROXY_MODE"/>。</p>
                    <p props="android">连接模式：
                    
                    
                    <ul>
                    <li><ph keyref="ConnectivityFirst"
                        /> (0)：SDK 优先尝试连接指定的声网私有媒体服务器；如果无法连接到指定的声网私有媒体服务器，则连接声网 SD-RTN™。</li>
                    <li><ph keyref="LocalOnly"/> (1)：SDK 只尝试连接指定的声网私有媒体服务器。</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>advancedConfig</pt>
                <pd>Local Access Point 的高级选项。详见 <xref
                    keyref="AdvancedConfigInfo"/>。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
