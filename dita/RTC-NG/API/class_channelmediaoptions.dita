<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_channelmediaoptions">
    <title> <ph keyref="ChannelMediaOptions"/> </title>
    <shortdesc id="short"> <ph id="shortdesc">频道媒体设置选项。</ph> </shortdesc>
    <refbody>
        <section id="prototype">
            <p props="cn" outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class ChannelMediaOptions {
  public Boolean publishCameraTrack;
  public Boolean publishSecondaryCameraTrack;
  public Boolean publishThirdCameraTrack;
  public Boolean publishFourthCameraTrack;
  public Boolean publishMicrophoneTrack;
  public Boolean publishScreenCaptureVideo;
  public Boolean publishScreenCaptureAudio;
  public Boolean publishCustomAudioTrack;
  public Integer publishCustomAudioTrackId;
  public Boolean publishCustomVideoTrack;
  public Boolean publishEncodedVideoTrack;
  public Boolean publishMediaPlayerAudioTrack;
  public Boolean publishMediaPlayerVideoTrack;
  public Boolean publishTranscodedVideoTrack;
  public Boolean publishMixedAudioTrack;
  public Boolean autoSubscribeAudio;
  public Boolean autoSubscribeVideo;
  public Boolean enableAudioRecordingOrPlayout;
  public Integer publishMediaPlayerId;
  public Integer clientRoleType;
  public Integer audienceLatencyLevel;
  public Integer defaultVideoStreamType;
  public Integer channelProfile;
  public Integer mediaPlayerAudioDelayMs;
  public String token;
  public Boolean enableBuiltInMediaEncryption;
  public Boolean publishRhythmPlayerTrack;
  public Boolean isInteractiveAudience;
  public Integer customVideoTrackId;
  public Boolean isAudioFilterable;
            }</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">export class ChannelMediaOptions {

  public publishCameraTrack?:boolean;

  public publishSecondaryCameraTrack?:boolean;

  public publishMicrophoneTrack?:boolean;

  public publishScreenCaptureVideo?:boolean;

  public publishScreenCaptureAudio?:boolean;

  public publishCustomAudioTrack?:boolean;

  public publishCustomAudioTrackId?:number;

  public publishCustomVideoTrack?:boolean;

  public publishEncodedVideoTrack?:boolean;

  public publishMediaPlayerAudioTrack?:boolean;

  public publishMediaPlayerVideoTrack?:boolean;

  public publishTranscodedVideoTrack?:boolean;

  public publishMixedAudioTrack?:boolean;

  public autoSubscribeAudio?:boolean;

  public autoSubscribeVideo?:boolean;

  public enableAudioRecordingOrPlayout?:boolean;

  public publishMediaPlayerId?:number;

  public clientRoleType?:number;

  public audienceLatencyLevel?:number;

  public defaultVideoStreamType?:number;

  public channelProfile?:number;

  public audioDelayMs?:number;

  public mediaPlayerAudioDelayMs?:number;
  
  public token?:string;

  public enableBuiltInMediaEncryption?:boolean;

  public publishRhythmPlayerTrack?:boolean;

  public isInteractiveAudience?:boolean;

  public customVideoTrackId?:number;

  public isAudioFilterable?:boolean;

  public startPreview?:boolean;
  public constructor() {
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcChannelMediaOptions : NSObject
@property(assign, nonatomic) BOOL publishCameraTrack;
@property(assign, nonatomic) BOOL publishSecondaryCameraTrack;
@property(assign, nonatomic) BOOL publishMicrophoneTrack;
#if TARGET_OS_IPHONE
@property(assign, nonatomic) BOOL publishScreenCaptureVideo;
@property(assign, nonatomic) BOOL publishScreenCaptureAudio;
#elif TARGET_OS_MAC
@property(assign, nonatomic) BOOL publishThirdCameraTrack;
@property(assign, nonatomic) BOOL publishFourthCameraTrack;
@property(assign, nonatomic) BOOL publishScreenTrack;
@property(assign, nonatomic) BOOL publishSecondaryScreenTrack;
@property(assign, nonatomic) BOOL publishThirdScreenTrack;
@property(assign, nonatomic) BOOL publishFourthScreenTrack;
#endif
@property(assign, nonatomic) BOOL publishCustomAudioTrack;
@property(assign, nonatomic) NSInteger publishCustomAudioTrackId;

@property(assign, nonatomic) BOOL publishCustomVideoTrack;
@property(assign, nonatomic) BOOL publishEncodedVideoTrack;
@property(assign, nonatomic) BOOL publishMediaPlayerAudioTrack;
@property(assign, nonatomic) BOOL publishMediaPlayerVideoTrack;
@property(assign, nonatomic) BOOL publishTranscodedVideoTrack;
@property(assign, nonatomic) BOOL publishMixedAudioTrack;
@property(assign, nonatomic) BOOL autoSubscribeAudio;
@property(assign, nonatomic) BOOL autoSubscribeVideo;
@property(assign, nonatomic) BOOL enableAudioRecordingOrPlayout;
@property(assign, nonatomic) NSInteger publishMediaPlayerId;
@property(assign, nonatomic) AgoraClientRole clientRoleType;
@property(assign, nonatomic) AgoraAudienceLatencyLevelType audienceLatencyLevel;
@property(assign, nonatomic) AgoraVideoStreamType defaultVideoStreamType;
@property(assign, nonatomic) AgoraChannelProfile channelProfile;
@property(copy, nonatomic) NSString * _Nullable token;
@property(assign, nonatomic) BOOL enableBuiltInMediaEncryption;

@property(assign, nonatomic) BOOL publishRhythmPlayerTrack;
@property(assign, nonatomic) BOOL isInteractiveAudience;

@property(assign, nonatomic) NSInteger customVideoTrackId;

@property(assign, nonatomic) BOOL isAudioFilterable;

@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct ChannelMediaOptions {
  Optional&lt;bool&gt; publishCameraTrack;
  Optional&lt;bool&gt; publishSecondaryCameraTrack;
  Optional&lt;bool> publishThirdCameraTrack;
  Optional&lt;bool> publishFourthCameraTrack;
  Optional&lt;bool&gt; publishMicrophoneTrack;

  #if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;&amp; TARGET_OS_IPHONE)
  Optional&lt;bool&gt; publishScreenCaptureVideo;
  Optional&lt;bool&gt; publishScreenCaptureAudio;
  #else
  Optional&lt;bool&gt; publishScreenTrack;
  Optional&lt;bool&gt; publishSecondaryScreenTrack;
  Optional&lt;bool> publishThirdScreenTrack;
  Optional&lt;bool> publishFourthScreenTrack;
  #endif

  Optional&lt;bool&gt; publishCustomAudioTrack;
  Optional&lt;int&gt; publishCustomAudioTrackId;
  Optional&lt;bool&gt; publishCustomVideoTrack;
  Optional&lt;bool&gt; publishEncodedVideoTrack;
  Optional&lt;bool&gt; publishMediaPlayerAudioTrack;
  Optional&lt;bool&gt; publishMediaPlayerVideoTrack;
  Optional&lt;bool&gt; publishTranscodedVideoTrack;
  Optional&lt;bool&gt; publishMixedAudioTrack;
  Optional&lt;bool&gt; autoSubscribeAudio;
  Optional&lt;bool&gt; autoSubscribeVideo;
  Optional&lt;bool&gt; enableAudioRecordingOrPlayout;
  Optional&lt;int&gt; publishMediaPlayerId;
  Optional&lt;CLIENT_ROLE_TYPE&gt; clientRoleType;
  Optional&lt;AUDIENCE_LATENCY_LEVEL_TYPE&gt; audienceLatencyLevel;
  Optional&lt;VIDEO_STREAM_TYPE&gt; defaultVideoStreamType;
  Optional&lt;CHANNEL_PROFILE_TYPE&gt; channelProfile;
  Optional&lt;const char*&gt; token;
  Optional&lt;bool&gt; enableBuiltInMediaEncryption;
  Optional&lt;bool&gt; publishRhythmPlayerTrack;
  Optional&lt;bool&gt; isInteractiveAudience;

  Optional&lt;video_track_id_t&gt; customVideoTrackId;

  Optional&lt;bool&gt; isAudioFilterable;

  ChannelMediaOptions() {}
  ~ChannelMediaOptions() {}
            }</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FChannelMediaOptions
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishSecondaryCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishThirdCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishFourthCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishMicrophoneTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishScreenCaptureVideo = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishScreenCaptureAudio = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishSecondaryScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishThirdScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishFourthScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishCustomAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool publishCustomAudioTrackId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	int publishCustomAudioTrackId = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishCustomVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishEncodedVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishMediaPlayerAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishMediaPlayerVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishTranscodedVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishMixedAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishLipSyncTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional autoSubscribeAudio = EAgoraOptional::AGORA_TRUE_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional autoSubscribeVideo = EAgoraOptional::AGORA_TRUE_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional enableAudioRecordingOrPlayout = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool publishMediaPlayerId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	int publishMediaPlayerId = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool clientRoleType_SetValue = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	ECLIENT_ROLE_TYPE clientRoleType = ECLIENT_ROLE_TYPE::CLIENT_ROLE_BROADCASTER;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool audienceLatencyLevel_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAUDIENCE_LATENCY_LEVEL_TYPE audienceLatencyLevel = EAUDIENCE_LATENCY_LEVEL_TYPE::AUDIENCE_LATENCY_LEVEL_LOW_LATENCY;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool defaultVideoStreamType_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EVIDEO_STREAM_TYPE defaultVideoStreamType = EVIDEO_STREAM_TYPE::VIDEO_STREAM_HIGH;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool channelProfile_SetValue = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	ECHANNEL_PROFILE_TYPE channelProfile = ECHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_LIVE_BROADCASTING;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool audioDelayMs_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	int audioDelayMs = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool mediaPlayerAudioDelayMs_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	int mediaPlayerAudioDelayMs = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool token_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	FString token = &quot;&quot;;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional enableBuiltInMediaEncryption = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishRhythmPlayerTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional isInteractiveAudience = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool customVideoTrackId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	int64 customVideoTrackId = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional isAudioFilterable = EAgoraOptional::AGORA_NULL_VALUE;

	FChannelMediaOptions(){}
	FChannelMediaOptions(const agora::rtc::ChannelMediaOptions &amp; AgoraData){

		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishCameraTrack, AgoraData.publishCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishSecondaryCameraTrack, AgoraData.publishSecondaryCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishThirdCameraTrack, AgoraData.publishThirdCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishFourthCameraTrack, AgoraData.publishFourthCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishMicrophoneTrack, AgoraData.publishMicrophoneTrack)
#if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;&amp; TARGET_OS_IPHONE)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishScreenCaptureVideo, AgoraData.publishScreenCaptureVideo)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishScreenCaptureAudio, AgoraData.publishScreenCaptureAudio)
#else
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishScreenTrack, AgoraData.publishScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishSecondaryScreenTrack, AgoraData.publishSecondaryScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishThirdScreenTrack, AgoraData.publishThirdScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishFourthScreenTrack, AgoraData.publishFourthScreenTrack)
#endif
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishCustomAudioTrack, AgoraData.publishCustomAudioTrack)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&gt;publishCustomAudioTrackId, AgoraData.publishCustomAudioTrackId)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishCustomVideoTrack, AgoraData.publishCustomVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishEncodedVideoTrack, AgoraData.publishEncodedVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishMediaPlayerAudioTrack, AgoraData.publishMediaPlayerAudioTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishMediaPlayerVideoTrack, AgoraData.publishMediaPlayerVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishTranscodedVideoTrack, AgoraData.publishTranscodedVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishMixedAudioTrack, AgoraData.publishMixedAudioTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishLipSyncTrack, AgoraData.publishLipSyncTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;autoSubscribeAudio, AgoraData.autoSubscribeAudio)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;autoSubscribeVideo, AgoraData.autoSubscribeVideo)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;enableAudioRecordingOrPlayout, AgoraData.enableAudioRecordingOrPlayout)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&gt;publishMediaPlayerId, AgoraData.publishMediaPlayerId)
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&gt;clientRoleType,AgoraData.clientRoleType,static_cast&lt;ECLIENT_ROLE_TYPE&gt;(AgoraData.clientRoleType.value()))

		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&gt;audienceLatencyLevel, AgoraData.audienceLatencyLevel, static_cast&lt;EAUDIENCE_LATENCY_LEVEL_TYPE&gt;(AgoraData.audienceLatencyLevel.value()))
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&gt;defaultVideoStreamType, AgoraData.defaultVideoStreamType, static_cast&lt;EVIDEO_STREAM_TYPE&gt;(AgoraData.defaultVideoStreamType.value()))
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&gt;channelProfile, AgoraData.channelProfile, static_cast&lt;ECHANNEL_PROFILE_TYPE&gt;(AgoraData.channelProfile.value()))
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&gt;audioDelayMs, AgoraData.audioDelayMs)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&gt;mediaPlayerAudioDelayMs, AgoraData.mediaPlayerAudioDelayMs)

		SET_UEBP_OPTIONAL_VAL_FString(this-&gt;token,AgoraData.token)

		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;enableBuiltInMediaEncryption, AgoraData.enableBuiltInMediaEncryption)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishRhythmPlayerTrack, AgoraData.publishRhythmPlayerTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;isInteractiveAudience, AgoraData.isInteractiveAudience)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&gt;customVideoTrackId, AgoraData.customVideoTrackId)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;isAudioFilterable, AgoraData.isAudioFilterable)
	}
	agora::rtc::ChannelMediaOptions CreateAgoraData() const{
		agora::rtc::ChannelMediaOptions AgoraData;
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCameraTrack, this-&gt;publishCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishSecondaryCameraTrack, this-&gt;publishSecondaryCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishThirdCameraTrack, this-&gt;publishThirdCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishFourthCameraTrack, this-&gt;publishFourthCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMicrophoneTrack, this-&gt;publishMicrophoneTrack)
#if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;&amp; TARGET_OS_IPHONE)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenCaptureVideo, this-&gt;publishScreenCaptureVideo)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenCaptureAudio, this-&gt;publishScreenCaptureAudio)
#else
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenTrack, this-&gt;publishScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishSecondaryScreenTrack, this-&gt;publishSecondaryScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishThirdScreenTrack, this-&gt;publishThirdScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishFourthScreenTrack, this-&gt;publishFourthScreenTrack)
#endif
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCustomAudioTrack, this-&gt;publishCustomAudioTrack)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.publishCustomAudioTrackId, this-&gt;publishCustomAudioTrackId)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCustomVideoTrack, this-&gt;publishCustomVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishEncodedVideoTrack, this-&gt;publishEncodedVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMediaPlayerAudioTrack, this-&gt;publishMediaPlayerAudioTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMediaPlayerVideoTrack, this-&gt;publishMediaPlayerVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishTranscodedVideoTrack, this-&gt;publishTranscodedVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMixedAudioTrack, this-&gt;publishMixedAudioTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishLipSyncTrack, this-&gt;publishLipSyncTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.autoSubscribeAudio, this-&gt;autoSubscribeAudio)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.autoSubscribeVideo, this-&gt;autoSubscribeVideo)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.enableAudioRecordingOrPlayout, this-&gt;enableAudioRecordingOrPlayout)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.publishMediaPlayerId, this-&gt;publishMediaPlayerId)
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.clientRoleType, this-&gt;clientRoleType,static_cast&lt;agora::rtc::CLIENT_ROLE_TYPE&gt;(this-&gt;clientRoleType))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.audienceLatencyLevel, this-&gt;audienceLatencyLevel, static_cast&lt;agora::rtc::AUDIENCE_LATENCY_LEVEL_TYPE&gt;(this-&gt;audienceLatencyLevel))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.defaultVideoStreamType, this-&gt;defaultVideoStreamType, static_cast&lt;agora::rtc::VIDEO_STREAM_TYPE&gt;(this-&gt;defaultVideoStreamType))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.channelProfile, this-&gt;channelProfile, static_cast&lt;agora::CHANNEL_PROFILE_TYPE&gt;(this-&gt;channelProfile))
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.audioDelayMs, this-&gt;audioDelayMs)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.mediaPlayerAudioDelayMs, this-&gt;mediaPlayerAudioDelayMs)
		SET_AGORA_OPTIONAL_VAL_CHARPTR______MEMOALLOC(AgoraData.token, this-&gt;token)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.enableBuiltInMediaEncryption, this-&gt;enableBuiltInMediaEncryption)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishRhythmPlayerTrack, this-&gt;publishRhythmPlayerTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.isInteractiveAudience, this-&gt;isInteractiveAudience)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.customVideoTrackId, this-&gt;customVideoTrackId)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.isAudioFilterable, this-&gt;isAudioFilterable)
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::ChannelMediaOptions&amp; AgoraData) const {
		SET_AGORA_OPTIONAL_VAL_CHARPTR______MEMOFREE(AgoraData.token)
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ChannelMediaOptions {

  publishCameraTrack?: boolean;

  publishSecondaryCameraTrack?: boolean;

  publishThirdCameraTrack?: boolean;

  publishFourthCameraTrack?: boolean;

  publishMicrophoneTrack?: boolean;

  publishScreenTrack?: boolean;

  publishSecondaryScreenTrack?: boolean;

  publishThirdScreenTrack?: boolean;

  publishFourthScreenTrack?: boolean;

  publishCustomAudioTrack?: boolean;

  publishCustomAudioTrackId?: number;

  publishCustomVideoTrack?: boolean;

  publishEncodedVideoTrack?: boolean;

  publishMediaPlayerAudioTrack?: boolean;

  publishMediaPlayerVideoTrack?: boolean;

  publishTranscodedVideoTrack?: boolean;

  publishLipSyncTrack?: boolean;

  autoSubscribeAudio?: boolean;

  autoSubscribeVideo?: boolean;

  enableAudioRecordingOrPlayout?: boolean;

  publishMediaPlayerId?: number;

  clientRoleType?: ClientRoleType;

  audienceLatencyLevel?: AudienceLatencyLevelType;

  defaultVideoStreamType?: VideoStreamType;

  channelProfile?: ChannelProfileType;

  token?: string;

  enableBuiltInMediaEncryption?: boolean;

  publishRhythmPlayerTrack?: boolean;

  isInteractiveAudience?: boolean;

  customVideoTrackId?: number;

  isAudioFilterable?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ChannelMediaOptions : OptionalJsonParse
    {
        public Optional&lt;bool> publishCameraTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishSecondaryCameraTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishThirdCameraTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishFourthCameraTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishMicrophoneTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishScreenCaptureVideo = new Optional&lt;bool>();
        public Optional&lt;bool> publishScreenCaptureAudio = new Optional&lt;bool>();
        public Optional&lt;bool> publishScreenTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishSecondaryScreenTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishThirdScreenTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishFourthScreenTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishCustomAudioTrack = new Optional&lt;bool>();
        public Optional&lt;int> publishCustomAudioTrackId = new Optional&lt;int>();
        public Optional&lt;bool> publishCustomVideoTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishEncodedVideoTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishMediaPlayerAudioTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishMediaPlayerVideoTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishTranscodedVideoTrack = new Optional&lt;bool>();
        public Optional&lt;bool> publishLipSyncTrack = new Optional&lt;bool>();
        public Optional&lt;bool> autoSubscribeAudio = new Optional&lt;bool>();
        public Optional&lt;bool> autoSubscribeVideo = new Optional&lt;bool>();
        public Optional&lt;bool> enableAudioRecordingOrPlayout = new Optional&lt;bool>();
        public Optional&lt;int> publishMediaPlayerId = new Optional&lt;int>();
        public Optional&lt;CLIENT_ROLE_TYPE> clientRoleType = new Optional&lt;CLIENT_ROLE_TYPE>();
        public Optional&lt;AUDIENCE_LATENCY_LEVEL_TYPE> audienceLatencyLevel = new Optional&lt;AUDIENCE_LATENCY_LEVEL_TYPE>();
        public Optional&lt;VIDEO_STREAM_TYPE> defaultVideoStreamType = new Optional&lt;VIDEO_STREAM_TYPE>();
        public Optional&lt;CHANNEL_PROFILE_TYPE> channelProfile = new Optional&lt;CHANNEL_PROFILE_TYPE>();
        public Optional&lt;string> token = new Optional&lt;string>();
        public Optional&lt;bool> publishRhythmPlayerTrack = new Optional&lt;bool>();
        public Optional&lt;bool> isInteractiveAudience = new Optional&lt;bool>();
        public Optional&lt;video_track_id_t> customVideoTrackId = new Optional&lt;video_track_id_t>();
        public Optional&lt;bool> isAudioFilterable = new Optional&lt;bool>();

   }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ChannelMediaOptions {

  publishCameraTrack?: boolean;

  publishSecondaryCameraTrack?: boolean;

  publishThirdCameraTrack?: boolean;

  publishFourthCameraTrack?: boolean;

  publishMicrophoneTrack?: boolean;

  publishScreenCaptureVideo?: boolean;

  publishScreenCaptureAudio?: boolean;

  publishSecondaryScreenTrack?: boolean;

  publishThirdScreenTrack?: boolean;

  publishFourthScreenTrack?: boolean;

  publishCustomAudioTrack?: boolean;

  publishCustomAudioTrackId?: number;

  publishCustomVideoTrack?: boolean;

  publishEncodedVideoTrack?: boolean;

  publishMediaPlayerAudioTrack?: boolean;

  publishMediaPlayerVideoTrack?: boolean;

  publishTranscodedVideoTrack?: boolean;

  publishLipSyncTrack?: boolean;

  autoSubscribeAudio?: boolean;

  autoSubscribeVideo?: boolean;

  enableAudioRecordingOrPlayout?: boolean;

  publishMediaPlayerId?: number;

  clientRoleType?: ClientRoleType;

  audienceLatencyLevel?: AudienceLatencyLevelType;

  defaultVideoStreamType?: VideoStreamType;

  channelProfile?: ChannelProfileType;

  token?: string;

  enableBuiltInMediaEncryption?: boolean;

  publishRhythmPlayerTrack?: boolean;

  isInteractiveAudience?: boolean;

  customVideoTrackId?: number;

  isAudioFilterable?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class ChannelMediaOptions {
  const ChannelMediaOptions(
      {this.publishCameraTrack,
      this.publishSecondaryCameraTrack,
      this.publishThirdCameraTrack,
      this.publishFourthCameraTrack,
      this.publishMicrophoneTrack,
      this.publishScreenCaptureVideo,
      this.publishScreenCaptureAudio,
      this.publishScreenTrack,
      this.publishSecondaryScreenTrack,
      this.publishThirdScreenTrack,
      this.publishFourthScreenTrack,
      this.publishCustomAudioTrack,
      this.publishCustomAudioTrackId,
      this.publishCustomVideoTrack,
      this.publishEncodedVideoTrack,
      this.publishMediaPlayerAudioTrack,
      this.publishMediaPlayerVideoTrack,
      this.publishTranscodedVideoTrack,
      this.publishMixedAudioTrack,
      this.publishLipSyncTrack,
      this.autoSubscribeAudio,
      this.autoSubscribeVideo,
      this.enableAudioRecordingOrPlayout,
      this.publishMediaPlayerId,
      this.clientRoleType,
      this.audienceLatencyLevel,
      this.defaultVideoStreamType,
      this.channelProfile,
      this.audioDelayMs,
      this.mediaPlayerAudioDelayMs,
      this.token,
      this.enableBuiltInMediaEncryption,
      this.publishRhythmPlayerTrack,
      this.isInteractiveAudience,
      this.customVideoTrackId,
      this.isAudioFilterable,
      this.parameters});

  @JsonKey(name: &#x27;publishCameraTrack&#x27;)
  final bool? publishCameraTrack;

  @JsonKey(name: &#x27;publishSecondaryCameraTrack&#x27;)
  final bool? publishSecondaryCameraTrack;

  @JsonKey(name: &#x27;publishThirdCameraTrack&#x27;)
  final bool? publishThirdCameraTrack;

  @JsonKey(name: &#x27;publishFourthCameraTrack&#x27;)
  final bool? publishFourthCameraTrack;

  @JsonKey(name: &#x27;publishMicrophoneTrack&#x27;)
  final bool? publishMicrophoneTrack;

  @JsonKey(name: &#x27;publishScreenCaptureVideo&#x27;)
  final bool? publishScreenCaptureVideo;

  @JsonKey(name: &#x27;publishScreenCaptureAudio&#x27;)
  final bool? publishScreenCaptureAudio;

  @JsonKey(name: &#x27;publishScreenTrack&#x27;)
  final bool? publishScreenTrack;

  @JsonKey(name: &#x27;publishSecondaryScreenTrack&#x27;)
  final bool? publishSecondaryScreenTrack;

  @JsonKey(name: &#x27;publishThirdScreenTrack&#x27;)
  final bool? publishThirdScreenTrack;

  @JsonKey(name: &#x27;publishFourthScreenTrack&#x27;)
  final bool? publishFourthScreenTrack;

  @JsonKey(name: &#x27;publishCustomAudioTrack&#x27;)
  final bool? publishCustomAudioTrack;

  @JsonKey(name: &#x27;publishCustomAudioTrackId&#x27;)
  final int? publishCustomAudioTrackId;

  @JsonKey(name: &#x27;publishCustomVideoTrack&#x27;)
  final bool? publishCustomVideoTrack;

  @JsonKey(name: &#x27;publishEncodedVideoTrack&#x27;)
  final bool? publishEncodedVideoTrack;

  @JsonKey(name: &#x27;publishMediaPlayerAudioTrack&#x27;)
  final bool? publishMediaPlayerAudioTrack;

  @JsonKey(name: &#x27;publishMediaPlayerVideoTrack&#x27;)
  final bool? publishMediaPlayerVideoTrack;

  @JsonKey(name: &#x27;publishTranscodedVideoTrack&#x27;)
  final bool? publishTranscodedVideoTrack;

  @JsonKey(name: &#x27;publishMixedAudioTrack&#x27;)
  final bool? publishMixedAudioTrack;

  @JsonKey(name: &#x27;autoSubscribeAudio&#x27;)
  final bool? autoSubscribeAudio;

  @JsonKey(name: &#x27;autoSubscribeVideo&#x27;)
  final bool? autoSubscribeVideo;

  @JsonKey(name: &#x27;enableAudioRecordingOrPlayout&#x27;)
  final bool? enableAudioRecordingOrPlayout;

  @JsonKey(name: &#x27;publishMediaPlayerId&#x27;)
  final int? publishMediaPlayerId;

  @JsonKey(name: &#x27;clientRoleType&#x27;)
  final ClientRoleType? clientRoleType;

  @JsonKey(name: &#x27;audienceLatencyLevel&#x27;)
  final AudienceLatencyLevelType? audienceLatencyLevel;

  @JsonKey(name: &#x27;defaultVideoStreamType&#x27;)
  final VideoStreamType? defaultVideoStreamType;

  @JsonKey(name: &#x27;channelProfile&#x27;)
  final ChannelProfileType? channelProfile;

  @JsonKey(name: &#x27;audioDelayMs&#x27;)
  final int? audioDelayMs;

  @JsonKey(name: &#x27;mediaPlayerAudioDelayMs&#x27;)
  final int? mediaPlayerAudioDelayMs;

  @JsonKey(name: &#x27;token&#x27;)
  final String? token;

  @JsonKey(name: &#x27;enableBuiltInMediaEncryption&#x27;)
  final bool? enableBuiltInMediaEncryption;

  @JsonKey(name: &#x27;publishRhythmPlayerTrack&#x27;)
  final bool? publishRhythmPlayerTrack;

  @JsonKey(name: &#x27;isInteractiveAudience&#x27;)
  final bool? isInteractiveAudience;

  @JsonKey(name: &#x27;customVideoTrackId&#x27;)
  final int? customVideoTrackId;

  @JsonKey(name: &#x27;isAudioFilterable&#x27;)
  final bool? isAudioFilterable;

  @JsonKey(name: &#x27;parameters&#x27;)
  final String? parameters;

  factory ChannelMediaOptions.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$ChannelMediaOptionsFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$ChannelMediaOptionsToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
    <p props="en" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public class ChannelMediaOptions {
      public Boolean publishCameraTrack;
      public Boolean publishSecondaryCameraTrack;
      public Boolean publishThirdCameraTrack;
      public Boolean publishFourthCameraTrack;
      public Boolean publishMicrophoneTrack;
      public Boolean publishScreenCaptureVideo;
      public Boolean publishScreenCaptureAudio;
      public Boolean publishCustomAudioTrack;
      public Integer publishCustomAudioTrackId;
      public Boolean publishCustomVideoTrack;
      public Boolean publishEncodedVideoTrack;
      public Boolean publishMediaPlayerAudioTrack;
      public Boolean publishMediaPlayerVideoTrack;
      public Boolean publishTranscodedVideoTrack;
      public Boolean publishMixedAudioTrack;
      public Boolean publishLipSyncTrack;
      public Boolean autoSubscribeAudio;
      public Boolean autoSubscribeVideo;
      public Boolean enableAudioRecordingOrPlayout;
      public Integer publishMediaPlayerId;
      public Integer clientRoleType;
      public Integer audienceLatencyLevel;
      public Integer defaultVideoStreamType;
      public Integer channelProfile;
      public Integer mediaPlayerAudioDelayMs;
      public String token;
      public Boolean enableBuiltInMediaEncryption;
      public Boolean publishRhythmPlayerTrack;
      public Boolean isInteractiveAudience;
      public Integer customVideoTrackId;
      public Boolean isAudioFilterable;
                }</codeblock>
                <codeblock props="hmos" outputclass="language-arkts">export class ChannelMediaOptions {
  
  public publishCameraTrack?:boolean;
  
  public publishSecondaryCameraTrack?:boolean;
  
  public publishMicrophoneTrack?:boolean;
  
  public publishScreenCaptureVideo?:boolean;
  
  public publishScreenCaptureAudio?:boolean;
  
  public publishCustomAudioTrack?:boolean;
  
  public publishCustomAudioTrackId?:number;
  
  public publishCustomVideoTrack?:boolean;
  
  public publishEncodedVideoTrack?:boolean;
  
  public publishMediaPlayerAudioTrack?:boolean;
  
  public publishMediaPlayerVideoTrack?:boolean;
  
  public publishTranscodedVideoTrack?:boolean;
  
  public publishMixedAudioTrack?:boolean;
  
  public autoSubscribeAudio?:boolean;
  
  public autoSubscribeVideo?:boolean;
  
  public enableAudioRecordingOrPlayout?:boolean;
  
  public publishMediaPlayerId?:number;
  
  public clientRoleType?:number;
  
  public audienceLatencyLevel?:number;
  
  public defaultVideoStreamType?:number;
  
  public channelProfile?:number;
  
  public audioDelayMs?:number;
  
  public mediaPlayerAudioDelayMs?:number;
      
  public enableBuiltInMediaEncryption?:boolean;
  
  public publishRhythmPlayerTrack?:boolean;
  
  public isInteractiveAudience?:boolean;
  
  public customVideoTrackId?:number;
  
  public isAudioFilterable?:boolean;
  
  public startPreview?:boolean;
  public constructor() {
  }
}</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcChannelMediaOptions : NSObject
    @property(assign, nonatomic) BOOL publishCameraTrack;
    @property(assign, nonatomic) BOOL publishSecondaryCameraTrack;
    @property(assign, nonatomic) BOOL publishMicrophoneTrack;
    #if TARGET_OS_IPHONE
    @property(assign, nonatomic) BOOL publishScreenCaptureVideo;
    @property(assign, nonatomic) BOOL publishScreenCaptureAudio;
    #elif TARGET_OS_MAC
    @property(assign, nonatomic) BOOL publishThirdCameraTrack;
    @property(assign, nonatomic) BOOL publishFourthCameraTrack;
    @property(assign, nonatomic) BOOL publishScreenTrack;
    @property(assign, nonatomic) BOOL publishSecondaryScreenTrack;
    @property(assign, nonatomic) BOOL publishThirdScreenTrack;
    @property(assign, nonatomic) BOOL publishFourthScreenTrack;
    #endif
    @property(assign, nonatomic) BOOL publishCustomAudioTrack;
    @property(assign, nonatomic) NSInteger publishCustomAudioTrackId;

    @property(assign, nonatomic) BOOL publishCustomVideoTrack;
    @property(assign, nonatomic) BOOL publishEncodedVideoTrack;
    @property(assign, nonatomic) BOOL publishMediaPlayerAudioTrack;
    @property(assign, nonatomic) BOOL publishMediaPlayerVideoTrack;
    @property(assign, nonatomic) BOOL publishTranscodedVideoTrack;
    @property(assign, nonatomic) BOOL publishMixedAudioTrack;
    @property(assign, nonatomic) BOOL publishLipSyncTrack;
    @property(assign, nonatomic) BOOL autoSubscribeAudio;
    @property(assign, nonatomic) BOOL autoSubscribeVideo;
    @property(assign, nonatomic) BOOL enableAudioRecordingOrPlayout;
    @property(assign, nonatomic) NSInteger publishMediaPlayerId;
    @property(assign, nonatomic) AgoraClientRole clientRoleType;
    @property(assign, nonatomic) AgoraAudienceLatencyLevelType audienceLatencyLevel;
    @property(assign, nonatomic) AgoraVideoStreamType defaultVideoStreamType;
    @property(assign, nonatomic) AgoraChannelProfile channelProfile;
    @property(copy, nonatomic) NSString * _Nullable token;
    @property(assign, nonatomic) BOOL enableBuiltInMediaEncryption;

    @property(assign, nonatomic) BOOL publishRhythmPlayerTrack;
    @property(assign, nonatomic) BOOL isInteractiveAudience;

    @property(assign, nonatomic) NSInteger customVideoTrackId;

    @property(assign, nonatomic) BOOL isAudioFilterable;

    @end</codeblock>
                <codeblock props="cpp" outputclass="language-cpp">struct ChannelMediaOptions {
      Optional&lt;bool&gt; publishCameraTrack;
      Optional&lt;bool&gt; publishSecondaryCameraTrack;
      Optional&lt;bool> publishThirdCameraTrack;
      Optional&lt;bool> publishFourthCameraTrack;
      Optional&lt;bool&gt; publishMicrophoneTrack;

      #if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;&amp; TARGET_OS_IPHONE)
      Optional&lt;bool&gt; publishScreenCaptureVideo;
      Optional&lt;bool&gt; publishScreenCaptureAudio;
      #else
      Optional&lt;bool&gt; publishScreenTrack;
      Optional&lt;bool&gt; publishSecondaryScreenTrack;
      Optional&lt;bool> publishThirdScreenTrack;
      Optional&lt;bool> publishFourthScreenTrack;
      #endif

      Optional&lt;bool&gt; publishCustomAudioTrack;
      Optional&lt;int&gt; publishCustomAudioTrackId;
      Optional&lt;bool&gt; publishCustomVideoTrack;
      Optional&lt;bool&gt; publishEncodedVideoTrack;
      Optional&lt;bool&gt; publishMediaPlayerAudioTrack;
      Optional&lt;bool&gt; publishMediaPlayerVideoTrack;
      Optional&lt;bool&gt; publishTranscodedVideoTrack;
      Optional&lt;bool&gt; publishMixedAudioTrack;
      Optional&lt;bool&gt; publishLipSyncTrack;
      Optional&lt;bool&gt; autoSubscribeAudio;
      Optional&lt;bool&gt; autoSubscribeVideo;
      Optional&lt;bool&gt; enableAudioRecordingOrPlayout;
      Optional&lt;int&gt; publishMediaPlayerId;
      Optional&lt;CLIENT_ROLE_TYPE&gt; clientRoleType;
      Optional&lt;AUDIENCE_LATENCY_LEVEL_TYPE&gt; audienceLatencyLevel;
      Optional&lt;VIDEO_STREAM_TYPE&gt; defaultVideoStreamType;
      Optional&lt;CHANNEL_PROFILE_TYPE&gt; channelProfile;
      Optional&lt;const char*&gt; token;
      Optional&lt;bool&gt; enableBuiltInMediaEncryption;
      Optional&lt;bool&gt; publishRhythmPlayerTrack;
      Optional&lt;bool&gt; isInteractiveAudience;

      Optional&lt;video_track_id_t&gt; customVideoTrackId;

      Optional&lt;bool&gt; isAudioFilterable;

      ChannelMediaOptions() {}
      ~ChannelMediaOptions() {}</codeblock>
             <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FChannelMediaOptions
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishSecondaryCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishThirdCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishFourthCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishMicrophoneTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishScreenCaptureVideo = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishScreenCaptureAudio = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishSecondaryScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishThirdScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishFourthScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishCustomAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool publishCustomAudioTrackId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	int publishCustomAudioTrackId = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishCustomVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishEncodedVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishMediaPlayerAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishMediaPlayerVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishTranscodedVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishMixedAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishLipSyncTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional autoSubscribeAudio = EAgoraOptional::AGORA_TRUE_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional autoSubscribeVideo = EAgoraOptional::AGORA_TRUE_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional enableAudioRecordingOrPlayout = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool publishMediaPlayerId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	int publishMediaPlayerId = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool clientRoleType_SetValue = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	ECLIENT_ROLE_TYPE clientRoleType = ECLIENT_ROLE_TYPE::CLIENT_ROLE_BROADCASTER;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool audienceLatencyLevel_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAUDIENCE_LATENCY_LEVEL_TYPE audienceLatencyLevel = EAUDIENCE_LATENCY_LEVEL_TYPE::AUDIENCE_LATENCY_LEVEL_LOW_LATENCY;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool defaultVideoStreamType_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EVIDEO_STREAM_TYPE defaultVideoStreamType = EVIDEO_STREAM_TYPE::VIDEO_STREAM_HIGH;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool channelProfile_SetValue = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	ECHANNEL_PROFILE_TYPE channelProfile = ECHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_LIVE_BROADCASTING;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool audioDelayMs_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	int audioDelayMs = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool mediaPlayerAudioDelayMs_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	int mediaPlayerAudioDelayMs = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool token_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	FString token = &quot;&quot;;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional enableBuiltInMediaEncryption = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional publishRhythmPlayerTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional isInteractiveAudience = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	bool customVideoTrackId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	int64 customVideoTrackId = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ChannelMediaOptions&quot;)
	EAgoraOptional isAudioFilterable = EAgoraOptional::AGORA_NULL_VALUE;

	FChannelMediaOptions(){}
	FChannelMediaOptions(const agora::rtc::ChannelMediaOptions &amp; AgoraData){

		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishCameraTrack, AgoraData.publishCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishSecondaryCameraTrack, AgoraData.publishSecondaryCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishThirdCameraTrack, AgoraData.publishThirdCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishFourthCameraTrack, AgoraData.publishFourthCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishMicrophoneTrack, AgoraData.publishMicrophoneTrack)
#if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;&amp; TARGET_OS_IPHONE)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishScreenCaptureVideo, AgoraData.publishScreenCaptureVideo)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishScreenCaptureAudio, AgoraData.publishScreenCaptureAudio)
#else
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishScreenTrack, AgoraData.publishScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishSecondaryScreenTrack, AgoraData.publishSecondaryScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishThirdScreenTrack, AgoraData.publishThirdScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishFourthScreenTrack, AgoraData.publishFourthScreenTrack)
#endif
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishCustomAudioTrack, AgoraData.publishCustomAudioTrack)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&gt;publishCustomAudioTrackId, AgoraData.publishCustomAudioTrackId)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishCustomVideoTrack, AgoraData.publishCustomVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishEncodedVideoTrack, AgoraData.publishEncodedVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishMediaPlayerAudioTrack, AgoraData.publishMediaPlayerAudioTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishMediaPlayerVideoTrack, AgoraData.publishMediaPlayerVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishTranscodedVideoTrack, AgoraData.publishTranscodedVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishMixedAudioTrack, AgoraData.publishMixedAudioTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishLipSyncTrack, AgoraData.publishLipSyncTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;autoSubscribeAudio, AgoraData.autoSubscribeAudio)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;autoSubscribeVideo, AgoraData.autoSubscribeVideo)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;enableAudioRecordingOrPlayout, AgoraData.enableAudioRecordingOrPlayout)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&gt;publishMediaPlayerId, AgoraData.publishMediaPlayerId)
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&gt;clientRoleType,AgoraData.clientRoleType,static_cast&lt;ECLIENT_ROLE_TYPE&gt;(AgoraData.clientRoleType.value()))

		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&gt;audienceLatencyLevel, AgoraData.audienceLatencyLevel, static_cast&lt;EAUDIENCE_LATENCY_LEVEL_TYPE&gt;(AgoraData.audienceLatencyLevel.value()))
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&gt;defaultVideoStreamType, AgoraData.defaultVideoStreamType, static_cast&lt;EVIDEO_STREAM_TYPE&gt;(AgoraData.defaultVideoStreamType.value()))
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&gt;channelProfile, AgoraData.channelProfile, static_cast&lt;ECHANNEL_PROFILE_TYPE&gt;(AgoraData.channelProfile.value()))
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&gt;audioDelayMs, AgoraData.audioDelayMs)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&gt;mediaPlayerAudioDelayMs, AgoraData.mediaPlayerAudioDelayMs)

		SET_UEBP_OPTIONAL_VAL_FString(this-&gt;token,AgoraData.token)

		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;enableBuiltInMediaEncryption, AgoraData.enableBuiltInMediaEncryption)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;publishRhythmPlayerTrack, AgoraData.publishRhythmPlayerTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;isInteractiveAudience, AgoraData.isInteractiveAudience)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&gt;customVideoTrackId, AgoraData.customVideoTrackId)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&gt;isAudioFilterable, AgoraData.isAudioFilterable)
	}
	agora::rtc::ChannelMediaOptions CreateAgoraData() const{
		agora::rtc::ChannelMediaOptions AgoraData;
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCameraTrack, this-&gt;publishCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishSecondaryCameraTrack, this-&gt;publishSecondaryCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishThirdCameraTrack, this-&gt;publishThirdCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishFourthCameraTrack, this-&gt;publishFourthCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMicrophoneTrack, this-&gt;publishMicrophoneTrack)
#if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;&amp; TARGET_OS_IPHONE)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenCaptureVideo, this-&gt;publishScreenCaptureVideo)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenCaptureAudio, this-&gt;publishScreenCaptureAudio)
#else
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenTrack, this-&gt;publishScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishSecondaryScreenTrack, this-&gt;publishSecondaryScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishThirdScreenTrack, this-&gt;publishThirdScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishFourthScreenTrack, this-&gt;publishFourthScreenTrack)
#endif
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCustomAudioTrack, this-&gt;publishCustomAudioTrack)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.publishCustomAudioTrackId, this-&gt;publishCustomAudioTrackId)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCustomVideoTrack, this-&gt;publishCustomVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishEncodedVideoTrack, this-&gt;publishEncodedVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMediaPlayerAudioTrack, this-&gt;publishMediaPlayerAudioTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMediaPlayerVideoTrack, this-&gt;publishMediaPlayerVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishTranscodedVideoTrack, this-&gt;publishTranscodedVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMixedAudioTrack, this-&gt;publishMixedAudioTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishLipSyncTrack, this-&gt;publishLipSyncTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.autoSubscribeAudio, this-&gt;autoSubscribeAudio)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.autoSubscribeVideo, this-&gt;autoSubscribeVideo)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.enableAudioRecordingOrPlayout, this-&gt;enableAudioRecordingOrPlayout)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.publishMediaPlayerId, this-&gt;publishMediaPlayerId)
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.clientRoleType, this-&gt;clientRoleType,static_cast&lt;agora::rtc::CLIENT_ROLE_TYPE&gt;(this-&gt;clientRoleType))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.audienceLatencyLevel, this-&gt;audienceLatencyLevel, static_cast&lt;agora::rtc::AUDIENCE_LATENCY_LEVEL_TYPE&gt;(this-&gt;audienceLatencyLevel))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.defaultVideoStreamType, this-&gt;defaultVideoStreamType, static_cast&lt;agora::rtc::VIDEO_STREAM_TYPE&gt;(this-&gt;defaultVideoStreamType))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.channelProfile, this-&gt;channelProfile, static_cast&lt;agora::CHANNEL_PROFILE_TYPE&gt;(this-&gt;channelProfile))
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.audioDelayMs, this-&gt;audioDelayMs)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.mediaPlayerAudioDelayMs, this-&gt;mediaPlayerAudioDelayMs)
		SET_AGORA_OPTIONAL_VAL_CHARPTR______MEMOALLOC(AgoraData.token, this-&gt;token)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.enableBuiltInMediaEncryption, this-&gt;enableBuiltInMediaEncryption)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishRhythmPlayerTrack, this-&gt;publishRhythmPlayerTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.isInteractiveAudience, this-&gt;isInteractiveAudience)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.customVideoTrackId, this-&gt;customVideoTrackId)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.isAudioFilterable, this-&gt;isAudioFilterable)
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::ChannelMediaOptions&amp; AgoraData) const {
		SET_AGORA_OPTIONAL_VAL_CHARPTR______MEMOFREE(AgoraData.token)
	}
};</codeblock>
                <codeblock props="unreal" outputclass="language-cpp">struct ChannelMediaOptions {
      Optional&lt;bool&gt; publishCameraTrack;
      Optional&lt;bool&gt; publishSecondaryCameraTrack;
      Optional&lt;bool&gt; publishMicrophoneTrack;

      #if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;&amp; TARGET_OS_IPHONE)
      Optional&lt;bool&gt; publishScreenCaptureVideo;
      Optional&lt;bool&gt; publishScreenCaptureAudio;
      #else
      Optional&lt;bool&gt; publishScreenTrack;
      Optional&lt;bool&gt; publishSecondaryScreenTrack;
      #endif

      Optional&lt;bool&gt; publishCustomAudioTrack;
      Optional&lt;int&gt; publishCustomAudioTrackId;
      Optional&lt;bool&gt; publishCustomVideoTrack;
      Optional&lt;bool&gt; publishEncodedVideoTrack;
      Optional&lt;bool&gt; publishMediaPlayerAudioTrack;
      Optional&lt;bool&gt; publishMediaPlayerVideoTrack;
      Optional&lt;bool&gt; publishTranscodedVideoTrack;
      Optional&lt;bool&gt; autoSubscribeAudio;
      Optional&lt;bool&gt; autoSubscribeVideo;
      Optional&lt;bool&gt; enableAudioRecordingOrPlayout;
      Optional&lt;int&gt; publishMediaPlayerId;
      Optional&lt;CLIENT_ROLE_TYPE&gt; clientRoleType;
      Optional&lt;AUDIENCE_LATENCY_LEVEL_TYPE&gt; audienceLatencyLevel;
      Optional&lt;VIDEO_STREAM_TYPE&gt; defaultVideoStreamType;
      Optional&lt;CHANNEL_PROFILE_TYPE&gt; channelProfile;
      Optional&lt;const char*&gt; token;
      Optional&lt;bool&gt; enableBuiltInMediaEncryption;
      Optional&lt;bool&gt; publishRhythmPlayerTrack;
      Optional&lt;bool&gt; isInteractiveAudience;

      Optional&lt;video_track_id_t&gt; customVideoTrackId;

      Optional&lt;bool&gt; isAudioFilterable;

      ChannelMediaOptions() {}
      ~ChannelMediaOptions() {}</codeblock>
                <codeblock props="electron" outputclass="language-typescript">export class ChannelMediaOptions {

      publishCameraTrack?: boolean;

      publishSecondaryCameraTrack?: boolean;

      publishThirdCameraTrack?: boolean;

      publishFourthCameraTrack?: boolean;

      publishMicrophoneTrack?: boolean;

      publishScreenTrack?: boolean;

      publishSecondaryScreenTrack?: boolean;

      publishThirdScreenTrack?: boolean;

      publishFourthScreenTrack?: boolean;

      publishCustomAudioTrack?: boolean;

      publishCustomAudioTrackId?: number;

      publishCustomVideoTrack?: boolean;

      publishEncodedVideoTrack?: boolean;

      publishMediaPlayerAudioTrack?: boolean;

      publishMediaPlayerVideoTrack?: boolean;

      publishTranscodedVideoTrack?: boolean;

      publishLipSyncTrack?: boolean;

      autoSubscribeAudio?: boolean;

      autoSubscribeVideo?: boolean;

      enableAudioRecordingOrPlayout?: boolean;

      publishMediaPlayerId?: number;

      clientRoleType?: ClientRoleType;

      audienceLatencyLevel?: AudienceLatencyLevelType;

      defaultVideoStreamType?: VideoStreamType;

      channelProfile?: ChannelProfileType;

      token?: string;

      enableBuiltInMediaEncryption?: boolean;

      publishRhythmPlayerTrack?: boolean;

      isInteractiveAudience?: boolean;

      customVideoTrackId?: number;

      isAudioFilterable?: boolean;
    }</codeblock>
                <codeblock props="unity cs" outputclass="language-csharp">public class ChannelMediaOptions : OptionalJsonParse
        {
            public Optional&lt;bool> publishCameraTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishSecondaryCameraTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishThirdCameraTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishFourthCameraTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishMicrophoneTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishScreenCaptureVideo = new Optional&lt;bool>();
            public Optional&lt;bool> publishScreenCaptureAudio = new Optional&lt;bool>();
            public Optional&lt;bool> publishScreenTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishSecondaryScreenTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishThirdScreenTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishFourthScreenTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishCustomAudioTrack = new Optional&lt;bool>();
            public Optional&lt;int> publishCustomAudioTrackId = new Optional&lt;int>();
            public Optional&lt;bool> publishCustomVideoTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishEncodedVideoTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishMediaPlayerAudioTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishMediaPlayerVideoTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishTranscodedVideoTrack = new Optional&lt;bool>();
            public Optional&lt;bool> publishLipSyncTrack = new Optional&lt;bool>();
            public Optional&lt;bool> autoSubscribeAudio = new Optional&lt;bool>();
            public Optional&lt;bool> autoSubscribeVideo = new Optional&lt;bool>();
            public Optional&lt;bool> enableAudioRecordingOrPlayout = new Optional&lt;bool>();
            public Optional&lt;int> publishMediaPlayerId = new Optional&lt;int>();
            public Optional&lt;CLIENT_ROLE_TYPE> clientRoleType = new Optional&lt;CLIENT_ROLE_TYPE>();
            public Optional&lt;AUDIENCE_LATENCY_LEVEL_TYPE> audienceLatencyLevel = new Optional&lt;AUDIENCE_LATENCY_LEVEL_TYPE>();
            public Optional&lt;VIDEO_STREAM_TYPE> defaultVideoStreamType = new Optional&lt;VIDEO_STREAM_TYPE>();
            public Optional&lt;CHANNEL_PROFILE_TYPE> channelProfile = new Optional&lt;CHANNEL_PROFILE_TYPE>();
            public Optional&lt;string> token = new Optional&lt;string>();
            public Optional&lt;bool> publishRhythmPlayerTrack = new Optional&lt;bool>();
            public Optional&lt;bool> isInteractiveAudience = new Optional&lt;bool>();
            public Optional&lt;video_track_id_t> customVideoTrackId = new Optional&lt;video_track_id_t>();
            public Optional&lt;bool> isAudioFilterable = new Optional&lt;bool>();

       }</codeblock>
                <codeblock props="rn" outputclass="language-typescript">export class ChannelMediaOptions {

      publishCameraTrack?: boolean;

      publishSecondaryCameraTrack?: boolean;

      publishThirdCameraTrack?: boolean;

      publishFourthCameraTrack?: boolean;

      publishMicrophoneTrack?: boolean;

      publishScreenCaptureVideo?: boolean;

      publishScreenCaptureAudio?: boolean;

      publishSecondaryScreenTrack?: boolean;

      publishThirdScreenTrack?: boolean;

      publishFourthScreenTrack?: boolean;

      publishCustomAudioTrack?: boolean;

      publishCustomAudioTrackId?: number;

      publishCustomVideoTrack?: boolean;

      publishEncodedVideoTrack?: boolean;

      publishMediaPlayerAudioTrack?: boolean;

      publishMediaPlayerVideoTrack?: boolean;

      publishTranscodedVideoTrack?: boolean;

      publishLipSyncTrack?: boolean;

      autoSubscribeAudio?: boolean;

      autoSubscribeVideo?: boolean;

      enableAudioRecordingOrPlayout?: boolean;

      publishMediaPlayerId?: number;

      clientRoleType?: ClientRoleType;

      audienceLatencyLevel?: AudienceLatencyLevelType;

      defaultVideoStreamType?: VideoStreamType;

      channelProfile?: ChannelProfileType;

      token?: string;

      enableBuiltInMediaEncryption?: boolean;

      publishRhythmPlayerTrack?: boolean;

      isInteractiveAudience?: boolean;

      customVideoTrackId?: number;

      isAudioFilterable?: boolean;
    }</codeblock>
                <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
    class ChannelMediaOptions {
      const ChannelMediaOptions(
          {this.publishCameraTrack,
          this.publishSecondaryCameraTrack,
          this.publishThirdCameraTrack,
          this.publishFourthCameraTrack,
          this.publishMicrophoneTrack,
          this.publishScreenCaptureVideo,
          this.publishScreenCaptureAudio,
          this.publishScreenTrack,
          this.publishSecondaryScreenTrack,
          this.publishThirdScreenTrack,
          this.publishFourthScreenTrack,
          this.publishCustomAudioTrack,
          this.publishCustomAudioTrackId,
          this.publishCustomVideoTrack,
          this.publishEncodedVideoTrack,
          this.publishMediaPlayerAudioTrack,
          this.publishMediaPlayerVideoTrack,
          this.publishTranscodedVideoTrack,
          this.publishMixedAudioTrack,
          this.publishLipSyncTrack,
          this.autoSubscribeAudio,
          this.autoSubscribeVideo,
          this.enableAudioRecordingOrPlayout,
          this.publishMediaPlayerId,
          this.clientRoleType,
          this.audienceLatencyLevel,
          this.defaultVideoStreamType,
          this.channelProfile,
          this.audioDelayMs,
          this.mediaPlayerAudioDelayMs,
          this.token,
          this.enableBuiltInMediaEncryption,
          this.publishRhythmPlayerTrack,
          this.isInteractiveAudience,
          this.customVideoTrackId,
          this.isAudioFilterable,
          this.parameters});

      @JsonKey(name: &#x27;publishCameraTrack&#x27;)
      final bool? publishCameraTrack;

      @JsonKey(name: &#x27;publishSecondaryCameraTrack&#x27;)
      final bool? publishSecondaryCameraTrack;

      @JsonKey(name: &#x27;publishThirdCameraTrack&#x27;)
      final bool? publishThirdCameraTrack;

      @JsonKey(name: &#x27;publishFourthCameraTrack&#x27;)
      final bool? publishFourthCameraTrack;

      @JsonKey(name: &#x27;publishMicrophoneTrack&#x27;)
      final bool? publishMicrophoneTrack;

      @JsonKey(name: &#x27;publishScreenCaptureVideo&#x27;)
      final bool? publishScreenCaptureVideo;

      @JsonKey(name: &#x27;publishScreenCaptureAudio&#x27;)
      final bool? publishScreenCaptureAudio;

      @JsonKey(name: &#x27;publishScreenTrack&#x27;)
      final bool? publishScreenTrack;

      @JsonKey(name: &#x27;publishSecondaryScreenTrack&#x27;)
      final bool? publishSecondaryScreenTrack;

      @JsonKey(name: &#x27;publishThirdScreenTrack&#x27;)
      final bool? publishThirdScreenTrack;

      @JsonKey(name: &#x27;publishFourthScreenTrack&#x27;)
      final bool? publishFourthScreenTrack;

      @JsonKey(name: &#x27;publishCustomAudioTrack&#x27;)
      final bool? publishCustomAudioTrack;

      @JsonKey(name: &#x27;publishCustomAudioTrackId&#x27;)
      final int? publishCustomAudioTrackId;

      @JsonKey(name: &#x27;publishCustomVideoTrack&#x27;)
      final bool? publishCustomVideoTrack;

      @JsonKey(name: &#x27;publishEncodedVideoTrack&#x27;)
      final bool? publishEncodedVideoTrack;

      @JsonKey(name: &#x27;publishMediaPlayerAudioTrack&#x27;)
      final bool? publishMediaPlayerAudioTrack;

      @JsonKey(name: &#x27;publishMediaPlayerVideoTrack&#x27;)
      final bool? publishMediaPlayerVideoTrack;

      @JsonKey(name: &#x27;publishTranscodedVideoTrack&#x27;)
      final bool? publishTranscodedVideoTrack;

      @JsonKey(name: &#x27;publishMixedAudioTrack&#x27;)
      final bool? publishMixedAudioTrack;

      @JsonKey(name: &#x27;publishLipSyncTrack&#x27;)
      final bool? publishLipSyncTrack;

      @JsonKey(name: &#x27;autoSubscribeAudio&#x27;)
      final bool? autoSubscribeAudio;

      @JsonKey(name: &#x27;autoSubscribeVideo&#x27;)
      final bool? autoSubscribeVideo;

      @JsonKey(name: &#x27;enableAudioRecordingOrPlayout&#x27;)
      final bool? enableAudioRecordingOrPlayout;

      @JsonKey(name: &#x27;publishMediaPlayerId&#x27;)
      final int? publishMediaPlayerId;

      @JsonKey(name: &#x27;clientRoleType&#x27;)
      final ClientRoleType? clientRoleType;

      @JsonKey(name: &#x27;audienceLatencyLevel&#x27;)
      final AudienceLatencyLevelType? audienceLatencyLevel;

      @JsonKey(name: &#x27;defaultVideoStreamType&#x27;)
      final VideoStreamType? defaultVideoStreamType;

      @JsonKey(name: &#x27;channelProfile&#x27;)
      final ChannelProfileType? channelProfile;

      @JsonKey(name: &#x27;audioDelayMs&#x27;)
      final int? audioDelayMs;

      @JsonKey(name: &#x27;mediaPlayerAudioDelayMs&#x27;)
      final int? mediaPlayerAudioDelayMs;

      @JsonKey(name: &#x27;token&#x27;)
      final String? token;

      @JsonKey(name: &#x27;enableBuiltInMediaEncryption&#x27;)
      final bool? enableBuiltInMediaEncryption;

      @JsonKey(name: &#x27;publishRhythmPlayerTrack&#x27;)
      final bool? publishRhythmPlayerTrack;

      @JsonKey(name: &#x27;isInteractiveAudience&#x27;)
      final bool? isInteractiveAudience;

      @JsonKey(name: &#x27;customVideoTrackId&#x27;)
      final int? customVideoTrackId;

      @JsonKey(name: &#x27;isAudioFilterable&#x27;)
      final bool? isAudioFilterable;

      @JsonKey(name: &#x27;parameters&#x27;)
      final String? parameters;

      factory ChannelMediaOptions.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
          _$ChannelMediaOptionsFromJson(json);

      Map&lt;String, dynamic&gt; toJson() =&gt; _$ChannelMediaOptionsToJson(this);
    }</codeblock>
                <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
            </section>
        <section id="detailed_desc">SDK 支持在同一时间、同一 <xref keyref="RtcConnection"/> 中发布多路音频流、一路视频流。例如，<parmname>publishMicrophoneTrack</parmname>、<parmname>publishCustomAudioTrack</parmname> 和 <parmname>publishMediaPlayerAudioTrack</parmname> 可以同时为 <codeph><ph keyref="true"/></codeph>； <parmname>publishCameraTrack</parmname>、<ph props="android ios cpp unreal bp flutter unity rn"><parmname>publishScreenCaptureVideo</parmname>、</ph><ph props="mac cpp unreal bp flutter unity electron"><parmname>publishScreenTrack</parmname>、</ph><parmname>publishCustomVideoTrack</parmname> 或 <parmname>publishEncodedVideoTrack</parmname> 之中同一时间只能有一个为 <codeph><ph keyref="true"/></codeph>。
            <note type="attention" id="note">建议你根据业务场景自行设置成员参数值，否则 SDK 会自动对成员参数进行赋值。</note>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>publishCameraTrack</pt>
                <pd>设置是否发布摄像头采集的视频：
                    <ul id="ul_vx5_np5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：发布摄像头采集的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布摄像头采集的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry props="ios mac cpp unreal bp unity cs flutter rn electron">
                <pt>publishSecondaryCameraTrack</pt>
                <pd>设置是否发布第二个摄像头采集的视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第二个摄像头采集的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第二个摄像头采集的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMicrophoneTrack</pt>
                <pd>设置是否发布麦克风采集到的音频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布麦克风采集到的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布麦克风采集到的音频。</li>
                </ul></pd>
                <pd>
                    <note type="note">
                    <ul><li props="native unity rn electron">自 v4.0.0 起，该参数名称由 <parmname>publishAudioTrack</parmname> 改为 <parmname>publishMicrophoneTrack</parmname>。</li>
                    <li props="flutter">自 v6.0.0 起，该参数名称由 <parmname>publishAudioTrack</parmname> 改为 <parmname>publishMicrophoneTrack</parmname>。</li>
                    <li>如果你将该参数设为 <codeph><ph keyref="false"/></codeph>，SDK 也会关闭麦克风采集。</li>
                        <li>如果你想要发布麦克风采集到的音频流，请确保 <parmname>enableAudioRecordingOrPlayout</parmname> 设为 <codeph><ph keyref="true"/></codeph>。</li>
                    </ul></note>
                </pd>
            </plentry>
            <plentry props="android cpp mac framework">
                <pt>publishThirdCameraTrack</pt>
                <pd>设置是否发布第三个摄像头采集的视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第三个摄像头采集的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第三个摄像头采集的视频。</li>
                    </ul>
                    <note type="attention" props="cpp unreal bp unity flutter">该参数仅适用于 Android、Windows 和 macOS 平台。</note><note type="attention" props="rn">该参数仅适用于 Android 平台。</note></pd>
            </plentry>
            <plentry props="android cpp mac framework">
                <pt>publishFourthCameraTrack</pt>
                <pd>设置是否发布第四个摄像头采集的视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第四个摄像头采集的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第四个摄像头采集的视频。</li>
                    </ul>
                    <note type="attention" props="cpp unreal bp unity flutter">该参数仅适用于 Android、Windows 和 macOS 平台。</note><note type="attention" props="rn">该参数仅适用于 Android 平台。</note></pd>
            </plentry>
            <plentry props="mac cpp flutter unreal bp unity cs electron">
                <pt>publishScreenTrack</pt>
                <pd>
                    <p>设置是否发布屏幕采集的视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布屏幕采集到的视频。</li>
                    </ul></p>
                    <note type="attention" props="cpp unreal bp unity flutter">该参数仅适用于 Windows 和 macOS 平台。</note>
                </pd>
            </plentry>
            <plentry props="android hmos ios cpp flutter unreal bp unity rn">
                <pt>publishScreenCaptureVideo</pt>
                <pd>
                    <p>设置是否发布屏幕采集的视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布屏幕采集到的视频。</li>
                    </ul></p>
                    <note type="attention" props="cpp unreal bp unity flutter">该参数仅适用于 Android 和 iOS 平台。</note>
                    <note type="note" props="android ios">自 v4.0.0 起，该参数名称由 <parmname>publishScreenTrack</parmname> 改为 <parmname>publishScreenCaptureVideo</parmname>。</note> </pd>
            </plentry>
            <plentry props="android hmos ios cpp flutter unreal bp unity rn">
                <pt>publishScreenCaptureAudio</pt>
                <pd>
                    <p>设置是否发布屏幕采集的音频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布屏幕采集到的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布屏幕采集到的音频。</li>
                    </ul></p>
                    <note type="attention" props="cpp unreal bp unity flutter">该参数仅适用于 Android 和 iOS 平台。</note>
                </pd>
            </plentry>
            <plentry props="mac cpp unreal bp unity cs flutter rn electron">
                <pt>publishSecondaryScreenTrack</pt>
                <pd>设置是否发布第二个屏幕采集的视频：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第二个屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第二个屏幕采集到的视频。</li>
                    </ul>
                </pd>
            </plentry>
             <plentry props="mac cpp unreal bp unity cs flutter electron">
                <pt>publishThirdScreenTrack</pt>
                <pd>设置是否发布第三个屏幕采集的视频：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第三个屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第三个屏幕采集到的视频。</li>
                    </ul>
                    <p>
                    <note type="attention" props="cpp unreal bp unity cs flutter">该参数仅适用于 Windows 和 macOS 平台。</note></p>
                </pd>
            </plentry>
            <plentry props="mac cpp unreal bp unity cs flutter electron">
                <pt>publishFourthScreenTrack</pt>
                <pd>设置是否发布第四个屏幕采集的视频：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第四个屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第四个屏幕采集到的视频。</li>
                    </ul>
                    <p>
                    <note type="attention" props="cpp unreal bp unity cs flutter">该参数仅适用于 Windows 和 macOS 平台。</note></p>
                </pd>
            </plentry>
            <plentry props="cpp unreal bp unity cs flutter rn electron">
                <pt>publishTranscodedVideoTrack</pt>
                <pd>设置是否发布本地的转码视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布本地的转码视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布本地的转码视频。</li>
                    </ul>
                    <note type="note" props="native">自 v4.2.0 起，该参数名称由 <parmname>publishTrancodedVideoTrack</parmname> 更正为 <parmname>publishTranscodedVideoTrack</parmname>。</note>
                </pd>
            </plentry>
             <plentry>
                 <pt>publishMixedAudioTrack</pt>
                 <pd>设置是否发布本地混音音频：
                     <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布本地混音音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布本地混音音频。</li>
                    </ul>
                 </pd>
             </plentry>
             <plentry props="en">
                 <pt>publishLipSyncTrack</pt>
                 <pd>设置是否发布语音驱动插件处理后的视频：
                     <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布语音驱动插件处理后的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）不发布语音驱动插件处理后的视频。</li>
                    </ul>
                 </pd>
             </plentry>
            <plentry props="native unreal flutter unity cs electron rn">
                <pt>publishCustomAudioTrack</pt>
                <pd>设置是否发布自定义采集的音频：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布自定义采集到的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布自定义采集到的音频。</li>
                    </ul></pd>
            </plentry>
            <plentry props="native unreal flutter unity cs electron rn">
                <pt>publishCustomAudioTrackId</pt>
                <pd>待发布的自定义音频轨道的 ID，默认值为 0。你可以通过 <xref keyref="createCustomAudioTrack"/> 方法来获取自定义音频轨道 ID。</pd>
            </plentry>
            <plentry props="native unreal flutter unity cs electron rn">
                <pt>publishCustomVideoTrack</pt>
                <pd>设置是否发布自定义采集的视频：
                        <ul>
                        <li><codeph><ph keyref="true"/></codeph>：发布自定义采集的视频。</li>
                        <li><codeph><ph keyref="false"/></codeph>：不发布自定义采集到的视频。</li>
                        </ul>
                </pd>
            </plentry>
            <plentry>
                <pt>publishEncodedVideoTrack</pt>
                <pd>设置是否发布编码后的视频：

                    <ul id="ul_ljg_4q5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：发布编码后的视频 。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布编码后的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerAudioTrack</pt>
                <pd>设置是否发布媒体播放器的音频：

                    <ul id="ul_gr3_rq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：发布媒体播放器的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布媒体播放器的音频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerVideoTrack</pt>
                <pd>设置是否发布媒体播放器的视频：

                    <ul id="ul_gtd_tq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：发布媒体播放器的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布媒体播放器的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>autoSubscribeAudio</pt>
                <pd>设置是否自动订阅所有音频流：

                    <ul id="ul_gxf_vq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：自动订阅所有音频流。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不自动订阅任何音频流。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>autoSubscribeVideo</pt>
                <pd>设置是否自动订阅所有视频流：

                    <ul id="ul_gfh_xq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：自动订阅所有视频流。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不自动订阅任何视频流。</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>enableAudioRecordingOrPlayout</pt>
                <pd>设置是否开启音频录制或播放：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：开启音频录制或播放。</li>
                    <li> <codeph> <ph keyref="false"/></codeph>：不开启音频录制或播放。</li>
                    </ul>
                    <note type="note">如果那你需要发布麦克风采集的音频流，请确保该参数设为 <codeph><ph keyref="true"/></codeph>。</note></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerId</pt>
                <pd>待发布的媒体播放器的 ID。默认值为 0。</pd>
            </plentry>
            <plentry props="native unreal bp unity cs">
                <pt>clientRoleType</pt>
                <pd conkeyref="setClientRole1/clientrole"/>
            </plentry>
            <plentry props="rn electron flutter">
                <pt>clientRoleType</pt>
                <pd>用户角色。详见 <xref keyref="CLIENT_ROLE_TYPE"/>。</pd>
            </plentry>
            <plentry conkeyref="ClientRoleOptions/audiencelatencylevel">
                <pt/>
                <pd/>
            </plentry>
            <plentry>
                <pt>defaultVideoStreamType</pt>
                <pd conkeyref="setRemoteDefaultVideoStreamType/defaultstreamtype"/>
            </plentry>
            <plentry>
                <pt>channelProfile</pt>
                <pd conkeyref="setChannelProfile/channelprofiletype"/>
            </plentry>
            <plentry>
                <pt>audioDelayMs</pt>
                <pd>
                    <p>发送音频帧的延时（毫秒）。你可以通过该参数来设置需要发送的音频帧的延时，以确保音画同步。</p>
                    <p>如果要关闭延时，将此参数值设置为 0。</p>
                </pd>
            </plentry>
            <plentry props="hide">
                <pt>publishCustomAudioTrackAec</pt>
                <pd>设置是否发布经过外部回声消除模块处理的音频帧。

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布经过外部回声消除模块处理的音频帧。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布经过外部回声消除模块处理的音频帧。</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>token</pt>
                <pd>
                    <p>（可选）在服务端生成的用于鉴权的动态密钥。详见<xref keyref="guide-token"/>。</p>
                    <note type="attention">
                    <ul>
                    <li>该参数仅在调用 <xref keyref="updateChannelMediaOptions"/> 或 <xref keyref="updateChannelMediaOptionsEx"/> 时生效。</li>
                    <li>请确保用于生成 token 的 App ID、频道名和用户名和 <xref keyref="initialize"/> 方法初始化引擎时用的 App ID，以及 <xref keyref="joinChannel2"/> 或 <xref keyref="joinChannelEx"/> 方法加入频道时设置的频道名和用户名是一致的。</li>
                    </ul></note></pd>
            </plentry>
            <plentry props="hide">
                <pt>startPreview</pt>
                <pd>设置是否在加入频道时自动开启预览。

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：自动开启预览。该参数值生效的前提是已通过 <xref keyref="setupLocalVideo"/> 方法设置了本地视频属性；否则，不会开启预览。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不自动开启预览。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishRhythmPlayerTrack</pt>
                <pd>设置是否发布虚拟节拍器声音至远端：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布。本地用户和远端用户都能听到节拍器。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布。只有本地用户能听到节拍器。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>isInteractiveAudience</pt>
                <pd>是否开启互动观众模式：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：开启互动观众模式。成功开启后，本地用户作为互动观众，收到低延时和流畅的远端用户视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不开启互动观众模式。本地用户作为普通观众，收到默认设置的远端用户视频。</li>
                    </ul>
                    <note type="attention">
                    <ul>
                    <li>该参数用于实现跨直播间连麦场景。连麦主播需要调用 <xref keyref="joinChannelEx"/> 方法，以观众身份加入对方的直播间，并将 <parmname>isInteractiveAudience</parmname> 设置为 <codeph><ph keyref="true"/></codeph>。</li>
                    <li>仅当用户角色为 <apiname keyref="CLIENT_ROLE_AUDIENCE"/> 时，该参数生效。</li>
                    </ul> </note> </pd>
            </plentry>
            <plentry id="customvideotrackid" props="native unreal flutter unity cs electron rn">
                <pt>customVideoTrackId</pt>
                <pd>调用 <xref keyref="createCustomVideoTrack"/> 方法返回的视频轨道 ID。默认值为 0。</pd>
            </plentry>
            <plentry>
                <pt>isAudioFilterable</pt>
                <pd>设置是否让当前音频流根据音强算法参与选流。

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：参与音强选流。如未开启音强选流功能，该参数不会生效。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不参与音强选流。</li>
                    </ul>
                    <note type="attention">如需启用该功能，请<xref keyref="mailto-link"/>。</note></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
