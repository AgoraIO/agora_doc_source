<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_channelmediaoptions">
    <title> <ph keyref="ChannelMediaOptions"/> </title>
    <shortdesc id="short"> <ph id="shortdesc">配置频道媒体选项。</ph> </shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class ChannelMediaOptions {
  public Boolean publishCameraTrack;
  public Boolean publishSecondaryCameraTrack;
  public Boolean publishThirdCameraTrack;
  public Boolean publishFourthCameraTrack;
  public Boolean publishMicrophoneTrack;
  public Boolean publishScreenCaptureVideo;
  public Boolean publishScreenCaptureAudio;
  public Boolean publishCustomAudioTrack;
  public Integer publishCustomAudioTrackId;
  public Boolean publishCustomVideoTrack;
  public Boolean publishEncodedVideoTrack;
  public Boolean publishMediaPlayerAudioTrack;
  public Boolean publishMediaPlayerVideoTrack;
  public Boolean publishTranscodedVideoTrack;
  public Boolean publishMixedAudioTrack;
  public Boolean publishLipSyncTrack;
  public Boolean autoSubscribeAudio;
  public Boolean autoSubscribeVideo;
  public Boolean enableAudioRecordingOrPlayout;
  public Integer publishMediaPlayerId;
  public Integer clientRoleType;
  public Integer audienceLatencyLevel;
  public Integer defaultVideoStreamType;
  public Integer channelProfile;
  public Integer audioDelayMs;
  public Integer mediaPlayerAudioDelayMs;
  public String token;
  public Boolean enableBuiltInMediaEncryption;
  public Boolean publishRhythmPlayerTrack;
  public Boolean isInteractiveAudience;
  public Integer customVideoTrackId;
  public Boolean isAudioFilterable;
  public Boolean startPreview;
  public String parameters;
  public Boolean enableMultipath;
  public Integer uplinkMultipathMode;
  public Integer downlinkMultipathMode;
  public Integer preferMultipathType;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">export class ChannelMediaOptions {
  
  public publishCameraTrack?:boolean;
  
  public publishSecondaryCameraTrack?:boolean;
  
  public publishMicrophoneTrack?:boolean;
  
  public publishScreenCaptureVideo?:boolean;
  
  public publishScreenCaptureAudio?:boolean;
  
  public publishCustomAudioTrack?:boolean;
  
  public publishCustomAudioTrackId?:number;
  
  public publishCustomVideoTrack?:boolean;
  
  public publishEncodedVideoTrack?:boolean;
  
  public publishMediaPlayerAudioTrack?:boolean;
  
  public publishMediaPlayerVideoTrack?:boolean;
  
  public publishTranscodedVideoTrack?:boolean;
  
  public publishMixedAudioTrack?:boolean;
  
  public autoSubscribeAudio?:boolean;
  
  public autoSubscribeVideo?:boolean;
  
  public enableAudioRecordingOrPlayout?:boolean;
  
  public publishMediaPlayerId?:number;
  
  public clientRoleType?:number;
  
  public audienceLatencyLevel?:number;
  
  public defaultVideoStreamType?:number;
  
  public channelProfile?:number;
  
  public audioDelayMs?:number;
  
  public mediaPlayerAudioDelayMs?:number;
      
  public enableBuiltInMediaEncryption?:boolean;
  
  public publishRhythmPlayerTrack?:boolean;
  
  public isInteractiveAudience?:boolean;
  
  public customVideoTrackId?:number;
  
  public isAudioFilterable?:boolean;
  
  public startPreview?:boolean;
  public constructor() {
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraRtcChannelMediaOptions : NSObject
@property(assign, nonatomic) BOOL publishCameraTrack;
@property(assign, nonatomic) BOOL publishSecondaryCameraTrack;
@property(assign, nonatomic) BOOL publishMicrophoneTrack;
@property(assign, nonatomic) BOOL publishScreenCaptureVideo;
@property(assign, nonatomic) BOOL publishScreenCaptureAudio;
@property(assign, nonatomic) BOOL publishThirdCameraTrack;
@property(assign, nonatomic) BOOL publishFourthCameraTrack;
@property(assign, nonatomic) BOOL publishScreenTrack;
@property(assign, nonatomic) BOOL publishSecondaryScreenTrack;
@property(assign, nonatomic) BOOL publishThirdScreenTrack;
@property(assign, nonatomic) BOOL publishFourthScreenTrack;
@property(assign, nonatomic) BOOL publishCustomAudioTrack;
@property(assign, nonatomic) NSInteger publishCustomAudioTrackId;
@property(assign, nonatomic) BOOL publishCustomVideoTrack;
@property(assign, nonatomic) BOOL publishEncodedVideoTrack;
@property(assign, nonatomic) BOOL publishMediaPlayerAudioTrack;
@property(assign, nonatomic) BOOL publishMediaPlayerVideoTrack;
@property(assign, nonatomic) BOOL publishTranscodedVideoTrack;
@property(assign, nonatomic) BOOL publishMixedAudioTrack;
@property(assign, nonatomic) BOOL publishLipSyncTrack;
@property(assign, nonatomic) BOOL autoSubscribeAudio;
@property(assign, nonatomic) BOOL autoSubscribeVideo;
@property(assign, nonatomic) BOOL enableAudioRecordingOrPlayout;
@property(assign, nonatomic) NSInteger publishMediaPlayerId;
@property(assign, nonatomic) AgoraClientRole clientRoleType;
@property(assign, nonatomic) AgoraAudienceLatencyLevelType audienceLatencyLevel;
@property(assign, nonatomic) AgoraVideoStreamType defaultVideoStreamType;
@property(assign, nonatomic) AgoraChannelProfile channelProfile;
@property(assign, nonatomic) NSInteger audioDelayMs;
@property(assign, nonatomic) NSInteger mediaPlayerAudioDelayMs;
@property(copy, nonatomic) NSString * _Nullable token;
@property(assign, nonatomic) BOOL enableBuiltInMediaEncryption;
@property(assign, nonatomic) BOOL publishRhythmPlayerTrack;
@property(assign, nonatomic) BOOL isInteractiveAudience;
@property(assign, nonatomic) NSInteger customVideoTrackId;
@property(assign, nonatomic) BOOL isAudioFilterable;
@property(copy, nonatomic) NSString * _Nullable parameters;
@property(assign, nonatomic) BOOL enableMultipath;
@property(assign, nonatomic) AgoraMultipathMode uplinkMultipathMode;
@property(assign, nonatomic) AgoraMultipathMode downlinkMultipathMode;
@property(assign, nonatomic) AgoraMultipathType preferMultipathType;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct ChannelMediaOptions {
  Optional&amp;lt;bool&amp;gt; publishCameraTrack;
  Optional&amp;lt;bool&amp;gt; publishSecondaryCameraTrack;
  Optional&amp;lt;bool&amp;gt; publishThirdCameraTrack;
  Optional&amp;lt;bool&amp;gt; publishFourthCameraTrack;
  Optional&amp;lt;bool&amp;gt; publishMicrophoneTrack;

  #if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;amp;&amp;amp; TARGET_OS_IPHONE)
  Optional&amp;lt;bool&amp;gt; publishScreenCaptureVideo;
  Optional&amp;lt;bool&amp;gt; publishScreenCaptureAudio;
  #else
  Optional&amp;lt;bool&amp;gt; publishScreenTrack;
  Optional&amp;lt;bool&amp;gt; publishSecondaryScreenTrack;
  Optional&amp;lt;bool&amp;gt; publishThirdScreenTrack;
  Optional&amp;lt;bool&amp;gt; publishFourthScreenTrack;
  #endif

  Optional&amp;lt;bool&amp;gt; publishCustomAudioTrack;
  Optional&amp;lt;int&amp;gt; publishCustomAudioTrackId;
  Optional&amp;lt;bool&amp;gt; publishCustomVideoTrack;
  Optional&amp;lt;bool&amp;gt; publishEncodedVideoTrack;
  Optional&amp;lt;bool&amp;gt; publishMediaPlayerAudioTrack;
  Optional&amp;lt;bool&amp;gt; publishMediaPlayerVideoTrack;
  Optional&amp;lt;bool&amp;gt; publishTranscodedVideoTrack;
  Optional&amp;lt;bool&amp;gt; autoSubscribeAudio;
  Optional&amp;lt;bool&amp;gt; autoSubscribeVideo;
  Optional&amp;lt;bool&amp;gt; enableAudioRecordingOrPlayout;
  Optional&amp;lt;int&amp;gt; publishMediaPlayerId;
  Optional&amp;lt;CLIENT_ROLE_TYPE&amp;gt; clientRoleType;
  Optional&amp;lt;AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt; audienceLatencyLevel;
  Optional&amp;lt;VIDEO_STREAM_TYPE&amp;gt; defaultVideoStreamType;
  Optional&amp;lt;CHANNEL_PROFILE_TYPE&amp;gt; channelProfile;
  Optional&amp;lt;const char*&amp;gt; token;
  Optional&amp;lt;bool&amp;gt; enableBuiltInMediaEncryption;
  Optional&amp;lt;bool&amp;gt; publishRhythmPlayerTrack;
  Optional&amp;lt;bool&amp;gt; isInteractiveAudience;

  Optional&amp;lt;video_track_id_t&amp;gt; customVideoTrackId;

  Optional&amp;lt;bool&amp;gt; isAudioFilterable;

  ChannelMediaOptions() {}
  ~ChannelMediaOptions() {}</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FChannelMediaOptions
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishCameraTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishSecondaryCameraTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishMicrophoneTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishScreenCaptureVideo;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishScreenCaptureAudio;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishScreenTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishSecondaryScreenTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishCustomAudioTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool publishCustomAudioTrackId_SetValue;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int publishCustomAudioTrackId;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishCustomVideoTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishEncodedVideoTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishMediaPlayerAudioTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishMediaPlayerVideoTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishTranscodedVideoTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL autoSubscribeAudio;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL autoSubscribeVideo;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL enableAudioRecordingOrPlayout;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool publishMediaPlayerId_SetValue;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int publishMediaPlayerId;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool clientRoleType_SetValue = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	ECLIENT_ROLE_TYPE clientRoleType = ECLIENT_ROLE_TYPE::CLIENT_ROLE_BROADCASTER;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool audienceLatencyLevel_SetValue;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAUDIENCE_LATENCY_LEVEL_TYPE audienceLatencyLevel;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool defaultVideoStreamType_SetValue;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EVIDEO_STREAM_TYPE defaultVideoStreamType;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool channelProfile_SetValue = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	ECHANNEL_PROFILE_TYPE channelProfile = ECHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_LIVE_BROADCASTING;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool audioDelayMs_SetValue;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int audioDelayMs;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool mediaPlayerAudioDelayMs_SetValue;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int mediaPlayerAudioDelayMs;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool token_SetValue;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	FString token;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL enableBuiltInMediaEncryption;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL publishRhythmPlayerTrack;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL isInteractiveAudience;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool customVideoTrackId_SetValue;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int64 customVideoTrackId;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	AGORAOPTIONAL isAudioFilterable;
};</codeblock>
            <codeblock props="unreal" outputclass="language-cpp">struct ChannelMediaOptions {
  Optional&amp;lt;bool&amp;gt; publishCameraTrack;
  Optional&amp;lt;bool&amp;gt; publishSecondaryCameraTrack;
  Optional&amp;lt;bool&amp;gt; publishMicrophoneTrack;

  #if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;amp;&amp;amp; TARGET_OS_IPHONE)
  Optional&amp;lt;bool&amp;gt; publishScreenCaptureVideo;
  Optional&amp;lt;bool&amp;gt; publishScreenCaptureAudio;
  #else
  Optional&amp;lt;bool&amp;gt; publishScreenTrack;
  Optional&amp;lt;bool&amp;gt; publishSecondaryScreenTrack;
  #endif

  Optional&amp;lt;bool&amp;gt; publishCustomAudioTrack;
  Optional&amp;lt;int&amp;gt; publishCustomAudioTrackId;
  Optional&amp;lt;bool&amp;gt; publishCustomVideoTrack;
  Optional&amp;lt;bool&amp;gt; publishEncodedVideoTrack;
  Optional&amp;lt;bool&amp;gt; publishMediaPlayerAudioTrack;
  Optional&amp;lt;bool&amp;gt; publishMediaPlayerVideoTrack;
  Optional&amp;lt;bool&amp;gt; publishTranscodedVideoTrack;
  Optional&amp;lt;bool&amp;gt; autoSubscribeAudio;
  Optional&amp;lt;bool&amp;gt; autoSubscribeVideo;
  Optional&amp;lt;bool&amp;gt; enableAudioRecordingOrPlayout;
  Optional&amp;lt;int&amp;gt; publishMediaPlayerId;
  Optional&amp;lt;CLIENT_ROLE_TYPE&amp;gt; clientRoleType;
  Optional&amp;lt;AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt; audienceLatencyLevel;
  Optional&amp;lt;VIDEO_STREAM_TYPE&amp;gt; defaultVideoStreamType;
  Optional&amp;lt;CHANNEL_PROFILE_TYPE&amp;gt; channelProfile;
  Optional&amp;lt;const char*&amp;gt; token;
  Optional&amp;lt;bool&amp;gt; enableBuiltInMediaEncryption;
  Optional&amp;lt;bool&amp;gt; publishRhythmPlayerTrack;
  Optional&amp;lt;bool&amp;gt; isInteractiveAudience;

  Optional&amp;lt;video_track_id_t&amp;gt; customVideoTrackId;

  Optional&amp;lt;bool&amp;gt; isAudioFilterable;

  ChannelMediaOptions() {}
  ~ChannelMediaOptions() {}</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ChannelMediaOptions {

  publishCameraTrack?: boolean;

  publishSecondaryCameraTrack?: boolean;

  publishThirdCameraTrack?: boolean;

  publishFourthCameraTrack?: boolean;

  publishMicrophoneTrack?: boolean;

  publishScreenTrack?: boolean;

  publishSecondaryScreenTrack?: boolean;

  publishThirdScreenTrack?: boolean;

  publishFourthScreenTrack?: boolean;

  publishCustomAudioTrack?: boolean;

  publishCustomAudioTrackId?: number;

  publishCustomVideoTrack?: boolean;

  publishEncodedVideoTrack?: boolean;

  publishMediaPlayerAudioTrack?: boolean;

  publishMediaPlayerVideoTrack?: boolean;

  publishTranscodedVideoTrack?: boolean;

  autoSubscribeAudio?: boolean;

  autoSubscribeVideo?: boolean;

  enableAudioRecordingOrPlayout?: boolean;

  publishMediaPlayerId?: number;

  clientRoleType?: ClientRoleType;

  audienceLatencyLevel?: AudienceLatencyLevelType;

  defaultVideoStreamType?: VideoStreamType;

  channelProfile?: ChannelProfileType;

  token?: string;

  enableBuiltInMediaEncryption?: boolean;

  publishRhythmPlayerTrack?: boolean;

  isInteractiveAudience?: boolean;

  customVideoTrackId?: number;

  isAudioFilterable?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ChannelMediaOptions : OptionalJsonParse
    {
        public Optional&amp;lt;bool&amp;gt; publishCameraTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishSecondaryCameraTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishThirdCameraTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishFourthCameraTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishMicrophoneTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishScreenCaptureVideo = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishScreenCaptureAudio = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishScreenTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishSecondaryScreenTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishThirdScreenTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishFourthScreenTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishCustomAudioTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;int&amp;gt; publishCustomAudioTrackId = new Optional&amp;lt;int&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishCustomVideoTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishEncodedVideoTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishMediaPlayerAudioTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishMediaPlayerVideoTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishTranscodedVideoTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; autoSubscribeAudio = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; autoSubscribeVideo = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; enableAudioRecordingOrPlayout = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;int&amp;gt; publishMediaPlayerId = new Optional&amp;lt;int&amp;gt;();
        public Optional&amp;lt;CLIENT_ROLE_TYPE&amp;gt; clientRoleType = new Optional&amp;lt;CLIENT_ROLE_TYPE&amp;gt;();
        public Optional&amp;lt;AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt; audienceLatencyLevel = new Optional&amp;lt;AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt;();
        public Optional&amp;lt;VIDEO_STREAM_TYPE&amp;gt; defaultVideoStreamType = new Optional&amp;lt;VIDEO_STREAM_TYPE&amp;gt;();
        public Optional&amp;lt;CHANNEL_PROFILE_TYPE&amp;gt; channelProfile = new Optional&amp;lt;CHANNEL_PROFILE_TYPE&amp;gt;();
        public Optional&amp;lt;string&amp;gt; token = new Optional&amp;lt;string&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishRhythmPlayerTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; isInteractiveAudience = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;video_track_id_t&amp;gt; customVideoTrackId = new Optional&amp;lt;video_track_id_t&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; isAudioFilterable = new Optional&amp;lt;bool&amp;gt;();

   }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ChannelMediaOptions {

  publishCameraTrack?: boolean;

  publishSecondaryCameraTrack?: boolean;

  publishThirdCameraTrack?: boolean;

  publishFourthCameraTrack?: boolean;

  publishMicrophoneTrack?: boolean;

  publishScreenCaptureVideo?: boolean;

  publishScreenCaptureAudio?: boolean;

  publishSecondaryScreenTrack?: boolean;

  publishThirdScreenTrack?: boolean;

  publishFourthScreenTrack?: boolean;

  publishCustomAudioTrack?: boolean;

  publishCustomAudioTrackId?: number;

  publishCustomVideoTrack?: boolean;

  publishEncodedVideoTrack?: boolean;

  publishMediaPlayerAudioTrack?: boolean;

  publishMediaPlayerVideoTrack?: boolean;

  publishTranscodedVideoTrack?: boolean;

  autoSubscribeAudio?: boolean;

  autoSubscribeVideo?: boolean;

  enableAudioRecordingOrPlayout?: boolean;

  publishMediaPlayerId?: number;

  clientRoleType?: ClientRoleType;

  audienceLatencyLevel?: AudienceLatencyLevelType;

  defaultVideoStreamType?: VideoStreamType;

  channelProfile?: ChannelProfileType;

  token?: string;

  enableBuiltInMediaEncryption?: boolean;

  publishRhythmPlayerTrack?: boolean;

  isInteractiveAudience?: boolean;

  customVideoTrackId?: number;

  isAudioFilterable?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class ChannelMediaOptions {
  const ChannelMediaOptions(
      {this.publishCameraTrack,
      this.publishSecondaryCameraTrack,
      this.publishThirdCameraTrack,
      this.publishFourthCameraTrack,
      this.publishMicrophoneTrack,
      this.publishScreenCaptureVideo,
      this.publishScreenCaptureAudio,
      this.publishScreenTrack,
      this.publishSecondaryScreenTrack,
      this.publishThirdScreenTrack,
      this.publishFourthScreenTrack,
      this.publishCustomAudioTrack,
      this.publishCustomAudioTrackId,
      this.publishCustomVideoTrack,
      this.publishEncodedVideoTrack,
      this.publishMediaPlayerAudioTrack,
      this.publishMediaPlayerVideoTrack,
      this.publishTranscodedVideoTrack,
      this.autoSubscribeAudio,
      this.autoSubscribeVideo,
      this.enableAudioRecordingOrPlayout,
      this.publishMediaPlayerId,
      this.clientRoleType,
      this.audienceLatencyLevel,
      this.defaultVideoStreamType,
      this.channelProfile,
      this.audioDelayMs,
      this.mediaPlayerAudioDelayMs,
      this.token,
      this.enableBuiltInMediaEncryption,
      this.publishRhythmPlayerTrack,
      this.isInteractiveAudience,
      this.customVideoTrackId,
      this.isAudioFilterable});

  @JsonKey(name: 'publishCameraTrack')
  final bool? publishCameraTrack;

  @JsonKey(name: 'publishSecondaryCameraTrack')
  final bool? publishSecondaryCameraTrack;

  @JsonKey(name: 'publishThirdCameraTrack')
  final bool? publishThirdCameraTrack;

  @JsonKey(name: 'publishFourthCameraTrack')
  final bool? publishFourthCameraTrack;

  @JsonKey(name: 'publishMicrophoneTrack')
  final bool? publishMicrophoneTrack;

  @JsonKey(name: 'publishScreenCaptureVideo')
  final bool? publishScreenCaptureVideo;

  @JsonKey(name: 'publishScreenCaptureAudio')
  final bool? publishScreenCaptureAudio;

  @JsonKey(name: 'publishScreenTrack')
  final bool? publishScreenTrack;

  @JsonKey(name: 'publishSecondaryScreenTrack')
  final bool? publishSecondaryScreenTrack;

  @JsonKey(name: 'publishThirdScreenTrack')
  final bool? publishThirdScreenTrack;

  @JsonKey(name: 'publishFourthScreenTrack')
  final bool? publishFourthScreenTrack;

  @JsonKey(name: 'publishCustomAudioTrack')
  final bool? publishCustomAudioTrack;

  @JsonKey(name: 'publishCustomAudioTrackId')
  final int? publishCustomAudioTrackId;

  @JsonKey(name: 'publishCustomVideoTrack')
  final bool? publishCustomVideoTrack;

  @JsonKey(name: 'publishEncodedVideoTrack')
  final bool? publishEncodedVideoTrack;

  @JsonKey(name: 'publishMediaPlayerAudioTrack')
  final bool? publishMediaPlayerAudioTrack;

  @JsonKey(name: 'publishMediaPlayerVideoTrack')
  final bool? publishMediaPlayerVideoTrack;

  @JsonKey(name: 'publishTranscodedVideoTrack')
  final bool? publishTranscodedVideoTrack;

  @JsonKey(name: 'autoSubscribeAudio')
  final bool? autoSubscribeAudio;

  @JsonKey(name: 'autoSubscribeVideo')
  final bool? autoSubscribeVideo;

  @JsonKey(name: 'enableAudioRecordingOrPlayout')
  final bool? enableAudioRecordingOrPlayout;

  @JsonKey(name: 'publishMediaPlayerId')
  final int? publishMediaPlayerId;

  @JsonKey(name: 'clientRoleType')
  final ClientRoleType? clientRoleType;

  @JsonKey(name: 'audienceLatencyLevel')
  final AudienceLatencyLevelType? audienceLatencyLevel;

  @JsonKey(name: 'defaultVideoStreamType')
  final VideoStreamType? defaultVideoStreamType;

  @JsonKey(name: 'channelProfile')
  final ChannelProfileType? channelProfile;

  @JsonKey(name: 'audioDelayMs')
  final int? audioDelayMs;

  @JsonKey(name: 'mediaPlayerAudioDelayMs')
  final int? mediaPlayerAudioDelayMs;

  @JsonKey(name: 'token')
  final String? token;

  @JsonKey(name: 'enableBuiltInMediaEncryption')
  final bool? enableBuiltInMediaEncryption;

  @JsonKey(name: 'publishRhythmPlayerTrack')
  final bool? publishRhythmPlayerTrack;

  @JsonKey(name: 'isInteractiveAudience')
  final bool? isInteractiveAudience;

  @JsonKey(name: 'customVideoTrackId')
  final int? customVideoTrackId;

  @JsonKey(name: 'isAudioFilterable')
  final bool? isAudioFilterable;

  factory ChannelMediaOptions.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;
      _$ChannelMediaOptionsFromJson(json);

  Map&amp;lt;String, dynamic&amp;gt; toJson() =&amp;gt; _$ChannelMediaOptionsToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">SDK 支持在同一时间、同一 <xref keyref="RtcConnection"/> 中发布多路音频流、一路视频流。例如，<parmname>publishMicrophoneTrack</parmname>、<parmname>publishCustomAudioTrack</parmname> 和 <parmname>publishMediaPlayerAudioTrack</parmname> 可以同时为 <codeph><ph keyref="true"/></codeph>； <parmname>publishCameraTrack</parmname>、<ph props="android bp cpp flutter ios rn unity unreal"><parmname>publishScreenCaptureVideo</parmname>、</ph><ph props="bp cpp electron flutter mac unity unreal"><parmname>publishScreenTrack</parmname>、</ph><parmname>publishCustomVideoTrack</parmname> 或 <parmname>publishEncodedVideoTrack</parmname> 之中同一时间只能有一个为 <codeph><ph keyref="true"/></codeph>。
            <note type="attention" id="note">建议你根据业务场景自行设置成员参数值，否则 SDK 会自动对成员参数进行赋值。</note>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>publishCameraTrack</pt>
                <pd>设置是否发布摄像头采集的视频：
                    <ul id="ul_vx5_np5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：发布摄像头采集的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布摄像头采集的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry props="apple bp cpp cs electron flutter rn unity unreal">
                <pt>publishSecondaryCameraTrack</pt>
                <pd>设置是否发布第二个摄像头采集的视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第二个摄像头采集的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第二个摄像头采集的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMicrophoneTrack</pt>
                <pd>设置是否发布麦克风采集到的音频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布麦克风采集到的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布麦克风采集到的音频。</li>
                </ul></pd>
                <pd>
                    <note type="note">
                    <ul><li props="electron native rn unity">自 v4.0.0 起，该参数名称由 <parmname>publishAudioTrack</parmname> 改为 <parmname>publishMicrophoneTrack</parmname>。</li>
                    <li props="flutter">自 v6.0.0 起，该参数名称由 <parmname>publishAudioTrack</parmname> 改为 <parmname>publishMicrophoneTrack</parmname>。</li>
                    <li>如果你将该参数设为 <codeph><ph keyref="false"/></codeph>，SDK 也会关闭麦克风采集。</li>
                        <li>如果你想要发布麦克风采集到的音频流，请确保 <parmname>enableAudioRecordingOrPlayout</parmname> 设为 <codeph><ph keyref="true"/></codeph>。</li>
                    </ul></note>
                </pd>
            </plentry>
            <plentry props="android cpp cs electron flutter mac rn unity">
                <pt>publishThirdCameraTrack</pt>
                <pd>设置是否发布第三个摄像头采集的视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第三个摄像头采集的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第三个摄像头采集的视频。</li>
                    </ul>
                    <note type="attention" props="bp cpp flutter unity unreal">该参数仅适用于 Android、Windows 和 macOS 平台。</note><note type="attention" props="rn">该参数仅适用于 Android 平台。</note></pd>
            </plentry>
            <plentry props="android cpp cs electron flutter mac rn unity">
                <pt>publishFourthCameraTrack</pt>
                <pd>设置是否发布第四个摄像头采集的视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第四个摄像头采集的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第四个摄像头采集的视频。</li>
                    </ul>
                    <note type="attention" props="bp cpp flutter unity unreal">该参数仅适用于 Android、Windows 和 macOS 平台。</note><note type="attention" props="rn">该参数仅适用于 Android 平台。</note></pd>
            </plentry>
            <plentry props="bp cpp cs electron flutter mac unity unreal">
                <pt>publishScreenTrack</pt>
                <pd>
                    <p>设置是否发布屏幕采集的视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布屏幕采集到的视频。</li>
                    </ul></p>
                    <note type="attention" props="bp cpp flutter unity unreal">该参数仅适用于 Windows 和 macOS 平台。</note>
                </pd>
            </plentry>
            <plentry props="android bp cpp flutter ios rn unity unreal">
                <pt>publishScreenCaptureVideo</pt>
                <pd>
                    <p>设置是否发布屏幕采集的视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布屏幕采集到的视频。</li>
                    </ul></p>
                    <note type="attention" props="bp cpp flutter unity unreal">该参数仅适用于 Android 和 iOS 平台。</note>
                    <note type="note" props="android ios">自 v4.0.0 起，该参数名称由 <parmname>publishScreenTrack</parmname> 改为 <parmname>publishScreenCaptureVideo</parmname>。</note> </pd>
            </plentry>
            <plentry props="android bp cpp flutter ios rn unity unreal">
                <pt>publishScreenCaptureAudio</pt>
                <pd>
                    <p>设置是否发布屏幕采集的音频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布屏幕采集到的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布屏幕采集到的音频。</li>
                    </ul></p>
                    <note type="attention" props="bp cpp flutter unity unreal">该参数仅适用于 Android 和 iOS 平台。</note>
                </pd>
            </plentry>
            <plentry props="bp cpp cs electron flutter mac rn unity unreal">
                <pt>publishSecondaryScreenTrack</pt>
                <pd>设置是否发布第二个屏幕采集的视频：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第二个屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第二个屏幕采集到的视频。</li>
                    </ul>
                </pd>
            </plentry>
            <plentry props="cpp cs electron flutter mac unity">
                <pt>publishThirdScreenTrack</pt>
                <pd>设置是否发布第三个屏幕采集的视频：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第三个屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第三个屏幕采集到的视频。</li>
                    </ul>
                    <p>
                    <note type="attention" props="bp cpp cs flutter unity unreal">该参数仅适用于 Windows 和 macOS 平台。</note></p>
                </pd>
            </plentry>
            <plentry props="cpp cs electron flutter mac unity">
                <pt>publishFourthScreenTrack</pt>
                <pd>设置是否发布第四个屏幕采集的视频：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第四个屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第四个屏幕采集到的视频。</li>
                    </ul>
                    <p>
                    <note type="attention" props="bp cpp cs flutter unity unreal">该参数仅适用于 Windows 和 macOS 平台。</note></p>
                </pd>
            </plentry>
            <plentry props="bp cpp cs electron flutter rn unity unreal">
                <pt>publishTranscodedVideoTrack</pt>
                <pd>设置是否发布本地的转码视频：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布本地的转码视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布本地的转码视频。</li>
                    </ul>
                    <note type="note" props="native">自 v4.2.0 起，该参数名称由 <parmname>publishTrancodedVideoTrack</parmname> 更正为 <parmname>publishTranscodedVideoTrack</parmname>。</note>
                </pd>
            </plentry>
            <plentry props="hide">
                <pt>publishMixedAudioTrack</pt>
                <pd>设置是否发布本地混音音频：
                     <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布本地混音音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布本地混音音频。</li>
                    </ul>
                 </pd>
            </plentry>
            <plentry props="en">
                <pt>publishLipSyncTrack</pt>
                <pd>设置是否发布语音驱动插件处理后的视频：
                     <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布语音驱动插件处理后的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）不发布语音驱动插件处理后的视频。</li>
                    </ul>
                 </pd>
            </plentry>
            <plentry>
                <pt>publishCustomAudioTrack</pt>
                <pd>设置是否发布自定义采集的音频：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布自定义采集到的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布自定义采集到的音频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishCustomAudioTrackId</pt>
                <pd>待发布的自定义音频轨道的 ID。默认值为 0。

                    <p>如果你已在 <xref keyref="setExternalAudioSource2"/> 中设置了 <parmname>sourceNumber</parmname> 大于 1，SDK 会创建对应数量的自采集音频轨道，并从 0 开始为每一个音频轨道分配一个 ID。</p>
                </pd>
            </plentry>
            <plentry>
                <pt>publishCustomVideoTrack</pt>
                <pd>设置是否发布自定义采集的视频：
                        <ul>
                        <li><codeph><ph keyref="true"/></codeph>：发布自定义采集的视频。</li>
                        <li><codeph><ph keyref="false"/></codeph>：不发布自定义采集到的视频。</li>
                        </ul>
                </pd>
            </plentry>
            <plentry>
                <pt>publishEncodedVideoTrack</pt>
                <pd>设置是否发布编码后的视频：

                    <ul id="ul_ljg_4q5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：发布编码后的视频 。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布编码后的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerAudioTrack</pt>
                <pd>设置是否发布媒体播放器的音频：

                    <ul id="ul_gr3_rq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：发布媒体播放器的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布媒体播放器的音频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerVideoTrack</pt>
                <pd>设置是否发布媒体播放器的视频：

                    <ul id="ul_gtd_tq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：发布媒体播放器的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布媒体播放器的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>autoSubscribeAudio</pt>
                <pd>设置是否自动订阅所有音频流：

                    <ul id="ul_gxf_vq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：自动订阅所有音频流。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不自动订阅任何音频流。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>autoSubscribeVideo</pt>
                <pd>设置是否自动订阅所有视频流：

                    <ul id="ul_gfh_xq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：自动订阅所有视频流。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不自动订阅任何视频流。</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>enableAudioRecordingOrPlayout</pt>
                <pd>设置是否开启音频录制或播放：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：开启音频录制或播放。</li>
                    <li> <codeph> <ph keyref="false"/></codeph>：不开启音频录制或播放。</li>
                    </ul>
                    <note type="note">如果那你需要发布麦克风采集的音频流，请确保该参数设为 <codeph><ph keyref="true"/></codeph>。</note></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerId</pt>
                <pd>待发布的媒体播放器的 ID。默认值为 0。</pd>
            </plentry>
            <plentry props="bp cs native unity unreal">
                <pt>clientRoleType</pt>
                <pd conkeyref="setClientRole1/clientrole"/>
            </plentry>
            <plentry props="electron flutter rn">
                <pt>clientRoleType</pt>
                <pd>用户角色。详见 <xref keyref="CLIENT_ROLE_TYPE"/>。</pd>
            </plentry>
            <plentry conkeyref="ClientRoleOptions/audiencelatencylevel">
                <pt/>
                <pd/>
            </plentry>
            <plentry>
                <pt>defaultVideoStreamType</pt>
                <pd conkeyref="setRemoteDefaultVideoStreamType/defaultstreamtype"/>
            </plentry>
            <plentry>
                <pt>channelProfile</pt>
                <pd conkeyref="setChannelProfile/channelprofiletype"/>
            </plentry>
            <plentry>
                <pt>audioDelayMs</pt>
                <pd>
                    <p>发送音频帧的延时（毫秒）。你可以通过该参数来设置需要发送的音频帧的延时，以确保音画同步。</p>
                    <p>如果要关闭延时，将此参数值设置为 0。</p>
                </pd>
            </plentry>
            <plentry props="hide">
                <pt>publishCustomAudioTrackAec</pt>
                <pd>设置是否发布经过外部回声消除模块处理的音频帧。

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布经过外部回声消除模块处理的音频帧。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布经过外部回声消除模块处理的音频帧。</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>token</pt>
                <pd>
                    <p>（可选）在服务端生成的用于鉴权的动态密钥。详见<xref keyref="guide-token"/>。</p>
                    <note type="attention">
                    <ul>
                    <li>该参数仅在调用 <xref keyref="updateChannelMediaOptions"/> 或 <xref keyref="updateChannelMediaOptionsEx"/> 时生效。</li>
                    <li>请确保用于生成 token 的 App ID、频道名和用户名和 <xref keyref="initialize"/> 方法初始化引擎时用的 App ID，以及 <xref keyref="joinChannel2"/> 或 <xref keyref="joinChannelEx"/> 方法加入频道时设置的频道名和用户名是一致的。</li>
                    </ul></note></pd>
            </plentry>
            <plentry props="hide">
                <pt>startPreview</pt>
                <pd>设置是否在加入频道时自动开启预览。

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：自动开启预览。该参数值生效的前提是已通过 <xref keyref="setupLocalVideo"/> 方法设置了本地视频属性；否则，不会开启预览。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不自动开启预览。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishRhythmPlayerTrack</pt>
                <pd>设置是否发布虚拟节拍器声音至远端：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布。本地用户和远端用户都能听到节拍器。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布。只有本地用户能听到节拍器。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>isInteractiveAudience</pt>
                <pd>是否开启互动观众模式：

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：开启互动观众模式。成功开启后，本地用户作为互动观众，收到低延时和流畅的远端用户视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不开启互动观众模式。本地用户作为普通观众，收到默认设置的远端用户视频。</li>
                    </ul>
                    <note type="attention">
                    <ul>
                    <li>该参数用于实现跨直播间连麦场景。连麦主播需要调用 <xref keyref="joinChannelEx"/> 方法，以观众身份加入对方的直播间，并将 <parmname>isInteractiveAudience</parmname> 设置为 <codeph><ph keyref="true"/></codeph>。</li>
                    <li>仅当用户角色为 <apiname keyref="CLIENT_ROLE_AUDIENCE"/> 时，该参数生效。</li>
                    </ul> </note> </pd>
            </plentry>
            <plentry id="customvideotrackid">
                <pt>customVideoTrackId</pt>
                <pd>调用 <xref keyref="createCustomVideoTrack"/> 方法返回的视频轨道 ID。默认值为 0。</pd>
            </plentry>
            <plentry>
                <pt>isAudioFilterable</pt>
                <pd>设置是否让当前音频流根据音强算法参与选流。

                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：参与音强选流。如未开启音强选流功能，该参数不会生效。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不参与音强选流。</li>
                    </ul>
                    <note type="attention">如需启用该功能，请联系 <xref keyref="mailto-link"/>。</note></pd>
            </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">enableMultipath</pt>
                <pd props="android">是否启用多路径传输。
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：启用多路径传输。</li>
                        <li><codeph><ph keyref="false"/></codeph>：禁用多路径传输。</li>
                        </ul>
                    </pd>
                <pd props="ios">是否启用多路径传输。
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：启用多路径传输。</li>
                        <li><codeph><ph keyref="false"/></codeph>：禁用多路径传输。</li>
                        </ul>
                    </pd>
                <pd props="cpp">是否启用多路径传输：
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：启用多路径传输。</li>
                        <li><codeph><ph keyref="false"/></codeph>：禁用多路径传输。</li>
                        </ul>
                    </pd>
            </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">uplinkMultipathMode</pt>
                <pd props="android">上行多路径传输的模式。</pd>
                <pd props="ios">上行多路径传输的模式。详见 <xref keyref="MultipathMode"/>。</pd>
                <pd props="cpp">上行多路径传输的模式，定义上行多路径的管理方式。详见 <xref keyref="MultipathMode"/>。</pd>
            </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">downlinkMultipathMode</pt>
                <pd props="android">下行多路径传输的模式。</pd>
                <pd props="ios">下行多路径传输的模式。详见 <xref keyref="MultipathMode"/>。</pd>
                <pd props="cpp">下行多路径传输的模式，定义下行多路径的管理方式。详见 <xref keyref="MultipathMode"/>。</pd>
            </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">preferMultipathType</pt>
                <pd props="android">优先使用的多路径传输类型。</pd>
                <pd props="ios">首选的多路径传输类型。详见 <xref keyref="MultipathType"/>。</pd>
                <pd props="cpp">首选的多路径传输类型。详见 <xref keyref="MultipathType"/>。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
