<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencaptureparameters2">
  <title><ph keyref="ScreenCaptureParameters2"/></title>
  <shortdesc id="short"><ph id="shortdesc">屏幕共享的参数配置。</ph></shortdesc>
  <refbody>
    <section id="prototype">
      <p outputclass="codeblock">
      <codeblock props="android" outputclass="language-java">public class ScreenCaptureParameters {
  public static class VideoCaptureParameters {
    public int bitrate = 0;
    public int framerate = 15;
    public int width = 1280;
    public int height = 720;
    public int contentHint = Constants.SCREEN_CAPTURE_CONTENT_HINT_MOTION;
    @CalledByNative("VideoCaptureParameters")
    public int getBitrate() {
      return bitrate;
    }
    @CalledByNative("VideoCaptureParameters")
    public int getFramerate() {
      return framerate;
    }
    @CalledByNative("VideoCaptureParameters")
    public int getWidth() {
      return width;
    }
    @CalledByNative("VideoCaptureParameters")
    public int getHeight() {
      return height;
    }
    @CalledByNative("VideoCaptureParameters")
    public int getContentHint() {
      return contentHint;
    }
    @Override
    public String toString() {
      return "VideoCaptureParameters{"
          + "bitrate=" + bitrate + ", framerate=" + framerate + ", width=" + width
          + ", height=" + height + ", contentHint=" + contentHint + '}';
    }
  }
  public static class AudioCaptureParameters {
    public int sampleRate = 16000;
    public int channels = 2;
    public int captureSignalVolume = 100;
    public boolean allowCaptureCurrentApp = true;
    @CalledByNative("AudioCaptureParameters")
    public int getSampleRate() {
      return sampleRate;
    }
    @CalledByNative("AudioCaptureParameters")
    public int getChannels() {
      return channels;
    }
    @CalledByNative("AudioCaptureParameters")
    public int getCaptureSignalVolume() {
      return captureSignalVolume;
    }
    @Override
    public String toString() {
      return "AudioCaptureParameters{"
          + "sampleRate=" + sampleRate + ", channels=" + channels + ", captureSignalVolume="
          + captureSignalVolume + ", allowCaptureCurrentApp=" + allowCaptureCurrentApp + '}';
    }
  }
  public boolean captureAudio = false;
  public VideoCaptureParameters videoCaptureParameters = new VideoCaptureParameters();
  public boolean captureVideo = true;
  public AudioCaptureParameters audioCaptureParameters = new AudioCaptureParameters();
  @CalledByNative
  public boolean isCaptureAudio() {
    return captureAudio;
  }
  @CalledByNative
  public VideoCaptureParameters getVideoCaptureParameters() {
    return videoCaptureParameters;
  }
  @CalledByNative
  public boolean isCaptureVideo() {
    return captureVideo;
  }
  @CalledByNative
  public AudioCaptureParameters getAudioCaptureParameters() {
    return audioCaptureParameters;
  }
  @Override
  public String toString() {
    return "ScreenCaptureParameters{"
        + "captureAudio=" + captureAudio + ", videoCaptureParameters=" + videoCaptureParameters
        + ", captureVideo=" + captureVideo + ", audioCaptureParameters=" + audioCaptureParameters
        + '}';
  }
}
</codeblock>
        <codeblock props="hmos" outputclass="language-arkts">export class ScreenCaptureParameters {
  public captureAudio: boolean = false;
  public audioParams: ScreenAudioParameters = new ScreenAudioParameters();
  public captureVideo: boolean = true;
  public videoParams: ScreenVideoParameters = new ScreenVideoParameters();
}
</codeblock>
      <codeblock props="ios" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraScreenCaptureParameters2 : NSObject
@property(assign, nonatomic) BOOL captureAudio;
@property(strong, nonatomic) AgoraScreenAudioParameters* _Nonnull audioParams;
@property(assign, nonatomic) BOOL captureVideo;
@property(strong, nonatomic) AgoraScreenVideoParameters* _Nonnull videoParams;
@end
</codeblock>
      <codeblock props="cpp unreal" outputclass="language-cpp">struct ScreenCaptureParameters2 {
    bool captureAudio = false;
    ScreenAudioParameters audioParams;
    bool captureVideo = true;
    ScreenVideoParameters videoParams;
};
</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FScreenCaptureParameters2
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureParameters2&quot;)
	bool captureAudio = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureParameters2&quot;)
	FScreenAudioParameters audioParams = FScreenAudioParameters();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureParameters2&quot;)
	bool captureVideo = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureParameters2&quot;)
	FScreenVideoParameters videoParams = FScreenVideoParameters();
#if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
	FScreenCaptureParameters2(){}
	FScreenCaptureParameters2(const agora::rtc::ScreenCaptureParameters2 &amp; AgoraData){
		captureAudio = AgoraData.captureAudio;
		audioParams = FScreenAudioParameters(AgoraData.audioParams);
		captureVideo = AgoraData.captureVideo;
		videoParams = FScreenVideoParameters(AgoraData.videoParams);
	}
	agora::rtc::ScreenCaptureParameters2 CreateAgoraData() const {
		agora::rtc::ScreenCaptureParameters2 AgoraData;
		AgoraData.captureAudio = captureAudio;
		AgoraData.audioParams = audioParams.CreateAgoraData();
		AgoraData.captureVideo = captureVideo;
		AgoraData.videoParams = videoParams.CreateAgoraData();
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::ScreenCaptureParameters2&amp; AgoraData) const {
		audioParams.FreeAgoraData(AgoraData.audioParams);
		videoParams.FreeAgoraData(AgoraData.videoParams);
	}
#endif
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export class ScreenCaptureParameters2 {
  captureAudio?: boolean;
  audioParams?: ScreenAudioParameters
  captureVideo?: boolean;
  videoParams?: ScreenVideoParameters;
}</codeblock>
      <codeblock props="unity cs" outputclass="language-csharp">public class ScreenCaptureParameters2
    {
        public bool captureAudio { set; get; }
        public ScreenAudioParameters audioParams { set; get; }
        public bool captureVideo { set; get; }
        public ScreenVideoParameters videoParams { set; get; }

        public ScreenCaptureParameters2()
        {
            captureAudio = false;
            audioParams = new ScreenAudioParameters();
            captureAudio = true;
            videoParams = new ScreenVideoParameters();
        }
    };</codeblock>
      <codeblock props="rn" outputclass="language-typescript">export class ScreenCaptureParameters2 {

  captureAudio?: boolean;
  audioParams?: ScreenAudioParameters;
  captureVideo?: boolean;
  videoParams?: ScreenVideoParameters;
}</codeblock>
      <codeblock props="flutter" outputclass="language-dart">class ScreenCaptureParameters2 {

  const ScreenCaptureParameters2(
      {this.captureAudio,
      this.audioParams,
      this.captureVideo,
      this.videoParams});

  @JsonKey(name: 'captureAudio')
  final bool? captureAudio;

  @JsonKey(name: 'audioParams')
  final ScreenAudioParameters? audioParams;

  @JsonKey(name: 'captureVideo')
  final bool? captureVideo;

  @JsonKey(name: 'videoParams')
  final ScreenVideoParameters? videoParams;

  factory ScreenCaptureParameters2.fromJson(Map&lt;String, dynamic> json) =>
      _$ScreenCaptureParameters2FromJson(json);

  Map&lt;String, dynamic> toJson() => _$ScreenCaptureParameters2ToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
    </section>
    <section id="detailed_desc">
      <p/>
    </section>
    <section id="parameters">
      <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
      <parml>
      <plentry>
        <pt>captureAudio</pt>
        <pd>屏幕共享时是否采集系统音频： 
            <ul>
            <li><codeph><ph keyref="true"/></codeph>: 采集系统音频。</li>
            <li><codeph><ph keyref="false"/></codeph>: （默认）不采集系统音频。</li>
            </ul>
            <note><ul>
              <li props="android cpp unreal bp rn unity flutter">受系统限制，采集系统音频仅适用于 Android API 级别为 29 及以上，即 Android 10 及以上。</li>
              <li>为提高屏幕共享时采集系统音频的成功率，请确保你已调用 <xref keyref="setAudioScenario"/> 方法并设置音频场景为 <codeph><ph keyref="AUDIO_SCENARIO_GAME_STREAMING"></ph></codeph>。</li></ul></note></pd>
      </plentry>
      <plentry props="hmos ios cpp unreal bp rn unity electron flutter cs">
          <pt>audioParams</pt>
          <pd>共享屏幕流的音频配置。详见 <xref keyref="ScreenAudioParameters"/>。 
            <note type="attention">该参数仅在 <parmname>captureAudio</parmname> 为 <codeph><ph keyref="true"/></codeph> 时生效。</note></pd>
        </plentry>
      <plentry>
        <pt>captureVideo</pt>
        <pd>屏幕共享时是否采集屏幕： 
            <ul>
            <li><codeph><ph keyref="true"/></codeph>:（默认）采集屏幕。</li>
            <li><codeph><ph keyref="false"/></codeph>: 不采集屏幕。</li>
            </ul>
            <note props="android cpp unreal bp rn unity flutter">受系统限制，采集屏幕仅适用于 Android API 级别为 21 及以上，即 Android 5 及以上。</note></pd>
      </plentry>
      <plentry props="hmos ios cpp unreal bp rn unity electron flutter cs">
          <pt>videoParams</pt>
          <pd>共享屏幕流的视频编码配置。详见 <xref keyref="ScreenVideoParameters"/>。 
            <note type="attention">该参数仅在 <parmname>captureVideo</parmname> 为 <codeph><ph keyref="true"/></codeph> 时生效。</note></pd>
        </plentry>
      </parml> </section>
      <section id="sub-class" props="android hmos">
        <title>类</title>
        <parml>
          <plentry>
            <pt><ph keyref="ScreenVideoParameters"/></pt>
            <pd>共享屏幕流的视频编码配置。详见 <xref keyref="ScreenVideoParameters"/>。</pd>
          </plentry>
          <plentry>
            <pt><ph keyref="ScreenAudioParameters"/></pt>
            <pd>共享屏幕流的音频编码配置。详见 <xref keyref="ScreenAudioParameters"/>。</pd>
          </plentry>
        </parml>
      </section>
  </refbody>
</reference>
