<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_beautyoptions">
    <title> <ph keyref="BeautyOptions"/> </title>
    <shortdesc id="short"> <ph id="shortdesc">图像增强选项设置。</ph> </shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class BeautyOptions {
  public static final int LIGHTENING_CONTRAST_LOW = 0;
  public static final int LIGHTENING_CONTRAST_NORMAL = 1;
  public static final int LIGHTENING_CONTRAST_HIGH = 2;
  public int lighteningContrastLevel;
  public float lighteningLevel;
  public float smoothnessLevel;
  public float rednessLevel;
  public float sharpnessLevel;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraBeautyOptions : NSObject
@property(nonatomic, assign) AgoraLighteningContrastLevel lighteningContrastLevel;
@property(nonatomic, assign) float lighteningLevel;
@property(nonatomic, assign) float smoothnessLevel;
@property(nonatomic, assign) float rednessLevel;
@property(nonatomic, assign) float sharpnessLevel;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct BeautyOptions {
    enum LIGHTENING_CONTRAST_LEVEL {
            LIGHTENING_CONTRAST_LOW = 0,
            LIGHTENING_CONTRAST_NORMAL = 1,
            LIGHTENING_CONTRAST_HIGH = 2,
  };

    LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel;

    float lighteningLevel;

    float smoothnessLevel;

    float rednessLevel;

    float sharpnessLevel;

  BeautyOptions(LIGHTENING_CONTRAST_LEVEL contrastLevel, float lightening, float smoothness, float redness, float sharpness) : lighteningContrastLevel(contrastLevel), lighteningLevel(lightening), smoothnessLevel(smoothness), rednessLevel(redness), sharpnessLevel(sharpness) {}

  BeautyOptions() : lighteningContrastLevel(LIGHTENING_CONTRAST_NORMAL), lighteningLevel(0), smoothnessLevel(0), rednessLevel(0), sharpnessLevel(0) {}
};
</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FBeautyOptions
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|BeautyOptions")
	ELIGHTENING_CONTRAST_LEVEL lighteningContrastLevel = ELIGHTENING_CONTRAST_LEVEL::LIGHTENING_CONTRAST_NORMAL;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|BeautyOptions")
	float lighteningLevel = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|BeautyOptions")
	float smoothnessLevel = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|BeautyOptions")
	float rednessLevel = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|BeautyOptions")
	float sharpnessLevel = 0;
	FBeautyOptions(){}
	FBeautyOptions(const agora::rtc::BeautyOptions &amp; AgoraData){
		lighteningContrastLevel = static_cast&lt;ELIGHTENING_CONTRAST_LEVEL&gt;(AgoraData.lighteningContrastLevel);
		lighteningLevel = AgoraData.lighteningLevel;
		smoothnessLevel = AgoraData.smoothnessLevel;
		rednessLevel = AgoraData.rednessLevel;
		sharpnessLevel = AgoraData.sharpnessLevel;
	}
	agora::rtc::BeautyOptions CreateAgoraData() const {
		agora::rtc::BeautyOptions AgoraData;
		AgoraData.lighteningContrastLevel = static_cast&lt;agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_LEVEL&gt;(lighteningContrastLevel);
		AgoraData.lighteningLevel = lighteningLevel;
		AgoraData.smoothnessLevel = smoothnessLevel;
		AgoraData.rednessLevel = rednessLevel;
		AgoraData.sharpnessLevel = sharpnessLevel;
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::BeautyOptions&amp; AgoraData) const {
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class BeautyOptions {
  
  lighteningContrastLevel?: LighteningContrastLevel;
  
  lighteningLevel?: number;
  
  smoothnessLevel?: number;
  
  rednessLevel?: number;
  
  sharpnessLevel?: number;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class BeautyOptions
    {
        public BeautyOptions()
        {
            lighteningContrastLevel = LIGHTENING_CONTRAST_LEVEL.LIGHTENING_CONTRAST_NORMAL;
            this.lighteningLevel = 0;
            this.smoothnessLevel = 0;
            this.rednessLevel = 0;
            this.sharpnessLevel = 0;
        }

        public BeautyOptions(
            LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel, float lighteningLevel, float smoothnessLevel,
            float rednessLevel, float sharpnessLevel)
        {
            this.lighteningContrastLevel = lighteningContrastLevel;
            this.lighteningLevel = lighteningLevel;
            this.smoothnessLevel = smoothnessLevel;
            this.rednessLevel = rednessLevel;
            this.sharpnessLevel = sharpnessLevel;
        }

        public LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel { set; get; }

        public float lighteningLevel { set; get; }

        public float smoothnessLevel { set; get; }

        public float rednessLevel { set; get; }

        public float sharpnessLevel { set; get; }
    }

        public LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel { set; get; }
        public float lighteningLevel { set; get; }
        public float smoothnessLevel { set; get; }
        public float rednessLevel { set; get; }
        public float sharpnessLevel { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class BeautyOptions {
  
  lighteningContrastLevel?: LighteningContrastLevel;
  
  lighteningLevel?: number;
  
  smoothnessLevel?: number;
  
  rednessLevel?: number;
  
  sharpnessLevel?: number;
}</codeblock>
<codeblock props="flutter" outputclass="language-dart">class BeautyOptions {
    const BeautyOptions(
        {this.lighteningContrastLevel,
        this.lighteningLevel,
        this.smoothnessLevel,
        this.rednessLevel,
        this.sharpnessLevel});
  
    @JsonKey(name: 'lighteningContrastLevel')
    final LighteningContrastLevel? lighteningContrastLevel;
    @JsonKey(name: 'lighteningLevel')
    final double? lighteningLevel;
    @JsonKey(name: 'smoothnessLevel')
    final double? smoothnessLevel;
    @JsonKey(name: 'rednessLevel')
    final double? rednessLevel;
    @JsonKey(name: 'sharpnessLevel')
    final double? sharpnessLevel;
    factory BeautyOptions.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
        _$BeautyOptionsFromJson(json);
    Map&lt;String, dynamic&gt; toJson() =&gt; _$BeautyOptionsToJson(this);
  }</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title> <text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/>
            </title>
            <parml>
            <plentry props="android ios">
                <pt props="android ios">lighteningContrastLevel</pt>
                <pd>
                    <p>对比度，常与 <parmname>lighteningLevel</parmname> 搭配使用。取值越大，明暗对比程度越大。<ph props="apple bp cpp cs electron flutter rn unity unreal">详见 <xref keyref="LIGHTENING_CONTRAST_LEVEL"/>。</ph>
                    <ul props="android hmos">
                    <li><ph keyref="LIGHTENING_CONTRAST_LOW"/> (0)：低对比度。</li>
                    <li><ph keyref="LIGHTENING_CONTRAST_NORMAL"/> (1)：正常对比度。</li>
                    <li><ph keyref="LIGHTENING_CONTRAST_HIGH"/> (2)：高对比度。</li>
                    </ul></p>
                </pd>
                <pd props="android">对比度等级，用于配合 <codeph>lighteningLevel</codeph> 参数使用。值越大，图像中明暗差异越明显。
                    <ul>
                        <li><codeph>LIGHTENING_CONTRAST_LOW (0)</codeph>：低对比度等级。</li>
                        <li><codeph>LIGHTENING_CONTRAST_NORMAL (1)</codeph>：标准对比度等级。</li>
                        <li><codeph>LIGHTENING_CONTRAST_HIGH (2)</codeph>：高对比度等级。</li>
                        </ul>
                    </pd>
                <pd props="ios">对比度等级，与 <codeph>lighteningLevel</codeph> 参数配合使用。值越大，明暗对比越强。详见 <xref keyref="LIGHTENING_CONTRAST_LEVEL"/>。</pd>
                </plentry>
            <plentry props="android ios">
                <pt props="android ios">lighteningLevel</pt>
                <pd>
                    <p>美白程度，取值范围为 [0.0,1.0]，其中 0.0 表示原始亮度，默认值为 <ph props="ios">0.7</ph><ph props="android hmos">0.6</ph><ph props="bp cpp cs electron flutter rn unity unreal">0.0</ph>。取值越大，美白程度越大。</p>
                </pd>
                <pd props="android">美白等级，取值范围为 [0.0, 1.0]。0.0 表示使用原始亮度，默认值为 0.6。值越大，美白程度越明显。</pd>
                <pd props="ios">美白等级。取值范围为 [0.0, 1.0]，其中 0.0 表示原始亮度，默认值为 0.7。值越大，美白程度越高。</pd>
            </plentry>
            <plentry props="android ios">
                <pt props="android ios">smoothnessLevel</pt>
                <pd>
                    <p>磨皮程度，取值范围为 [0.0,1.0]，其中 0.0 表示原始磨皮程度，默认值为 <ph props="android hmos ios">0.5</ph><ph props="bp cpp cs electron flutter rn unity unreal">0.0</ph>。取值越大，磨皮程度越大。</p>
                </pd>
                <pd props="android">磨皮等级，取值范围为 [0.0, 1.0]。0.0 表示使用原始磨皮效果，默认值为 0.5。值越大，磨皮程度越明显。</pd>
                <pd props="ios">磨皮等级。取值范围为 [0.0, 1.0]，其中 0.0 表示原始平滑度，默认值为 0.5。值越大，磨皮效果越明显。</pd>
            </plentry>
            <plentry props="android ios">
                <pt props="android ios">rednessLevel</pt>
                <pd>
                    <p>红润度，取值范围为 [0.0,1.0]，其中 0.0 表示原始红润度，默认值为 <ph props="android hmos ios">0.1</ph><ph props="bp cpp cs electron flutter rn unity unreal">0.0</ph>。取值越大，红润程度越大。</p>
                </pd>
                <pd props="android">红润等级，取值范围为 [0.0, 1.0]。0.0 表示使用原始红润值，默认值为 0.1。值越大，红润程度越高。</pd>
                <pd props="ios">红润等级。取值范围为 [0.0, 1.0]，其中 0.0 表示原始红润度，默认值为 0.1。值越大，红润程度越高。</pd>
            </plentry>
            <plentry props="android ios">
                <pt props="android ios">sharpnessLevel</pt>
                <pd>
                    <p>锐化程度，取值范围为 [0.0,1.0]，其中 0.0 表示原始锐度，默认值为 <ph props="ios">0.1</ph><ph props="android hmos">0.3</ph><ph props="bp cpp cs electron flutter rn unity unreal">0.0</ph>。取值越大，锐化程度越大。</p>
                </pd>
                <pd props="android">锐化等级，取值范围为 [0.0, 1.0]。0.0 表示使用原始锐化程度，默认值为 0.3。值越大，画面越清晰。</pd>
                <pd props="ios">锐化等级。取值范围为 [0.0, 1.0]，其中 0.0 表示原始锐度，默认值为 0.1。值越大，图像越清晰。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
