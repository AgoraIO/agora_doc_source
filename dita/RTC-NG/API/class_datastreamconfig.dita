<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_datastreamconfig">
    <title><ph keyref="DataStreamConfig"/></title>
    <shortdesc id="short"><ph id="shortdesc">数据流配置项。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class DataStreamConfig {
  public boolean syncWithAudio = false;
  public boolean ordered = false;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">export class DataStreamConfig {
  public syncWithAudio: boolean = false;
  public ordered: boolean = false;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraDataStreamConfig: NSObject
@property (assign, nonatomic) BOOL ordered;
@property (assign, nonatomic) BOOL syncWithAudio;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct DataStreamConfig {
    bool syncWithAudio;
    bool ordered;
    };</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FDataStreamConfig
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|DataStreamConfig")
	bool syncWithAudio = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|DataStreamConfig")
	bool ordered = false;
	FDataStreamConfig(){}
	FDataStreamConfig(const agora::rtc::DataStreamConfig &amp; AgoraData){
		syncWithAudio = AgoraData.syncWithAudio;
		ordered = AgoraData.ordered;
	}
	agora::rtc::DataStreamConfig CreateAgoraData() const {
		agora::rtc::DataStreamConfig AgoraData;
		AgoraData.syncWithAudio = syncWithAudio;
		AgoraData.ordered = ordered;
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::DataStreamConfig &amp; AgoraData) const {
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class DataStreamConfig {
  
  syncWithAudio?: boolean;
  
  ordered?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class DataStreamConfig
    {
        public bool syncWithAudio;
        public bool ordered;
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class DataStreamConfig {
  
  syncWithAudio?: boolean;
  
  ordered?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class DataStreamConfig {
  const DataStreamConfig({this.syncWithAudio, this.ordered});

  @JsonKey(name: 'syncWithAudio')
  final bool? syncWithAudio;
  @JsonKey(name: 'ordered')
  final bool? ordered;
  factory DataStreamConfig.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$DataStreamConfigFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$DataStreamConfigToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <p>下表展示了在不同参数设置下 SDK 的行为：
| <codeph>syncWithAudio</codeph> | <codeph>ordered</codeph> | SDK 行为 |
|----------------|-----------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| <codeph><ph keyref="false"/></codeph>           | <codeph><ph keyref="false"/></codeph>      | 接收端接收到数据包后，SDK 会立即触发 <xref keyref="onStreamMessage"/> 回调。|
| <codeph><ph keyref="true"/></codeph>          | <codeph><ph keyref="false"/></codeph>      | 如果数据包的延迟在音频延迟范围内，SDK 会在同步的音频包播放时触发回调；如果数据包延迟超过音频延迟，SDK 会在接收到数据包后立即触发回调。|
| <codeph><ph keyref="false"/></codeph>           | <codeph><ph keyref="true"/></codeph>     | 如果数据包延迟小于 5 秒，SDK 会对数据包进行顺序校正；如果延迟超过 5 秒，SDK 会丢弃该数据包。|
| <codeph><ph keyref="true"/></codeph>          | <codeph><ph keyref="true"/></codeph>     | 如果数据包延迟在音频延迟范围内，SDK 会对数据包进行顺序校正；如果延迟超过音频延迟，SDK 会丢弃该数据包。|<codeph>syncWithAudio</codeph> | <codeph>ordered</codeph> | SDK 行为 |
|----------------|-----------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| <codeph><ph keyref="false"/></codeph>           | <codeph><ph keyref="false"/></codeph>      | 接收端接收到数据包后，SDK 会立即触发 <xref keyref="onStreamMessage"/> 回调。|
| <codeph><ph keyref="true"/></codeph>          | <codeph><ph keyref="false"/></codeph>      | 如果数据包的延迟在音频延迟范围内，SDK 会在同步的音频包播放时触发回调；如果数据包延迟超过音频延迟，SDK 会在接收到数据包后立即触发回调。|
| <codeph><ph keyref="false"/></codeph>           | <codeph><ph keyref="true"/></codeph>     | 如果数据包延迟小于 5 秒，SDK 会对数据包进行顺序校正；如果延迟超过 5 秒，SDK 会丢弃该数据包。|
| <codeph><ph keyref="true"/></codeph>          | <codeph><ph keyref="true"/></codeph>     | 如果数据包延迟在音频延迟范围内，SDK 会对数据包进行顺序校正；如果延迟超过音频延迟，SDK 会丢弃该数据包。|</p>
            <table id="table_uxz_bjk_t4b">
            <tgroup cols="3">
                <colspec colnum="1" colname="col1"/>
                <colspec colnum="2" colname="col2"/>
                <colspec colnum="3" colname="col3"/>
                <thead>
                    <row>
                        <entry><codeph>syncWithAudio</codeph></entry>
                        <entry><codeph>ordered</codeph></entry>
                        <entry>SDK 行为</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><codeph><ph keyref="false"/></codeph></entry>
                        <entry><codeph><ph keyref="false"/></codeph></entry>
                        <entry>接收端接收到数据包后，SDK 立刻触发 <xref keyref="onStreamMessage"/> 回调。</entry>
                    </row>
                    <row>
                        <entry><codeph><ph keyref="true"/></codeph></entry>
                        <entry><codeph><ph keyref="false"/></codeph></entry>
                        <entry>如果数据包的延迟在音频延迟的范围内，SDK 会在播放音频的同时触发与该音频包同步的 <ph keyref="onStreamMessage"/> 回调。如果数据包的延迟超出了音频延迟，SDK 会在接收到该数据包时立刻触发 </entry>
                    </row>
                    <row>
                        <entry><codeph><ph keyref="false"/></codeph></entry>
                        <entry><codeph><ph keyref="true"/></codeph></entry>
                        <entry>如果数据包的延迟在 5 秒以内，SDK 会修正数据包的乱序问题。如果数据包的延迟超出 5 秒，SDK 会丢弃该数据包。</entry>
                    </row>
                    <row>
                        <entry><codeph><ph keyref="true"/></codeph></entry>
                        <entry><codeph><ph keyref="true"/></codeph></entry>
                        <entry>如果数据包的延迟在音频延迟的范围内，SDK 会修正数据包的乱序问题。如果数据包的延迟超出音频延迟，SDK 会丢弃该数据包。</entry>
                    </row>
                </tbody>
            </tgroup>
            </table> </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="ios">
                <pt props="ios">syncWithAudio</pt>
                <pd>
                    <p>是否与本地发送的音频流同步。
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>: 数据流与音频流同步。该设置适用于歌词同步等特殊场景。</li>
                    <li><codeph><ph keyref="false"/></codeph>: 数据流与音频流不同步。该设置适用于需要数据包立刻到达接收端的场景。</li>
                    </ul> 设置数据流与音频流同步后，如果数据包的延迟在音频延迟的范围内，SDK 会在播放音频的同时触发与该音频包同步的 <xref keyref="onStreamMessage"/> 回调。</p>
                </pd>
                <pd props="ios">是否将数据包与发布的音频包同步。
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：将数据包与音频包同步，适用于歌词同步等特殊场景。</li>
                        <li><codeph><ph keyref="false"/></codeph>：不与音频包同步，适用于需要数据包立即到达接收端的场景。</li>
                        </ul>
                    </pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">ordered</pt>
                <pd>
                    <p>是否保证接收到的数据按发送的顺序排列。
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>: 保证 SDK 按照发送方发送的顺序输出数据包。</li>
                    <li><codeph><ph keyref="false"/></codeph>: 不保证 SDK 按照发送方发送的顺序输出数据包。</li>
                    </ul> 当需要数据包立刻到达接收端时，不能将该参数设置为 <codeph><ph keyref="true"/></codeph>。</p>
                </pd>
                <pd props="ios">是否保证接收端按发送顺序接收数据。
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：保证接收端按发送顺序接收数据。</li>
                        <li><codeph><ph keyref="false"/></codeph>：不保证接收端按发送顺序接收数据。 如果你希望接收端立即接收数据包，请不要将该参数设置为 <codeph><ph keyref="true"/></codeph>。</li>
                        </ul>
                    </pd>
                </plentry>
            </parml> </section>
    </refbody>
</reference>
