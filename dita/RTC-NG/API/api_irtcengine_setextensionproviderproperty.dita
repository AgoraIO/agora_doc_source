<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setextensionproviderproperty">
    <title><ph keyref="setExtensionProviderProperty"/></title>
    <shortdesc id="short"><ph id="shortdesc">设置扩展插件提供方的属性。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setExtensionProviderProperty"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setExtensionProviderProperty(String provider, String key, String value);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setExtensionProviderPropertyWithVendor:(NSString * _Nonnull)provider
                                          key:(NSString * _Nonnull)key
                                        value:(NSString * _Nonnull)value NS_SWIFT_NAME(setExtensionProviderPropertyWithVendor(_:key:value:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setExtensionProviderProperty(const char* provider, const char* key, const char* value) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = "Agora|IRtcEngine")
	int SetExtensionProviderProperty(const FString&amp; provider, const FString&amp; key, const FString&amp; value);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setExtensionProviderProperty(
    provider: string,
    key: string,
    value: string
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetExtensionProviderProperty(string provider, string key, string value);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setExtensionProviderProperty(
    provider: string,
    key: string,
    value: string
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setExtensionProviderProperty(
    {required String provider, required String key, required String value});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p>调用该方法可设置扩展插件提供方的属性，并根据提供方的类型初始化相关参数。</p>
            <note type="attention" props="cpp">如果你需要为多个扩展插件设置扩展插件提供方的属性，需要多次调用该方法。</note>
            <note type="attention" props="apple">如果你想为多个扩展设置扩展提供方的属性，需要多次调用此方法。</note>
            <note type="attention" props="android">如果你需要为多个扩展设置扩展提供方的属性，需要多次调用此方法。</note>
            </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>在调用 <xref keyref="enableExtension"/> 之前，<xref keyref="registerExtension"/> 之后调用此方法。</p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <p>无。</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry conkeyref="setExtensionProperty/vendor">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="setExtensionProperty/key">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="setExtensionProperty/value">
                <pt/>
                <pd/>
            </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">provider</pt>
                <pd props="android ios">扩展提供方的名称。</pd>
                <pd props="cpp">扩展插件提供方的名称。</pd>
            </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">key</pt>
                <pd props="android">扩展属性的键名。</pd>
                <pd props="ios">扩展的键名。</pd>
                <pd props="cpp">扩展插件的键名。</pd>
            </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">value</pt>
                <pd props="android">扩展属性键对应的值。</pd>
                <pd props="ios">扩展键的值。</pd>
                <pd props="cpp">扩展插件键名对应的值。</pd>
            </plentry>
        </parml> </section>
        <section id="return_values" props="bp cs electron flutter native rn unity unreal">
            <title><ph keyref="return-section-title"/></title>
        <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
        <ul props="bp cs electron rn unity unreal">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul>
        <p props="native"><ul>
                        <li>0：方法调用成功。</li>
                        <li>&lt; 0：方法调用失败。</li>
                        </ul>
                    </p>
    </section>
    </refbody>
</reference>
