<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setvideoscenario">
    <title><ph keyref="setVideoScenario"/></title>
    <shortdesc id="short"><ph id="shortdesc">设置视频业务场景。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setVideoScenario"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setVideoScenario(Constants.VideoScenario scenarioType);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setVideoScenario:(AgoraApplicationScenarioType)scenarioType NS_SWIFT_NAME(setVideoScenario(_:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setVideoScenario(VIDEO_APPLICATION_SCENARIO_TYPE scenarioType) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetVideoScenario(EVIDEO_APPLICATION_SCENARIO_TYPE scenarioType);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setVideoScenario(scenarioType: VideoApplicationScenarioType): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetVideoScenario(VIDEO_APPLICATION_SCENARIO_TYPE scenarioType);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setVideoScenario(scenarioType: VideoApplicationScenarioType): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> setVideoScenario(VideoApplicationScenarioType scenarioType);</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>自从</dt>
                <dd>v4.2.0</dd>
            </dlentry>
            </dl>
            <p>成功调用该方法设置视频业务场景后，SDK 会基于指定场景启用最佳实践策略，自动调整关键性能指标，进而优化视频体验质量。</p>
            <note type="attention">该方法需要在加入频道前调用。</note>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>scenarioType</pt>
                <pd>视频业务场景。详见 <xref keyref="VIDEO_APPLICATION_SCENARIO_TYPE"/>。
                <p id="meeting">设置为 <apiname keyref="APPLICATION_SCENARIO_MEETING"/> (1) 后，SDK 会启用以下策略：
                    <ul>
                        <li>针对会议场景对小流码率要求较高的情况，自动启用多项抗弱网技术，提升小流的抗弱网能力，确保多路流订阅时接收端的流畅性。</li>
                        <li>实时监测接收端大流的订阅人数，根据订阅人数动态调节大流配置：<ul>
                            <li>无人订阅大流时，会自动降低大流的码率和帧率，节省上行带宽和消耗。</li>
                            <li>有人订阅大流时，大流会重置为用户最近一次调用 <xref keyref="setVideoEncoderConfiguration"/> 时的 <xref keyref="VideoEncoderConfiguration"/> 配置。如果用户此前没有进行设置，则使用如下值：
                                <ul props="cpp unreal bp flutter unity">
                                <li>视频分辨率：桌面端为 1280 × 720；移动端为 960 × 540</li>
                                <li>视频帧率：15 fps</li>
                                <li>码率：桌面端为 1600 Kbps；移动端为 1000 Kbps</li>
                                </ul>
                                <ul props="android ios rn">
                                <li>视频分辨率：960 × 540</li>
                                <li>视频帧率：15 fps</li>
                                <li>码率：1000 Kbps</li>
                                </ul>
                                <ul props="mac electron cs">
                                <li>视频分辨率：1280 × 720</li>
                                <li>视频帧率：15 fps</li>
                                <li>码率：1600 Kbps</li>
                                </ul>
                            </li></ul>
                        </li>
                        <li>实时监测接收端小流的订阅人数，根据订阅人数动态开启和关闭小流：
                            <note>如果用户已调用 <xref keyref="setDualStreamMode2"/> 将小流设置为始终不发送 (<apiname keyref="DISABLE_SIMULCAST_STREAM"/>)，会议场景对小流的动态开关不生效。</note><ul>
                            <li>无人订阅小流时，自动关闭小流，节省上行带宽和消耗。</li>
                            <li>有人订阅小流时，开启小流并重置为用户最近一次调用 <apiname keyref="setDualStreamMode2"/> 时的 <xref keyref="SimulcastStreamConfig"/> 配置。如果用户此前没有进行设置，则使用如下值：
                                <ul>
                                <li>视频分辨率：480 × 272</li>
                                <li>视频帧率：15 fps</li>
                                <li>码率：500 Kbps</li>
                                </ul>
                            </li></ul>
                        </li>
                    </ul>
                </p>
                </pd>
            </plentry>
            </parml>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp electron unity cs rn">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph><ul>
            <li>-1：一般性的错误（未明确归类）。</li>
            <li>-4：不支持设置视频业务场景。可能的原因是当前使用的是音频 SDK。</li>
            <li>-7：<apiname keyref="IRtcEngine" /> 对象尚未初始化。你需要在调用该方法前成功初始化 <apiname keyref="IRtcEngine" /> 对象。</li>
            </ul>
            </li>
            </ul>
        </section>
    </refbody>
</reference>
