<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_externalvideoframe">
    <title><ph keyref="ExternalVideoFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">外部视频帧。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class AgoraVideoFrame {
                    public static final int FORMAT_NONE = -1;
                    public static final int FORMAT_TEXTURE_2D = 10;
                    public static final int FORMAT_TEXTURE_OES = 11;
                    public static final int FORMAT_I420 = 1;
                    public static final int FORMAT_BGRA = 2;
                    public static final int FORMAT_NV21 = 3;
                    public static final int FORMAT_RGBA = 4;
                    public static final int FORMAT_I422 = 16;
                    public static final int BUFFER_TYPE_NONE = -1;
                    public static final int BUFFER_TYPE_BUFFER = 1;
                    public static final int BUFFER_TYPE_ARRAY = 2;
                    public static final int BUFFER_TYPE_TEXTURE = 3;
                    public int format;
                    public long timeStamp;
                    public int stride;
                    public int height;
                    public int textureID;
                    public boolean syncMode;
                    public float[] transform;
                    public javax.microedition.khronos.egl.EGLContext eglContext11;
                    public android.opengl.EGLContext eglContext14;
                    public byte[] buf;
                    public int cropLeft;
                    public int cropTop;
                    public int cropRight;
                    public int cropBottom;
                    public int rotation;
                    }</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraVideoFrame : NSObject
@property(assign, nonatomic) NSInteger format;
@property(assign, nonatomic) CMTime time;
@property(assign, nonatomic) int stride DEPRECATED_MSG_ATTRIBUTE("use strideInPixels instead");
@property(assign, nonatomic) int strideInPixels;
@property(assign, nonatomic) int height;
@property(assign, nonatomic) CVPixelBufferRef _Nullable textureBuf;
@property(strong, nonatomic) NSData *_Nullable dataBuf;
@property(assign, nonatomic) int cropLeft;
@property(assign, nonatomic) int cropTop;
@property(assign, nonatomic) int cropRight;
@property(assign, nonatomic) int cropBottom;
@property(assign, nonatomic) int rotation;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct ExternalVideoFrame {
  ExternalVideoFrame()
      : type(VIDEO_BUFFER_RAW_DATA),
        format(VIDEO_PIXEL_DEFAULT),
        buffer(NULL),
        stride(0),
        height(0),
        cropLeft(0),
        cropTop(0),
        cropRight(0),
        cropBottom(0),
        rotation(0),
        timestamp(0),
        eglContext(NULL),
        eglType(EGL_CONTEXT10),
        textureId(0),
        metadata_buffer(NULL),
        metadata_size(0),
        d3d11_texture_2d(NULL),
        texture_slice_index(0){}
  enum EGL_CONTEXT_TYPE {
    EGL_CONTEXT10 = 0,
    EGL_CONTEXT14 = 1,
  };
  enum VIDEO_BUFFER_TYPE {
    VIDEO_BUFFER_RAW_DATA = 1,
    VIDEO_BUFFER_ARRAY = 2,
    VIDEO_BUFFER_TEXTURE = 3,
  };
  VIDEO_BUFFER_TYPE type;
  VIDEO_PIXEL_FORMAT format;
  void* buffer;
  int stride;
  int height;
  int cropLeft;
  int cropTop;
  int cropRight;
  int cropBottom;
  int rotation;
  long long timestamp;
  void *eglContext;
  EGL_CONTEXT_TYPE eglType;
  int textureId;
  float matrix[16];
  uint8_t* metadata_buffer;
  int metadata_size;
  void *d3d11_texture_2d;
  int texture_slice_index;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ExternalVideoFrame {
  type?: VideoBufferType;
  format?: VideoPixelFormat;
  buffer?: Uint8Array;
  stride?: number;
  height?: number;
  cropLeft?: number;
  cropTop?: number;
  cropRight?: number;
  cropBottom?: number;
  rotation?: number;
  timestamp?: number;
  eglType?: EglContextType;
  textureId?: number;
  matrix?: number[];
  metadata_buffer?: Uint8Array;
  metadata_size?: number;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ExternalVideoFrame
    {
        public VIDEO_BUFFER_TYPE type;
        public VIDEO_PIXEL_FORMAT format;
        public byte[] buffer;
        public int stride;
        public int height;
        public int cropLeft;
        public int cropTop;
        public int cropRight;
        public int cropBottom;
        public int rotation;
        public long timestamp;
        public byte[] eglContext;
        public EGL_CONTEXT_TYPE eglType;
        public int textureId;
        public byte[] metadata_buffer;
        public int metadata_size;
        public IntPtr d3d11_texture_2d;
        public int texture_slice_index;
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ExternalVideoFrame {
  type?: VideoBufferType;
  format?: VideoPixelFormat;
  buffer?: Uint8Array;
  stride?: number;
  height?: number;
  cropLeft?: number;
  cropTop?: number;
  cropRight?: number;
  cropBottom?: number;
  rotation?: number;
  timestamp?: number;
  eglType?: EglContextType;
  textureId?: number;
  matrix?: number[];
  metadata_buffer?: Uint8Array;
  metadata_size?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class ExternalVideoFrame {
  const ExternalVideoFrame(
      {this.type,
      this.format,
      this.buffer,
      this.stride,
      this.height,
      this.cropLeft,
      this.cropTop,
      this.cropRight,
      this.cropBottom,
      this.rotation,
      this.timestamp,
      this.eglType,
      this.textureId,
      this.matrix,
      this.metadataBuffer,
      this.metadataSize,
      this.alphaBuffer,
      this.textureSliceIndex});

  @JsonKey(name: &#x27;type&#x27;)
  final VideoBufferType? type;

  @JsonKey(name: &#x27;format&#x27;)
  final VideoPixelFormat? format;

  @JsonKey(name: &#x27;buffer&#x27;, ignore: true)
  final Uint8List? buffer;

  @JsonKey(name: &#x27;stride&#x27;)
  final int? stride;

  @JsonKey(name: &#x27;height&#x27;)
  final int? height;

  @JsonKey(name: &#x27;cropLeft&#x27;)
  final int? cropLeft;

  @JsonKey(name: &#x27;cropTop&#x27;)
  final int? cropTop;

  @JsonKey(name: &#x27;cropRight&#x27;)
  final int? cropRight;

  @JsonKey(name: &#x27;cropBottom&#x27;)
  final int? cropBottom;

  @JsonKey(name: &#x27;rotation&#x27;)
  final int? rotation;

  @JsonKey(name: &#x27;timestamp&#x27;)
  final int? timestamp;

  @JsonKey(name: &#x27;eglType&#x27;)
  final EglContextType? eglType;

  @JsonKey(name: &#x27;textureId&#x27;)
  final int? textureId;

  @JsonKey(name: &#x27;matrix&#x27;)
  final List&lt;double&gt;? matrix;

  @JsonKey(name: &#x27;metadata_buffer&#x27;, ignore: true)
  final Uint8List? metadataBuffer;

  @JsonKey(name: &#x27;metadata_size&#x27;)
  final int? metadataSize;

  @JsonKey(name: &#x27;alphaBuffer&#x27;, ignore: true)
  final Uint8List? alphaBuffer;

  @JsonKey(name: &#x27;texture_slice_index&#x27;)
  final int? textureSliceIndex;

  factory ExternalVideoFrame.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$ExternalVideoFrameFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$ExternalVideoFrameToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc" props="android">
            <dl outputclass="deprecated">
            <dlentry>
                <dt>弃用：</dt>
                <dd>该类已废弃。</dd>
            </dlentry>
            </dl>
        </section>
        <section id="parameters">
            <title><text
            conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"
            /></title>
            <parml>
            <plentry props="cpp unreal bp unity rn electron flutter cs">
                <pt>type</pt>
                <pd>
                    <p>视频类型。详见 <xref keyref="VIDEO_BUFFER_TYPE"/>。</p>
                </pd>
            </plentry>
            <plentry>
                <pt>format</pt>
                <pd props="cpp unreal bp unity rn electron flutter cs"
                    id="windows-format">像素格式。详见 <xref
                    keyref="VIDEO_PIXEL_FORMAT"/>。</pd>
                <pd props="ios mac" id="oc-format">传入的视频帧的格式，必须指定为下面的某一个值：
                
                    <ul>
                    <li>1: I420。</li>
                    <li>2: BGRA。</li>
                    <li>3: NV21。</li>
                    <li>4: RGBA。</li>
                    <li>5: IMC2。</li>
                    <li>7: ARGB。</li>
                    <li>8: NV12。</li>
                    <li>12: iOS 纹理 (CVPixelBufferRef)。</li>
                    <li>16: I422。</li>
                    </ul> </pd>
                <pd props="android">视频数据的格式：
                
                    <ul>
                    <li>10：TEXTURE_2D。</li>
                    <li>11：TEXTURE_OES，通常摄像头采集的数据为这种格式。</li>
                    <li>1：I420。</li>
                    <li>3：NV21。</li>
                    <li>4：RGBA。</li>
                    <li>16：I422。</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp unity electron rn flutter cs">buffer</pt>
                <pt props="android">buf</pt>
                <pt props="ios mac">dataBuf</pt>
                <pd props="cpp unreal bp android unity electron rn flutter cs">视频缓冲区。</pd>
                <pd props="android">该参数仅适用于非 Texture 格式的视频数据。</pd>
                <pd props="ios mac">原始数据缓冲区，该参数不用于 iOS 纹理。</pd>
            </plentry>
            <plentry props="ios mac">
                <pt>textureBuf</pt>
                <pd>iOS 纹理的 Buffer。</pd>
            </plentry>
            <plentry>
                <pt>stride</pt>
                <pd>传入视频帧的行间距，单位为像素而不是字节。对于 Texture，该值指的是 Texture 的宽度。
                
                    <p props="ios mac">
                    <dl outputclass="deprecated">
                    <dlentry>
                        <dt>弃用：</dt>
                        <dd>用 <parmname>strideInPixels</parmname> 代替。</dd>
                    </dlentry>
                    </dl>
                        <note type="attention">在处理视频数据时，需根据该参数处理每行像素数据之间的偏移量，否则可能导致图像失真。</note>
                    </p>
                </pd>
            </plentry>
            <plentry props="ios mac">
                <pt>strideInPixels</pt>
                <pd>该帧的行跨度，即相邻两行视频帧之间的像素点数。
           
                    <note type="attention">
                    <ul>
                    <li>该参数单位为像素，不是字节数。</li>
                    <li>如果视频为 Texture 格式，则将该参数设为 Texture 的宽度。</li>
                    <li>如果视频帧格式设为 12，则不使用该字段。</li>
                    <li>在处理视频数据时，需根据该参数处理每行像素数据之间的偏移量，否则可能导致图像失真。</li>
                    </ul> </note></pd>
            </plentry>
            <plentry>
                <pt>height</pt>
                <pd>传入视频帧的高度。</pd>
            </plentry>
            <plentry props="android">
                <pt>textureID</pt>
                <pd>该帧的 Texture ID。该参数仅适用于 Texture 格式的视频数据。</pd>
            </plentry>
            <plentry props="android">
                <pt>syncMode</pt>
                <pd>设置是否开启同步模式，开启后 SDK 会在 Texture 处理时进行等待。该参数仅适用于 Texture 格式的视频数据。
                    <ul id="ul_oxx_wmy_4qb">
                    <li><codeph><ph keyref="true"/></codeph>：开启同步模式。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不开启同步模式。</li>
                    </ul></pd>
            </plentry>
            <plentry props="android">
                <pt>transform</pt>
                <pd>Texture 帧额外的转换。该参数仅适用于 Texture 格式的视频数据。</pd>
            </plentry>
            <plentry props="android">
                <pt>eglContext11</pt>
                <pd>EGLContext11。该参数仅适用于 Texture 格式的视频数据。</pd>
            </plentry>
            <plentry props="android">
                <pt>eglContext14</pt>
                <pd>EGLContext14。该参数仅适用于 Texture 格式的视频数据。</pd>
            </plentry>
            <plentry props="cpp unreal bp unity rn electron flutter cs">
                <pt>eglContext</pt>
                <pd>该参数仅适用于 Texture 格式的视频数据。
                    <ul id="ul_fsv_shd_krb" props="cpp unreal bp unity rn electron flutter">
                    <li>当使用 Khronos 定义的 OpenGL 接口 (javax.microedition.khronos.egl.*)时，需要将 eglContext 设置给这个字段。</li>
                    <li>当使用 Android 定义的 OpenGL 接口 (android.opengl.*)时，需要将 eglContext 设置给这个字段。</li>
                    </ul></pd>
            </plentry>
            <plentry props="cpp unreal bp unity electron rn flutter cs">
                <pt>eglType</pt>
                <pd>该参数仅适用于 Texture 格式的视频数据。指该视频帧的 Texture ID。</pd>
            </plentry>
            <plentry props="cpp unreal bp unity electron rn flutter cs">
                <pt>textureId</pt>
                <pd>该参数仅适用于 Texture 格式的视频数据。为一个输入的 4x4 变换矩阵，典型值为一个单位矩阵。</pd>
            </plentry>
            <plentry props="electron rn flutter">
                <pt>matrix</pt>
                <pd>该参数仅适用于 Texture 格式的视频数据。为一个输入的 4x4 变换矩阵，典型值为一个单位矩阵。</pd>
            </plentry>
            <plentry props="cpp unreal bp unity electron rn cs flutter">
                <pt props="cpp unreal bp unity electron rn cs">metadata_buffer</pt>
                <pt props="flutter">metadataBuffer</pt>
                <pd>该参数仅适用于 Texture 格式的视频数据。指 MetaData 的数据缓冲区，默认值为 <codeph>NULL</codeph>。</pd>
            </plentry>
            <plentry props="cpp unreal bp unity electron rn cs flutter">
                <pt props="cpp unreal bp unity electron rn cs">metadata_size</pt>
                <pt props="flutter">metadataSize</pt>
                <pd>该参数仅适用于 Texture 格式的视频数据。指 MetaData 的大小，默认值为 <codeph>0</codeph>。</pd>
            </plentry>
            <plentry props="cpp unity electron">
                <pt>d3d11_texture_2d</pt>
                <pd>该参数仅适用于 Windows Texture 格式的视频数据。表示一个指向 <codeph>ID3D11Texture2D</codeph> 类型对象的指针，该类型对象被视频帧所使用。</pd>
            </plentry>
            <plentry props="cpp unity electron flutter">
                <pt props="cpp unity electron">texture_slice_index</pt>
                <pt props="flutter">textureSliceIndex</pt>
                <pd>该参数仅适用于 Windows Texture 格式的视频数据。表示在 <codeph>ID3D11Texture2D</codeph> 数组中，被视频帧使用的某一个 <codeph>ID3D11Texture2D</codeph> 纹理对象的索引。</pd>
            </plentry>
            <plentry>
                <pt>cropLeft</pt>
                <pd>原始数据相关字段。指定左边裁剪掉的像素数量。默认为 0。</pd>
                <pd props="android">该参数仅适用于非 Texture 格式的视频数据。</pd>
                <pd props="cpp unreal bp unity rn electron flutter cs">该参数仅适用于原始视频数据。</pd>
            </plentry>
            <plentry>
                <pt>cropTop</pt>
                <pd>原始数据相关字段。指定顶边裁剪掉的像素数量。默认为 0。</pd>
                <pd props="android">该参数仅适用于非 Texture 格式的视频数据。</pd>
                <pd props="cpp unreal bp unity electron rn flutter cs">该参数仅适用于原始视频数据。</pd>
            </plentry>
            <plentry>
                <pt>cropRight</pt>
                <pd>原始数据相关字段。指定右边裁剪掉的像素数量。默认为 0。</pd>
                <pd props="android">该参数仅适用于非 Texture 格式的视频数据。</pd>
                <pd props="cpp unreal bp unity electron rn flutter cs">该参数仅适用于原始视频数据。</pd>
            </plentry>
            <plentry>
                <pt>cropBottom</pt>
                <pd>原始数据相关字段。指定底边裁剪掉的像素数量。默认为 0。</pd>
                <pd props="android">该参数仅适用于非 Texture 格式的视频数据。</pd>
                <pd props="cpp unreal bp unity electron flutter rn cs">该参数仅适用于原始视频数据。</pd>
            </plentry>
            <plentry>
                <pt>rotation</pt>
                <pd>原始数据相关字段。指定是否对传入的视频组做顺时针旋转操作，可选值为 0， 90， 180， 270。默认为 0。</pd>
            </plentry>
            <plentry props="android cpp unreal bp unity electron flutter rn cs apple">
                <pt props="android cpp unreal bp unity electron flutter rn cs">timestamp</pt>
                <pt props="ios mac">time</pt>
                <pd>传入的视频帧的时间戳，以毫秒为单位。不正确的时间戳会导致丢帧或者音视频不同步。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
