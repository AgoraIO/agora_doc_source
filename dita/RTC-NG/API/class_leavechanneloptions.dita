<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_leavechanneloptions">
    <title><ph keyref="LeaveChannelOptions"/></title>
    <shortdesc id="short"><ph id="shortdesc">设置离开频道时的操作选项。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class LeaveChannelOptions {
  public boolean stopAudioMixing;
  public boolean stopAllEffect;
  public boolean stopMicrophoneRecording;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">export class LeaveChannelOptions {
  
  public stopAudioMixing: boolean;
  
  public stopAllEffect: boolean;
  
  public stopMicrophoneRecording: boolean;
  constructor() {
    this.stopAudioMixing = true;
    this.stopAllEffect = true;
    this.stopMicrophoneRecording = true;
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraLeaveChannelOptions : NSObject
@property(nonatomic, assign) BOOL stopAudioMixing;
@property(nonatomic, assign) BOOL stopAllEffect;
@property(nonatomic, assign) BOOL stopMicrophoneRecording;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct LeaveChannelOptions {
  bool stopAudioMixing;
  bool stopAllEffect;
  bool stopMicrophoneRecording;
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FLeaveChannelOptions
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LeaveChannelOptions")
	bool stopAudioMixing = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LeaveChannelOptions")
	bool stopAllEffect = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LeaveChannelOptions")
	bool stopMicrophoneRecording = true;
	
	FLeaveChannelOptions() {}
	FLeaveChannelOptions(const agora::rtc::LeaveChannelOptions&amp; AgoraData) {
		this-&gt;stopAudioMixing = AgoraData.stopAudioMixing;
		this-&gt;stopAllEffect = AgoraData.stopAllEffect;
		this-&gt;stopMicrophoneRecording = AgoraData.stopMicrophoneRecording;
	}
	agora::rtc::LeaveChannelOptions CreateAgoraData() const {
		agora::rtc::LeaveChannelOptions AgoraData;
		AgoraData.stopAudioMixing = this-&gt;stopAudioMixing;
		AgoraData.stopAllEffect = this-&gt;stopAllEffect;
		AgoraData.stopMicrophoneRecording = this-&gt;stopMicrophoneRecording;
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::LeaveChannelOptions&amp; AgoraData) const {
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class LeaveChannelOptions {
  
  stopAudioMixing?: boolean;
  
  stopAllEffect?: boolean;
  
  stopMicrophoneRecording?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class LeaveChannelOptions
    {
        public LeaveChannelOptions()
        {
            stopAudioMixing = true;
            stopAllEffect = true;
            stopMicrophoneRecording = true;
        }

        public bool stopAudioMixing { set; get; }
        public bool stopAllEffect { set; get; }
        public bool stopMicrophoneRecording { set; get; }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class LeaveChannelOptions {
  
  stopAudioMixing?: boolean;
  
  stopAllEffect?: boolean;
  
  stopMicrophoneRecording?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class LeaveChannelOptions {
  const LeaveChannelOptions(
      {this.stopAudioMixing, this.stopAllEffect, this.stopMicrophoneRecording});

  @JsonKey(name: 'stopAudioMixing')
  final bool? stopAudioMixing;
  @JsonKey(name: 'stopAllEffect')
  final bool? stopAllEffect;
  @JsonKey(name: 'stopMicrophoneRecording')
  final bool? stopMicrophoneRecording;
  factory LeaveChannelOptions.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$LeaveChannelOptionsFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$LeaveChannelOptionsToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">stopAudioMixing</pt>
                <pd>离开频道时，是否停止播放音乐文件及混音：
                    <ul id="ul_ttv_f2n_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：（默认）停止播放音乐文件及混音。</li>
                    <li><codeph><ph keyref="false"/></codeph>： 不停止播放音乐文件及混音。</li>
                    </ul> </pd>
                <pd props="android">是否在用户离开频道时停止播放和混音音乐文件。
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：（默认）停止播放和混音音乐文件。</li>
                        <li><codeph><ph keyref="false"/></codeph>：不停止播放和混音音乐文件。</li>
                        </ul>
                    </pd>
                <pd props="ios">用户离开频道时是否停止播放和混音音乐文件。
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：（默认）停止播放和混音音乐文件。</li>
                        <li><codeph><ph keyref="false"/></codeph>：不停止播放和混音音乐文件。</li>
                        </ul>
                    </pd>
                <pd props="cpp">用户离开频道时是否停止播放和混音音乐文件。</pd>
                </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">stopAllEffect</pt>
                <pd>离开频道时，是否停止播放音效：
                    <ul id="ul_tgl_m2n_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：（默认）停止播放音效。</li>
                    <li><codeph><ph keyref="false"/></codeph>： 不停止播放音效。</li>
                    </ul></pd>
                <pd props="android">是否在用户离开频道时停止播放所有音效。
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：（默认）停止播放所有音效。</li>
                        <li><codeph><ph keyref="false"/></codeph>：不停止播放任何音效。</li>
                        </ul>
                    </pd>
                <pd props="ios">用户离开频道时是否停止播放所有音效。
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：（默认）停止播放所有音效。</li>
                        <li><codeph><ph keyref="false"/></codeph>：不停止播放任何音效。</li>
                        </ul>
                    </pd>
                <pd props="cpp">用户离开频道时是否停止播放所有音效。</pd>
                </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">stopMicrophoneRecording</pt>
                <pd>离开频道时，是否停止麦克风采集：                    
                    <ul id="ul_dy1_s2n_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：（默认）停止麦克风采集。</li>
                    <li><codeph><ph keyref="false"/></codeph>： 不停止麦克风采集。</li>
                    </ul></pd>
                <pd props="android">是否在用户离开频道时停止麦克风录制。
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：（默认）停止麦克风录制。</li>
                        <li><codeph><ph keyref="false"/></codeph>：不停止麦克风录制。</li>
                        </ul>
                    </pd>
                <pd props="ios">用户离开频道时是否停止麦克风录制。
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：（默认）停止麦克风录制。</li>
                        <li><codeph><ph keyref="false"/></codeph>：不停止麦克风录制。</li>
                        </ul>
                    </pd>
                <pd props="cpp">用户离开频道时是否停止麦克风录制。</pd>
                </plentry>
            </parml> </section>
    </refbody>
</reference>
