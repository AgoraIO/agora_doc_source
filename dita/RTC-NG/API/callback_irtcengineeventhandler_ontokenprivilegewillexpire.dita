<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_ontokenprivilegewillexpire">
    <title> <ph keyref="onTokenPrivilegeWillExpire"/> </title>
    <shortdesc id="short"> <ph id="shortdesc">Token 即将在 30 秒后过期时触发的回调。</ph> </shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onTokenPrivilegeWillExpire"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onTokenPrivilegeWillExpire(String token) {}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">onTokenPrivilegeWillExpire?: (token:string) =&gt; void;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine tokenPrivilegeWillExpire:(NSString *_Nonnull)token NS_SWIFT_NAME(rtcEngine(_:tokenPrivilegeWillExpire:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual void onTokenPrivilegeWillExpire(const char* token)</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintNativeEvent, Category = "Agora|Event")
	void OnTokenPrivilegeWillExpire(const FString&amp; token);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">onTokenPrivilegeWillExpire?(connection: RtcConnection, token: string): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual void OnTokenPrivilegeWillExpire(RtcConnection connection, string token) {}</codeblock>
            <codeblock props="rn" outputclass="language-typescript">onTokenPrivilegeWillExpire?(connection: RtcConnection, token: string): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(RtcConnection connection, String token)?
      onTokenPrivilegeWillExpire;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p conkeyref="onRequestToken/renew">收到该回调时，你需要在 Token 服务器上生成一个新的 Token，并通过以下方式之一更新 Token：
                    <ul>
                        <li>单频道场景：<ul>
                            <li>调用 <xref keyref="renewToken_IMusicContentCenter"/> 传入新的 Token。</li>
                            <li>调用 <codeph>leaveChannel</codeph> 离开当前频道，然后在调用 <codeph>joinChannel</codeph> 加入频道时传入新的 Token。</li>
                            </ul>
                        </li>
                        <li>多频道场景：调用 <xref keyref="updateChannelMediaOptionsEx"/> 传入新的 Token。 SDK 会在 Token 过期前 30 秒触发该回调，提醒 App 更新 Token。</li>
                        </ul>
                    </p>
            </section>
        <section id="timing" deliveryTarget="details">
            <title>触发时机</title>
            <p>SDK 会在 Token 过期前 30 秒触发该回调，提醒 App 更新 Token。</p>
        </section>
        <section id="restriction" deliveryTarget="details">
            <title>使用限制</title>
            <p>无。</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title> <ph keyref="callback-section-title"/> </title>
            <parml>
            <plentry conkeyref="onJoinChannelSuccess/engine" props="apple">
                <pt/>
                <pd/>
            </plentry>
            <plentry props="cs electron rn unity" conkeyref="joinChannelEx/connection">
                <pt/>
                <pd/>
            </plentry>
            <plentry id="token">
                <pt>token</pt>
                <pd props="bp cs electron flutter native rn unity unreal">即将过期的 Token。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">engine</pt>
                <pd props="ios"><xref keyref="IRtcEngine"/> 对象。详见 <xref keyref="IRtcEngine"/>。</pd>
            </plentry>
        </parml> </section>
    </refbody>
</reference>
