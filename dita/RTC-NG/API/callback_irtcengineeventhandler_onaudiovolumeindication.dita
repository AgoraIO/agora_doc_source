<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onaudiovolumeindication">
    <title><ph keyref="onAudioVolumeIndication"/></title>
    <shortdesc id="short"><ph id="shortdesc">报告用户的音量信息。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onAudioVolumeIndication"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onAudioVolumeIndication(AudioVolumeInfo[] speakers, int totalVolume)</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">onAudioVolumeIndication?:( speakers:Array&lt;AudioVolumeInfo&gt;,  totalVolume:number) =&gt; void</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine reportAudioVolumeIndicationOfSpeakers:(NSArray&lt;AgoraRtcAudioVolumeInfo *&gt; * _Nonnull)speakers totalVolume:(NSInteger)totalVolume NS_SWIFT_NAME(rtcEngine(_:reportAudioVolumeIndicationOfSpeakers:totalVolume:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual void onAudioVolumeIndication(const AudioVolumeInfo* speakers, unsigned int speakerNumber, int totalVolume)</codeblock>
            <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintNativeEvent, Category = "Agora|Event")
void OnAudioVolumeIndication(const TArray&lt;FAudioVolumeInfo&gt;&amp; speakers, int totalVolume);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">onAudioVolumeIndication?(connection: RtcConnection, speakers: AudioVolumeInfo[], speakerNumber: number, totalVolume: number): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual void OnAudioVolumeIndication(RtcConnection connection, AudioVolumeInfo[] speakers, uint speakerNumber, int totalVolume) {}</codeblock>
            <codeblock props="rn" outputclass="language-typescript">onAudioVolumeIndication?(
  connection: RtcConnection,
  speakers: AudioVolumeInfo[],
  speakerNumber: number,
  totalVolume: number
): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(RtcConnection connection, List&lt;AudioVolumeInfo&gt; speakers,
      int speakerNumber, int totalVolume)? onAudioVolumeIndication;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <p>默认情况下，该回调处于关闭状态。你可以通过调用 <xref keyref="enableAudioVolumeIndication"/> 方法启用该回调。启用后，当用户在频道中发送音频流时，SDK 会按照 <xref keyref="enableAudioVolumeIndication"/> 中设置的时间间隔触发该回调。SDK 会同时触发两个独立的 <xref keyref="onAudioVolumeIndication"/> 回调，分别报告发送音频流的本地用户和瞬时音量最高的最多三位远端用户的音量信息。<xref keyref="enableAudioVolumeIndication"/> 开启。 开启后，只要频道内有发流用户，SDK 会在加入频道后按 <apiname keyref="enableAudioVolumeIndication"/> 中设置的时间间隔触发 <apiname keyref="onAudioVolumeIndication"/> 回调。每次会触发两个 <apiname keyref="onAudioVolumeIndication"/> 回调，一个报告本地发流用户的音量相关信息，另一个报告瞬时音量最高的远端用户（最多 3 位）的音量相关信息。</p>
            <note type="attention">
            <p props="apple">在收到该回调后如需更新 UI 界面，请将确保将执行的线程转至 UI 线程中。</p>
            <p>启用该功能后，如果有用户将自己静音（调用了 <xref keyref="muteLocalAudioStream"/>），SDK 会继续报告本地用户的音量提示回调。</p>
            <p>瞬时音量最高的远端用户静音后 20 秒，远端的音量提示回调中将不再包含该用户；如果远端所有用户都将自己静音，20 秒后 SDK 停止报告远端用户的音量提示回调。</p>
            </note> <note type="attention" props="cpp">启用该回调后，如果本地用户调用 <xref keyref="muteLocalAudioStream_IBaseSpatialAudioEngine"/> 方法进行静音，SDK 仍会继续上报本地用户的音量信息。
如果频道中某位瞬时音量排名前三的远端用户停止发布音频流超过 20 秒，回调中将不再包含该用户的信息；如果所有远端用户都停止发布音频流超过 20 秒，SDK 将不再触发远端用户的音量回调。</note>
            <note type="attention" props="apple">收到该回调后，如需更新 UI 界面，请确保将执行线程切换到 UI 线程。开启该回调后，即使本地用户调用 <xref keyref="muteLocalAudioStream_IBaseSpatialAudioEngine"/> 方法静音，SDK 仍会继续上报本地用户的音量信息。如果某位远端用户的音量在频道中排名前三，但停止发布音频流超过 20 秒，该回调将不再包含该用户的信息；如果所有远端用户都停止发布音频流超过 20 秒，SDK 将停止触发远端用户的音量回调。</note>
            <note type="attention" props="android">{'windows': '启用该回调后，如果本地用户调用 <xref keyref="muteLocalAudioStream_IBaseSpatialAudioEngine"/> 方法进行静音，SDK 仍会继续上报本地用户的音量信息。\n如果频道中某位瞬时音量排名前三的远端用户停止发布音频流超过 20 秒，回调中将不再包含该用户的信息；如果所有远端用户都停止发布音频流超过 20 秒，SDK 将不再触发远端用户的音量回调。', 'android': '开启该回调后，如果本地用户调用 <xref keyref="muteLocalAudioStream_IBaseSpatialAudioEngine"/> 方法进行静音，SDK 仍会继续上报本地用户的音量信息。如果某个音量排名前三的远端用户停止发布音频流超过 20 秒，该回调将不再包含该用户的信息；如果所有远端用户都停止发布音频流超过 20 秒，SDK 将停止触发远端用户的回调。'}</note>
            </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>启用音量提示并有用户发送音频流时触发。</p>
        </section>
        <section id="parameters">
            <title><ph keyref="callback-section-title"/></title>
            <parml>
            <plentry conkeyref="onJoinChannelSuccess/engine" props="apple">
                <pt/>
                <pd/>
            </plentry>
            <plentry props="cs electron flutter rn unity">
                <pt>connection</pt>
                <pd>Connection 信息。详见 <xref keyref="RtcConnection"/>。</pd>
            </plentry>
            <plentry props="bp cs electron flutter native rn unity unreal">
                <pt>speakers</pt>
                <pd>用户音量信息，详见 <xref keyref="AudioVolumeInfo"/> 数组。如果 <parmname>speakers</parmname> 为空，则表示远端用户不发流或没有远端用户。</pd>
            </plentry>
            <plentry props="cpp cs electron flutter rn unity unreal">
                <pt>speakerNumber</pt>
                <pd>
                    <p>用户数量。

                    <ul>
                    <li>在本地用户的回调中，只要本地用户在发流，<parmname>speakerNumber</parmname> 始终为 1。</li>
                    <li>在远端用户的回调中，<parmname>speakerNumber</parmname> 取值范围为 [0,3]。如果远端发流用户数量大于 3，则此回调中 <parmname>speakerNumber</parmname> 值为 3。</li>
                    </ul> </p>
                </pd>
            </plentry>
            <plentry props="bp cs electron flutter native rn unity unreal">
                <pt>totalVolume</pt>
                <pd>
                    <p>混音后的总音量，取值范围为 [0,255]。

                    <ul>
                    <li>在本地用户的回调中，<parmname>totalVolume</parmname> 为本地发流用户的音量。</li>
                    <li><ph>在远端用户的回调中，<parmname>totalVolume</parmname> 为瞬时音量最高的远端用户（最多 3 位）混音后的总音量。 </ph><ph props="bp native unreal">如果用户调用了 <xref keyref="startAudioMixing2"/>，则 <parmname>totalVolume</parmname> 为音乐文件和用户声音的总音量。</ph></li>
                    </ul> </p>
                </pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">engine</pt>
                <pd props="ios"><xref keyref="IRtcEngine"/> 对象。详见 <xref keyref="IRtcEngine"/>。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">speakers</pt>
                <pd props="ios">用户的音量信息，详见 <xref keyref="AudioVolumeInfo"/>。当该回调中的 <codeph>speakers</codeph> 数组为空时，表示频道中没有远端用户或没有用户发送音频流。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">totalVolume</pt>
                <pd props="ios">扬声器的音量，取值范围为 [0, 255]。
                    <ul>
                        <li>在本地用户的回调中，<codeph>totalVolume</codeph> 表示发送音频流的本地用户的音量。</li>
                        <li>在远端用户的回调中，<codeph>totalVolume</codeph> 表示瞬时音量最高的最多三位远端用户的音量总和。如果用户调用了 <codeph>startAudioMixing</codeph>，则 <codeph>totalVolume</codeph> 表示混音后的音量。</li>
                        </ul>
                    </pd>
            </plentry>
        </parml> </section>
    </refbody>
</reference>
