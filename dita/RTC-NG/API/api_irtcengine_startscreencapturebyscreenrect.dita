<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startscreencapturebyscreenrect">
    <title><ph keyref="startScreenCaptureByScreenRect" /></title>
    <shortdesc id="short"><ph id="shortdesc">开始采集指定屏幕区域的视频流。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startScreenCaptureByScreenRect" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec" />
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int startScreenCaptureByScreenRect(const Rectangle&amp; screenRect,
     const Rectangle&amp; regionRect,
     const ScreenCaptureParameters&amp; captureParams) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startScreenCaptureByScreenRect(
    screenRect: Rectangle,
    regionRect: Rectangle,
    captureParams: ScreenCaptureParameters
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StartScreenCaptureByScreenRect(Rectangle screenRect, Rectangle regionRect,
            ScreenCaptureParameters captureParams);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startScreenCaptureByScreenRect(
    screenRect: Rectangle,
    regionRect: Rectangle,
    captureParams: ScreenCaptureParameters
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startScreenCaptureByScreenRect(
    {required Rectangle screenRect,
    required Rectangle regionRect,
    required ScreenCaptureParameters captureParams});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <dl outputclass="deprecated">
                <dlentry>
                    <dt>弃用：</dt>
                    <dd>该方法已废弃。请改用 <xref keyref="startScreenCaptureByDisplayId" />。如果你需要在设备外接其他显示屏的情况下开启屏幕共享，强烈建议你使用 <apiname keyref="startScreenCaptureByDisplayId" />。</dd>
                </dlentry>
                </dl>
   <p id="desc">共享一个屏幕或该屏幕的部分区域。你需要在该方法中指定想要共享的屏幕区域。</p>
   <p conkeyref="startScreenCaptureByDisplayId/apisequence" />
   <note type="attention" id="note" props="cpp unreal bp electron unity flutter">该方法仅适用于 Windows 平台。</note>
        </section>
        <section id="parameters"><title>参数</title>
   <parml>
       <plentry props="cpp unreal bp unity flutter electron cs">
  <pt>screenRect</pt>
  <pd>指定待共享的屏幕相对于虚拟屏的位置。</pd>
       </plentry>
       <plentry>
  <pt>regionRect</pt>
  <pd props="cpp unreal bp unity flutter electron cs"><ph props="cpp unreal bp unity cs">(可选）</ph>指定待共享区域相对于整个屏幕的位置。如不填，则表示共享整个屏幕。详见 <xref keyref="Rectangle" />。如果设置的共享区域超出了屏幕的边界，则只共享屏幕内的内容；如果将 width 或 height 设为 0 ，则共享整个屏幕。</pd>
</plentry>
       <plentry>
  <pt>captureParams</pt>
  <pd>屏幕共享的编码参数配置。默认的分辨率为 1920 x 1080，即 2073600 像素。该像素值为计费标准。详见 <xref keyref="ScreenCaptureParameters" />。</pd>
       </plentry>
   </parml>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul>
            <li props="native unreal bp electron unity rn cs">0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。
                <ul conkeyref="startScreenCaptureByDisplayId/err"><li /></ul>
            </li>
            </ul> </section>
    </refbody>
</reference>