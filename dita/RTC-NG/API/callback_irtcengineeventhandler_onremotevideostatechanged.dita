<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onremotevideostatechanged">
     <title> <ph keyref="onRemoteVideoStateChanged"/> </title>
     <shortdesc id="short"> <ph id="shortdesc">远端视频状态发生改变回调。</ph> </shortdesc>
     <prolog>
          <metadata>
               <keywords>
                    <indexterm keyref="onRemoteVideoStateChanged"/>
               </keywords>
          </metadata>
     </prolog>
     <refbody>
          <section id="prototype">
               <p outputclass="codeblock">
               <codeblock props="android" outputclass="language-java">public void onRemoteVideoStateChanged(int uid, int state, int reason, int elapsed) {}</codeblock>
               <codeblock props="hmos" outputclass="language-arkts">onRemoteVideoStateChanged ? : (uid:number, state: Constants.RemoteVideoStreamState, reason: Constants.RemoteVideoStreamReason, elapsed:number) =&gt; void</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine remoteVideoStateChangedOfUid:(NSUInteger)uid state:(AgoraVideoRemoteState)state reason:(AgoraVideoRemoteReason)reason elapsed:(NSInteger)elapsed NS_SWIFT_NAME(rtcEngine(_:remoteVideoStateChangedOfUid:state:reason:elapsed:));</codeblock>
               <codeblock props="cpp unreal" outputclass="language-cpp">virtual void onRemoteVideoStateChanged(uid_t uid, REMOTE_VIDEO_STATE state, REMOTE_VIDEO_STATE_REASON reason, int elapsed)</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintNativeEvent, Category = "Agora|Event")
	void OnRemoteVideoStateChanged(int64 uid, EREMOTE_VIDEO_STATE state, EREMOTE_VIDEO_STATE_REASON reason, int elapsed);</codeblock>
               <codeblock props="electron" outputclass="language-typescript">  onRemoteVideoStateChanged?(
    connection: RtcConnection,
    remoteUid: number,
    state: RemoteVideoState,
    reason: RemoteVideoStateReason,
    elapsed: number
  ): void;</codeblock>
               <codeblock props="unity cs" outputclass="language-csharp">public virtual void OnRemoteVideoStateChanged(RtcConnection connection, uint remoteUid, REMOTE_VIDEO_STATE state, REMOTE_VIDEO_STATE_REASON reason, int elapsed) {}</codeblock>
               <codeblock props="rn" outputclass="language-typescript">  onRemoteVideoStateChanged?(
    connection: RtcConnection,
    remoteUid: number,
    state: RemoteVideoState,
    reason: RemoteVideoStateReason,
    elapsed: number
  ): void;</codeblock>
               <codeblock props="flutter" outputclass="language-dart">final void Function(
      RtcConnection connection,
      int remoteUid,
      RemoteVideoState state,
      RemoteVideoStateReason reason,
      int elapsed)? onRemoteVideoStateChanged;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
          </section>
          <section id="detailed_desc">
               <note id="note" type="attention">频道内的用户（通信场景）或主播（直播场景）人数超过 32 人时，该回调可能不准确。</note> <note type="attention" props="cpp">当频道中的用户数（通信场景）或主播数（直播频道）超过 32 时，该回调无法正常工作。</note>
            <note type="attention" props="apple">当频道中通信场景下的用户数或直播场景下的主播数超过 32 时，该回调可能无法正常工作。</note>
            <note type="attention" props="android"><xref keyref="onRemoteVideoStateChanged"/> 回调在频道中通信场景下的用户数或直播场景下的主播数超过 32 时，可能无法正常工作。</note>
            </section>
          <section id="parameters">
               <title> <ph keyref="callback-section-title"/> </title>
               <parml>
               <plentry conkeyref="onJoinChannelSuccess/engine" props="apple">
                    <pt/>
                    <pd/>
               </plentry>
               <plentry props="cs electron flutter rn unity">
                         <pt>connection</pt>
                         <pd>Connection 信息。详见 <xref keyref="RtcConnection"/>。</pd>
                    </plentry>
               <plentry id="uid">
                    <pt props="bp native unreal">uid</pt>
                    <pt props="cs electron flutter rn unity">remoteUid</pt>
                    <pd>发生视频状态改变的远端用户 ID。</pd>
               </plentry>
               <plentry id="state">
                    <pt>state</pt>
                    <pd props="bp cs electron flutter mac rn unity unreal">
                         <p props="apple bp cpp cs electron flutter hmos rn unity unreal">远端视频流状态，详见 <xref keyref="REMOTE_VIDEO_STATE"/>。</p>
                         <p props="android">远端视频流状态：
                         <ul>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_STOPPED"/> (0)：远端视频默认初始状态。在 <apiname keyref="REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED"/> (3)、<apiname keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED"/> (5) 或 <apiname keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE"/> (7) 的情况下，会报告该状态。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_STARTING"/> (1)：本地用户已接收远端视频首包。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_DECODING"/> (2)： 远端视频流正在解码，正常播放。在 <apiname keyref="REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY"/> (2)、<apiname keyref="REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED"/> (4)、<apiname keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED"/> (6) 或 <apiname keyref="REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY"/> (9) 的情况下，会报告该状态。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_FROZEN"/> (3)：远端视频流卡顿。在 <apiname keyref="REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION"/> (1) 或 <apiname keyref="REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK"/> (8) 的情况下，会报告该状态。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_FAILED"/> (4)：远端视频流播放失败。在 <apiname keyref="REMOTE_VIDEO_STATE_REASON_INTERNAL"/> (0) 的情况下，会报告该状态。</li>
                         </ul> </p>
                    </pd>
               <pd props="android">远端视频的状态：
                    <ul>
                        <li><ph keyref="REMOTE_VIDEO_STATE_STOPPED"/>(0)：远端视频处于初始状态。该状态在 <ph keyref="REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED"/>(3)、<ph keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED"/>(5) 或 <ph keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE"/>(7) 情况下报告。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_STARTING"/>(1)：已接收到第一帧远端视频包。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_DECODING"/>(2)：远端视频流解码并正常播放。该状态在 <ph keyref="REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY"/>(2)、<ph keyref="REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED"/>(4)、<ph keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED"/>(6) 或 <ph keyref="REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY"/>(9) 情况下报告。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_FROZEN"/>(3)：远端视频卡顿。该状态在 <ph keyref="REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION"/>(1) 或 <ph keyref="REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK"/>(8) 情况下报告。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_FAILED"/>(4)：远端视频启动失败。该状态在 <ph keyref="REMOTE_VIDEO_STATE_REASON_INTERNAL"/>(0) 情况下报告。</li>
                        </ul>
                    </pd>
                <pd props="cpp ios">远端视频的状态，详见 <xref keyref="REMOTE_VIDEO_STATE"/>。</pd>
                </plentry>
               <plentry id="reason">
                    <pt>reason</pt>
                    <pd props="bp cs electron flutter mac rn unity unreal">
                         <p props="apple bp cpp cs electron flutter hmos rn unity unreal">远端视频流状态改变的具体原因，详见 <xref keyref="REMOTE_VIDEO_STATE_REASON"/>。</p>
                         <p props="android">远端视频流状态改变的具体原因：
                         <ul>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_REASON_INTERNAL"/> (0)：内部原因。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION"/> (1)：网络阻塞。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY"/> (2)：网络恢复正常。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED"/> (3)：本地用户停止接收远端视频流或本地用户禁用视频模块。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED"/> (4)：本地用户恢复接收远端视频流或本地用户启动视频模块。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED"/> (5)：远端用户停止发送视频流或远端用户禁用视频模块。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED"/> (6)：远端用户恢复发送视频流或远端用户启用视频模块。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE"/> (7)：远端用户离开频道。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK"/> (8)：远端视频流已回退为音频流。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY"/> (9)：回退的远端音频流恢复为视频流。</li>
                         <li> <ph keyref="REMOTE_VIDEO_STATE_REASON_CODEC_NOT_SUPPORT"/> (13)：本地的视频解码器不支持对收到的远端视频流进行解码。</li>
                         </ul> </p>
                    </pd>
               <pd props="android">远端视频状态变化的原因：
                    <ul>
                        <li><ph keyref="REMOTE_VIDEO_STATE_REASON_INTERNAL"/>(0)：内部原因。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION"/>(1)：网络拥塞。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY"/>(2)：网络恢复。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED"/>(3)：本地用户停止接收远端视频流或关闭视频模块。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED"/>(4)：本地用户恢复接收远端视频流或开启视频模块。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED"/>(5)：远端用户停止发送视频流或关闭视频模块。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED"/>(6)：远端用户恢复发送视频流或开启视频模块。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE"/>(7)：远端用户离开频道。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK"/>(8)：由于网络较差，远端媒体流回退为音频流。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY"/>(9)：网络改善后，远端媒体流从音频流切换回视频流。</li>
                        <li><ph keyref="REMOTE_VIDEO_STATE_REASON_CODEC_NOT_SUPPORT"/>(13)：本地视频解码器不支持解码远端视频流。</li>
                        </ul>
                    </pd>
                <pd props="cpp ios">远端视频状态变化的原因，详见 <xref keyref="REMOTE_VIDEO_STATE_REASON"/>。</pd>
                </plentry>
               <plentry>
                    <pt>elapsed</pt>
                    <pd props="bp cs electron flutter mac rn unity unreal">从本地用户调用 <apiname keyref="joinChannel2"/> 方法到发生本事件经历的时间，单位为毫秒。</pd>
               <pd props="android">从本地用户调用 <codeph>joinChannel</codeph> 方法到 SDK 触发该回调的时间（毫秒）。</pd>
                <pd props="ios">从调用 <xref keyref="joinChannel2"/> 方法到 SDK 触发该回调的时间间隔（毫秒）。</pd>
                <pd props="cpp">从本地用户调用 <codeph>joinChannel</codeph> 方法到 SDK 触发该回调的时间间隔（毫秒）。</pd>
                </plentry>
               <plentry props="android cpp ios">
                <pt props="android cpp ios">uid</pt>
                <pd props="android cpp">发生视频状态变化的远端用户 ID。</pd>
                <pd props="ios">远端用户 ID，其视频状态发生了变化。</pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">engine</pt>
                <pd props="ios"><xref keyref="IRtcEngine"/> 对象，详见 <xref keyref="IRtcEngine"/>。</pd>
                </plentry>
        </parml> </section>
     </refbody>
</reference>
