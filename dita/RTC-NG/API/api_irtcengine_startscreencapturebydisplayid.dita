<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startscreencapturebydisplayid">
    <title><ph keyref="startScreenCaptureByDisplayId" /></title>
    <shortdesc id="short"><ph id="shortdesc">开始采集指定屏幕的视频流。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startScreenCaptureByDisplayId" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="mac" outputclass="language-objectivec">- (int)startScreenCaptureByDisplayId:(UInt32)displayId
                regionRect:(CGRect)regionRect
                captureParams:(AgoraScreenCaptureParameters *_Nonnull)captureParams;</codeblock>
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int startScreenCaptureByDisplayId(int64_t displayId, const Rectangle&amp; regionRect,
                                            const ScreenCaptureParameters&amp; captureParams) = 0;
</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int StartScreenCaptureByDisplayId(int64 displayId, const FRectangle&amp; regionRect, const FScreenCaptureParameters&amp; captureParams);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startScreenCaptureByDisplayId(
    displayId: number,
    regionRect: Rectangle,
    captureParams: ScreenCaptureParameters
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StartScreenCaptureByDisplayId(uint displayId, Rectangle regionRect, ScreenCaptureParameters captureParams);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startScreenCaptureByDisplayId(
    displayId: number,
    regionRect: Rectangle,
    captureParams: ScreenCaptureParameters
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startScreenCaptureByDisplayId(
    {required int displayId,
    required Rectangle regionRect,
    required ScreenCaptureParameters captureParams});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p>采集一个屏幕或该屏幕部分区域的视频流。</p>
            <note type="attention" props="cpp unreal bp flutter unity">该方法仅适用于 Windows 和 macOS。</note> 
        </section>
        <section id="scenario" deliveryTarget="details">
            <title>适用场景</title>
            <p>在屏幕共享场景下，你需要调用该方法开始采集屏幕视频流。有关屏幕共享的实现方法，详见<xref keyref="screen-share"/>。</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p id="apisequence">该方法在加入频道前后均可调用，区别如下：
            <ul>
            <li>如果在加入频道前调用该方法，然后调用 <xref keyref="joinChannel2"/> 加入频道，并设置 <parmname>publishScreenTrack</parmname> 或 <parmname>publishSecondaryScreenTrack</parmname> 为 <codeph><ph keyref="true" /></codeph>，即可开始屏幕共享。</li>
            <li>如果在加入频道后调用该方法，然后调用 <xref keyref="updateChannelMediaOptions"/> 更新频道媒体选项，并设置 <parmname>publishScreenTrack</parmname> 或 <parmname>publishSecondaryScreenTrack</parmname> 为 <codeph><ph keyref="true" /></codeph>，即可开始屏幕共享。</li>
            </ul></p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <p>无。</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>displayId</pt>
                <pd>指定待共享的屏幕 ID。
                    <note type="note" props="cpp unreal bp unity flutter electron">对于 Windows 平台，如果你需要同时共享两个屏幕（主屏 + 副屏），可以在调用该方法时，将 <parmname>displayId</parmname> 设置为 <codeph>-1</codeph>。</note>
                </pd>
            </plentry>
            <plentry props="cpp unreal bp unity flutter electron cs">
                <pt>regionRect</pt>
                <pd><ph>（可选）指定待共享区域相对于整个屏幕的位置。如需共享整个屏幕，则填 <codeph>nil</codeph>。</ph><ph props="cpp unreal bp unity flutter cs">详见 <xref keyref="Rectangle" />。</ph><ph props="mac">由如下参数组成：</ph>
                    <ul props="mac">
                    <li>x：左上角的横向偏移。</li>
                    <li>y：左上角的纵向偏移。</li>
                    <li>width：待共享区域的宽。</li>
                    <li>height：待共享区域的高。</li>
                    </ul></pd>
                <pd>如果设置的共享区域超出了屏幕的边界，则只共享屏幕内的内容；如果宽或高设为 0，则共享整个屏幕。</pd>
            </plentry>
            <plentry>
                <pt>captureParams</pt>
                <pd>屏幕共享的参数配置。默认的视频编码分辨率为 1920 × 1080，即 2073600 像素。该像素值为计费标准。详见 <xref keyref="ScreenCaptureParameters"/>。
                    <note type="attention">屏幕共享流的视频属性只需通过该参数设置，与 <xref keyref="setVideoEncoderConfiguration"/> 无关。</note>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph>

                <ul id="err">
                    <li>-2：传入的参数无效。</li>
                    <li>-8：屏幕共享状态无效。可能因为你已经共享了其他屏幕或窗口。尝试调用 <xref keyref="stopScreenCapture" /> 停止当前共享，再重新开始共享屏幕。</li>
                </ul> </li>
            </ul> </section>
    </refbody>
</reference>