<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaengine_registervideoframeobserver">
    <title><ph keyref="registerVideoFrameObserver"/></title>
    <shortdesc id="short"><ph id="shortdesc">注册视频观测器对象。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="registerVideoFrameObserver"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int registerVideoFrameObserver(IVideoFrameObserver observer);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)setVideoFrameDelegate:(id&lt;AgoraVideoFrameDelegate&gt; _Nullable)delegate;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int registerVideoFrameObserver(IVideoFrameObserver* observer) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract registerVideoFrameObserver(observer: IVideoFrameObserver): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract void RegisterVideoFrameObserver(IVideoFrameObserver videoFrameObserver, OBSERVER_MODE mode = OBSERVER_MODE.INTPTR);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract registerVideoFrameObserver(observer: IVideoFrameObserver): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">void registerVideoFrameObserver(VideoFrameObserver observer);</codeblock>
            <codeblock props="unreal" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>如果你想要观测原始视频帧 (如 YUV 或 RGBA 格式)，声网推荐你通过该方法实现一个 <xref keyref="IVideoFrameObserver"/> 类。</p>
            <p>注册该类后，你需要根据需求注册该类中的回调。成功注册视频观测器后，SDK 会在捕捉到每个视频帧时，触发你所注册的上述回调。</p>
            <p conkeyref="registerVideoEncodedFrameObserver/mix"/>
            <note type="attention">
            <ul>
            <li>该方法需要在加入频道前调用。</li>
            <li>在处理回调时，你需要考虑视频帧中 <parmname>width</parmname> 和 <parmname>height</parmname> 参数的变化，因为观测得到的视频帧可能会随以下情况变化：
                
                <ul id="ul_qms_zys_r4b">
                <li>当网络状况差时，分辨率会阶梯式下降。</li>
                <li>当用户自行调整分辨率时，回调中报告的分辨率也会变化。</li>
                </ul></li>
            </ul> </note> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt props="android cpp electron rn flutter">observer</pt>
                <pt props="ios mac">delegate</pt>
                <pt props="unity">videoFrameObserver</pt>
                <pd><ph>接口对象实例。详见 <xref keyref="IVideoFrameObserver"/>。</ph><ph props="android cpp ios mac unity">如果传入 <ph keyref="NULL"/>，则取消注册。</ph> </pd>
            </plentry>
            <plentry props="unity">
                <pt>mode</pt>
                <pd>视频数据回调模式，详见 <xref keyref="OBSERVER_MODE"/>。</pd>
            </plentry>
            </parml> </section>
        <section props="native electron rn">
            <title>返回值</title>
            <ul props="android cpp electron rn">
            <li>0：方法调用成功。</li>
            <li>&lt; 0：方法调用失败。</li>
            </ul>
            <ul props="ios mac">
            <li><codeph><ph keyref="true"/></codeph>：方法调用成功。</li>
            <li><codeph><ph keyref="false"/></codeph>：方法调用失败。</li>
            </ul> </section>
    </refbody>
</reference>
