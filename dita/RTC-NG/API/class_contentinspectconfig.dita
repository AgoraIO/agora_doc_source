<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_contentinspectconfig">
    <title><ph keyref="ContentInspectConfig"/></title>
    <shortdesc id="short"><ph id="shortdesc">用于配置本地截图上传功能。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android">public class ContentInspectConfig {
  public final static int CONTENT_INSPECT_TYPE_INVALID = 0;
  @Deprecated
  public final static int CONTENT_INSPECT_TYPE_MODERATION = 1;
  public final static int CONTENT_INSPECT_TYPE_SUPERVISE = 2;
  public final static int CONTENT_INSPECT_TYPE_IMAGE_MODERATION = 3;
  public static final int MAX_CONTENT_INSPECT_MODULE_COUNT = 32;
  public String extraInfo;
  public String serverConfig;
  public ContentInspectModule[] modules;
  public int moduleCount;

  public ContentInspectConfig() {
    modules = new ContentInspectModule[MAX_CONTENT_INSPECT_MODULE_COUNT];
    for (int i = 0; i &amp;lt; MAX_CONTENT_INSPECT_MODULE_COUNT; i++) {
      modules[i] = new ContentInspectModule();
    }
    moduleCount = 0;
  }
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac">__attribute__((visibility("default"))) @interface AgoraContentInspectConfig: NSObject
@property (nonatomic, copy) NSString* _Nullable extraInfo;
@property (nonatomic, copy) NSString* _Nullable serverConfig;
@property(copy, nonatomic) NSArray&amp;lt;AgoraContentInspectModule*&amp;gt;* _Nullable modules;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct ContentInspectConfig {
  const char* extraInfo;
  const char* serverConfig;
  ContentInspectModule modules[MAX_CONTENT_INSPECT_MODULE_COUNT];
  int moduleCount;
  ContentInspectConfig&amp;amp; operator=(const ContentInspectConfig&amp;amp; rth);
  ContentInspectConfig();
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FContentInspectConfig
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ContentInspectConfig")
	FString extraInfo;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ContentInspectConfig")
	TArray&amp;lt;FContentInspectModule&amp;gt; modules;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ContentInspectConfig")
	int moduleCount;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ContentInspectConfig {

  extraInfo?: string;

  serverConfig?: string;

  modules?: ContentInspectModule[];

  moduleCount?: number;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ContentInspectConfig
                {
                    public string extraInfo;
                    public string serverConfig;
                    public ContentInspectModule[] modules;
                    public int moduleCount;

                    public ContentInspectConfig()
                    {
                        extraInfo = "";
                        serverConfig = "";
                        modules = null;
                        moduleCount = 0;
                    }
                };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ContentInspectConfig {

  extraInfo?: string;

  serverConfig?: string;

  modules?: ContentInspectModule[];

  moduleCount?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class ContentInspectConfig {
  const ContentInspectConfig(
      {this.extraInfo, this.serverConfig, this.modules, this.moduleCount});

  @JsonKey(name: 'extraInfo')
  final String? extraInfo;

  @JsonKey(name: 'serverConfig')
  final String? serverConfig;

  @JsonKey(name: 'modules')
  final List&amp;lt;ContentInspectModule&amp;gt;? modules;

  @JsonKey(name: 'moduleCount')
  final int? moduleCount;

  factory ContentInspectConfig.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;
      _$ContentInspectConfigFromJson(json);

  Map&amp;lt;String, dynamic&amp;gt; toJson() =&amp;gt; _$ContentInspectConfigToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry props="android hmos">
                <pt>CONTENT_INSPECT_TYPE_INVALID</pt>
                <pd>0：（默认）无实际功能。请不要将 <parmname>type</parmname> 设为该值。</pd>
            </plentry>
            <plentry props="android hide">
                <pt props="android">CONTENT_INSPECT_TYPE_MODERATION</pt>
                <pd>1：视频鉴黄。SDK 会对本地用户发送的视频进行截图、鉴黄，并将截图和审核结果上传。</pd>
                <pd props="android">（已废弃）本地截图上传类型：（1）：内容审核。</pd>
            </plentry>
            <plentry props="android hmos">
                <pt>CONTENT_INSPECT_TYPE_SUPERVISE</pt>
                <pd>2：使用声网自研插件截图上传。SDK 会对本地用户发送的视频进行截图并上传。</pd>
            </plentry>
            <plentry props="android hmos">
                <pt>CONTENT_INSPECT_TYPE_IMAGE_MODERATION</pt>
                <pd>3：使用云市场插件截图上传。SDK 会使用云市场视频审核插件对视频流进行截图并上传。</pd>
            </plentry>
            <plentry props="android cpp">
                <pt props="android cpp">extraInfo</pt>
                <pd>
                    <p>附加信息，最大长度为 1024 字节。</p>
                    <p>SDK 会将附加信息和截图一起上传至声网服务器；截图完成后，声网服务器会将附加信息随回调通知一起发送给你的服务器。</p>
                    <p props="hide">SDK 会将附加信息和截图一起上传至声网内容审核服务器；审核完成后，声网内容审核服务器会将附加信息随审核结果一起发送给你的服务器。</p>
                </pd>
                <pd props="android cpp">额外信息。</pd>
            </plentry>
            <plentry props="android cpp flutter native rn unity">
                <pt props="android cpp">serverConfig</pt>
                <pd>（可选）云市场视频审核相关服务端配置，该参数仅在 <xref keyref="ContentInspectModule"/> 中的 <codeph>type</codeph> 设置为 <apiname keyref="CONTENT_INSPECT_IMAGE_MODERATION"/> 时生效。如需使用，请<xref keyref="ticket-link"/>。</pd>
                <pd props="android cpp">用于图像审核的特定服务器配置。请联系技术支持获取详细信息。</pd>
            </plentry>
            <plentry props="android cpp">
                <pt props="android cpp">modules</pt>
                <pd>
                    <p>功能模块。详见 <xref keyref="ContentInspectModule"/>。</p>
                    <p>最多支持配置 32 个 <apiname keyref="ContentInspectModule"/> 实例，<parmname>MAX_CONTENT_INSPECT_MODULE_COUNT</parmname> 的取值范围为 [1,32] 中的整数。</p>
                    <note type="attention">一个功能模块最多只能配置一个实例。目前仅支持截图上传功能。</note>
                </pd>
                <pd props="android cpp">本地截图上传模块。最多支持 32 个模块，截图内容（如发送的视频流截图或图像）最多可用于 32 种功能类型。详见 <xref keyref="ContentInspectModule"/>。</pd>
            </plentry>
            <plentry props="android cpp">
                <pt props="android cpp">moduleCount</pt>
                <pd>功能模块数，即配置的 <apiname keyref="ContentInspectModule"/> 实例的数量，必须与 <parmname>modules</parmname> 中配置的实例个数一致。最大值为 32。</pd>
                <pd props="android cpp">本地截图上传模块的数量。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
