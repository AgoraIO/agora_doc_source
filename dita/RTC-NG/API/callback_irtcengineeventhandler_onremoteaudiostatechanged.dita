<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onremoteaudiostatechanged">
     <title> <ph keyref="onRemoteAudioStateChanged"/> </title>
     <shortdesc id="short"> <ph id="shortdesc">远端音频状态发生变化回调。</ph> </shortdesc>
     <prolog>
          <metadata>
               <keywords>
                    <indexterm keyref="onRemoteAudioStateChanged"/>
               </keywords>
          </metadata>
     </prolog>
     <refbody>
          <section id="prototype">
               <p outputclass="codeblock">
               <codeblock props="android" outputclass="language-java">public void onRemoteAudioStateChanged(int uid, int state, int reason, int elapsed) {}</codeblock>
               <codeblock props="hmos" outputclass="language-arkts">onRemoteAudioStateChanged ? : (uid:number, state: Constants.RemoteAudioStreamState, reason: Constants.RemoteAudioStreamReason, elapsed:number) =&gt; void</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine remoteAudioStateChangedOfUid:(NSUInteger)uid state:(AgoraAudioRemoteState)state reason:(AgoraAudioRemoteReason)reason elapsed:(NSInteger)elapsed NS_SWIFT_NAME(rtcEngine(_:remoteAudioStateChangedOfUid:state:reason:elapsed:));</codeblock>
               <codeblock props="cpp unreal" outputclass="language-cpp">virtual void onRemoteAudioStateChanged(uid_t uid, REMOTE_AUDIO_STATE state, REMOTE_AUDIO_STATE_REASON reason, int elapsed)</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintNativeEvent, Category = "Agora|Event")
	void OnRemoteAudioStateChanged(int64 uid, EREMOTE_AUDIO_STATE state, EREMOTE_AUDIO_STATE_REASON reason, int elapsed);</codeblock>
               <codeblock props="electron" outputclass="language-typescript">  onRemoteAudioStateChanged?(
    connection: RtcConnection,
    remoteUid: number,
    state: RemoteAudioState,
    reason: RemoteAudioStateReason,
    elapsed: number
  ): void;</codeblock>
               <codeblock props="unity cs" outputclass="language-csharp">public virtual void OnRemoteAudioStateChanged(RtcConnection connection, uint remoteUid, REMOTE_AUDIO_STATE state, REMOTE_AUDIO_STATE_REASON reason, int elapsed) {}</codeblock>
               <codeblock props="rn" outputclass="language-typescript">  onRemoteAudioStateChanged?(
    connection: RtcConnection,
    remoteUid: number,
    state: RemoteAudioState,
    reason: RemoteAudioStateReason,
    elapsed: number
  ): void;</codeblock>
               <codeblock props="flutter" outputclass="language-dart">final void Function(
      RtcConnection connection,
      int remoteUid,
      RemoteAudioState state,
      RemoteAudioStateReason reason,
      int elapsed)? onRemoteAudioStateChanged;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
          </section>
          <section id="detailed_desc">
               <p id="desc">当远端用户在语音/视频通话频道中或主播在直播频道中的音频状态发生变化时，SDK 会触发该回调，报告远端音频流的当前状态。</p>
            <note id="note" type="attention">频道内的用户（通信场景）或主播（直播场景）人数超过 32 人时，该回调可能不准确。</note> <note type="attention" props="android cpp">当频道中通信场景下的用户或直播场景下的主播数量超过 32 时，该回调可能无法正常工作。</note>
            <note type="attention" props="apple">当通信场景下的用户数或直播频道中的主播数超过 32 时，该回调无法正常工作。</note>
            </section>
          <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>当远端用户的音频状态发生变化时触发。</p>
        </section>
        <section id="parameters">
               <title><ph keyref="callback-section-title"/></title>
               <parml>
               <plentry conkeyref="onJoinChannelSuccess/engine" props="apple">
                    <pt/>
                    <pd/>
               </plentry>
               <plentry props="cs electron flutter rn unity">
                    <pt>connection</pt>
                    <pd>Connection 信息。详见 <xref keyref="RtcConnection"/>。</pd>
               </plentry>
               <plentry id="uid">
                    <pt props="bp native unreal">uid</pt>
                    <pt props="cs electron flutter rn unity">remoteUid</pt>
                    <pd>发生音频状态改变的远端用户 ID。</pd>
               </plentry>
               <plentry id="state">
                    <pt>state</pt>
                    <pd props="bp cs electron flutter hmos mac rn unity unreal"> 远端音频流状态，详见 <xref keyref="REMOTE_AUDIO_STATE"/>。</pd>
                    <pd props="android">远端音频的状态：
                    <ul>
                        <li><ph keyref="REMOTE_AUDIO_STATE_STOPPED"/> (0)：远端音频处于初始状态。SDK 在 <ph keyref="REMOTE_AUDIO_REASON_LOCAL_MUTED"/>、<ph keyref="REMOTE_AUDIO_REASON_REMOTE_MUTED"/> 或 <ph keyref="REMOTE_AUDIO_REASON_REMOTE_OFFLINE"/> 情况下报告该状态。</li>
                        <li><ph keyref="REMOTE_AUDIO_STATE_STARTING"/> (1)：已接收到第一包远端音频数据。</li>
                        <li><ph keyref="REMOTE_AUDIO_STATE_DECODING"/> (2)：远端音频流解码并正常播放。SDK 在 <ph keyref="REMOTE_AUDIO_REASON_NETWORK_RECOVERY"/>、<ph keyref="REMOTE_AUDIO_REASON_LOCAL_UNMUTED"/> 或 <ph keyref="REMOTE_AUDIO_REASON_REMOTE_UNMUTED"/> 情况下报告该状态。</li>
                        <li><ph keyref="REMOTE_AUDIO_STATE_FROZEN"/> (3)：远端音频卡顿。SDK 在 <ph keyref="REMOTE_AUDIO_REASON_NETWORK_CONGESTION"/> 情况下报告该状态。</li>
                        <li><ph keyref="REMOTE_AUDIO_STATE_FAILED"/> (4)：远端音频启动失败。SDK 在 <ph keyref="REMOTE_AUDIO_REASON_INTERNAL"/> 情况下报告该状态。</li>
                        </ul>
                    </pd>
                <pd props="ios">远端音频的状态。详见 <xref keyref="REMOTE_AUDIO_STATE"/>。</pd>
                <pd props="cpp">远端音频状态，详见 <xref keyref="REMOTE_AUDIO_STATE"/>。</pd>
                </plentry>
               <plentry id="reason">
                    <pt>reason</pt>
                    <pd props="bp cs electron flutter hmos mac rn unity unreal"> 远端音频流状态改变的具体原因，详见 <xref keyref="REMOTE_AUDIO_STATE_REASON"/>。</pd>
                    <pd props="android">远端音频状态变化的原因：
                    <ul>
                        <li><ph keyref="REMOTE_AUDIO_REASON_INTERNAL"/> (0)：SDK 报告音频状态变化的内部原因。</li>
                        <li><ph keyref="REMOTE_AUDIO_REASON_NETWORK_CONGESTION"/> (1)：网络拥塞。</li>
                        <li><ph keyref="REMOTE_AUDIO_REASON_NETWORK_RECOVERY"/> (2)：网络恢复。</li>
                        <li><ph keyref="REMOTE_AUDIO_REASON_LOCAL_MUTED"/> (3)：本地用户停止接收远端音频流或关闭音频模块。</li>
                        <li><ph keyref="REMOTE_AUDIO_REASON_LOCAL_UNMUTED"/> (4)：本地用户恢复接收远端音频流或开启音频模块。</li>
                        <li><ph keyref="REMOTE_AUDIO_REASON_REMOTE_MUTED"/> (5)：远端用户停止发送音频流或关闭音频模块。</li>
                        <li><ph keyref="REMOTE_AUDIO_REASON_REMOTE_UNMUTED"/> (6)：远端用户恢复发送音频流或开启音频模块。</li>
                        <li><ph keyref="REMOTE_AUDIO_REASON_REMOTE_OFFLINE"/> (7)：远端用户离开频道。</li>
                        </ul>
                    </pd>
                <pd props="ios">远端音频状态变化的原因。详见 <xref keyref="REMOTE_AUDIO_STATE_REASON"/>。</pd>
                <pd props="cpp">远端音频状态变化的原因，详见 <xref keyref="REMOTE_AUDIO_STATE_REASON"/>。</pd>
                </plentry>
               <plentry>
                    <pt>elapsed</pt>
                    <pd props="bp cs electron flutter mac rn unity unreal"> 从本地用户调用 <apiname keyref="joinChannel2"/> 方法到发生本事件经历的时间，单位为毫秒。</pd>
               <pd props="android">从本地用户调用 <codeph>joinChannel</codeph> 方法到 SDK 触发该回调的时间（毫秒）。</pd>
                <pd props="ios">从调用 <xref keyref="joinChannel2"/> 方法到 SDK 触发该回调的时间（毫秒）。</pd>
                <pd props="cpp">从本地用户调用 <codeph>joinChannel</codeph> 方法到 SDK 触发该回调的时间间隔（毫秒）。</pd>
                </plentry>
               <plentry props="android cpp ios">
                <pt props="android cpp ios">uid</pt>
                <pd props="android">发生音频状态变化的远端用户 ID。</pd>
                <pd props="ios">远端用户 ID，其音频状态发生了变化。</pd>
                <pd props="cpp">音频状态发生变化的远端用户 ID。</pd>
                </plentry>
        </parml> </section>
     </refbody>
</reference>
