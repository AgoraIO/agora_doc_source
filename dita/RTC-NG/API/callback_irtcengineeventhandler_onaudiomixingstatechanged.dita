<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onaudiomixingstatechanged">
    <title><ph keyref="onAudioMixingStateChanged"/></title>
    <shortdesc id="short"><ph id="shortdesc">音乐文件播放状态变化回调。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onAudioMixingStateChanged"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onAudioMixingStateChanged(int state, int reason) {}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">onAudioMixingStateChanged?:(state:Constants.AudioMixingState,reason:Constants.AudioMixingReason) =&gt; void</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit *_Nonnull)engine audioMixingStateChanged:(AgoraAudioMixingStateType)state
                                                                 reasonCode:(AgoraAudioMixingReasonCode)reasonCode NS_SWIFT_NAME(rtcEngine(_:audioMixingStateChanged:reasonCode:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual void onAudioMixingStateChanged(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_REASON_TYPE reason)</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintNativeEvent, Category = "Agora|Event")
	void OnAudioMixingStateChanged(FENUMWRAP_AUDIO_MIXING_STATE_TYPE state, FENUMWRAP_AUDIO_MIXING_REASON_TYPE reason);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">  onAudioMixingStateChanged?(
    state: AudioMixingStateType,
    reason: AudioMixingReasonType
  ): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual void OnAudioMixingStateChanged(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_REASON_TYPE reason) {}</codeblock>
            <codeblock props="rn" outputclass="language-typescript">  onAudioMixingStateChanged?(
    state: AudioMixingStateType,
    reason: AudioMixingReasonType
  ): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(AudioMixingStateType state, AudioMixingReasonType reason)?
      onAudioMixingStateChanged;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <p></p>
            </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry conkeyref="onJoinChannelSuccess/engine" props="apple">
                <pt/>
                <pd/>
            </plentry>
            <plentry>
                <pt>state</pt>
                <pd props="bp cs electron flutter mac rn unity unreal"><ph>音乐文件播放状态。</ph><ph props="apple bp cpp cs electron flutter hmos rn unity unreal">详见 <xref keyref="AUDIO_MIXING_STATE_TYPE"/>。</ph>
                    <p props="android">
                    <ul>
                    <li><ph keyref="AUDIO_MIXING_STATE_PLAYING"/> (710): 音乐文件正常播放。</li>
                    <li><ph keyref="AUDIO_MIXING_STATE_PAUSED"/> (711): 音乐文件暂停播放。</li>
                    <li><ph keyref="AUDIO_MIXING_STATE_STOPPED"/> (713): 音乐文件停止播放。</li>
                    <li><ph keyref="AUDIO_MIXING_STATE_FAILED"/> (714): 音乐文件报错。SDK 会在 <parmname>reasonCode</parmname> 参数中返回具体的报错原因。</li>
                    <li props="hide"><ph keyref="AUDIO_MIXING_STATE_COMPLETED"/>(715): 音乐文件已结束一次播放。</li>
                    <li props="hide"><ph keyref="AUDIO_MIXING_STATE_ALL_LOOPS_COMPLETED"/> (716): 音乐文件已结束循环播放。</li>
                    </ul> </p>
                </pd>
            <pd props="android">音乐文件的播放状态：
                    <ul>
                        <li><ph keyref="AUDIO_MIXING_STATE_PLAYING"/> (710)：音乐文件正在播放。</li>
                        <li><ph keyref="AUDIO_MIXING_STATE_PAUSED"/> (711)：音乐文件暂停播放。</li>
                        <li><ph keyref="AUDIO_MIXING_STATE_STOPPED"/> (713)：音乐文件停止播放。</li>
                        <li><ph keyref="AUDIO_MIXING_STATE_FAILED"/> (714)：播放音乐文件时发生异常，具体原因见 <codeph>reason</codeph> 参数。</li>
                        </ul>
                    </pd>
                <pd props="ios">音乐文件的播放状态，详见 <xref keyref="AUDIO_MIXING_STATE_TYPE"/>。</pd>
                <pd props="cpp">音乐文件的播放状态。详见 <xref keyref="AUDIO_MIXING_STATE_TYPE"/>。</pd>
                </plentry>
            <plentry>
                <pt props="apple">reasonCode</pt>
                <pt props="android bp cpp cs electron flutter hmos rn unity unreal">reason</pt>
                <pd><ph>错误码。</ph><ph props="apple bp cpp cs electron flutter hmos rn unity unreal">详见 <xref keyref="AUDIO_MIXING_REASON_TYPE"/>。</ph>
                    <p props="android">
                    <ul>
                    <li><ph keyref="AUDIO_MIXING_REASON_OK"/>(0): 正常。</li>
                    <li><ph keyref="AUDIO_MIXING_REASON_CAN_NOT_OPEN"/> (701): 音乐文件打开出错。</li>
                    <li><ph keyref="AUDIO_MIXING_REASON_TOO_FREQUENT_CALL"/> (702): 音乐文件打开太频繁。</li>
                    <li><ph keyref="AUDIO_MIXING_REASON_INTERRUPTED_EOF"/> (703): 音乐文件播放异常中断。</li>
                    <li><ph keyref="AUDIO_MIXING_REASON_ONE_LOOP_COMPLETED"/>(721): 音乐文件完成一次循环播放。</li>
                    <li props="hide"><ph keyref="AUDIO_MIXING_REASON_START_NEW_LOOP"/>(722): 音乐文件开始新的一次循环播放。</li>
                    <li><ph keyref="AUDIO_MIXING_REASON_ALL_LOOPS_COMPLETED"/>(723): 音乐文件完成所有循环播放。</li>
                    <li><ph keyref="AUDIO_MIXING_REASON_STOPPED_BY_USER"/>(724): 成功调用 <xref keyref="stopAudioMixing"/> 暂停播放音乐文件。</li>
                    </ul> </p>
                </pd>
            </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">reason</pt>
                <pd props="android">错误码：
                    <ul>
                        <li><ph keyref="AUDIO_MIXING_REASON_OK"/> (0)：没有错误。</li>
                        <li><ph keyref="AUDIO_MIXING_REASON_CAN_NOT_OPEN"/> (701)：无法打开音乐文件。</li>
                        <li><ph keyref="AUDIO_MIXING_REASON_TOO_FREQUENT_CALL"/> (702)：打开音乐文件过于频繁。</li>
                        <li><ph keyref="AUDIO_MIXING_REASON_INTERRUPTED_EOF"/> (703)：音乐文件播放被中断。</li>
                        <li><ph keyref="AUDIO_MIXING_REASON_ONE_LOOP_COMPLETED"/> (721)：完成一次循环播放。</li>
                        <li><ph keyref="AUDIO_MIXING_REASON_ALL_LOOPS_COMPLETED"/> (723)：完成所有循环播放。</li>
                        <li><ph keyref="AUDIO_MIXING_REASON_STOPPED_BY_USER"/> (724)：通过调用 <xref keyref="stopAudioMixing"/> 停止播放。</li>
                        </ul>
                    </pd>
                <pd props="ios">错误码，详见 <xref keyref="AUDIO_MIXING_REASON_TYPE"/>。</pd>
                <pd props="cpp">状态变化的原因或错误码。详见 <xref keyref="AUDIO_MIXING_REASON_TYPE"/>。</pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">engine</pt>
                <pd props="ios"><xref keyref="IRtcEngine"/> 对象。</pd>
                </plentry>
        </parml> </section>
    </refbody>
</reference>
