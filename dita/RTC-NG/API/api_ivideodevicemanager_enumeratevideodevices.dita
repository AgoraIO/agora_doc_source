<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_ivideodevicemanager_enumeratevideodevices">
    <title><ph keyref="enumerateVideoDevices"/></title>
    <shortdesc id="short"><ph id="shortdesc">枚举系统中的视频设备。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="enumerateVideoDevices"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec"/>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual IVideoDeviceCollection* enumerateVideoDevices() = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = "Agora|IVideoDeviceManager")
	UVideoDeviceCollection* EnumerateVideoDevices();</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract enumerateVideoDevices(): VideoDeviceInfo[];</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract DeviceInfo[] EnumerateVideoDevices();</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract enumerateVideoDevices(): VideoDeviceInfo[];</codeblock>
            <codeblock props="flutter" outputclass="language-dart">List&lt;VideoDeviceInfo&gt; enumerateVideoDevices();</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <note type="attention" props="bp cpp flutter unity unreal">该方法仅适用于 Windows 和 macOS。</note>
            <p props="bp cpp unreal">你可以通过该方法获取一个包含系统中所有视频设备的 <xref keyref="IVideoDeviceCollection"/> 对象。使用该对象可以枚举视频设备。使用完毕后，必须调用其 <xref keyref="release_IMusicContentCenter"/> 方法释放资源。<xref keyref="IVideoDeviceCollection"/> 对象。使用该对象可以枚举视频设备。使用完毕后，必须调用其 <xref keyref="release_IMusicContentCenter"/> 方法释放资源。<xref keyref="IVideoDeviceCollection"/> 对象，包含系统中所有的视频设备。通过 <apiname keyref="IVideoDeviceCollection"/> 对象，App 可以枚举视频设备。
       App 必须调用 <xref keyref="release_IVideoDeviceCollection"/> 方法在使用过后释放返回的对象。</p>
            <note type="attention" props="cpp">该方法仅适用于 Windows 和 macOS 平台。</note>
            </section>
        <section id="return_values" props="bp cs electron flutter unity unreal">
            <title>返回值</title>
        <ul>
            <li props="bp unreal">方法调用成功: 返回一个 <apiname keyref="IVideoDeviceCollection"/> 对象，其中包含系统中所有视频设备。</li>
            <li props="cs electron flutter unity">方法调用成功：返回一个 <xref keyref="VideoDeviceInfo"/> 数组，其中包含系统中所有视频设备。</li>
            <li props="cs electron flutter unity">方法调用失败: 返回空列表。</li>
            </ul>
        <p props="cpp"><ul>
                        <li>方法调用成功，返回一个 <xref keyref="IVideoDeviceCollection"/> 对象，详见 <xref keyref="IVideoDeviceCollection"/>。</li>
                        <li>方法调用失败，返回 <codeph><ph keyref="NULL"/></codeph>。</li>
                        </ul>
                    </p>
    </section>
    </refbody>
</reference>
