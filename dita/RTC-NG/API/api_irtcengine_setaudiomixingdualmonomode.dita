<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setaudiomixingdualmonomode">
    <title><ph keyref="setAudioMixingDualMonoMode" /></title>
    <shortdesc id="short"><ph id="shortdesc">设置当前音频文件的声道模式。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setAudioMixingDualMonoMode" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setAudioMixingDualMonoMode(Constants.AudioMixingDualMonoMode mode);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioMixingDualMonoMode:(AgoraAudioMixingDualMonoMode)mode;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setAudioMixingDualMonoMode(media::AUDIO_MIXING_DUAL_MONO_MODE mode) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetAudioMixingDualMonoMode(EAUDIO_MIXING_DUAL_MONO_MODE mode);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setAudioMixingDualMonoMode(mode: AudioMixingDualMonoMode): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetAudioMixingDualMonoMode(AUDIO_MIXING_DUAL_MONO_MODE mode);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setAudioMixingDualMonoMode(mode: AudioMixingDualMonoMode): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setAudioMixingDualMonoMode(AudioMixingDualMonoMode mode);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p>在双声道音频文件中，左声道和右声道可以存储不同的音频数据。根据实际需要，你可以设置声道模式为原始模式、左声道模式、右声道模式或混合模式。例如，在 KTV 场景中，音频文件的左声道存储了伴奏，右声道存储了原唱的歌声。如果你只需听伴奏，调用该方法设置音频文件的声道模式为左声道模式；如果你需要同时听伴奏和原唱，调用该方法设置声道模式为混合模式。</p>
            <note type="attention" id="note">
            <ul>
            <li>你需要在调用 <xref keyref="startAudioMixing2" /> 并收到 <xref keyref="onAudioMixingStateChanged" /><codeph>(<ph keyref="AUDIO_MIXING_STATE_PLAYING" />)</codeph> 回调后调用该方法。</li>
            <li>该方法仅适用于双声道的音频文件。</li>
            </ul></note> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>mode</pt>
                <pd>声道模式。详见 <xref keyref="AUDIO_MIXING_DUAL_MONO_MODE" />。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp unity rn electron cs">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
    </refbody>
</reference>
