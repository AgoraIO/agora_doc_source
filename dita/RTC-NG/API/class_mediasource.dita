<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_mediasource">
    <title><ph keyref="MediaSource"/></title>
    <shortdesc id="short"><ph id="shortdesc">需播放的媒体文件的相关信息及播放设置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class MediaPlayerSource {
  public MediaPlayerSource() {
    this.startPos = 0;
    this.enableCache = false;
    this.url = null;
    this.uri = null;
    this.autoPlay = true;
    this.provider = null;
  }
  String url;
  String uri;
  long startPos;
  boolean autoPlay;
  Boolean isAgoraSource;
  Boolean isLiveSource;
  boolean enableCache;
  IMediaPlayerCustomDataProvider provider;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraMediaSource : NSObject
@property(copy, nonatomic) NSString *_Nullable url;
@property(copy, nonatomic) NSString *_Nullable uri;
@property(assign, nonatomic) NSUInteger startPos;
@property(assign, nonatomic) BOOL enableCache;
@property(assign, nonatomic) BOOL autoPlay;
@property(assign, nonatomic) BOOL isAgoraSource;
@property(assign, nonatomic) BOOL isLiveSource;
@property(copy, nonatomic) AgoraRtcMediaPlayerCustomSourceOnReadCallback _Nonnull playerOnReadCallback;
@property(copy, nonatomic) AgoraRtcMediaPlayerCustomSourceOnSeekCallback _Nonnull playerOnSeekCallback;
@end
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct MediaSource {
  const char* url;
  const char* uri;
  int64_t startPos;
  bool autoPlay;
  bool enableCache;
  Optional&lt;bool&gt; isAgoraSource;
  Optional&lt;bool&gt; isLiveSource;
  IMediaPlayerCustomDataProvider* provider;

  MediaSource() : url(NULL), uri(NULL), startPos(0), autoPlay(true), enableCache(false),
                  provider(NULL){
  }
};</codeblock>
        <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FAgoraMediaSource
{
        GENERATED_BODY()

        UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|MediaSource&quot;)
        FString url;
        UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|MediaSource&quot;)
        FString uri;
        UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|MediaSource&quot;)
        int startPos;
        UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|MediaSource&quot;)
        bool autoPlay;
        UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|MediaSource&quot;)
        bool enableCache;
        UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|MediaSource&quot;)
        AGORAOPTIONAL isAgoraSource;
        UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|MediaSource&quot;)
        AGORAOPTIONAL isLiveSource;
        UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|MediaSource&quot;)
        UIMediaPlayerCustomDataProvider* provider;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class MediaSource {

  url?: string;

  uri?: string;

  startPos?: number;

  autoPlay?: boolean;

  enableCache?: boolean;

  isAgoraSource?: boolean;

  isLiveSource?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class MediaSource : OptionalJsonParse
    {
        public string url { set; get; }
        public string uri { set; get; }
        public int64_t startPos { set; get; }
        public bool autoPlay { set; get; }
        public bool enableCache { set; get; }
        public Optional&lt;bool&gt; isAgoraSource = new Optional&lt;bool&gt;();
        public Optional&lt;bool&gt; isLiveSource = new Optional&lt;bool&gt;();
        public IMediaPlayerCustomDataProvider provider { set; get; }

        public MediaSource()
        {
            url = "";
            uri = "";
            startPos = 0;
            autoPlay = true;
            enableCache = false;
            provider = null;
        }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class MediaSource {

  url?: string;

  uri?: string;

  startPos?: number;

  autoPlay?: boolean;

  enableCache?: boolean;

  isAgoraSource?: boolean;

  isLiveSource?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class MediaSource {
  const MediaSource(
      {this.url,
      this.uri,
      this.startPos,
      this.autoPlay,
      this.enableCache,
      this.isAgoraSource,
      this.isLiveSource});

  @JsonKey(name: 'url')
  final String? url;

  @JsonKey(name: 'uri')
  final String? uri;

  @JsonKey(name: 'startPos')
  final int? startPos;

  @JsonKey(name: 'autoPlay')
  final bool? autoPlay;

  @JsonKey(name: 'enableCache')
  final bool? enableCache;

  @JsonKey(name: 'isAgoraSource')
  final bool? isAgoraSource;

  @JsonKey(name: 'isLiveSource')
  final bool? isLiveSource;

  factory MediaSource.fromJson(Map&lt;String, dynamic> json) =>
      _$MediaSourceFromJson(json);

  Map&lt;String, dynamic> toJson() => _$MediaSourceToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p></section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>url</pt>
                <pd>
                    <p>需要播放的媒体资源的 URL。</p>
                    <note>
                        <p props="apple" id="url">如果你打开的为普通媒体资源，请向 <parmname>url</parmname> 传值；如果你打开媒体资源为自定义媒体资源，请向 <parmname>playerOnReadCallback</parmname> 及 <parmname>playerOnSeekCallback</parmname> 传值，同时传值会导致方法调用失败。</p>
                        <p props="android cpp unreal bp unity cs">如果你打开的为普通媒体资源，请向 <parmname>url</parmname> 传值；如果你打开媒体资源为自定义媒体资源，请向 <parmname>provider</parmname> 传值，同时传值会导致方法调用失败。</p>
                    </note></pd>
            </plentry>
            <plentry>
                <pt>uri</pt>
                <pd>媒体文件的 URI（Uniform Resource Identifier），可用于标识媒体文件。</pd>
            </plentry>
            <plentry>
                <pt>startPos</pt>
                <pd>设置起始播放位置 (毫秒)，默认值为 0。</pd>
            </plentry>
            <plentry>
                <pt>autoPlay</pt>
                <pd>打开媒体文件后，是否开启自动播放：

                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>：（默认）开启自动播放。</li>
                    <li><codeph><ph keyref="false" /></codeph>：关闭自动播放。</li>
                    </ul>
                    <note>
                    <p>如果你设置关闭自动播放，打开媒体文件后，请调用 <xref keyref="play" /> 方法来播放媒体文件。</p>
                    </note></pd>
            </plentry>
            <plentry>
                <pt>enableCache</pt>
                <pd>此次播放是否开启实时缓存功能：

                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>：开启实时缓存。</li>
                    <li><codeph><ph keyref="false" /></codeph>：（默认）关闭实时缓存。</li>
                    </ul>
                    <note>
                    <ul>
                    <li>SDK 目前仅支持缓存点播流，但不支持缓存通过 HLS 协议传输的点播流。</li>
                    <li>缓存前，请向 <parmname>uri</parmname> 传值，否则播放器会以媒体文件的 <parmname>url</parmname> 作为缓存索引。</li>
                    <li>开启实时缓存后，播放器会预先缓存当前正在播放的媒体文件的部分数据到本地，当你下次播放该文件时播放器会直接从缓存中加载数据，可节省网络流量。当前缓存的媒体文件的相关统计数据会在媒体文件开始播放后每秒更新一次，详见 <xref keyref="CacheStatistics" />。</li>
                    </ul> </note></pd>
            </plentry>
            <plentry>
                <pt>isAgoraSource</pt>
                <pd>打开的媒体资源是否为通过声网融合 CDN 分发的直播或点播流：
                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>：打开的媒体资源是声网融合 CDN 分发的直播或点播流。</li>
                    <li><codeph><ph keyref="false" /></codeph>：（默认）打开的媒体资源不是声网融合 CDN 分发的直播或点播流。</li>
                    </ul>
                    <note>
                    <p>如果你需要打开的媒体资源为声网融合 CDN 分发的直播流或点播流，请向 <parmname>url</parmname> 传入直播或点播流的 URL 并将 <parmname>isAgoraSource</parmname> 设置为 <codeph><ph keyref="true" /></codeph>，否则无需设置 <parmname>isAgoraSource</parmname>。</p>
                    </note></pd>
            </plentry>
            <plentry>
                <pt>isLiveSource</pt>
                <pd>打开的媒体资源是否为直播流：


                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>：直播流。</li>
                    <li><codeph><ph keyref="false" /></codeph>：（默认）非直播流。</li>
                    </ul>
                    <p>如果你打开的媒体资源为直播流，建议你将该参数设置为 <codeph><ph keyref="true" /></codeph>，可加快打开直播流的速度。</p>
                    <note>
                    <p>仅当打开的媒体资源为直播流时，将 <parmname>isLiveSource</parmname> 设置为 <codeph><ph keyref="true" /></codeph> 后才可加快媒体资源的打开速度。</p>
                    </note> </pd>
            </plentry>
            <plentry props="android cpp unreal bp unity cs">
                    <pt>provider</pt>
                    <pd>
                        <p>自定义媒体资源文件的回调。详见 <xref keyref="IMediaPlayerCustomDataProvider"/>。</p>
                        <note>
                            <p>如果你打开媒体资源为自定义媒体资源，请仅向 <parmname>provider</parmname> 传值，如果你打开的为普通媒体资源，请向 <parmname>url</parmname> 传值。同时向 <parmname>url</parmname> 和 <parmname>provider</parmname> 传值会导致方法调用会失败。</p>
                        </note>
                    </pd>
                </plentry>
            <plentry props="apple">
                <pt>playerOnReadCallback</pt>
                <pd>
                    <p>读取媒体资源数据回调。详见 <xref keyref="onReadData"/>。</p>
                    <note id="note">
                    <p conkeyref="MediaSource/url"/>
                    </note></pd>
            </plentry>
            <plentry props="apple">
                <pt>playerOnSeekCallback</pt>
                <pd>
                    <p>定位媒体资源数据回调。详见 <xref keyref="onSeek"/>。</p>
                    <note conkeyref="MediaSource/note">
                    <p />
                    </note></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
