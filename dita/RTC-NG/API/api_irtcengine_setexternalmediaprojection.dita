<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setexternalmediaprojection">
    <title><ph keyref="setExternalMediaProjection"/></title>
    <shortdesc id="short"><ph id="shortdesc">设置 SDK 外部的 <codeph>MediaProjection</codeph> 采集屏幕视频流。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setExternalMediaProjection"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setExternalMediaProjection(MediaProjection mediaProjection);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec"/>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setExternalMediaProjection(void* mediaProjection) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetExternalMediaProjection(IntPtr mediaProjection);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setExternalMediaProjection(mediaProjection: any): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> setExternalMediaProjection(int mediaProjection);</codeblock> </p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>自从</dt>
                <dd>v4.5.0</dd>
            </dlentry>
            </dl>
             <note type="attention" props="cpp unreal unity rn flutter">该方法仅适用于 Android。</note>
            <p>成功调用该方法后，你设置的外部 <codeph>MediaProjection</codeph> 会替换掉 SDK 申请的 <codeph>MediaProjection</codeph> 采集屏幕视频流。</p>
            <p>当停止屏幕共享或销毁 <xref keyref="IRtcEngine"/> 时，SDK 会自动释放 MediaProjection。</p>
        </section>
        <section id="scenario" deliveryTarget="details">
            <title>适用场景</title>
            <p>如果你具备自行申请 <codeph>MediaProjection</codeph> 的开发能力，可以直接使用该 <codeph>MediaProjection</codeph> 取代 SDK 申请的 <codeph>MediaProjection</codeph> 。以下列出两种使用场景：<ul>
                <li>在定制系统的设备上，可避免系统弹窗（即需要用户授予屏幕采集权限），直接开始采集屏幕视频流。</li>
                <li>一个屏幕共享进程中存在一个或多个子进程，避免在子进程中自行创建对象的过程出错而导致采集失败。</li>
            </ul></p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>该方法需要在 <xref keyref="startScreenCapture"/> 之前调用。</p>
        </section>
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <p>在调用该方法前，必须先申请 <codeph>MediaProjection</codeph> 权限。</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>mediaProjection</pt>
                <pd>一个 <xref keyref="mediaprojection-link"/> 对象，用于采集屏幕视频流。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp electron unity rn cs">
                <li>0: 方法调用成功。</li>
                <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
                </ul> </section>
        </refbody>
</reference>
