<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setremotevideostreamtype">
     <title> <ph keyref="setRemoteVideoStreamType" /> </title>
     <shortdesc id="short"> <ph id="shortdesc">设置订阅的视频流类型。</ph> </shortdesc>
     <prolog>
          <metadata>
               <keywords>
                    <indexterm keyref="setRemoteVideoStreamType" />
               </keywords>
          </metadata>
     </prolog>
     <refbody>
          <section id="prototype">
               <p outputclass="codeblock">
               <codeblock props="android" outputclass="language-java">public abstract int setRemoteVideoStreamType(int uid, int streamType);</codeblock>
               <codeblock props="hmos" outputclass="language-arkts">public abstract setRemoteVideoStreamType(uid: number, streamType: Constants.VideoStreamType): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setRemoteVideoStream:(NSUInteger)uid
                       type:(AgoraVideoStreamType)streamType;</codeblock>
               <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setRemoteVideoStreamType(uid_t uid, VIDEO_STREAM_TYPE streamType) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int SetRemoteVideoStreamType(int64 uid, EVIDEO_STREAM_TYPE streamType);</codeblock>
               <codeblock props="electron" outputclass="language-typescript">abstract setRemoteVideoStreamType(
    uid: number,
    streamType: VideoStreamType
  ): number;</codeblock>
               <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetRemoteVideoStreamType(uint uid, VIDEO_STREAM_TYPE streamType);</codeblock>
               <codeblock props="rn" outputclass="language-typescript">abstract setRemoteVideoStreamType(
    uid: number,
    streamType: VideoStreamType
  ): number;</codeblock>
               <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setRemoteVideoStreamType(
    {required int uid, required VideoStreamType streamType});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
          </section>
          <section id="detailed_desc">
            <title>详情</title>
            <dl outputclass="deprecated" props="android">
            <dlentry>
                <dt>弃用：</dt>
                <dd>自 v4.4.0 起废弃，请改用 <xref keyref="setRemoteVideoStreamType2"/>。</dd>
            </dlentry>
            </dl>
               <p id="desc1">取决于发送端的默认行为和调用 <xref keyref="setDualStreamMode2"/> 的具体设置，接收端调用该方法分为以下几种情况：<ul>
               <li>SDK 默认在发送端开启小流自适应模式 (<apiname keyref="AUTO_SIMULCAST_STREAM"/>)，即：发送端仅发送大流，仅<b>主播身份</b>的接收端可以调用该方法发起小流申请，发送端收到申请后开始自动发送小流，此时频道内所有用户均可调用该方法切换到小流订阅模式。</li>
               <li>当发送端调用 <apiname keyref="setDualStreamMode2"/> 并将 <parmname>mode</parmname> 设置为 <apiname keyref="DISABLE_SIMULCAST_STREAM"/>（始终不发送小流），则调用该方法不生效。</li>
               <li>当发送端调用 <apiname keyref="setDualStreamMode2"/> 并将 <parmname>mode</parmname> 设置为 <apiname keyref="ENABLE_SIMULCAST_STREAM"/>（始终发送小流），则主播或观众身份的接收端均可调用该方法切换到小流订阅模式。</li></ul></p>
               <p id="desc2">在接收视频小流时，SDK 会根据视频窗口的大小动态调整对应视频流的大小，以节约带宽和计算资源。视频小流默认的宽高比和视频大流的宽高比一致。根据当前大流的宽高比，系统会自动分配小流的分辨率、帧率及码率。</p>
               <note type="attention" id="note"><ul>
                    <li>该方法在加入频道前后都能调用。</li>
                    <li>如果既调用了该方法，也调用了 <xref keyref="setRemoteDefaultVideoStreamType"/>，则 SDK 以该方法中的设置为准。</li></ul></note> </section>
          <section id="parameters">
               <title>参数</title>
               <parml>
               <plentry id="uid">
                    <pt>uid</pt>
                    <pd>用户 ID。</pd>
               </plentry>
               <plentry id="streamtype">
                    <pt>streamType</pt>
                    <pd>
                         <p props="hmos apple cpp framework">视频流类型: <xref keyref="VIDEO_STREAM_TYPE"/>。</p>
                         <p props="android">视频流类型：
                         <ul>
                         <li>0：视频大流。</li>
                         <li>1：视频小流。</li>
                         </ul> </p>
                    </pd>
               </plentry>
               </parml> </section>
          <section id="return_values">
               <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
               <ul props="native unreal bp unity electron rn cs">
               <li>0: 方法调用成功。</li>
               <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
               </ul> </section>
     </refbody>
</reference>
