<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_ontranscodedstreamlayoutinfo">
    <title><ph keyref="onTranscodedStreamLayoutInfo"/></title>
    <shortdesc id="short"><ph id="shortdesc">本地用户接收到携带视频合流布局信息的视频流时触发的回调。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onTranscodedStreamLayoutInfo"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onTranscodedStreamLayoutInfo(int uid, VideoLayoutInfo info) {}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine didTranscodedStreamLayoutInfoUpdatedWithUserId:(NSUInteger)uid videoLayoutInfo:(AgoraVideoLayoutInfo* _Nonnull)videoLayoutInfo NS_SWIFT_NAME(rtcEngine(_:didTranscodedStreamLayoutInfoUpdatedWithUserId:videoLayoutInfo:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual void onTranscodedStreamLayoutInfo(uid_t uid, int width, int height, int layoutCount,const VideoLayout* layoutlist)</codeblock>
            <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintNativeEvent, Category = "Agora|Event")
	void OnTranscodedStreamLayoutInfo(int64 uid, int width, int height, int layoutCount, const TArray&lt;FVideoLayout&gt;&amp; layoutlist);</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual void OnTranscodedStreamLayoutInfo(RtcConnection connection, uint uid, int width, int height, int layoutCount, VideoLayout[] layoutlist)</codeblock>
            <codeblock props="rn" outputclass="language-typescript">onTranscodedStreamLayoutInfo?(
    connection: RtcConnection,
    uid: number,
    width: number,
    height: number,
    layoutCount: number,
    layoutlist: VideoLayout[]
  ): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(
    RtcConnection connection,
    int uid,
    int width,
    int height,
    int layoutCount,
    List&lt;VideoLayout&gt; layoutlist)? onTranscodedStreamLayoutInfo;</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p>当本地第一次接收到合图服务器发送的合图视频流，或者合图流的布局信息有变化时，SDK 会触发该回调，报告合图视频流中每一路子视频流的布局信息。</p>
            <note props="cpp flutter unity">该回调仅适用于 Android 和 iOS。</note>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>当本地用户首次接收到视频合流服务器发送的视频合流流，或该视频合流流的布局信息发生变化时触发。</p>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry conkeyref="onJoinChannelSuccess/engine" props="apple">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="joinChannelEx/connection" props="framework">
                <pt/>
                <pd/>
            </plentry>
            <plentry id="uid">
                <pt>uid</pt>
                <pd props="bp cs electron flutter mac rn unity unreal">发布合图视频流的用户 ID。</pd>
            <pd props="android ios">发布该混合视频流的用户 ID。</pd>
                <pd props="cpp">发布该视频合流流的用户 ID。</pd>
                </plentry>
                <plentry props="cpp framework">
                    <pt props="cpp framework">width</pt>
                    <pd props="android apple bp cs electron flutter rn unity unreal">合图视频流的宽度 (px)。</pd>
                <pd props="cpp">视频合流流的宽度（像素）。</pd>
                </plentry>
                <plentry props="cpp framework">
                    <pt props="cpp framework">height</pt>
                    <pd props="android apple bp cs electron flutter rn unity unreal">合图视频流的高度 (px)。</pd>
                <pd props="cpp">视频合流流的高度（像素）。</pd>
                </plentry>
                <plentry props="cpp framework">
                    <pt props="cpp framework">layoutCount</pt>
                    <pd props="android apple bp cs electron flutter rn unity unreal">合图视频流中布局信息的数量。</pd>
                <pd props="cpp">视频合流流中布局信息的数量。</pd>
                </plentry>
                <plentry>
                    <pt>info</pt>
                    <pt props="apple">videoLayoutInfo</pt>
                    <pt props="cpp framework">layoutlist</pt>
                    <pd props="apple bp cpp cs electron flutter rn unity unreal">某一路合图视频流的详细布局信息。详见 <xref keyref="VideoLayout" props="cpp framework"/><xref keyref="VideoLayoutInfo" props="android apple hmos"/>。</pd>
                <pd props="android">子视频流的布局信息，详见 <xref keyref="VideoLayoutInfo"/>。</pd>
                </plentry>
            <plentry props="cpp">
                <pt props="cpp">layoutlist</pt>
                <pd props="cpp">子视频流的布局信息。详见 <xref keyref="VideoLayout"/>。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">videoLayoutInfo</pt>
                <pd props="ios">混合流中某个子视频流的视频合流布局信息，详见 <xref keyref="VideoLayoutInfo"/>。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">engine</pt>
                <pd props="ios"><xref keyref="IRtcEngine"/> 对象。</pd>
            </plentry>
        </parml> </section>
        </refbody>
</reference>
