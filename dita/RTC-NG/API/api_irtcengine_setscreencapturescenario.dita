<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setscreencapturescenario">
    <title><ph keyref="setScreenCaptureScenario" /></title>
    <shortdesc id="short"><ph id="shortdesc">设置屏幕共享的场景。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setScreenCaptureScenario" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setScreenCaptureScenario(Constants.ScreenScenarioType screenScenario);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setScreenCaptureScenario:(AgoraScreenScenarioType)scenarioType
  NS_SWIFT_NAME(setScreenCaptureScenario(_:));
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setScreenCaptureScenario(SCREEN_SCENARIO_TYPE screenScenario) = 0;
</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetScreenCaptureScenario(ESCREEN_SCENARIO_TYPE screenScenario);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setScreenCaptureScenario(screenScenario: ScreenScenarioType): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetScreenCaptureScenario(SCREEN_SCENARIO_TYPE screenScenario);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setScreenCaptureScenario(screenScenario: ScreenScenarioType): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setScreenCaptureScenario(ScreenScenarioType screenScenario);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p>开启屏幕共享或窗口共享时，你可以调用该方法设置屏幕共享的场景，SDK 会根据你设置的场景调整共享画面的画质。</p> 
        <note>声网建议你在加入频道前调用该方法。</note>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt props="apple">scenarioType</pt>
                <pt props="android cpp unreal bp rn unity electron flutter cs">screenScenario</pt>
                <pd>屏幕共享的场景，详见 <xref keyref="SCREEN_SCENARIO_TYPE" />。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul>
            <li props="native unreal bp electron unity rn cs">0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
    </refbody>
</reference>
