<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_rte_getfrombridge">
    <title><ph keyref="GetFromBridge"/></title>
    <shortdesc id="short"><ph id="shortdesc">从 <ph keyref="IRtcEngine"/> 中桥接出一个 RTE 对象。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="GetFromBridge"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static synchronized Rte getFromBridge() throws RteException;</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">+ (instancetype _Nonnull)getFromBridge:(AgoraRteError * _Nullable)error;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">static Rte GetFromBridge(Error* err = nullptr);</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>自从</dt>
                <dd>v4.5.0</dd>
            </dlentry>
            </dl>
            <p>调用该方法创建的 RTE 对象，无需再通过 <xref keyref="InitMediaEngine"/> 进行初始化。如果你之前未创建并初始化 RTC 引擎，可以先调用 <xref keyref="Rte"/> 创建一个 RTE 对象，然后再调用 <xref keyref="InitMediaEngine"/> 进行初始化。</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>调用该方法前，请确保已调用 <xref keyref="initialize"/> 初始化 RTC 引擎。</p>
        </section>
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <p>无。</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title><ph props="apple cpp">参数</ph></title>
            <parml props="apple cpp">
                <plentry>
                    <pt props="cpp">err</pt>
                    <pt props="apple">error</pt>
                    <pd>指向 <xref keyref="Error"/> 对象的指针，用于接收状态及错误码。</pd>
                </plentry>
            </parml>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。</p>
            <p props="cpp apple unreal bp electron unity rn cs">一个 RTE 对象。</p></section>
        <section id="exception" props="android" conkeyref="SetAppId/exception"/>
        </refbody>
</reference>
