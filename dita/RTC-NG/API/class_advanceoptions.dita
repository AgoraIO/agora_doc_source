<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_advanceoptions">
    <title><ph keyref="AdvanceOptions"/></title>
    <shortdesc id="short"><ph id="shortdesc">视频编码的高级选项。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">  static public class AdvanceOptions {
    public ENCODING_PREFERENCE encodingPreference;
    public COMPRESSION_PREFERENCE compressionPreference;
    public boolean encodeAlpha;
    public AdvanceOptions(ENCODING_PREFERENCE encodingPreference,
        COMPRESSION_PREFERENCE compressionPreference, boolean encodeAlpha) {
      this.encodingPreference = encodingPreference;
      this.compressionPreference = compressionPreference;
      this.encodeAlpha = encodeAlpha;
    }
    public AdvanceOptions() {
      this.encodingPreference = ENCODING_PREFERENCE.PREFER_AUTO;
      this.compressionPreference = COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY;
      this.encodeAlpha = false;
    }
  }</codeblock>
              <codeblock props="hmos" outputclass="language-arkts">export class AdvanceOptions {
  public encodingPreference:EncodingPrefence = EncodingPrefence.PREFER_AUTO;
  public compressionPreference:CompressionPrefence = CompressionPrefence.PREFER_LOW_LATENCY;
  constructor() {
  }
}</codeblock>
              <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraAdvancedVideoOptions : NSObject
@property(assign, nonatomic) AgoraEncodingPreference encodingPreference;
@property(assign, nonatomic) AgoraCompressionPreference compressionPreference;
@property(assign, nonatomic) BOOL encodeAlpha;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct AdvanceOptions {
  ENCODING_PREFERENCE encodingPreference;
  COMPRESSION_PREFERENCE compressionPreference;
  bool encodeAlpha;
  AdvanceOptions() : encodingPreference(PREFER_AUTO), 
                     compressionPreference(PREFER_LOW_LATENCY),
                     encodeAlpha(false) {}

  AdvanceOptions(ENCODING_PREFERENCE encoding_preference, 
                 COMPRESSION_PREFERENCE compression_preference,
                 bool encode_alpha) : 
                 encodingPreference(encoding_preference),
                 compressionPreference(compression_preference),
                 encodeAlpha(encode_alpha) {}

  bool operator==(const AdvanceOptions&amp; rhs) const {
    return encodingPreference == rhs.encodingPreference &amp;&amp; 
           compressionPreference == rhs.compressionPreference &amp;&amp;
           encodeAlpha == rhs.encodeAlpha;
  }
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FAdvanceOptions {
	GENERATED_BODY()
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AdvanceOptions")
	FENUMWRAP_ENCODING_PREFERENCE encodingPreference = EENUMCUSTOM_ENCODING_PREFERENCE::PREFER_AUTO;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AdvanceOptions")
	ECOMPRESSION_PREFERENCE compressionPreference = ECOMPRESSION_PREFERENCE::PREFER_QUALITY;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AdvanceOptions")
	bool encodeAlpha = false;

	FAdvanceOptions() {}
	FAdvanceOptions(const agora::rtc::AdvanceOptions &amp; AgoraData){
		encodingPreference = AgoraData.encodingPreference;
		compressionPreference = static_cast&lt;ECOMPRESSION_PREFERENCE&gt;(AgoraData.compressionPreference);
		encodeAlpha = AgoraData.encodeAlpha;
	}
	agora::rtc::AdvanceOptions CreateAgoraData() const{
		agora::rtc::AdvanceOptions AgoraData;
		AgoraData.encodingPreference = encodingPreference.GetRawValue();
		AgoraData.compressionPreference =static_cast&lt;agora::rtc::COMPRESSION_PREFERENCE&gt;(compressionPreference);
		AgoraData.encodeAlpha = encodeAlpha;
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::AdvanceOptions&amp; AgoraData) const {
			}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class AdvanceOptions {
  encodingPreference?: EncodingPreference;
  compressionPreference?: CompressionPreference;
  encodeAlpha?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class AdvanceOptions
    {
        public ENCODING_PREFERENCE encodingPreference;
        public COMPRESSION_PREFERENCE compressionPreference;
        public bool encodeAlpha;

        public AdvanceOptions()
        {
            this.encodingPreference = ENCODING_PREFERENCE.PREFER_AUTO;
            this.compressionPreference = COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY;
            this.encodeAlpha = false;
        }

        public AdvanceOptions(ENCODING_PREFERENCE encoding_preference, COMPRESSION_PREFERENCE compression_preference, bool encode_alpha)
        {
            this.encodingPreference = encoding_preference;
            this.compressionPreference = compression_preference;
            this.encodeAlpha = encode_alpha;
        }

    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class AdvanceOptions {
  encodingPreference?: EncodingPreference;
  compressionPreference?: CompressionPreference;
  encodeAlpha?: boolean;
}</codeblock>
                <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class AdvanceOptions {
  const AdvanceOptions(
      {this.encodingPreference, this.compressionPreference, this.encodeAlpha});

  @JsonKey(name: 'encodingPreference')
  final EncodingPreference? encodingPreference;

  @JsonKey(name: 'compressionPreference')
  final CompressionPreference? compressionPreference;

  @JsonKey(name: 'encodeAlpha')
  final bool? encodeAlpha;

  factory AdvanceOptions.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$AdvanceOptionsFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$AdvanceOptionsToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <p></p>
            </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="ios">
                <pt props="ios">encodingPreference</pt>
                <pd>视频编码器偏好。详见 <xref keyref="ENCODING_PREFERENCE"/>。</pd>
                <pd props="ios">视频编码器的偏好设置。详见 <xref keyref="ENCODING_PREFERENCE"/>。</pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">compressionPreference</pt>
                <pd>视频编码的压缩偏好。详见 <xref keyref="COMPRESSION_PREFERENCE"/>。</pd>
                <pd props="ios">视频编码的压缩偏好设置。详见 <xref keyref="COMPRESSION_PREFERENCE"/>。</pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">encodeAlpha</pt>
                <pd>当视频帧包含 Alpha 通道数据时，设置是否将 Alpha 数据编码并发送至远端：
                        <ul>
                        <li><codeph><ph keyref="true"/></codeph>：对 Alpha 数据进行编码发送。</li>
                        <li><codeph><ph keyref="false"/></codeph>：（默认）不对 Alpha 数据进行编码发送。</li>
                        </ul></pd>
                <pd props="ios">是否对视频帧中存在的 Alpha 数据进行编码并发送到远端：
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：编码并发送 Alpha 数据。</li>
                        <li><codeph><ph keyref="false"/></codeph>：（默认）不编码也不发送 Alpha 数据。</li>
                        </ul>
                    </pd>
                </plentry>
            </parml> </section>
    </refbody>
</reference>
