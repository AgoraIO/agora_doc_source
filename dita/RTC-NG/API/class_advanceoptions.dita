<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_advanceoptions">
    <title><ph keyref="AdvanceOptions"/></title>
    <shortdesc id="short"><ph id="shortdesc">用于设置高级视频编码选项。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">  static public class AdvanceOptions {
    public ENCODING_PREFERENCE encodingPreference;
    public COMPRESSION_PREFERENCE compressionPreference;
    public boolean encodeAlpha;
    public AdvanceOptions(ENCODING_PREFERENCE encodingPreference,
        COMPRESSION_PREFERENCE compressionPreference, boolean encodeAlpha) {
      this.encodingPreference = encodingPreference;
      this.compressionPreference = compressionPreference;
      this.encodeAlpha = encodeAlpha;
    }
    public AdvanceOptions() {
      this.encodingPreference = ENCODING_PREFERENCE.PREFER_AUTO;
      this.compressionPreference = COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY;
      this.encodeAlpha = false;
    }
  }</codeblock>
              <codeblock props="hmos" outputclass="language-arkts">export class AdvanceOptions {
                public encodingPreference:EncodingPrefence = EncodingPrefence.PREFER_AUTO;
                public compressionPreference:CompressionPrefence = CompressionPrefence.PREFER_LOW_LATENCY;
                constructor() {
                }
              }</codeblock>
              <codeblock props="ios mac" outputclass="language-objectivec">  __attribute__((visibility("default"))) @interface AgoraAdvancedVideoOptions : NSObject
@property(assign, nonatomic) AgoraEncodingPreference encodingPreference;
@property(assign, nonatomic) AgoraCompressionPreference compressionPreference;
@property(assign, nonatomic) BOOL encodeAlpha;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct AdvanceOptions {
ENCODING_PREFERENCE encodingPreference;
COMPRESSION_PREFERENCE compressionPreference;
bool encodeAlpha;
AdvanceOptions() : encodingPreference(PREFER_AUTO), compressionPreference(PREFER_COMPRESSION_AUTO), encodeAlpha(false) {}
AdvanceOptions(ENCODING_PREFERENCE encoding_preference, COMPRESSION_PREFERENCE compression_preference, bool encode_alpha) : encodingPreference(encoding_preference), compressionPreference(compression_preference), encodeAlpha(encode_alpha) {}
bool operator==(const AdvanceOptions&amp;amp; rhs) const {
return encodingPreference == rhs.encodingPreference &amp;amp;&amp;amp; compressionPreference == rhs.compressionPreference &amp;amp;&amp;amp; encodeAlpha == rhs.encodeAlpha;
}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FAdvanceOptions {

	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AdvanceOptions")
	FENUMWRAP_ENCODING_PREFERENCE encodingPreference = EENUMCUSTOM_ENCODING_PREFERENCE::PREFER_AUTO;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AdvanceOptions")
	ECOMPRESSION_PREFERENCE compressionPreference;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class AdvanceOptions {
  encodingPreference?: EncodingPreference;
  compressionPreference?: CompressionPreference;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class AdvanceOptions
              {
                  public ENCODING_PREFERENCE encodingPreference { set; get; }
                  public COMPRESSION_PREFERENCE compressionPreference { set; get; }

                  public AdvanceOptions()
                  {
                      encodingPreference = ENCODING_PREFERENCE.PREFER_AUTO;
                      compressionPreference = COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY;
                  }

                  public AdvanceOptions(ENCODING_PREFERENCE encoding_preference, COMPRESSION_PREFERENCE compression_preference)
                  {
                      encodingPreference = encoding_preference;
                      compressionPreference = compression_preference;
                  }
              }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class AdvanceOptions {
  encodingPreference?: EncodingPreference;
  compressionPreference?: CompressionPreference;
}</codeblock>
                <codeblock props="flutter" outputclass="language-dart">class AdvanceOptions {
  const AdvanceOptions({this.encodingPreference, this.compressionPreference});

  @JsonKey(name: 'encodingPreference')
  final EncodingPreference? encodingPreference;

  @JsonKey(name: 'compressionPreference')
  final CompressionPreference? compressionPreference;

  factory AdvanceOptions.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;
      _$AdvanceOptionsFromJson(json);

  Map&amp;lt;String, dynamic&amp;gt; toJson() =&amp;gt; _$AdvanceOptionsToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <p/>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="cpp">
                <pt props="cpp">encodingPreference</pt>
                <pd>视频编码器偏好。详见 <xref keyref="ENCODING_PREFERENCE"/>。</pd>
                <pd props="cpp">编码偏好设置。</pd>
            </plentry>
            <plentry props="cpp">
                <pt props="cpp">compressionPreference</pt>
                <pd>视频编码的压缩偏好。详见 <xref keyref="COMPRESSION_PREFERENCE"/>。</pd>
                <pd props="cpp">压缩偏好设置。</pd>
            </plentry>
            <plentry props="cpp">
                <pt props="cpp">encodeAlpha</pt>
                <pd>当视频帧包含 Alpha 通道数据时，设置是否将 Alpha 数据编码并发送至远端：
                        <ul>
                        <li><codeph><ph keyref="true"/></codeph>：对 Alpha 信息进行编码发送。</li>
                        <li><codeph><ph keyref="false"/></codeph>：（默认）不对 Alpha 信息进行编码发送。</li>
                        </ul></pd>
                <pd props="cpp">是否编码 alpha 通道。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
