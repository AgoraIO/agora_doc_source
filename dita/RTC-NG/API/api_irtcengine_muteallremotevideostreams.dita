<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_muteallremotevideostreams">
    <title><ph keyref="muteAllRemoteVideoStreams" /></title>
    <shortdesc id="short"><ph id="shortdesc">取消或恢复订阅所有远端用户的视频流。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="muteAllRemoteVideoStreams" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int muteAllRemoteVideoStreams(boolean muted);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)muteAllRemoteVideoStreams:(BOOL)mute;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int muteAllRemoteVideoStreams(bool mute) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int MuteAllRemoteVideoStreams(bool mute);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract muteAllRemoteVideoStreams(mute: boolean): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int MuteAllRemoteVideoStreams(bool mute);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract muteAllRemoteVideoStreams(mute: boolean): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; muteAllRemoteVideoStreams(bool mute);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p id="desc">成功调用该方法后，本地用户会取消或恢复订阅所有远端用户的视频流，包括在调用该方法后加入频道的用户的视频流。</p>
            <note type="attention" id="note">
                <p>SDK 默认在加入频道时订阅所有远端用户的视频流，如果要修改此行为，可以在调用 <xref keyref="joinChannel2"/> 加入频道时设置 <parmname>autoSubscribeVideo</parmname> 为 <codeph><ph keyref="false"/></codeph>，即可在加入频道时取消订阅所有用户的视频流。</p>
            </note>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>该方法需要在加入频道后调用。</p>
            <note type="attention">如果你在离开频道后调用 <apiname keyref="muteAllRemoteVideoStreams"/>(<codeph><ph keyref="true"/></codeph>)，则下次加入频道时，将不会订阅任何用户的视频流。</note>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <p>如果在调用该方法之后又调用了 <xref keyref="enableVideo"/> 或 <xref keyref="disableVideo"/>，则后调用的方法会生效。</p>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry id="mute">
                <pt props="android">muted</pt>
                <pt props="ios mac cpp unreal bp unity flutter rn electron cs">mute</pt>
                <pd>
                    <p>是否取消订阅所有远端用户的视频流。



                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>: 取消订阅所有用户的视频流。</li>
                    <li><codeph><ph keyref="false" /></codeph>:（默认）订阅所有用户的视频流。</li>
                    </ul> </p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: 方法调用成功。</li>
            <li> &lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
    </refbody>
</reference>