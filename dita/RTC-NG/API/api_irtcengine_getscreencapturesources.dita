<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_getscreencapturesources">
    <title><ph keyref="getScreenCaptureSources" /></title>
    <shortdesc id="short"><ph id="shortdesc">获取可共享的屏幕和窗口对象列表。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="getScreenCaptureSources" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">- (NSArray&lt;AgoraScreenCaptureSourceInfo*&gt;* _Nullable)getScreenCaptureSourcesWithThumbSize:(NSSize)thumbSize iconSize:(NSSize)iconSize includeScreen:(BOOL)includeScreen;
</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual IScreenCaptureSourceList* getScreenCaptureSources(const SIZE&amp; thumbSize, const SIZE&amp; iconSize, const bool includeScreen) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract getScreenCaptureSources(
    thumbSize: Size,
    iconSize: Size,
    includeScreen: boolean
  ): ScreenCaptureSourceInfo[];</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract ScreenCaptureSourceInfo[] GetScreenCaptureSources(SIZE thumbSize, SIZE iconSize, bool includeScreen);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract getScreenCaptureSources(
    thumbSize: Size,
    iconSize: Size,
    includeScreen: boolean
  ): ScreenCaptureSourceInfo[];</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;List&lt;ScreenCaptureSourceInfo&gt;&gt; getScreenCaptureSources(
    {required Size thumbSize,
    required Size iconSize,
    required bool includeScreen});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p>屏幕共享或窗口共享前，你可以调用该方法获取可共享的屏幕和窗口的对象列表，方便用户通过列表中的缩略图选择共享某个显示器的屏幕或某个窗口。列表中包含窗口 ID 和屏幕 ID 等重要信息，你可以获取到 ID 后再调用 <xref keyref="startScreenCaptureByWindowId" /> 或 <xref keyref="startScreenCaptureByDisplayId" /> 开启共享。</p>
            <note type="note" props="cpp">该方法仅适用于 macOS 和 Windows。</note> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>thumbSize</pt>
                <pd><ph>屏幕或窗口的缩略图的目标尺寸（宽高单位为像素）。</ph><ph props="cpp">详见 <xref keyref="SIZE-link" />。</ph><ph> SDK 会在保证原图不变形的前提下，缩放原图，使图片最长边和目标尺寸的最长边的长度一致。例如，原图宽高为 400 × 300，<parmname>thumbSize</parmname> 为 100 x 100，缩略图实际尺寸为 100 × 75。如果目标尺寸大于原图尺寸，缩略图即为原图，SDK 不进行缩放操作。</ph></pd>
            </plentry>
            <plentry>
                <pt>iconSize</pt>
                <pd><ph>程序所对应的图标的目标尺寸（宽高单位为像素）。</ph><ph props="cpp">详见 <xref keyref="SIZE-link" />。</ph><ph>SDK 会在保证原图不变形的前提下，缩放原图，使图片最长边和目标尺寸的最长边的长度一致。例如，原图宽高为 400 × 300，<parmname>iconSize</parmname> 为 100 × 100，图标实际尺寸为 100 × 75。如果目标尺寸大于原图尺寸，图标即为原图，SDK 不进行缩放操作。</ph></pd>
            </plentry>
            <plentry>
                <pt>includeScreen</pt>
                <pd>除了窗口信息外，SDK 是否返回屏幕信息：
                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>：SDK 返回屏幕和窗口信息。 </li>
                    <li><codeph><ph keyref="false" /></codeph>：SDK 仅返回窗口信息。</li>
                    </ul></pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title>返回值</title>
            <p props="cpp android"><xref keyref="IScreenCaptureSourceList" /></p>
            <p props="mac electron unity flutter"><xref keyref="ScreenCaptureSourceInfo" /> 数组。</p>
        </section>
    </refbody>
</reference>
