<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_release">
    <title><ph keyref="release"/></title>
    <shortdesc id="short"><ph id="shortdesc">销毁 <xref keyref="IRtcEngine"/> 实例并释放相关资源。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="release"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static synchronized void destroy()</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public static destroy(): Promise&lt;void&gt; {
    return RtcEngineImpl.destroyEngine();
  };</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">+ (void)destroy NS_SWIFT_NAME(destroy());</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual void release(bool sync = false) = 0;</codeblock>
            <codeblock props="unreal bp" outputclass="language-cpp">static void Release(bool sync = false);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract release(sync?: boolean): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract void Dispose(bool sync = false);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract release(sync?: boolean): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; release({bool sync = false});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p>推荐在用户偶尔进行语音或视频通话的应用中使用。当不再需要实时通信功能时，调用该方法以释放资源用于其他操作。</p>
            <p props="bp cpp cs electron flutter rn unity unreal">调用该方法后，你将无法再使用 SDK 的其它方法和回调。如需再次使用实时音视频通信功能， 你必须依次重新调用 <xref keyref="createAgoraRtcEngine"/> 和 <xref keyref="initialize"/> 方法创建一个新的 <apiname keyref="IRtcEngine"/> 对象。</p>
            <p props="android apple">调用该方法后，你将无法再使用 SDK 的其它方法和回调。如需再次使用实时音视频通信功能，你必须依次重新调用 <xref keyref="initialize"/> 方法创建一个新的 <apiname keyref="IRtcEngine"/> 对象。</p>
            <note type="attention"><ul>
            <li>该方法为同步调用。需要等待 <apiname keyref="IRtcEngine"/> 资源释放后才能执行其他操作（例如：创建一个新的 <apiname keyref="IRtcEngine"/> 对象），因此建议在子线程中调用该方法，避免主线程阻塞。</li>
            <li>不建议在 SDK 的回调中调用 <apiname keyref="release"/>，否则由于 SDK 要等待回调返回才能回收相关的对象资源，会造成死锁。</li></ul></note> <note type="attention" props="cpp">如果计划在销毁当前 <xref keyref="IRtcEngine"/> 实例后创建新的实例，请确保该方法执行完成后再进行创建。不要在任何 SDK 回调中调用该方法，否则可能导致死锁。</note>
            <note type="attention" props="apple"><ul>
                        <li>请在子线程中调用该方法。</li>
                        <li>该方法为同步调用，调用结果会在 <xref keyref="IRtcEngine"/> 对象资源释放后返回。请勿在 SDK 生成的任何回调中调用该方法，否则可能导致死锁。</li>
                        </ul>
                    </note>
            <note type="attention" props="android"><ul>
                        <li>调用该方法后请勿立即卸载 SDK 的动态库，否则可能因 SDK 清理线程尚未退出而导致崩溃。</li>
                        <li>请在子线程中调用此方法。</li>
                        <li>一旦应用销毁已创建的 <xref keyref="IRtcEngine"/> 实例，便无法再使用 SDK 中的任何方法或回调。</li>
                        </ul>
                    </note>
            </section>
        <section id="parameters" props="bp cpp cs electron flutter rn unity unreal">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>sync</pt>
                <pd>
                    <p>该方法是否为同步调用：</p>
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>:该方法为同步调用。</li>
                    <li><codeph><ph keyref="false"/></codeph>:该方法为异步调用。目前该方法仅支持同步调用，请不要将该参数设置为该值。</li>
                    </ul> </pd>
            </plentry>
            <plentry props="cpp">
                <pt props="cpp">callback</pt>
                <pd props="cpp">可选的 <xref keyref="RtcEngineReleaseCallback"/> 函数指针，用于配置引擎的同步或异步销毁方式：
                    <ul>
                        <li>非 <codeph><ph keyref="NULL"/></codeph>：异步销毁。该方法会立即返回，此时引擎资源可能尚未完全释放。引擎销毁完成后会触发 <xref keyref="RtcEngineReleaseCallback"/>。</li>
                        <li><codeph><ph keyref="NULL"/></codeph>：同步销毁。该方法仅在引擎资源完全释放后才返回。</li>
                        </ul>
                    </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
