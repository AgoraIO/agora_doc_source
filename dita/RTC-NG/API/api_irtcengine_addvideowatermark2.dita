<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_addvideowatermark2">
    <title><ph keyref="addVideoWatermark2"/></title>
    <shortdesc id="short"><ph id="shortdesc">添加本地视频水印。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="addVideoWatermark2"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int addVideoWatermark(String watermarkUrl, WatermarkOptions options);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)addVideoWatermark:(NSURL* _Nonnull)url options:(WatermarkOptions* _Nonnull)options;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int addVideoWatermark(const char* watermarkUrl, const WatermarkOptions&amp; options) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract addVideoWatermark(
    watermarkUrl: string,
    options: WatermarkOptions
  ): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int AddVideoWatermark(string watermarkUrl, WatermarkOptions options);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract addVideoWatermark(
    watermarkUrl: string,
    options: WatermarkOptions
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; addVideoWatermark(
    {required String watermarkUrl, required WatermarkOptions options});</codeblock>
            <codeblock props="unreal" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p id="desc1">该方法将一张 PNG 图片作为水印添加到本地发布的直播视频流上，同一直播频道中的用户、旁路直播观众和采集设备都能看到或采集到该水印图片。
   Agora 当前只支持在直播视频流中添加一个水印，后添加的水印会替换掉之前添加的水印。</p>
            <p>水印坐标和 <xref keyref="setVideoEncoderConfiguration"/> 方法中的设置有依赖关系：

            
            <ul>
            <li>如果视频编码方向（<xref keyref="ORIENTATION_MODE"/>）固定为横屏或自适应模式下的横屏，那么水印使用横屏坐标。</li>
            <li>如果视频编码方向（<apiname keyref="ORIENTATION_MODE"/>）固定为竖屏或自适应模式下的竖屏，那么水印使用竖屏坐标。</li>
            <li>设置水印坐标时，水印的图像区域不能超出 <apiname keyref="setVideoEncoderConfiguration"/> 方法中设置的视频尺寸，否则超出部分将被裁剪。</li>
            </ul> </p>
            <note type="attention">
            <ul>
            <li>你需要在调用 <xref keyref="enableVideo"/> 方法之后再调用该方法。</li>
            <li>如果你只是在旁路推流时添加水印，你可以使用该方法或 <xref keyref="setLiveTranscoding"/> 方法设置水印。</li>
            <li>待添加水印图片必须是 PNG 格式。该方法支持所有像素格式的 PNG 图片：RGBA、RGB、Palette、Gray 和 Alpha_gray。</li>
            <li>如果待添加的 PNG 图片的尺寸与你在该方法中设置的尺寸不一致，SDK 会对 PNG 图片进行缩放或裁剪，以与设置相符。</li>
            <li>如果你已经使用 <xref keyref="startPreview" props="native unity"/> <xref keyref="startPreview2" props="rn electron flutter"/> 方法开启本地视频预览，那么该方法的 <codeph>visibleInPreview</codeph> 可设置水印在预览时是否可见。</li>
            <li>如果你已设置本地视频为镜像模式，那么此处的本地水印也为镜像。为避免本地用户看本地视频时的水印也被镜像，Agora 建议你不要对本地视频同时使用镜像和水印功能，请在应用层实现本地水印功能。</li>
            </ul> </note> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry id="url">
                <pt props="android cpp electron unity flutter rn">watermarkUrl</pt>
                <pt props="ios mac">url</pt>
                <pd>待添加的水印图片的本地路径。该方法支持从本地绝对/相对路径添加水印图片。</pd>
            </plentry>
            <plentry id="options">
                <pt>options</pt>
                <pd>待添加的水印图片的设置选项，详见 <xref keyref="WatermarkOptions"/> 。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native electron unity rn">
            <title>返回值</title>
            <ul>
            <li>0: 方法调用成功</li>
            <li>&lt; 0: 方法调用失败</li>
            </ul> </section>
    </refbody>
</reference>
