<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_localaudiostats">
    <title><ph keyref="LocalAudioStats"/></title>
    <shortdesc id="short"><ph id="shortdesc">本地音频统计信息。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static class LocalAudioStats {
    public int numChannels;
    public int sentSampleRate;
    public int sentBitrate;
    public int internalCodec;
    public int txPacketLossRate;
    public int audioDeviceDelay;
    public int audioPlayoutDelay;
    public int earMonitorDelay;
    public int aecEstimatedDelay;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">export class LocalAudioStats {
  
  public numChannels:number = 0;
  
  public sentSampleRate:number = 0;
  
  public sentBitrate:number = 0;
  
  public internalCodec:number = 0;
  
  public txPacketLossRate:number = 0;
  
  public audioDeviceDelay:number = 0;
  
  public audioPlayoutDelay:number = 0;
  
  public earMonitorDelay:number = 0;
  
  public aecEstimatedDelay:number = 0;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraRtcLocalAudioStats : NSObject
@property(assign, nonatomic) NSUInteger numChannels;
@property(assign, nonatomic) NSUInteger sentSampleRate;
@property(assign, nonatomic) NSUInteger sentBitrate;
@property(assign, nonatomic) NSUInteger internalCodec;
@property(assign, nonatomic) NSUInteger txPacketLossRate;
@property(assign, nonatomic) NSUInteger audioDeviceDelay;
@property(assign, nonatomic) NSUInteger audioPlayoutDelay;
@property(assign, nonatomic) NSUInteger earMonitorDelay;
@property(assign, nonatomic) NSUInteger aecEstimatedDelay;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct LocalAudioStats
{
  int numChannels;
  int sentSampleRate;
  int sentBitrate;
  int internalCodec;
  unsigned short txPacketLossRate;
  int audioDeviceDelay;
  int earMonitorDelay;
  int aecEstimatedDelay;
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FLocalAudioStats
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LocalAudioStats")
	int numChannels = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LocalAudioStats")
	int sentSampleRate = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LocalAudioStats")
	int sentBitrate = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LocalAudioStats")
	int internalCodec = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LocalAudioStats")
	int txPacketLossRate = 0; 	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LocalAudioStats")
	int audioDeviceDelay = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LocalAudioStats")
	int audioPlayoutDelay = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LocalAudioStats")
	int earMonitorDelay = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|LocalAudioStats")
	int aecEstimatedDelay = 0;
	FLocalAudioStats(){}
	FLocalAudioStats(const agora::rtc::LocalAudioStats &amp; AgoraData){
		numChannels = AgoraData.numChannels;
		sentSampleRate = AgoraData.sentSampleRate;
		sentBitrate = AgoraData.sentBitrate;
		internalCodec = AgoraData.internalCodec;
		txPacketLossRate = AgoraData.txPacketLossRate;
		audioDeviceDelay = AgoraData.audioDeviceDelay;
		audioPlayoutDelay = AgoraData.audioPlayoutDelay;
		earMonitorDelay = AgoraData.earMonitorDelay;
		aecEstimatedDelay = AgoraData.aecEstimatedDelay;
	}
	agora::rtc::LocalAudioStats CreateAgoraData() const {
		agora::rtc::LocalAudioStats AgoraData;
		AgoraData.numChannels = numChannels;
		AgoraData.sentSampleRate = sentSampleRate;
		AgoraData.sentBitrate = sentBitrate;
		AgoraData.internalCodec = internalCodec;
		AgoraData.txPacketLossRate = txPacketLossRate;
		AgoraData.audioDeviceDelay = audioDeviceDelay;
		AgoraData.audioPlayoutDelay = audioPlayoutDelay;
		AgoraData.earMonitorDelay = earMonitorDelay;
		AgoraData.aecEstimatedDelay = aecEstimatedDelay;
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::LocalAudioStats &amp; AgoraData) const {
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class LocalAudioStats {

  numChannels?: number;

  sentSampleRate?: number;

  sentBitrate?: number;

  internalCodec?: number;

  txPacketLossRate?: number;

  audioDeviceDelay?: number;

  earMonitorDelay?: number;
  
  aecEstimatedDelay?: number;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class LocalAudioStats
                {
                    public int numChannels;
                    public int sentSampleRate;
                    public int sentBitrate
                    public int internalCodec;
                    public ushort txPacketLossRate;
                    public int audioDeviceDelay;
                    public int audioPlayoutDelay
                    public int earMonitorDelay
                    public int aecEstimatedDelay;
                }
</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class LocalAudioStats {

  numChannels?: number;

  sentSampleRate?: number;

  sentBitrate?: number;

  internalCodec?: number;

  txPacketLossRate?: number;

  audioDeviceDelay?: number;

  earMonitorDelay?: number;
  
  aecEstimatedDelay?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class LocalAudioStats {
  const LocalAudioStats(
      {this.numChannels,
      this.sentSampleRate,
      this.sentBitrate,
      this.internalCodec,
      this.txPacketLossRate,
      this.audioDeviceDelay,
      this.audioPlayoutDelay,
      this.earMonitorDelay,
      this.aecEstimatedDelay});

  @JsonKey(name: 'numChannels')
  final int? numChannels;

  @JsonKey(name: 'sentSampleRate')
  final int? sentSampleRate;

  @JsonKey(name: 'sentBitrate')
  final int? sentBitrate;

  @JsonKey(name: 'internalCodec')
  final int? internalCodec;

  @JsonKey(name: 'txPacketLossRate')
  final int? txPacketLossRate;

  @JsonKey(name: 'audioDeviceDelay')
  final int? audioDeviceDelay;

  @JsonKey(name: 'audioPlayoutDelay')
  final int? audioPlayoutDelay;

  @JsonKey(name: 'earMonitorDelay')
  final int? earMonitorDelay;

  @JsonKey(name: 'aecEstimatedDelay')
  final int? aecEstimatedDelay;

  factory LocalAudioStats.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$LocalAudioStatsFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$LocalAudioStatsToJson(this);
}
</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="android">
                <pt props="android">numChannels</pt>
                <pd>声道数。</pd>
                <pd props="android">音频通道数。</pd>
            </plentry>
            <plentry props="android ios">
                <pt props="android ios">sentSampleRate</pt>
                <pd>发送本地音频的采样率，单位为 Hz。</pd>
                <pd props="android">本地用户发送音频流的采样率（Hz）。</pd>
                <pd props="ios">本地用户音频流的发送采样率（Hz）。</pd>
            </plentry>
            <plentry props="android ios">
                <pt props="android ios">sentBitrate</pt>
                <pd>发送本地音频的码率平均值，单位为 Kbps。</pd>
                <pd props="android">本地用户发送音频流的平均码率（Kbps）。</pd>
                <pd props="ios">本地用户音频流的平均发送码率（Kbps）。</pd>
            </plentry>
            <plentry props="android ios">
                <pt props="android ios">txPacketLossRate</pt>
                <pd>弱网对抗前本端到声网边缘服务器的丢包率 (%)。</pd>
                <pd props="android">在应用抗丢包策略前，从本地客户端到声网服务器的音频丢包率（%）。</pd>
                <pd props="ios">从本地客户端到声网服务器在未启用抗丢包策略前的音频丢包率（%）。</pd>
            </plentry>
            <plentry props="android ios">
                <pt props="android ios">internalCodec</pt>
                <pd>内部的 payload 类型。</pd>
                <pd props="android">内部使用的音频编码格式。</pd>
                <pd props="ios">内部使用的音频编解码器。</pd>
            </plentry>
            <plentry props="android ios">
                <pt props="android ios">audioDeviceDelay</pt>
                <pd>播放或录制音频时，音频设备模块的延迟 (ms)。</pd>
                <pd props="android">播放或采集音频时的音频设备模块延迟（毫秒）。</pd>
                <pd props="ios">播放或录制音频时，音频设备模块的延迟（毫秒）。</pd>
            </plentry>
            <plentry props="android ios">
                <pt props="android ios">earMonitorDelay</pt>
                <pd>耳返延迟 (ms)，即声音从麦克风输入到耳机输出的延迟。</pd>
                <pd props="android ios">耳返延迟（毫秒），即从麦克风输入到耳机输出的延迟。</pd>
            </plentry>
            <plentry props="android ios">
                <pt props="android ios">aecEstimatedDelay</pt>
                <pd>回声消除延迟 (ms)，即回声消除 (Acoustic Echo Cancellation, AEC) 模块测算出音频在本地播放前与被本地采集后的信号延迟。</pd>
                <pd props="android">声学回声消除（AEC）模块评估的延迟（毫秒），指本地播放音频到本地采集之间的信号延迟。</pd>
                <pd props="ios">声学回声消除（AEC）模块估算的延迟（毫秒），即本地播放音频到被本地采集之间的信号延迟。</pd>
            </plentry>
            <plentry props="android">
                <pt props="android">audioPlayoutDelay</pt>
                <pd props="android">音频播放延迟（毫秒）。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
