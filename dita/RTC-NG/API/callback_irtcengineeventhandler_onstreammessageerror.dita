<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onstreammessageerror">
    <title> <ph keyref="onStreamMessageError" /> </title>
    <shortdesc id="short"> <ph id="shortdesc">接收对方数据流消息发生错误的回调。</ph> </shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onStreamMessageError" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onStreamMessageError(int uid, int streamId, int error, int missed, int cached) {}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine
            didOccurStreamMessageErrorFromUid:(NSUInteger)uid
            streamId:(NSInteger)streamId
            error:(NSInteger)error
            missed:(NSInteger)missed
            cached:(NSInteger)cached;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual void onStreamMessageError(uid_t userId, int streamId, int code, int missed, int cached) {
                (void)userId;
                (void)streamId;
                (void)code;
                (void)missed;
                (void)cached;
              }
            </codeblock>
            <codeblock props="electron" outputclass="language-typescript">  onStreamMessageError?(
    connection: RtcConnection,
    remoteUid: number,
    streamId: number,
    code: ErrorCodeType,
    missed: number,
    cached: number
  ): void;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public virtual void OnStreamMessageError(RtcConnection connection, uint remoteUid, int streamId, int code, int missed, int cached) {}</codeblock>
            <codeblock props="rn" outputclass="language-typescript">  onStreamMessageError?(
    connection: RtcConnection,
    remoteUid: number,
    streamId: number,
    code: ErrorCodeType,
    missed: number,
    cached: number
  ): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(RtcConnection connection, int remoteUid, int streamId,
      ErrorCodeType code, int missed, int cached)? onStreamMessageError;</codeblock>
            <codeblock props="unreal" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>
                该回调表示本地用户未收到远端用户调用 <xref keyref="sendStreamMessage" /> 方法发送的流消息。</p>
        </section>
        <section id="parameters">
            <title> <ph keyref="callback-section-title" /> </title>
            <parml>
            <plentry conkeyref="onJoinChannelSuccess/engine" props="ios mac">
                <pt />
                <pd />
            </plentry>
            <plentry props="unity flutter rn electron">
                <pt>connection</pt>
                <pd>Connection 信息。详见 <xref keyref="RtcConnection" /> 。 </pd>
            </plentry>
            <plentry id="uid">
                <pt props="ios mac android electron">uid</pt>
                <pt props="cpp">userId</pt>
                <pt props="unity flutter rn electron">remoteUid</pt>
                <pd>发送消息的用户 ID。</pd>
            </plentry>
            <plentry id="streamId">
                <pt>streamId</pt>
                <pd>接收到的消息的 Stream ID。</pd>
            </plentry>
            <plentry id="code">
                <pt props="cpp electron rn unity flutter">code</pt>
                <pt props="android ios mac">error</pt>
                <pd>发生错误的错误码。</pd>
            </plentry>
            <plentry id="missed">
                <pt>missed</pt>
                <pd>丢失的消息数量。</pd>
            </plentry>
            <plentry id="cached">
                <pt>cached</pt>
                <pd>数据流中断时，后面缓存的消息数量。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>