<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videoencoderconfiguration">
    <title><ph keyref="VideoEncoderConfiguration"/></title>
    <shortdesc id="short"><ph id="shortdesc">视频编码器的配置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class VideoEncoderConfiguration {
  static public class VideoDimensions {
    public int width;
    public int height;
    public VideoDimensions(int width, int height) {
      this.width = width;
      this.height = height;
    }
    public VideoDimensions() {
      this.width = 0;
      this.height = 0;
    }
  }
  public final static VideoDimensions VD_120x120 = new VideoDimensions(120, 120);
  public final static VideoDimensions VD_160x120 = new VideoDimensions(160, 120);
  public final static VideoDimensions VD_180x180 = new VideoDimensions(180, 180);
  public final static VideoDimensions VD_240x180 = new VideoDimensions(240, 180);
  public final static VideoDimensions VD_320x180 = new VideoDimensions(320, 180);
  public final static VideoDimensions VD_240x240 = new VideoDimensions(240, 240);
  public final static VideoDimensions VD_320x240 = new VideoDimensions(320, 240);
  public final static VideoDimensions VD_424x240 = new VideoDimensions(424, 240);
  public final static VideoDimensions VD_360x360 = new VideoDimensions(360, 360);
  public final static VideoDimensions VD_480x360 = new VideoDimensions(480, 360);
  public final static VideoDimensions VD_640x360 = new VideoDimensions(640, 360);
  public final static VideoDimensions VD_480x480 = new VideoDimensions(480, 480);
  public final static VideoDimensions VD_640x480 = new VideoDimensions(640, 480);
  public final static VideoDimensions VD_840x480 = new VideoDimensions(840, 480);
  public final static VideoDimensions VD_960x540 = new VideoDimensions(960, 540);
  public final static VideoDimensions VD_960x720 = new VideoDimensions(960, 720);
  public final static VideoDimensions VD_1280x720 = new VideoDimensions(1280, 720);
  public final static VideoDimensions VD_1920x1080 = new VideoDimensions(1920, 1080);
  public final static VideoDimensions VD_2540x1440 = new VideoDimensions(2540, 1440);
  public final static VideoDimensions VD_3840x2160 = new VideoDimensions(3840, 2160);
  public enum FRAME_RATE {
    FRAME_RATE_FPS_1(1),
    FRAME_RATE_FPS_7(7),
    FRAME_RATE_FPS_10(10),
    FRAME_RATE_FPS_15(15),
    FRAME_RATE_FPS_24(24),
    FRAME_RATE_FPS_30(30),
    FRAME_RATE_FPS_60(60);
    private int value;
    private FRAME_RATE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  public enum ORIENTATION_MODE {
    ORIENTATION_MODE_ADAPTIVE(0),
    ORIENTATION_MODE_FIXED_LANDSCAPE(1),
    ORIENTATION_MODE_FIXED_PORTRAIT(2);
    private int value;
    private ORIENTATION_MODE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  public enum ENCODING_PREFERENCE {
    PREFER_AUTO(-1),
    PREFER_SOFTWARE(0),
    PREFER_HARDWARE(1);
    private int value;
    private ENCODING_PREFERENCE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  public enum COMPRESSION_PREFERENCE {
    PREFER_LOW_LATENCY(0),
    PREFER_QUALITY(1);
    private int value;
    private COMPRESSION_PREFERENCE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  static public class AdvanceOptions {
    public ENCODING_PREFERENCE encodingPreference;
    public COMPRESSION_PREFERENCE compressionPreference;
    public AdvanceOptions(
        ENCODING_PREFERENCE encodingPreference, COMPRESSION_PREFERENCE compressionPreference) {
      this.encodingPreference = encodingPreference;
      this.compressionPreference = compressionPreference;
    }
    public AdvanceOptions() {
      this.encodingPreference = ENCODING_PREFERENCE.PREFER_AUTO;
      this.compressionPreference = COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY;
    }
  }
  public enum DEGRADATION_PREFERENCE {
    MAINTAIN_QUALITY(0),
    MAINTAIN_FRAMERATE(1),
    MAINTAIN_BALANCED(2),
    MAINTAIN_RESOLUTION(3),
    DISABLED(100);
    private int value;
    private DEGRADATION_PREFERENCE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  public enum CODEC_CAP_MASK {
    CODEC_CAP_MASK_NONE(0),
    CODEC_CAP_MASK_HW_DEC(1),
    CODEC_CAP_MASK_HW_ENC(2),
    CODEC_CAP_MASK_SW_DEC(4),
    CODEC_CAP_MASK_SW_ENC(8);
    private int value;
    private CODEC_CAP_MASK(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  ;
  public enum MIRROR_MODE_TYPE {
    MIRROR_MODE_AUTO(0),
    MIRROR_MODE_ENABLED(1),
    MIRROR_MODE_DISABLED(2);
    private int value;
    private MIRROR_MODE_TYPE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  public enum VIDEO_CODEC_TYPE {
    VIDEO_CODEC_NONE(0),
    VIDEO_CODEC_VP8(1),
    VIDEO_CODEC_H264(2),
    VIDEO_CODEC_H265(3),
    VIDEO_CODEC_GENERIC(6),
    VIDEO_CODEC_GENERIC_H264(7),
    VIDEO_CODEC_AV1(12),
    VIDEO_CODEC_VP9(13),
    VIDEO_CODEC_GENERIC_JPEG(20);
    private int value;
    private VIDEO_CODEC_TYPE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  public static final int STANDARD_BITRATE = 0;
  public static final int COMPATIBLE_BITRATE = -1;
  public static final int DEFAULT_MIN_BITRATE = -1;
  public static final int DEFAULT_MIN_FRAMERATE = -1;
  public static final int DEFAULT_MIN_BITRATE_EQUAL_TO_TARGET_BITRATE = -2;
  public VideoDimensions dimensions;
  public int frameRate;
  public int minFrameRate;
  public int bitrate;
  public int minBitrate;
  public ORIENTATION_MODE orientationMode;
  public DEGRADATION_PREFERENCE degradationPrefer;
  public MIRROR_MODE_TYPE mirrorMode;
  public AdvanceOptions advanceOptions;
  public VIDEO_CODEC_TYPE codecType;
  public VideoEncoderConfiguration() {
    this.dimensions = new VideoDimensions(960, 540);
    this.frameRate = FRAME_RATE.FRAME_RATE_FPS_15.getValue();
    this.minFrameRate = DEFAULT_MIN_FRAMERATE;
    this.bitrate = STANDARD_BITRATE;
    this.minBitrate = DEFAULT_MIN_BITRATE;
    this.orientationMode = ORIENTATION_MODE.ORIENTATION_MODE_ADAPTIVE;
    this.degradationPrefer = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
    this.mirrorMode = MIRROR_MODE_TYPE.MIRROR_MODE_DISABLED;
    this.advanceOptions = new AdvanceOptions(
        ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
    this.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H265;
  }
  public VideoEncoderConfiguration(VideoDimensions dimensions, FRAME_RATE frameRate, int bitrate,
      ORIENTATION_MODE orientationMode) {
    this.dimensions = dimensions;
    this.frameRate = frameRate.getValue();
    this.minFrameRate = DEFAULT_MIN_FRAMERATE;
    this.bitrate = bitrate;
    this.minBitrate = DEFAULT_MIN_BITRATE;
    this.orientationMode = orientationMode;
    this.degradationPrefer = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
    this.mirrorMode = MIRROR_MODE_TYPE.MIRROR_MODE_DISABLED;
    this.advanceOptions = new AdvanceOptions(
        ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
    this.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H265;
  }
  public VideoEncoderConfiguration(VideoDimensions dimensions, FRAME_RATE frameRate, int bitrate,
      ORIENTATION_MODE orientationMode, MIRROR_MODE_TYPE mirrorMode) {
    this.dimensions = dimensions;
    this.frameRate = frameRate.getValue();
    this.minFrameRate = DEFAULT_MIN_FRAMERATE;
    this.bitrate = bitrate;
    this.minBitrate = DEFAULT_MIN_BITRATE;
    this.orientationMode = orientationMode;
    this.degradationPrefer = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
    this.mirrorMode = mirrorMode;
    this.advanceOptions = new AdvanceOptions(
        ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
    this.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H265;
  }
  public VideoEncoderConfiguration(
      int width, int height, FRAME_RATE frameRate, int bitrate, ORIENTATION_MODE orientationMode) {
    this.dimensions = new VideoDimensions(width, height);
    this.frameRate = frameRate.getValue();
    this.minFrameRate = DEFAULT_MIN_FRAMERATE;
    this.bitrate = bitrate;
    this.minBitrate = DEFAULT_MIN_BITRATE;
    this.orientationMode = orientationMode;
    this.degradationPrefer = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
    this.mirrorMode = MIRROR_MODE_TYPE.MIRROR_MODE_DISABLED;
    this.advanceOptions = new AdvanceOptions(
        ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
    this.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H265;
  }
  public VideoEncoderConfiguration(int width, int height, FRAME_RATE frameRate, int bitrate,
      ORIENTATION_MODE orientationMode, MIRROR_MODE_TYPE mirrorMode) {
    this.dimensions = new VideoDimensions(width, height);
    this.frameRate = frameRate.getValue();
    this.minFrameRate = DEFAULT_MIN_FRAMERATE;
    this.bitrate = bitrate;
    this.minBitrate = DEFAULT_MIN_BITRATE;
    this.orientationMode = orientationMode;
    this.degradationPrefer = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
    this.mirrorMode = mirrorMode;
    this.advanceOptions = new AdvanceOptions(
        ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
    this.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H265;
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraVideoEncoderConfiguration : NSObject
@property(assign, nonatomic) CGSize dimensions;
@property(assign, nonatomic) AgoraVideoCodecType codecType;
@property(assign, nonatomic) AgoraVideoFrameRate frameRate;
@property(assign, nonatomic) NSInteger bitrate;
@property(assign, nonatomic) NSInteger minBitrate;
@property(assign, nonatomic) AgoraVideoOutputOrientationMode orientationMode;
@property(assign, nonatomic) AgoraVideoMirrorMode mirrorMode;
@property (assign, nonatomic) AgoraDegradationPreference degradationPreference;

- (instancetype _Nonnull)initWithSize:(CGSize)size
                            frameRate:(AgoraVideoFrameRate)frameRate
                              bitrate:(NSInteger)bitrate
                      orientationMode:(AgoraVideoOutputOrientationMode)orientationMode
                           mirrorMode:(AgoraVideoMirrorMode)mirrorMode;

- (instancetype _Nonnull)initWithWidth:(NSInteger)width
                                height:(NSInteger)height
                             frameRate:(AgoraVideoFrameRate)frameRate
                               bitrate:(NSInteger)bitrate
                       orientationMode:(AgoraVideoOutputOrientationMode)orientationMode
                            mirrorMode:(AgoraVideoMirrorMode)mirrorMode;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct VideoEncoderConfiguration {
  VIDEO_CODEC_TYPE codecType;
  VideoDimensions dimensions;
  int frameRate;
  int bitrate;
  int minBitrate;
  ORIENTATION_MODE orientationMode;
  DEGRADATION_PREFERENCE degradationPreference;
  VIDEO_MIRROR_MODE_TYPE mirrorMode;
  AdvanceOptions advanceOptions;
  VideoEncoderConfiguration(const VideoDimensions&amp; d, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_DISABLED)
    : codecType(VIDEO_CODEC_NONE),
      dimensions(d),
      frameRate(f),
      bitrate(b),
      minBitrate(DEFAULT_MIN_BITRATE),
      orientationMode(m),
      degradationPreference(MAINTAIN_QUALITY),
      mirrorMode(mirror),
      advanceOptions(PREFER_AUTO, PREFER_LOW_LATENCY) {}
  VideoEncoderConfiguration(int width, int height, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_DISABLED)
    : codecType(VIDEO_CODEC_NONE),
      dimensions(width, height),
      frameRate(f),
      bitrate(b),
      minBitrate(DEFAULT_MIN_BITRATE),
      orientationMode(m),
      degradationPreference(MAINTAIN_QUALITY),
      mirrorMode(mirror),
      advanceOptions(PREFER_AUTO, PREFER_LOW_LATENCY) {}
  VideoEncoderConfiguration(const VideoEncoderConfiguration&amp; config)
    : codecType(config.codecType),
      dimensions(config.dimensions),
      frameRate(config.frameRate),
      bitrate(config.bitrate),
      minBitrate(config.minBitrate),
      orientationMode(config.orientationMode),
      degradationPreference(config.degradationPreference),
      mirrorMode(config.mirrorMode),
      advanceOptions(config.advanceOptions) {}
  VideoEncoderConfiguration()
    : codecType(VIDEO_CODEC_NONE),
      dimensions(FRAME_WIDTH_960, FRAME_HEIGHT_540),
      frameRate(FRAME_RATE_FPS_15),
      bitrate(STANDARD_BITRATE),
      minBitrate(DEFAULT_MIN_BITRATE),
      orientationMode(ORIENTATION_MODE_ADAPTIVE),
      degradationPreference(MAINTAIN_QUALITY),
      mirrorMode(VIDEO_MIRROR_MODE_DISABLED),
      advanceOptions(PREFER_AUTO, PREFER_LOW_LATENCY) {}
  VideoEncoderConfiguration&amp; operator=(const VideoEncoderConfiguration&amp; rhs) {
    if (this == &amp;rhs) return *this;
    codecType = rhs.codecType;
    dimensions = rhs.dimensions;
    frameRate = rhs.frameRate;
    bitrate = rhs.bitrate;
    minBitrate = rhs.minBitrate;
    orientationMode = rhs.orientationMode;
    degradationPreference = rhs.degradationPreference;
    mirrorMode = rhs.mirrorMode;
    advanceOptions = rhs.advanceOptions;
    return *this;
  }
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FVideoEncoderConfiguration
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoEncoderConfiguration&quot;)
	EVIDEO_CODEC_TYPE codecType = EVIDEO_CODEC_TYPE::VIDEO_CODEC_GENERIC_H264;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoEncoderConfiguration&quot;)
	FVideoDimensions dimensions;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoEncoderConfiguration&quot;)
	int frameRate = 15;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoEncoderConfiguration&quot;)
	int bitrate = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoEncoderConfiguration&quot;)
	int minBitrate = -1;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoEncoderConfiguration&quot;)
	EORIENTATION_MODE orientationMode = EORIENTATION_MODE::ORIENTATION_MODE_ADAPTIVE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoEncoderConfiguration&quot;)
	EDEGRADATION_PREFERENCE degradationPreference = EDEGRADATION_PREFERENCE::MAINTAIN_QUALITY;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoEncoderConfiguration&quot;)
	EVIDEO_MIRROR_MODE_TYPE mirrorMode = EVIDEO_MIRROR_MODE_TYPE::VIDEO_MIRROR_MODE_DISABLED;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoEncoderConfiguration&quot;)
	ECOMPRESSION_PREFERENCE compressionPreference = ECOMPRESSION_PREFERENCE::PREFER_LOW_LATENCY;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoEncoderConfiguration&quot;)
	FAdvanceOptions advanceOptions;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class VideoEncoderConfiguration {
  
  codecType?: VideoCodecType;
  
  dimensions?: VideoDimensions;
  
  frameRate?: number;
  
  bitrate?: number;
  
  minBitrate?: number;
  
  orientationMode?: OrientationMode;
  
  degradationPreference?: DegradationPreference;
  
  mirrorMode?: VideoMirrorModeType;

  advanceOptions?: AdvanceOptions;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class VideoEncoderConfiguration
    {
        public VIDEO_CODEC_TYPE codecType;
        public VideoDimensions dimensions;
        public int frameRate;
        public int bitrate;
        public int minBitrate;
        public ORIENTATION_MODE orientationMode;
        public DEGRADATION_PREFERENCE degradationPreference;
        public VIDEO_MIRROR_MODE_TYPE mirrorMode;
        public AdvanceOptions advanceOptions;

        public VideoEncoderConfiguration(VideoDimensions d, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED)
        {
            this.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_NONE;
            this.dimensions = d;
            this.frameRate = f;
            this.bitrate = b;
            this.minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            this.orientationMode = m;
            this.degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            this.mirrorMode = mirror;
            this.advanceOptions = new AdvanceOptions(ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
        }

        public VideoEncoderConfiguration(int width, int height, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED)
        {
            this.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_NONE;
            this.dimensions = new VideoDimensions(width, height);
            this.frameRate = f;
            this.bitrate = b;
            this.minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            this.orientationMode = m;
            this.degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            this.mirrorMode = mirror;
            this.advanceOptions = new AdvanceOptions(ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
        }

        public VideoEncoderConfiguration(VideoEncoderConfiguration config)
        {
            this.codecType = config.codecType;
            this.dimensions = config.dimensions;
            this.frameRate = config.frameRate;
            this.bitrate = config.bitrate;
            this.minBitrate = config.minBitrate;
            this.orientationMode = config.orientationMode;
            this.degradationPreference = config.degradationPreference;
            this.mirrorMode = config.mirrorMode;
            this.advanceOptions = config.advanceOptions;
        }

        public VideoEncoderConfiguration()
        {
            this.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_NONE;
            this.dimensions = new VideoDimensions((int)FRAME_WIDTH.FRAME_WIDTH_960, (int)FRAME_HEIGHT.FRAME_HEIGHT_540);
            this.frameRate = (int)FRAME_RATE.FRAME_RATE_FPS_15;
            this.bitrate = (int)BITRATE.STANDARD_BITRATE;
            this.minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            this.orientationMode = ORIENTATION_MODE.ORIENTATION_MODE_ADAPTIVE;
            this.degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            this.mirrorMode = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED;
            this.advanceOptions = new AdvanceOptions(ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
        }

        public VideoEncoderConfiguration(VIDEO_CODEC_TYPE codecType, VideoDimensions dimensions, int frameRate, int bitrate, int minBitrate, ORIENTATION_MODE orientationMode, DEGRADATION_PREFERENCE degradationPreference, VIDEO_MIRROR_MODE_TYPE mirrorMode, AdvanceOptions advanceOptions)
        {
            this.codecType = codecType;
            this.dimensions = dimensions;
            this.frameRate = frameRate;
            this.bitrate = bitrate;
            this.minBitrate = minBitrate;
            this.orientationMode = orientationMode;
            this.degradationPreference = degradationPreference;
            this.mirrorMode = mirrorMode;
            this.advanceOptions = advanceOptions;
        }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoEncoderConfiguration {
  
  codecType?: VideoCodecType;
  
  dimensions?: VideoDimensions;
  
  frameRate?: number;
  
  bitrate?: number;
  
  minBitrate?: number;
  
  orientationMode?: OrientationMode;
  
  degradationPreference?: DegradationPreference;
  
  mirrorMode?: VideoMirrorModeType;

  advanceOptions?: AdvanceOptions;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class VideoEncoderConfiguration {
  const VideoEncoderConfiguration(
      {this.codecType,
      this.dimensions,
      this.frameRate,
      this.bitrate,
      this.minBitrate,
      this.orientationMode,
      this.degradationPreference,
      this.mirrorMode,
      this.advanceOptions});

  @JsonKey(name: 'codecType')
  final VideoCodecType? codecType;

  @JsonKey(name: 'dimensions')
  final VideoDimensions? dimensions;

  @JsonKey(name: 'frameRate')
  final int? frameRate;

  @JsonKey(name: 'bitrate')
  final int? bitrate;

  @JsonKey(name: 'minBitrate')
  final int? minBitrate;

  @JsonKey(name: 'orientationMode')
  final OrientationMode? orientationMode;

  @JsonKey(name: 'degradationPreference')
  final DegradationPreference? degradationPreference;

  @JsonKey(name: 'mirrorMode')
  final VideoMirrorModeType? mirrorMode;

  @JsonKey(name: 'advanceOptions')
  final AdvanceOptions? advanceOptions;

  factory VideoEncoderConfiguration.fromJson(Map&lt;String, dynamic> json) =>
      _$VideoEncoderConfigurationFromJson(json);

  Map&lt;String, dynamic> toJson() => _$VideoEncoderConfigurationToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>dimensions</pt>
                <pd>
                    <p props="cpp unreal bp unity electron rn flutter cs">视频编码的分辨率（px），详见 <xref keyref="VideoDimensions"/>。该参数用于衡量编码质量，以长 × 宽表示，默认值为 960 × 540。用户可以自行设置分辨率。</p>
                    <p props="android ios mac">用户可以自行设置分辨率，也可以在如下列表中直接选择想要的分辨率：                    
                    
                    <ul>
                    <li><ph keyref="VD_120x120"/>：视频分辨率为 120 × 120。</li>
                    <li><ph keyref="VD_160x120"/>：视频分辨率为 160 × 120。</li>
                    <li><ph keyref="VD_180x180"/>：视频分辨率为 180 × 180。</li>
                    <li><ph keyref="VD_240x180"/>：视频分辨率为 240 × 180。</li>
                    <li><ph keyref="VD_320x180"/>：视频分辨率为 320 × 180。</li>
                    <li><ph keyref="VD_240x240"/>：视频分辨率为 240 × 240。</li>
                    <li><ph keyref="VD_320x240"/>：视频分辨率为 320 × 240。</li>
                    <li><ph keyref="VD_424x240"/>：视频分辨率为 424 × 240。</li>
                    <li><ph keyref="VD_360x360"/>：视频分辨率为 360 × 360。</li>
                    <li><ph keyref="VD_480x360"/>：视频分辨率为 480 × 360。</li>
                    <li><ph keyref="VD_640x360"/>：视频分辨率为 640 × 360。</li>
                    <li><ph keyref="VD_480x480"/>：视频分辨率为 480 × 480。</li>
                    <li><ph keyref="VD_640x480"/>：视频分辨率为 640 × 480。</li>
                    <li><ph keyref="VD_840x480"/>：视频分辨率为 840 × 480。</li>
                    <li><ph keyref="VD_960x540"/>：视频分辨率为 960 × 540。</li>
                    <li><ph keyref="VD_960x720"/>：视频分辨率为 960 × 720。</li>
                    <li><ph keyref="VD_1280x720"/>：视频分辨率为 1280 × 720。</li>
                    <li><ph keyref="VD_1920x1080"/>：视频分辨率为 1920 × 1080。</li>
                    <li><ph keyref="VD_2540x1440"/>：视频分辨率为 2540 × 1440。</li>
                    <li><ph keyref="VD_3840x2160"/>：视频分辨率为 3840 × 2160。</li>
                    </ul>
                    <note type="attention">
                    <ul>
                    <li>视频能否达到 720P 及以上分辨率取决于设备的性能，在性能配备较低的设备上有可能无法实现。如果采用 720P 分辨率而设备性能跟不上，则有可能出现帧率过低的情况。</li>
                    <li props="android apple">默认值为 960 × 540。</li>
                    </ul> </note> </p>
                </pd>
            </plentry>
            <plentry>
                <pt>codecType</pt>
                <pd>视频编码类型，详见 <xref keyref="VIDEO_CODEC_TYPE"/>。</pd>
            </plentry>
            <plentry>
                <pt>frameRate</pt>
                <pd props="native unreal flutter unity cs electron rn">视频编码的帧率(fps)，默认值为 15。详见 <xref keyref="FRAME_RATE"/>。</pd>
                <pd props="bp">视频编码的帧率(fps)，默认值为 15。<ul>
                  <li><ph keyref="FRAME_RATE_FPS_1"/>(1): 1 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_7"/>(7): 7 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_10"/>(10): 10 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_15"/>(15): 15 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_24"/>(24): 24 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_30"/>(30): 30 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_60"/>(60): 60 fps。
                  <note type="attention">仅适用于 Windows 和 macOS 平台。</note></li>
                </ul></pd>
            </plentry>
            <plentry>
                <pt>bitrate</pt>
                <pd>
                    <p><ph>视频编码码率，单位为 Kbps。</ph><ph props="unity cs">详见 <xref keyref="BITRATE"/>。</ph><ph>该参数无需设置，保留默认值 <apiname keyref="STANDARD_BITRATE"/> 即可，SDK 会根据你设定的视频分辨率和帧率自动匹配最合适的码率。有关视频分辨率和帧率的对应关系，详见<xref keyref="video-profile-table"/>。</ph></p>
                    <ul props="native unreal bp flutter rn electron">
                    <li><ph keyref="STANDARD_BITRATE"/> (0): (默认) 标准码率模式。</li>
                    <li><ph keyref="COMPATIBLE_BITRATE"/> (-1): 适配码率模式。一般情况下，声网建议你不要使用该值。</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>minBitrate</pt>
                <pd>
                    <p>最低编码码率，单位为 Kbps。</p>
                    <p>SDK 会根据网络状况自动调整视频编码码率。将参数设为高于默认值可强制视频编码器输出高质量图片，但在网络状况不佳情况下可能导致网络丢包并影响视频播放的流畅度造成卡顿。因此如非对画质有特殊需求，声网建议不要修改该参数的值。</p>
                    <note type="attention">该参数仅适用于直播场景。</note> </pd>
            </plentry>
            <plentry>
                <pt>orientationMode</pt>
                <pd>视频编码的方向模式，详见 <xref keyref="ORIENTATION_MODE"/>。</pd>
            </plentry>
            <plentry>
                <pt>degradationPreference</pt>
                <pd>带宽受限时，视频编码降级偏好。详见 <xref keyref="DEGRADATION_PREFERENCE"/> 。</pd>
            </plentry>
            <plentry>
                <pt>mirrorMode</pt>
                <pd>
                    <p props="ios mac cpp framework">发送编码视频时是否开启镜像模式，只影响远端用户看到的视频画面。详见 <xref keyref="VIDEO_MIRROR_MODE_TYPE"/>。</p>
                    <p props="android">发送编码视频时是否开启镜像模式，只影响远端用户看到的视频画面。
                      <ul>
                      <li><ph keyref="VIDEO_MIRROR_MODE_AUTO" /> (0)：SDK 决定镜像模式。默认关闭远端用户的镜像模式。</li>
                      <li><ph keyref="VIDEO_MIRROR_MODE_ENABLED" /> (1)：开启远端用户的镜像模式。</li>
                      <li><ph keyref="VIDEO_MIRROR_MODE_DISABLED" /> (2)：关闭远端用户的镜像模式。</li>
                      </ul> </p>
                    <note type="attention">默认关闭镜像模式。</note> </pd>
            </plentry>
            <plentry>
                <pt>advanceOptions</pt>
                <pd>视频编码的高级选项。详见 <xref keyref="AdvanceOptions"/>。</pd>
            </plentry>
            </parml> </section>
        <section props="apple" id="sub-method">
          <title>方法</title>
          <parml>
            <plentry>
              <pt>initWithSize</pt>
              <pd>指定视频分辨率并初始化一个 <xref keyref="VideoEncoderConfiguration"/> 对象。详见 <xref keyref="initWithSize"/>。</pd>
            </plentry>
            <plentry>
              <pt>initWithWidth</pt>
              <pd>指定视频宽和高并初始化一个 <xref keyref="VideoEncoderConfiguration"/> 对象。详见 <xref keyref="initWithWidth"/>。</pd>
            </plentry>
          </parml>
        </section>
    </refbody>
</reference>
