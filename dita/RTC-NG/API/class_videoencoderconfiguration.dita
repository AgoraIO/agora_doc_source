<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videoencoderconfiguration">
    <title><ph keyref="VideoEncoderConfiguration"/></title>
    <shortdesc id="short"><ph id="shortdesc">设置视频编码参数。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class VideoEncoderConfiguration {
    public static final int STANDARD_BITRATE = 0;
    public static final int COMPATIBLE_BITRATE = -1;
    public static final int DEFAULT_MIN_BITRATE = -1;
    public static final int DEFAULT_MIN_FRAMERATE = -1;
    public static final int DEFAULT_MIN_BITRATE_EQUAL_TO_TARGET_BITRATE = -2;
    public VideoDimensions dimensions;
    public int frameRate;
    public int minFrameRate;
    public int bitrate;
    public int minBitrate;
    public ORIENTATION_MODE orientationMode;
    public DEGRADATION_PREFERENCE degradationPrefer;
    public MIRROR_MODE_TYPE mirrorMode;
    public AdvanceOptions advanceOptions;
    public VIDEO_CODEC_TYPE codecType;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">export class VideoEncoderConfiguration{
  public dimensions:VideoDimensions = new VideoDimensions(960,540);
  public frameRate:number = 15;
  public bitrate:number = 0;
  public minBitrate:number = -1;
  public orientationMode:OrientationMode = OrientationMode.ORIENTATION_MODE_ADAPTIVE;
  public degradationPrefer:DegradationPreference = DegradationPreference.MAINTAIN_QUALITY;
  public mirrorMode:MirrorModeType = MirrorModeType.MIRROR_MODE_DISABLED;
  public advanceOptions:AdvanceOptions = new AdvanceOptions();
  constructor() {}
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraVideoEncoderConfiguration : NSObject
@property(assign, nonatomic) CGSize dimensions;
@property(assign, nonatomic) AgoraVideoCodecType codecType;
@property(assign, nonatomic) AgoraVideoFrameRate frameRate;
@property(assign, nonatomic) NSInteger bitrate;
@property(assign, nonatomic) NSInteger minBitrate;
@property(assign, nonatomic) AgoraVideoOutputOrientationMode orientationMode;
@property(assign, nonatomic) AgoraVideoMirrorMode mirrorMode;
@property(assign, nonatomic) AgoraDegradationPreference degradationPreference;
@property(strong, nonatomic) AgoraAdvancedVideoOptions *_Nullable advancedVideoOptions;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct VideoEncoderConfiguration {
VIDEO_CODEC_TYPE codecType;
VideoDimensions dimensions;
int frameRate;
int bitrate;
int minBitrate;
ORIENTATION_MODE orientationMode;
DEGRADATION_PREFERENCE degradationPreference;
VIDEO_MIRROR_MODE_TYPE mirrorMode;
AdvanceOptions advanceOptions;
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FUABT_VideoEncoderConfiguration
{
	GENERATED_BODY()

public:

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	EUABT_VIDEO_CODEC_TYPE codecType = EUABT_VIDEO_CODEC_TYPE::VIDEO_CODEC_NONE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	FUABT_VideoDimensions dimensions = FUABT_VideoDimensions();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	int frameRate = 15;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	int bitrate = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	int minBitrate = -1;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	EUABT_ORIENTATION_MODE orientationMode = EUABT_ORIENTATION_MODE::ORIENTATION_MODE_ADAPTIVE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	EUABT_DEGRADATION_PREFERENCE degradationPreference = EUABT_DEGRADATION_PREFERENCE::MAINTAIN_QUALITY;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	EUABT_VIDEO_MIRROR_MODE_TYPE mirrorMode = EUABT_VIDEO_MIRROR_MODE_TYPE::VIDEO_MIRROR_MODE_DISABLED;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	FUABT_AdvanceOptions advanceOptions = FUABT_AdvanceOptions();
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class VideoEncoderConfiguration {

  codecType?: VideoCodecType;

  dimensions?: VideoDimensions;

  frameRate?: number;

  bitrate?: number;

  minBitrate?: number;

  orientationMode?: OrientationMode;

  degradationPreference?: DegradationPreference;

  mirrorMode?: VideoMirrorModeType;

  advanceOptions?: AdvanceOptions;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class VideoEncoderConfiguration
    {
        public VIDEO_CODEC_TYPE codecType;
        public VideoDimensions dimensions;
        public int frameRate;
        public int bitrate;
        public int minBitrate;
        public ORIENTATION_MODE orientationMode;
        public DEGRADATION_PREFERENCE degradationPreference;
        public VIDEO_MIRROR_MODE_TYPE mirrorMode;
        public AdvanceOptions advanceOptions;

        public VideoEncoderConfiguration(VideoDimensions d, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED)
        {
            this.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_NONE;
            this.dimensions = d;
            this.frameRate = f;
            this.bitrate = b;
            this.minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            this.orientationMode = m;
            this.degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            this.mirrorMode = mirror;
            this.advanceOptions = new AdvanceOptions(ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
        }

        public VideoEncoderConfiguration(int width, int height, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED)
        {
            this.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_NONE;
            this.dimensions = new VideoDimensions(width, height);
            this.frameRate = f;
            this.bitrate = b;
            this.minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            this.orientationMode = m;
            this.degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            this.mirrorMode = mirror;
            this.advanceOptions = new AdvanceOptions(ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
        }

        public VideoEncoderConfiguration(VideoEncoderConfiguration config)
        {
            this.codecType = config.codecType;
            this.dimensions = config.dimensions;
            this.frameRate = config.frameRate;
            this.bitrate = config.bitrate;
            this.minBitrate = config.minBitrate;
            this.orientationMode = config.orientationMode;
            this.degradationPreference = config.degradationPreference;
            this.mirrorMode = config.mirrorMode;
            this.advanceOptions = config.advanceOptions;
        }

        public VideoEncoderConfiguration()
        {
            this.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_NONE;
            this.dimensions = new VideoDimensions((int)FRAME_WIDTH.FRAME_WIDTH_960, (int)FRAME_HEIGHT.FRAME_HEIGHT_540);
            this.frameRate = (int)FRAME_RATE.FRAME_RATE_FPS_15;
            this.bitrate = (int)BITRATE.STANDARD_BITRATE;
            this.minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            this.orientationMode = ORIENTATION_MODE.ORIENTATION_MODE_ADAPTIVE;
            this.degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            this.mirrorMode = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED;
            this.advanceOptions = new AdvanceOptions(ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
        }

        public VideoEncoderConfiguration(VIDEO_CODEC_TYPE codecType, VideoDimensions dimensions, int frameRate, int bitrate, int minBitrate, ORIENTATION_MODE orientationMode, DEGRADATION_PREFERENCE degradationPreference, VIDEO_MIRROR_MODE_TYPE mirrorMode, AdvanceOptions advanceOptions)
        {
            this.codecType = codecType;
            this.dimensions = dimensions;
            this.frameRate = frameRate;
            this.bitrate = bitrate;
            this.minBitrate = minBitrate;
            this.orientationMode = orientationMode;
            this.degradationPreference = degradationPreference;
            this.mirrorMode = mirrorMode;
            this.advanceOptions = advanceOptions;
        }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoEncoderConfiguration {

  codecType?: VideoCodecType;

  dimensions?: VideoDimensions;

  frameRate?: number;

  bitrate?: number;

  minBitrate?: number;

  orientationMode?: OrientationMode;

  degradationPreference?: DegradationPreference;

  mirrorMode?: VideoMirrorModeType;

  advanceOptions?: AdvanceOptions;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class VideoEncoderConfiguration {
  const VideoEncoderConfiguration(
      {this.codecType,
      this.dimensions,
      this.frameRate,
      this.bitrate,
      this.minBitrate,
      this.orientationMode,
      this.degradationPreference,
      this.mirrorMode,
      this.advanceOptions});

  @JsonKey(name: 'codecType')
  final VideoCodecType? codecType;

  @JsonKey(name: 'dimensions')
  final VideoDimensions? dimensions;

  @JsonKey(name: 'frameRate')
  final int? frameRate;

  @JsonKey(name: 'bitrate')
  final int? bitrate;

  @JsonKey(name: 'minBitrate')
  final int? minBitrate;

  @JsonKey(name: 'orientationMode')
  final OrientationMode? orientationMode;

  @JsonKey(name: 'degradationPreference')
  final DegradationPreference? degradationPreference;

  @JsonKey(name: 'mirrorMode')
  final VideoMirrorModeType? mirrorMode;

  @JsonKey(name: 'advanceOptions')
  final AdvanceOptions? advanceOptions;

  factory VideoEncoderConfiguration.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$VideoEncoderConfigurationFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$VideoEncoderConfigurationToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>dimensions</pt>
                <pd>
                    <p props="bp cpp cs electron flutter hmos rn unity unreal">视频编码的分辨率 (px)，详见 <xref keyref="VideoDimensions"/>。该参数用于衡量编码质量，以长 × 宽表示，默认值为 960 × 540。用户可以自行设置分辨率。</p>
                    <p props="android apple">用户可以自行设置分辨率，也可以在如下列表中直接选择想要的分辨率：

                    <ul>
                    <li><ph keyref="VD_120x120"/>：视频分辨率为 120 × 120。</li>
                    <li><ph keyref="VD_160x120"/>：视频分辨率为 160 × 120。</li>
                    <li><ph keyref="VD_180x180"/>：视频分辨率为 180 × 180。</li>
                    <li><ph keyref="VD_240x180"/>：视频分辨率为 240 × 180。</li>
                    <li><ph keyref="VD_320x180"/>：视频分辨率为 320 × 180。</li>
                    <li><ph keyref="VD_240x240"/>：视频分辨率为 240 × 240。</li>
                    <li><ph keyref="VD_320x240"/>：视频分辨率为 320 × 240。</li>
                    <li><ph keyref="VD_424x240"/>：视频分辨率为 424 × 240。</li>
                    <li><ph keyref="VD_360x360"/>：视频分辨率为 360 × 360。</li>
                    <li><ph keyref="VD_480x360"/>：视频分辨率为 480 × 360。</li>
                    <li><ph keyref="VD_640x360"/>：视频分辨率为 640 × 360。</li>
                    <li><ph keyref="VD_480x480"/>：视频分辨率为 480 × 480。</li>
                    <li><ph keyref="VD_640x480"/>：视频分辨率为 640 × 480。</li>
                    <li><ph keyref="VD_840x480"/>：视频分辨率为 840 × 480。</li>
                    <li><ph keyref="VD_960x540"/>：视频分辨率为 960 × 540。</li>
                    <li><ph keyref="VD_960x720"/>：视频分辨率为 960 × 720。</li>
                    <li><ph keyref="VD_1280x720"/>：视频分辨率为 1280 × 720。</li>
                    <li><ph keyref="VD_1920x1080"/>：视频分辨率为 1920 × 1080。</li>
                    <li><ph keyref="VD_2540x1440"/>：视频分辨率为 2540 × 1440。</li>
                    <li><ph keyref="VD_3840x2160"/>：视频分辨率为 3840 × 2160。</li>
                    </ul>
                    <note type="attention">
                    <ul>
                    <li>视频能否达到 720P 及以上分辨率取决于设备的性能，在性能配备较低的设备上有可能无法实现。如果采用 720P 分辨率而设备性能跟不上，则有可能出现帧率过低的情况。</li>
                    <li props="android apple">默认值为 960 × 540。</li>
                    </ul> </note> </p>
                </pd>
            </plentry>
            <plentry>
                <pt>codecType</pt>
                <pd>视频编码类型，详见 <xref keyref="VIDEO_CODEC_TYPE"/>。</pd>
            </plentry>
            <plentry>
                <pt>frameRate</pt>
                <pd props="cs electron flutter native rn unity unreal">视频编码的帧率(fps)，默认值为 15。详见 <xref keyref="FRAME_RATE"/>。</pd>
                <pd props="bp">视频编码的帧率(fps)，默认值为 15。<ul>
                  <li><ph keyref="FRAME_RATE_FPS_1"/>(1): 1 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_7"/>(7): 7 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_10"/>(10): 10 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_15"/>(15): 15 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_24"/>(24): 24 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_30"/>(30): 30 fps。</li>
                  <li><ph keyref="FRAME_RATE_FPS_60"/>(60): 60 fps。该帧率仅适用于 Windows 和 macOS 平台。</li>
                </ul></pd>
            </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">bitrate</pt>
                <pd>
                    <p><ph>视频编码码率，单位为 Kbps。</ph><ph props="cs unity">详见 <xref keyref="BITRATE"/>。</ph><ph>该参数无需设置，保留默认值 <apiname keyref="STANDARD_BITRATE"/> 即可，SDK 会根据你设定的视频分辨率和帧率自动匹配最合适的码率。有关视频分辨率和帧率的对应关系，详见<xref keyref="video-profile-table"/>。</ph></p>
                    <ul props="bp electron flutter native rn unreal">
                    <li><ph keyref="STANDARD_BITRATE"/> (0): (默认) 标准码率模式。</li>
                    <li><ph keyref="COMPATIBLE_BITRATE"/> (-1): 适配码率模式。一般情况下，声网建议你不要使用该值。</li>
                    </ul> </pd>
                <pd props="android">视频码率（Kbps）。请参考下表设置码率。如果设置的码率超出推荐范围，SDK 会自动将其调整至该范围内。你还可以选择以下选项：
                    <ul>
                        <li><codeph>STANDARD_BITRATE (0)</codeph>：推荐。标准码率模式。在此模式下，不同频道场景下的码率不同：<ul>
                            <li>在通信场景中，视频码率等于最大码率。</li>
                            <li>在直播场景中，视频码率等于最大码率的两倍。</li>
                            </ul>
                        </li>
                        <li><codeph>COMPATIBLE_BITRATE (-1)</codeph>：适配码率模式。在此模式下，码率在所有频道场景中保持一致。如果在直播场景中使用该模式，可能导致视频帧率低于设置值。 声网会针对不同频道场景采用不同的视频编码方式以优化用户体验。例如，通信场景更注重视频流畅性，而直播场景更注重视频质量（即更高码率）。因此，推荐将该参数设置为 <ph keyref="STANDARD_BITRATE"/>。</li>
                        </ul>
                    </pd>
                <pd props="ios">视频码率。请参考下表设置码率。如果设置的码率超出合理范围，SDK 会自动将其调整到该范围内的值。你也可以选择以下选项之一：
                    <ul>
                        <li><ph keyref="STANDARD_BITRATE"/>：<ul>
                            <li>在 <xref keyref="setVideoEncoderConfiguration"/> 中的标准码率。推荐在直播场景中设置更高的码率以提升视频质量。当选择 <ph keyref="STANDARD_BITRATE"/> 时，直播场景下码率值会加倍，通信场景下则与 <codeph>AgoraVideoProfile</codeph> 中的值一致。</li>
                            </ul>
                        </li>
                        <li><ph keyref="COMPATIBLE_BITRATE"/>：<ul>
                            <li>在 <xref keyref="setVideoEncoderConfiguration"/> 中的兼容码率。直播和通信场景下的码率与 <codeph>AgoraVideoProfile</codeph> 中的值一致。</li>
                            </ul>
                        </li>
                        </ul>
                    </pd>
                <pd props="cpp">视频的码率（单位：Kbps）。请参考下方的 **视频码率表** 设置码率。如果设置的码率超出合理范围，SDK 会自动将其调整到范围内的值。你也可以选择以下选项：
                    <ul>
                        <li><ph keyref="STANDARD_BITRATE"/>：推荐使用的标准码率模式。在此模式下，不同频道场景下的码率不同：<ul>
                            <li>在通信场景中，视频码率等于基础码率。</li>
                            <li>在直播场景中，视频码率是基础码率的两倍。</li>
                            </ul>
                        </li>
                        <li><ph keyref="COMPATIBLE_BITRATE"/>：兼容码率模式。在此模式下，码率在所有频道场景中保持一致。如果在直播场景中使用该模式，视频帧率可能低于设置值。 声网针对不同频道场景使用不同的视频编码器，以优化用户体验。例如，通信场景优先保证流畅性，而直播场景优先保证视频质量（更高的码率）。因此，建议将该参数设置为 <ph keyref="STANDARD_BITRATE"/>。</li>
                        </ul>
                    </pd>
            </plentry>
            <plentry>
                <pt>minBitrate</pt>
                <pd>
                    <p>最低编码码率，单位为 Kbps。</p>
                    <p>SDK 会根据网络状况自动调整视频编码码率。将参数设为高于默认值可强制视频编码器输出高质量图片，但在网络状况不佳情况下可能导致网络丢包并影响视频播放的流畅度造成卡顿。因此如非对画质有特殊需求，声网建议不要修改该参数的值。</p>
                    <note type="attention">该参数仅适用于直播场景。</note> </pd>
            </plentry>
            <plentry>
                <pt>orientationMode</pt>
                <pd>视频编码的方向模式，详见 <xref keyref="ORIENTATION_MODE"/>。</pd>
            </plentry>
            <plentry>
                <pt>degradationPreference</pt>
                <pd>带宽受限时，视频编码降级偏好。详见 <xref keyref="DEGRADATION_PREFERENCE"/>。
                  <note type="attention">当该参数设置为 <ph keyref="MAINTAIN_FRAMERATE"/> (1) 或者 <ph keyref="MAINTAIN_BALANCED"/> (2) 时，需要同时将 <parmname>orientationMode</parmname> 设置为 <ph keyref="ORIENTATION_MODE_ADAPTIVE"/> (0)，否则设置不生效。</note></pd>
            </plentry>
            <plentry>
                <pt>mirrorMode</pt>
                <pd>
                    <p props="apple cpp framework">发送编码视频时是否开启镜像模式，只影响远端用户看到的视频画面。详见 <xref keyref="VIDEO_MIRROR_MODE_TYPE"/>。</p>
                    <note conkeyref="setLocalRenderMode2/mirror" props="bp unreal"/>
                    <p props="android hmos">发送编码视频时是否开启镜像模式，只影响远端用户看到的视频画面。
                      <ul>
                      <li><ph keyref="VIDEO_MIRROR_MODE_AUTO"/> (0)：SDK 决定镜像模式。默认关闭远端用户的镜像模式。</li>
                      <li><ph keyref="VIDEO_MIRROR_MODE_ENABLED"/> (1)：开启远端用户的镜像模式。</li>
                      <li><ph keyref="VIDEO_MIRROR_MODE_DISABLED"/> (2)：关闭远端用户的镜像模式。</li>
                      </ul> </p>
                    <note type="attention">默认关闭镜像模式。</note> </pd>
            </plentry>
            <plentry>
                <pt>advanceOptions</pt>
                <pd>视频编码的高级选项。详见 <xref keyref="AdvanceOptions"/>。</pd>
            </plentry>
            </parml> </section>
        <section props="apple" id="sub-method">
          <title>方法</title>
          <parml>
            <plentry>
              <pt>initWithSize</pt>
              <pd>指定视频分辨率并初始化一个 <xref keyref="VideoEncoderConfiguration"/> 对象。详见 <xref keyref="initWithSize"/>。</pd>
            </plentry>
            <plentry>
              <pt>initWithWidth</pt>
              <pd>指定视频宽和高并初始化一个 <xref keyref="VideoEncoderConfiguration"/> 对象。详见 <xref keyref="initWithWidth"/>。</pd>
            </plentry>
          </parml>
        </section>
    </refbody>
</reference>
