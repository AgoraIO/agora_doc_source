<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_registerextension">
    <title><ph keyref="registerExtension"/></title>
    <shortdesc id="short"><ph id="shortdesc">注册插件。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="registerExtension"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int registerExtension(
      String provider, String extension, Constants.MediaSourceType sourceType);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)registerExtensionWithVendor:(NSString * _Nonnull)provider
                         extension:(NSString * _Nonnull)extension
                        sourceType:(AgoraMediaSourceType)sourceType NS_SWIFT_NAME(registerExtension(withVendor:extension:sourceType:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int registerExtension(const char* provider, const char* extension,
                        agora::media::MEDIA_SOURCE_TYPE type = agora::media::UNKNOWN_MEDIA_SOURCE) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int RegisterExtension(const FString&amp; provider, const FString&amp; extension, EMEDIA_SOURCE_TYPE type);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract registerExtension(
    provider: string,
    extension: string,
    type?: MediaSourceType
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int RegisterExtension(string provider, string extension, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract registerExtension(
    provider: string,
    extension: string,
    type?: MediaSourceType
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> registerExtension(
      {required String provider,
      required String extension,
      MediaSourceType type = MediaSourceType.unknownMediaSource});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="android apple cpp">
                <dt>自从</dt>
                <dd>v4.1.0</dd>
            </dlentry>
            </dl>
            <p>对于 SDK 外部的插件（例如云市场插件和 SDK 拓展插件），加载插件后，你需要调用该方法注册插件。SDK 内部插件（包含在 SDK 包中的插件）在初始化 <xref keyref="IRtcEngine" /> 后会自动加载并注册，无需调用该方法。</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
                <ul>
                <li>建议你在初始化 <xref keyref="IRtcEngine" /> 后、加入频道前调用该方法。</li>
                <li>对于视频相关插件（例如美颜插件），需要在启用视频模块（<xref keyref="enableVideo" />/<xref keyref="enableLocalVideo" />）之前调用该方法。</li>
                <li props="android hmos">调用该方法前，需要先调用 <xref keyref="addExtension"/> 加载插件。</li>
                <li props="apple">调用该方法前，需要先在 Xcode 中将插件动态库（.xcframework）链接至工程以加载插件。</li>
                <li props="cpp framework">调用该方法前，需要先调用 <xref keyref="loadExtensionProvider"/> 加载插件。</li>
                </ul>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <ul>
            <li>如果要注册多个插件，需要多次调用该方法。</li>
            <li>不同插件在 SDK 中处理数据的顺序由插件的注册顺序决定。即先注册的插件会先处理数据。</li>
            </ul>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry conkeyref="setExtensionProperty/vendor">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="setExtensionProperty/extension">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="enableExtension/source">
                <pt/>
                <pd/>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp unity electron cs">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph>
                <ul>
                <li>-3: 该插件动态库没有被加载。声网推荐你检查该动态库是否存放在预期的位置，或该动态库名是否正确。</li>
                </ul>
            </li>
            </ul> </section>
    </refbody>
</reference>
