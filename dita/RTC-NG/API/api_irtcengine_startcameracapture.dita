<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startcameracapture">
    <title><ph keyref="startCameraCapture"/></title>
    <shortdesc id="short"><ph id="shortdesc">开始摄像头采集。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startCameraCapture"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int startCameraCapture(Constants.VideoSourceType sourceType, CameraCapturerConfiguration config);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract startCameraCapture(
    sourceType: Constants.VideoSourceType, config: CameraCapturerConfiguration): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)startCameraCapture:(AgoraVideoSourceType)sourceType config:(AgoraCameraCapturerConfiguration * _Nullable)config NS_SWIFT_NAME(startCameraCapture(_:config:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int startCameraCapture(VIDEO_SOURCE_TYPE sourceType, const CameraCapturerConfiguration&amp; config) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = "Agora|IRtcEngine")
	int StartCameraCapture(EVIDEO_SOURCE_TYPE sourceType, const FCameraCapturerConfiguration&amp; config);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startCameraCapture(
    sourceType: VideoSourceType,
    config: CameraCapturerConfiguration
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StartCameraCapture(VIDEO_SOURCE_TYPE sourceType, CameraCapturerConfiguration config);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startCameraCapture(
    sourceType: VideoSourceType,
    config: CameraCapturerConfiguration
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startCameraCapture(
      {required VideoSourceType sourceType,
      required CameraCapturerConfiguration config});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p>调用该方法可以通过指定 <parmname>sourceType</parmname> 同时开启多路摄像头采集。</p>
            <note props="bp cpp flutter ios rn unity unreal">在 iOS 平台上调用该方法前，如果要开启多路摄像头采集，需要在调用该方法前，先调用 <xref keyref="enableMultiCamera"/> 并设置 <parmname>enabled</parmname> 为 <codeph><ph keyref="true"/></codeph>。</note>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>sourceType</pt>
                <pd props="bp cs electron flutter mac rn unity unreal">
                    <p>视频源的类型。详见 <xref keyref="VIDEO_SOURCE_TYPE"/>。</p>
                    <note props="android apple cpp framework"><ul>
                    <li props="bp cpp flutter ios rn unity unreal">iOS 设备最多支持 2 路摄像头采集的视频流（要求设备配备多摄像头或支持外接摄像头）。</li>
                    <li props="android bp cpp flutter rn unity unreal">Android 设备最多支持 4 路摄像头采集的视频流（要求设备配备多摄像头或支持外接摄像头）。</li>
                    <li props="bp cpp cs electron flutter mac unity unreal">桌面端最多支持 4 路摄像头采集的视频流。</li>
                    </ul></note>
                </pd>
            <pd props="android">视频源的类型。详见 <xref keyref="VIDEO_SOURCE_TYPE"/>。</pd>
                <pd props="ios">视频源的类型。详见 <xref keyref="VIDEO_SOURCE_TYPE"/>。
                    <ul>
                        <li>在 iOS 上，如果设备有多个摄像头或支持外接摄像头，最多可以从两个摄像头采集视频。</li>
                        <li>在 macOS 上，最多可以从四个摄像头采集视频。</li>
                        </ul>
                    </pd>
                <pd props="cpp">视频源的类型，详见 <xref keyref="VIDEO_SOURCE_TYPE"/>。</pd>
                </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">config</pt>
                <pd props="android">视频采集的配置。详见 <xref keyref="CameraCapturerConfiguration"/>。</pd>
                <pd props="ios">视频采集的配置。详见 <xref keyref="CameraCapturerConfiguration"/>。
注意：在 iOS 上，此参数无实际作用。请使用 <xref keyref="enableMultiCamera"/> 中的 <xref keyref="Config"/> 参数设置视频采集配置。</pd>
                <pd props="cpp">视频采集的配置。详见 <xref keyref="CameraCapturerConfiguration"/>。
在 iOS 设备上，如果设备拥有多个摄像头或支持外接摄像头，最多可采集 2 路视频；在 Android 设备上，最多可采集 4 路视频；在桌面平台上，最多可采集 4 路视频。</pd>
            </plentry>
        </parml>
            <parml>
            <plentry>
                <pt>config</pt>
                <pd>
                    <p>视频采集配置。详见 <xref keyref="CameraCapturerConfiguration"/>。</p>
                    <note props="bp cpp flutter ios rn unity unreal">在 iOS 平台上，该参数无实际作用。请使用 <xref keyref="enableMultiCamera"/> 中的 <parmname>config</parmname> 参数设置视频采集配置。</note> </pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="bp cs electron flutter native rn unity unreal">
            <title><ph keyref="return-section-title"/></title>
        <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
        <ul props="bp cs electron rn unity unreal">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul>
        <p props="native"><ul>
                        <li>0：方法调用成功。</li>
                        <li>&lt; 0：方法调用失败。</li>
                        </ul>
                    </p>
    </section>
    </refbody>
</reference>
