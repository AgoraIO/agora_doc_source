<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_watermarkoptions">
    <title><ph keyref="WatermarkOptions"/></title>
    <shortdesc id="short"><ph id="shortdesc">水印图片的设置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class WatermarkOptions {
  public static class Rectangle {
    public int x = 0;
    public int y = 0;
    public int width = 0;
    public int height = 0;
    public Rectangle() {
      x = 0;
      y = 0;
      width = 0;
      height = 0;
    }
    public Rectangle(int x_, int y_, int width_, int height_) {
      x = x_;
      y = y_;
      width = width_;
      height = height_;
    }
  };
  public boolean visibleInPreview = true;
  public Rectangle positionInLandscapeMode = new Rectangle();
  public Rectangle positionInPortraitMode = new Rectangle();
}
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface WatermarkOptions : NSObject
@property(assign, nonatomic) BOOL visibleInPreview;
@property(assign, nonatomic) CGRect positionInLandscapeMode;
@property(assign, nonatomic) CGRect positionInPortraitMode;
@end
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct WatermarkOptions {
  bool visibleInPreview;
  Rectangle positionInLandscapeMode;
  Rectangle positionInPortraitMode;
  WatermarkRatio watermarkRatio;
  WATERMARK_FIT_MODE mode;
  WatermarkOptions()
    : visibleInPreview(false),
      positionInLandscapeMode(0, 0, 0, 0),
      positionInPortraitMode(0, 0, 0, 0),
      mode(FIT_MODE_COVER_POSITION) {}
};
</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FWatermarkOptions
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|WatermarkOptions&quot;)
	bool visibleInPreview;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|WatermarkOptions&quot;)
	FRectangle positionInLandscapeMode;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|WatermarkOptions&quot;)
	FRectangle positionInPortraitMode;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|WatermarkOptions&quot;)
	FWatermarkRatio watermarkRatio;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|WatermarkOptions&quot;)
	EWATERMARK_FIT_MODE mode = EWATERMARK_FIT_MODE::FIT_MODE_COVER_POSITION;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class WatermarkOptions {
  
  visibleInPreview?: boolean;
  
  positionInLandscapeMode?: Rectangle;
  
  positionInPortraitMode?: Rectangle;
  
  watermarkRatio?: WatermarkRatio;
  
  mode?: WatermarkFitMode;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class WatermarkOptions
    {
        public WatermarkOptions()
        {
            visibleInPreview = false;
            positionInLandscapeMode = new Rectangle(0, 0, 0, 0);
            positionInPortraitMode = new Rectangle(0, 0, 0, 0);
            watermarkRatio = new WatermarkRatio();
            mode = WATERMARK_FIT_MODE.FIT_MODE_COVER_POSITION;
        }

        public WatermarkOptions(bool visibleInPreview, Rectangle positionInLandscapeMode,
            Rectangle positionInPortraitMode, WatermarkRatio ratio, WATERMARK_FIT_MODE mode)
        {
            this.visibleInPreview = visibleInPreview;
            this.positionInLandscapeMode = positionInLandscapeMode ?? new Rectangle();
            this.positionInPortraitMode = positionInPortraitMode ?? new Rectangle();
            this.watermarkRatio = ratio ?? new WatermarkRatio();
            this.mode = mode;
        }
        public bool visibleInPreview { set; get; }
        public Rectangle positionInLandscapeMode { set; get; }
        public Rectangle positionInPortraitMode { set; get; }
        public WatermarkRatio watermarkRatio { set; get; }
        public WATERMARK_FIT_MODE mode { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class WatermarkOptions {
  
  visibleInPreview?: boolean;
  
  positionInLandscapeMode?: Rectangle;
  
  positionInPortraitMode?: Rectangle;
  
  watermarkRatio?: WatermarkRatio;
  
  mode?: WatermarkFitMode;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class WatermarkOptions {
  const WatermarkOptions(
      {this.visibleInPreview,
      this.positionInLandscapeMode,
      this.positionInPortraitMode,
      this.watermarkRatio,
      this.mode});

  @JsonKey(name: &#x27;visibleInPreview&#x27;)
  final bool? visibleInPreview;

  @JsonKey(name: &#x27;positionInLandscapeMode&#x27;)
  final Rectangle? positionInLandscapeMode;

  @JsonKey(name: &#x27;positionInPortraitMode&#x27;)
  final Rectangle? positionInPortraitMode;

  @JsonKey(name: &#x27;watermarkRatio&#x27;)
  final WatermarkRatio? watermarkRatio;

  @JsonKey(name: &#x27;mode&#x27;)
  final WatermarkFitMode? mode;

  factory WatermarkOptions.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$WatermarkOptionsFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$WatermarkOptionsToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p/>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>visibleInPreview</pt>
                <pd>水印是否在本地预览视图中可见：
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>: （默认）水印在本地预览视图中可见。</li>
                    <li><codeph><ph keyref="false"/></codeph>: 水印在本地预览视图中不可见。</li>
                    </ul>
                </pd>
            </plentry>
            <plentry>
                <pt>positionInLandscapeMode</pt>
                <pd props="android">横屏模式下，显示水印图片的区域。详见 <xref keyref="Rectangle"/>。</pd>
                <pd props="cpp unreal bp unity electron rn flutter cs">水印的适配模式为 <ph keyref="FIT_MODE_COVER_POSITION"/> 时，用于设置横屏模式下水印图片的区域。详见 <xref keyref="Rectangle"/>。</pd>
                <pd props="ios mac">横屏模式下，显示水印图片的区域。该参数包含以下成员：
                    <ul>
                    <li>x：水印相对左上角的横向偏移。</li>
                    <li>y：水印相对左上角的纵向偏移。</li>
                    <li>width：水印区域的宽 (px)。</li>
                    <li>height：水印区域的高 (px)。</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>positionInPortraitMode</pt>
                <pd props="android">竖屏模式下，显示水印图片的区域。详见 <xref keyref="Rectangle"/>。</pd>
                <pd props="cpp unreal bp unity electron rn flutter cs">水印的适配模式为 <ph keyref="FIT_MODE_COVER_POSITION"/> 时，用于设置竖屏模式下水印图片的区域。详见 <xref keyref="Rectangle"/>。</pd>
                <pd props="ios mac">竖屏模式下，显示水印图片的区域。该参数包含以下成员：
                    <ul>
                    <li>x：水印相对左上角的横向偏移。</li>
                    <li>y：水印相对左上角的纵向偏移。</li>
                    <li>width：水印区域的宽 (px)。</li>
                    <li>height：水印区域的高 (px)。</li>
                    </ul> </pd>
            </plentry>
            <plentry props="cpp unreal bp unity electron rn flutter cs">
                <pt>watermarkRatio</pt>
                <pd>水印的适配模式为 <ph keyref="FIT_MODE_USE_IMAGE_RATIO"/> 时，该参数可设置缩放模式下的水印坐标。详见 <xref keyref="WatermarkRatio"/>。</pd>
            </plentry>
            <plentry props="cpp unreal bp unity electron rn flutter cs">
                <pt>mode</pt>
                <pd>水印的适配模式。详见 <xref keyref="WATERMARK_FIT_MODE"/>。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
