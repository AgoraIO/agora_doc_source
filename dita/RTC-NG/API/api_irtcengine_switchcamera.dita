<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_switchcamera">
    <title><ph keyref="switchCamera"/></title>
    <shortdesc id="short"><ph id="shortdesc">在前置摄像头和后置摄像头之间切换。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="switchCamera"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int switchCamera();</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract switchCamera(): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)switchCamera NS_SWIFT_NAME(switchCamera());</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int switchCamera() = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = "Agora|IRtcEngine")
	int SwitchCamera();</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract switchCamera(): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SwitchCamera();</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract switchCamera(): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; switchCamera();</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p id="desc">你可以在应用运行过程中，根据实际可用的摄像头动态切换前置或后置摄像头，无需重启视频流或重新配置视频源。</p>
            <p props="android">该方法和 <xref keyref="switchCamera2"/> 均用于切换摄像头，区别在于 <apiname keyref="switchCamera2"/> 通过指定摄像头 ID 切换到特定的摄像头，该方法则切换摄像头的方向（前置或后置）。</p>
            <note type="attention" props="bp cpp flutter unity unreal">该方法仅适用于 Android 和 iOS。</note>
        <note type="attention" props="cpp"><ul>
                        <li>此方法仅切换由第一个摄像头采集的视频流的摄像头，即调用 <xref keyref="startCameraCapture"/> 时视频源设置为 <ph keyref="VIDEO_SOURCE_CAMERA"/>（0）的视频流。</li>
                        <li>此方法仅适用于 Android 和 iOS 平台。</li>
                        </ul>
                    </note>
            <note type="attention" props="apple">此方法仅切换由第一个摄像头采集的视频流的摄像头，即调用 <xref keyref="startCameraCapture"/> 时视频源设置为 <ph keyref="VIDEO_SOURCE_CAMERA"/>（0）的视频流。</note>
            </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>必须在摄像头成功启用后调用，即 SDK 触发 <xref keyref="onLocalVideoStateChanged"/> 回调并返回本地视频状态为 <ph keyref="LOCAL_VIDEO_STREAM_STATE_CAPTURING"/>（1）之后。</p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <p>无。</p>
        </section>
        <section id="return_values" props="bp cs flutter native rn unity unreal">
            <title><ph keyref="return-section-title"/></title>
        <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
        <ul props="android bp cs rn unity unreal">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul>
        <p props="apple cpp"><ul>
                        <li>0：方法调用成功。</li>
                        <li>&lt; 0：方法调用失败。</li>
                        </ul>
                    </p>
        </section>
    </refbody>
</reference>
