<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setupremotevideo">
    <title><ph keyref="setupRemoteVideo"/></title>
    <shortdesc id="short"><ph id="shortdesc">初始化远端用户的视频视图。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setupRemoteVideo"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setupRemoteVideo(VideoCanvas remote);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract setupRemoteVideo(canvas: VideoCanvas): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setupRemoteVideo:(AgoraRtcVideoCanvas * _Nonnull)remote NS_SWIFT_NAME(setupRemoteVideo(_:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setupRemoteVideo(const VideoCanvas&amp; canvas) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = "Agora|IRtcEngine")
	int SetupRemoteVideo(const FVideoCanvas&amp; canvas);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setupRemoteVideo(canvas: VideoCanvas): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetupRemoteVideo(VideoCanvas canvas);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setupRemoteVideo(canvas: VideoCanvas): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setupRemoteVideo(VideoCanvas canvas);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p>该方法在本地设备上初始化远端视频流的视频视图，仅影响本地用户看到的画面。调用该方法可将远端视频流绑定到本地的视频视图，并设置该视图的渲染模式和镜像模式。你需要在该方法中指定远端用户的 ID。如果应用尚未获取远端用户的 ID，可在收到 <xref keyref="onUserJoined"/> 回调后再设置。若要解除远端用户与视图的绑定，请将 <codeph>view</codeph> 参数设置为 <codeph><ph keyref="NULL"/></codeph>。当远端用户离开频道时，SDK 会自动解除绑定。在移动端进行视频合流布局的自定义场景中，你可以调用该方法，并为合流视频流中的每个子视频流设置独立的 <codeph>view</codeph> 进行渲染。<xref keyref="onUserJoined"/> 回调后再设置。若要解除远端用户与视图的绑定，请将 <codeph>view</codeph> 参数设置为 <codeph><ph keyref="NULL"/></codeph>。当远端用户离开频道时，SDK 会自动解除绑定。在移动端进行视频合流布局的自定义场景中，你可以调用该方法，并为合流视频流中的每个子视频流设置独立的 <codeph>view</codeph> 进行渲染。</p>
            <p>调用该方法时需要指定远端视频的用户 ID，一般可以在进频道前提前设置好。如果无法在加入频道前得到远端用户的 ID，可以在收到 <xref keyref="onUserJoined"/> 回调时调用该方法。</p>
            <p>如需解除某个远端用户的绑定视图，可以调用该方法并将 <parmname>view</parmname> 设置为空。</p>
            <p>离开频道后，SDK 会清除远端用户视图的绑定关系。</p>
            <p props="android cpp flutter ios rn unity">在移动端自定义合图布局场景下，你可以调用该方法并针对合图视频流的每一路子视频流设置一个单独的 <parmname>view</parmname> 进行渲染。</p>
            <note type="attention">
            <ul>
            <li props="flutter" id="render">在 Flutter 中你不需要主动调用该方法，请使用 <xref keyref="AgoraVideoView"/> 渲染本地和远端视图。</li>
             <li props="cs unity">如果你想要在原生窗口上渲染图像，请调用此方法；如果你仅需在 Unity 项目内渲染图像，可直接通过 <xref keyref="VideoSurface"/> 类来实现。</li>
            <li props="bp cs flutter native rn unity unreal">如果你希望在通话中更新远端用户视图的渲染或镜像模式，请使用 <xref keyref="setRemoteRenderMode2"/> 方法。</li>
            <li props="android apple cpp framework">当使用录制服务时，由于它不会发送视频流，App 无需为它绑定视图。如果 App 无法识别录制服务，可以在收到 <xref keyref="onFirstRemoteVideoDecoded"/> 回调时再绑定远端用户视图。</li>
            <li props="electron">如果想要停止渲染视图，需要将 <parmname>view</parmname> 设为 <codeph><ph keyref="NULL"/></codeph> 后再次调用该方法，以停止渲染并清理渲染缓存。</li>
            </ul> </note> <note type="attention" props="cpp"><ul>
                        <li>若需在通话过程中更新远端视频视图的渲染模式或镜像模式，请使用 <xref keyref="setRemoteRenderMode2"/> 方法。</li>
                        <li>使用录制服务时，应用无需绑定视图，因为录制服务不会发送视频流。如果你的应用无法识别录制服务，请在 SDK 触发 <xref keyref="onFirstRemoteVideoDecoded"/> 回调时将远端用户绑定到视图。</li>
                        </ul>
                    </note>
            <note type="attention" props="apple"><ul>
                        <li>若需在通话过程中更新远端视频视图的渲染或镜像模式，请使用 <xref keyref="setRemoteRenderMode2"/> 方法。</li>
                        <li>使用录制服务时，应用无需绑定视图，因为录制服务不会发送视频流。如果你的应用无法识别录制服务，请在 SDK 触发 <xref keyref="onFirstRemoteVideoDecoded"/> 回调时再将远端用户绑定到视图。</li>
                        </ul>
                    </note>
            <note type="attention" props="android"><ul>
                        <li>若需在通话过程中更新远端视频视图的渲染模式或镜像模式，请使用 <xref keyref="setRemoteRenderMode2"/> 方法。</li>
                        <li>使用录制服务时，App 无需绑定视图，因为录制服务不会发送视频流。如果你的 App 无法识别录制服务，请在 SDK 触发 <xref keyref="onFirstRemoteVideoDecoded"/> 回调时将远端用户绑定到视图。</li>
                        </ul>
                    </note>
            </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>canvas</pt>
                <pt props="android apple">remote</pt>
                <pd props="bp cs electron flutter mac rn unity unreal">
                    <p>远端视频显示属性。详见 <xref keyref="VideoCanvas"/>。</p>
                </pd>
            <pd props="android cpp">远端视频视图及其相关设置。详见 <xref keyref="VideoCanvas"/>。</pd>
                <pd props="ios">远端视频视图及相关设置，详见 <xref keyref="VideoCanvas"/>。</pd>
                </plentry>
        </parml> </section>
        <section id="return_values" props="bp cs electron flutter native rn unity unreal">
            <title><ph keyref="return-section-title"/></title>
        <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
        <ul>
            <li props="bp cs electron rn unity unreal">0：方法调用成功。</li>
            <li>&lt; 0：方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul>
        <p props="native"><ul>
                        <li>0：方法调用成功。</li>
                        <li>&lt; 0：方法调用失败。</li>
                        </ul>
                    </p>
    </section>
    </refbody>
</reference>
