<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videoframe_ng">
    <title><ph keyref="VideoFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">视频帧的属性设置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="unity" outputclass="language-csharp">public class VideoFrame
    {
        public VIDEO_PIXEL_FORMAT type;
        public int width;
        public int height;
        public int yStride;
        public int uStride;
        public int vStride;
        public byte[] yBuffer;
        public byte[] uBuffer;
        public byte[] vBuffer;
        public int rotation;
        public long renderTimeMs;
        public int avsync_type;
    };</codeblock>
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraOutputVideoFrame : NSObject
@property (nonatomic, assign) NSInteger type;
@property (nonatomic, assign) int width;
@property (nonatomic, assign) int height;
@property (nonatomic, assign) int yStride;
@property (nonatomic, assign) int uStride;
@property (nonatomic, assign) int vStride;
@property (nonatomic, assign) uint8_t* _Nullable yBuffer;
@property (nonatomic, assign) uint8_t* _Nullable uBuffer;
@property (nonatomic, assign) uint8_t* _Nullable vBuffer;
@property (nonatomic, assign) int rotation;
@property (nonatomic, assign) int64_t renderTimeMs;
@property (nonatomic, assign) int avSyncType;
@property(assign, nonatomic) CVPixelBufferRef _Nullable pixelBuffer;

@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct VideoFrame {
  VideoFrame():
  type(VIDEO_PIXEL_DEFAULT),
  width(0),
  height(0),
  yStride(0),
  uStride(0),
  vStride(0),
  yBuffer(NULL),
  uBuffer(NULL),
  vBuffer(NULL),
  rotation(0),
  renderTimeMs(0),
  avsync_type(0),
  VIDEO_PIXEL_FORMAT type;
  int width;
  int height;
  int yStride;
  int uStride;
  int vStride;
  uint8_t* yBuffer;
  uint8_t* uBuffer;
  uint8_t* vBuffer;
  int rotation;
  int64_t renderTimeMs;
  int avsync_type;
};
</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc">
            <p>视频数据的格式为 YUV420。缓冲区给出的是指向指针的指针，该接口不能修改缓冲区的指针，只能修改缓冲区的内容。</p>
        </section>
        <section id="parameters">
            <title><text
            conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"
            /></title>
            <parml>
            <plentry>
                <pt>type</pt>
                <pd props="cpp unity"
                    conkeyref="ExternalVideoFrame/windows-format"/>
                <pd props="ios mac" conkeyref="ExternalVideoFrame/oc-format"/>
            </plentry>
            <plentry>
                <pt>width</pt>
                <pd>视频像素宽度。</pd>
            </plentry>
            <plentry>
                <pt>height</pt>
                <pd>视频像素高度。</pd>
            </plentry>
            <plentry>
                <pt>yStride</pt>
                <pd>对 YUV 数据，表示 Y 缓冲区的行跨度；对 RGBA 数据，表示总的数据长度。</pd>
            </plentry>
            <plentry>
                <pt>uStride</pt>
                <pd>对 YUV 数据，表示 U 缓冲区的行跨度；对 RGBA 数据，值为 0。</pd>
            </plentry>
            <plentry>
                <pt>vStride</pt>
                <pd>对 YUV 数据，表示 V 缓冲区的行跨度；对 RGBA 数据，值为 0。</pd>
            </plentry>
            <plentry>
                <pt>yBuffer</pt>
                <pd>对 YUV 数据，表示 Y 缓冲区的指针；对 RGBA 数据，表示数据缓冲区。</pd>
            </plentry>
            <plentry>
                <pt>uBuffer</pt>
                <pd>对 YUV 数据，表示 U 缓冲区的指针；对 RGBA 数据，值为空。</pd>
            </plentry>
            <plentry>
                <pt>vBuffer</pt>
                <pd>对 YUV 数据，表示 V 缓冲区的指针；对 RGBA 数据，值为空。</pd>
            </plentry>
            <plentry>
                <pt>rotation</pt>
                <pd>在渲染视频前设置该帧的顺时针旋转角度，目前支持 0 度、90 度、180 度，和 270 度。</pd>
            </plentry>
            <plentry>
                <pt>renderTimeMs</pt>
                <pd>视频帧被渲染时的 Unix 时间戳（毫秒）。该时间戳可用于指导渲染视频帧。该参数为必填。</pd>
            </plentry>
            <plentry>
                <pt>avsync_type</pt>
                <pd>保留参数。</pd>
            </plentry>
            <plentry props="ios mac">
                <pt>pixelBuffer</pt>
                <pd>将数据填充到 CVPixelBuffer。</pd>
            </plentry>
            <plentry props="hide">
                <pt>alphaBuffer</pt>
                <pd>
                    <p>表示人像分割算法的输出数据，跟视频帧的尺寸一致。每个像素点的取值范围为 [0,255]，其中 0 表示背景；255 代表前景（人像）。</p>
                    <p>在用户自定义视频渲染场景下，该参数可帮助实现将视频背景自渲染为各种效果，例如：透明、纯色、图片、视频等等。
                    <note>该参数需要<xref keyref="ticket-link"/>联系技术支持开通。</note></p>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
