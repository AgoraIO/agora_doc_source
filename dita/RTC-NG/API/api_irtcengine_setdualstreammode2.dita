<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setdualstreammode2">
    <title><ph keyref="setDualStreamMode2"/></title>
    <shortdesc id="short"><ph id="shortdesc">在发送端设置双流模式并设置视频小流。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setDualStreamMode2"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setDualStreamMode(
      Constants.SimulcastStreamMode mode, SimulcastStreamConfig streamConfig);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setDualStreamMode:(AgoraSimulcastStreamMode)mode
            streamConfig:(AgoraSimulcastStreamConfig* _Nonnull)streamConfig;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int setDualStreamMode(SIMULCAST_STREAM_MODE mode,
                                 const SimulcastStreamConfig&amp; streamConfig) = 0;</codeblock>
            <codeblock props="cs" outputclass="language-csharp"/>
            <codeblock props="electron" outputclass="language-typescript">abstract setDualStreamMode(
    mode: SimulcastStreamMode,
    streamConfig?: SimulcastStreamConfig
  ): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int SetDualStreamMode(SIMULCAST_STREAM_MODE mode, SimulcastStreamConfig streamConfig);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setDualStreamMode(
    mode: SimulcastStreamMode,
    streamConfig?: SimulcastStreamConfig
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> setDualStreamMode(
      {required SimulcastStreamMode mode, SimulcastStreamConfig? streamConfig});</codeblock>
            <codeblock props="unreal" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>自从</dt>
                <dd>v4.0.1</dd>
            </dlentry>
            </dl>
            <p id="desc">SDK 默认在发送端开启小流 auto 模式，效果等同于调用该方法并将 <parmname>mode</parmname> 设置为 <apiname keyref="AUTO_SIMULCAST_STREAM"/>。如果你想修改此行为，可以调用该方法并修改 <parmname>mode</parmname> 为 <apiname keyref="DISABLE_SIMULCAST_STREAM"/>（始终不发送小流）或 <apiname keyref="ENABLE_SIMULCAST_STREAM"/>（始终发送小流）。</p>
            <p props="native unity">该方法跟 <xref keyref="setDualStreamMode"/> 的区别在于，该方法还可以进行视频小流的配置，SDK 会根据 <parmname>streamConfig</parmname> 中的配置发送小流。</p>
            <note conkeyref="setDualStreamMode/note" props="native unity"/> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                    <pt>mode</pt>
                    <pd>发送视频流的模式。详见 <xref keyref="SIMULCAST_STREAM_MODE"/>。</pd>
            </plentry>
            <plentry conkeyref="enableDualStreamMode3/streamconfig">
                <pt/>
                <pd/>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native electron rn unity">
            <title>返回值</title>
            <ul id="ul_bpp_x2z_hqb">
            <li>0: 方法调用成功</li>
            <li>&lt; 0: 方法调用失败 </li>
            </ul> </section>
    </refbody>
</reference>
