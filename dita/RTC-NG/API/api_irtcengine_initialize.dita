<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_initialize">
    <title><ph keyref="initialize"/></title>
    <shortdesc id="short"><ph props="ios mac android electron">创建并初始化 <xref keyref="IRtcEngine"/>。</ph><ph props="cpp flutter unity" id="shortdesc">初始化 <apiname keyref="IRtcEngine"/>。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="initialize"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static synchronized RtcEngine create(RtcEngineConfig config) throws Exception {}
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">+ (instancetype _Nonnull)sharedEngineWithConfig:(AgoraRtcEngineConfig * _Nonnull)config
                                       delegate:(id&lt;AgoraRtcEngineDelegate&gt; _Nullable)delegate;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int initialize(const RtcEngineContext&amp; context) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract initialize(context: RtcEngineContext): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int Initialize(RtcEngineContext context);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract initialize(context: RtcEngineContext): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; initialize(RtcEngineContext context);</codeblock>
            <codeblock props="unreal" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <p props="native unity electron flutter"><apiname keyref="IRtcEngine"/> 类的所有接口函数，如无特殊说明，都是异步调用，对接口的调用建议在同一个线程进行。</p>
            <note type="attention">
            <ul>
            <li props="cpp flutter rn electron">请确保在调用其他 API 前先调用 <xref keyref="createAgoraRtcEngine"/> 和 <apiname keyref="initialize"/> 创建并初始化 <apiname keyref="IRtcEngine"/>。</li>
            <li props="android ios mac">请确保在调用其他 API 前先调用该方法创建并初始化 <apiname keyref="IRtcEngine"/>。</li>
            <li props="android ios mac">调用该方法和 <xref keyref="create"/> 均能创建 <apiname keyref="IRtcEngine"/> 实例。该方法与 <apiname keyref="create"/> 的 区别在于，该方法支持在创建 <apiname keyref="IRtcEngine"/> 实例时进行更多配置，如指定访问区域、设置日志文件等。</li>
            <li>SDK 只支持每个 app 创建一个 <apiname keyref="IRtcEngine"/> 实例。</li>
            </ul> </note> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt props="cpp electron unity rn flutter">context</pt>
                <pt props="android ios mac">config</pt>
                <pd>
                    <p><xref keyref="IRtcEngine"/> 实例的配置。详见 <xref keyref="RtcEngineConfig"/>。</p>
                </pd>
            </plentry>
            <plentry props="ios mac">
                <pt>delegate</pt>
                <pd conkeyref="create/handler"/>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native electron unity rn">
            <title>返回值</title>
            <ul>
            <li props="android apple">方法调用成功，返回一个 <apiname keyref="IRtcEngine"/> 对象。</li>
            <li props="cpp unity rn electron">0: 方法调用成功。</li>
            <li>&lt; 0：方法调用失败。               
                <ul>
                <li>-1: 一般性的错误（未明确归类）。</li>
                <li>-2: 设置了无效的参数。</li>
                <li>-7: SDK 初始化失败。</li>
                <li>-22: 资源申请失败。当 app 占用资源过多，或系统资源耗尽时，SDK 分配资源失败，会返回该错误。</li>
                <li>-101: App ID 无效。</li>
                </ul></li>
            </ul></section>
        <section props="android" conkeyref="create/section_yqx_kwq_4qb"/>
    </refbody>
</reference>
