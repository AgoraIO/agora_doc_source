<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startscreencapture2">
    <title><ph keyref="startScreenCapture2" /></title>
    <shortdesc id="short"><ph id="shortdesc">开始屏幕采集并指定视频源。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startScreenCapture2" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">
- (int)startScreenCapture:(AgoraVideoSourceType)sourceType config:(AgoraScreenCaptureConfiguration * _Nullable)config NS_SWIFT_NAME(startScreenCapture(_:config:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int startScreenCapture(VIDEO_SOURCE_TYPE sourceType, const ScreenCaptureConfiguration&amp; config) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int StartScreenCaptureBySourceType(EVIDEO_SOURCE_TYPE sourceType, const FScreenCaptureConfiguration&amp; config);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startScreenCaptureBySourceType(
    sourceType: VideoSourceType,
    config: ScreenCaptureConfiguration
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StartScreenCapture(VIDEO_SOURCE_TYPE sourceType, ScreenCaptureConfiguration config);</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> startScreenCaptureBySourceType(
      {required VideoSourceType sourceType,
      required ScreenCaptureConfiguration config});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="android apple cpp">
                <dt>自从</dt>
                <dd>v4.2.0</dd>
            </dlentry>
            </dl>
            <note type="attention">该方法仅适用于 macOS 和 Windows 平台。 </note>
        </section>
        <section id="scenario" deliveryTarget="details">
            <title>适用场景</title>
            <p>在屏幕共享场景下，你需要调用该方法开始采集屏幕视频流。</p>
            <p>SDK 支持一系列开启屏幕采集的方法，它们之间存在以下区别，请根据实际场景选用：<ul>
                <li><ph props="cpp unreal bp unity flutter"><xref keyref="startScreenCapture"/>/</ph><xref keyref="startScreenCaptureByDisplayId"/>/<xref keyref="startScreenCaptureByWindowId"/>：仅支持采集单个屏幕或窗口，适合仅共享单个屏幕的场景。</li>
                <li><xref keyref="startScreenCapture2"/>：支持指定多个视频源，以采集多路屏幕共享流，用于本地合图或者多频道发布场景。</li></ul></p>
        </section>
        <section id="timing" deliveryTarget="details">
        <title>调用时机</title>
            <p>该方法在加入频道前后均可调用，区别如下：
            <ul>
            <li>如果在加入频道前调用该方法，然后调用 <xref keyref="joinChannel2"/> 加入频道，并设置 <parmname>publishScreenCaptureVideo</parmname> 为 <codeph><ph keyref="true"/></codeph>，即可开始屏幕共享。</li>
            <li>如果在加入频道后调用该方法，然后调用 <xref keyref="updateChannelMediaOptions"/> 更新频道媒体选项，并设置 <parmname>publishScreenCaptureVideo</parmname> 为 <codeph><ph keyref="true"/></codeph>，即可开始屏幕共享。</li>
            </ul></p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <ul>
                <li>如果调用该方法开始屏幕采集，则停止屏幕采集时需要调用 <xref keyref="stopScreenCapture2"/> 。</li>
                <li>在 Windows 平台上，最多支持 4 路屏幕采集的视频流。</li>
                <li props="cpp unreal bp flutter unity electron">在 macOS 平台上，最多支持 1 路屏幕采集的视频流。</li></ul>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>sourceType</pt>
                <pd>视频源的类型，详见 <xref keyref="VIDEO_SOURCE_TYPE"/>。
                <note props="cpp unreal bp flutter unity electron" type="attention">在 macOS 平台上，仅支持将该参数设置为 <ph keyref="VIDEO_SOURCE_SCREEN"/> (2)。</note>
                </pd>
            </plentry>
            <plentry>
                <pt>config</pt>
                <pd>屏幕采集配置。详见 <xref keyref="ScreenCaptureConfiguration" />。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp electron unity cs">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
    </refbody>
</reference>
