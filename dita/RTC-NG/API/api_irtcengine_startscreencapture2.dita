<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startscreencapture2">
    <title><ph keyref="startScreenCapture2" /></title>
    <shortdesc id="short"><ph id="shortdesc">开始屏幕采集。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startScreenCapture2" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">
- (int)startScreenCapture:(AgoraVideoSourceType)sourceType config:(AgoraScreenCaptureConfiguration * _Nullable)config NS_SWIFT_NAME(startScreenCapture(_:config:));</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int startScreenCapture(VIDEO_SOURCE_TYPE sourceType, const ScreenCaptureConfiguration&amp; config) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startSecondaryScreenCapture(
    config: ScreenCaptureConfiguration
  ): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int StartSecondaryScreenCapture(ScreenCaptureConfiguration config);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startSecondaryScreenCapture(
    config: ScreenCaptureConfiguration
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startSecondaryScreenCapture(ScreenCaptureConfiguration config);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>自从</dt>
                <dd>v4.2.0</dd>
            </dlentry>
            </dl>
            <p>该方法和 <xref keyref="startScreenCapture"/> 的区别在于，基于 PC 端可能有多个屏幕的场景，调用该方法可以通过指定 <codeph>sourceType</codeph> 同时开启多路屏幕采集，用于本地合图或多频道发布。</p>
            <note type="attention" props="mac cpp flutter unity electron"><ul>
            <li>该方法适用于 macOS 和 Windows 平台。</li>
            <li props="mac cpp unity">如果调用该方法开始屏幕采集，声网建议你使用 <xref keyref="stopScreenCapture2"/> 停止采集，不要与 <xref keyref="stopScreenCapture"/> 混用。</li></ul></note>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>sourceType</pt>
                <pd>
                    <p>视频源的类型，详见 <xref keyref="VIDEO_SOURCE_TYPE"/>。</p>
                    <note><ul>
                    <li props="cpp flutter unity electron">Windows 平台最多支持 4 路屏幕采集的视频流。</li>
                    <li props="cpp mac flutter unity electron">macOS 平台最多支持 1 路屏幕采集的视频流，当前仅在指定 <apiname keyref="VIDEO_SOURCE_SCREEN"/> 时生效。</li></ul></note>
                </pd>
            </plentry>
            <plentry>
                <pt>config</pt>
                <pd>屏幕采集配置。详见 <xref keyref="ScreenCaptureConfiguration" />。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。</p>
        </section>
        <section>
            <ul>
            <li props="native electron unity rn">0: 方法调用成功</li>
            <li>&lt; 0: 方法调用失败</li>
            </ul> </section>
    </refbody>
</reference>