<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setaudiomixingposition">
    <title><ph keyref="setAudioMixingPosition" /></title>
    <shortdesc id="short"><ph id="shortdesc">设置音乐文件的播放位置。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setAudioMixingPosition" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setAudioMixingPosition(int pos);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract setAudioMixingPosition(pos: number): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioMixingPosition:(NSInteger)pos;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setAudioMixingPosition(int pos /*in ms*/) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int SetAudioMixingPosition(int pos);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setAudioMixingPosition(pos: number): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetAudioMixingPosition(int pos);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setAudioMixingPosition(pos: number): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setAudioMixingPosition(int pos);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p>该方法可以设置音频文件的播放位置，这样你可以根据实际情况播放文件，而非从头到尾播放整个文件。</p>
        </section>
            <section id="timing" deliveryTarget="details">
                <title>调用时机</title>
                <p>该方法需要在 <xref keyref="startAudioMixing2" /> 之后，并收到 <xref keyref="onAudioMixingStateChanged" /><codeph>(<ph keyref="AUDIO_MIXING_STATE_PLAYING" />)</codeph> 回调后调用。</p>
            </section>        
            <section id="restriction" deliveryTarget="details">
                <title>调用限制</title>
                <p>无。</p>
            </section>
            <section id="parameters" deliveryTarget="details">
                <title>参数</title>
            <parml>
            <plentry>
                <pt>pos</pt>
                <pd>整数。进度条位置，单位为毫秒。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
    </refbody>
</reference>