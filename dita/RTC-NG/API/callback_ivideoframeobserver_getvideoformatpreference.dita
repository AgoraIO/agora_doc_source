<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_getvideoformatpreference">
    <title><ph keyref="getVideoFormatPreference"/></title>
    <shortdesc id="short"><ph id="shortdesc">设置 SDK 输出的原始视频数据格式。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="getVideoFormatPreference"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int getVideoFormatPreference();
</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">getVideoFormatPreference?: () =&gt; Constants.VideoPixelFormat;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (AgoraVideoFormat)getVideoFormatPreference;
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual VIDEO_PIXEL_FORMAT getVideoFormatPreference() { return VIDEO_PIXEL_DEFAULT; }</codeblock>
         <codeblock props="bp" outputclass="language-cpp">DECLARE_DYNAMIC_MULTICAST_DELEGATE(FGetVideoFormatPreference);</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual VIDEO_OBSERVER_FRAME_TYPE GetVideoFormatPreference()
        {
            return VIDEO_OBSERVER_FRAME_TYPE.FRAME_TYPE_RGBA;
        }</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
           <codeblock props="flutter" outputclass="language-dart"/>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>你需要在调用 <xref keyref="registerVideoFrameObserver"/> 方法时注册该回调。成功注册视频数据观测器后，SDK 会在捕捉到每个视频帧时触发该回调，你需要在该回调的返回值中设置期望的视频数据格式。</p>
                    <note>在默认情况下，原始视频像素格式 (<ph keyref="VIDEO_PIXEL_DEFAULT"/>) 存在以下类型：<ul>
                <li props="android cpp bp unreal">在 Android 平台上，默认的视频帧类型可能为 I420Buffer 或 TextureBuffer。TextureBuffer 类型的纹理格式可能为 OES 格式或者 RGB 格式。如果 <apiname keyref="getVideoFormatPreference"/> 返回的视频帧类型为 <ph keyref="VIDEO_PIXEL_DEFAULT"/>，你需要在处理视频数据时增加对 I420Buffer 或 TextureBuffer 的适配。视频帧类型固定为 I420Buffer 的情况包括但不限于：<ul>
                    <li>特定机型，例如：LG G5 SE (H848)，Google Pixel 4a，Samsung Galaxy A7 或 Xiaomi Mi Max。</li>
                    <li>已集成视频增强插件并开启视频降噪或暗光增强功能。</li>
                    </ul></li>
                <li props="cpp unreal bp">在 iOS 和 macOS 平台上，默认的视频帧类型可能为 I420 或 CVPixelBufferRef。</li>
                <li props="apple">默认的视频帧类型可能为 I420 或 CVPixelBufferRef。</li>
                <li props="cpp unreal bp">在 Windows 平台上，默认为 YUV420。</li></ul>
            </note>
        </section>
        <section id="return_values">
            <title>返回值</title>
            <p><ph>设置 SDK 输出的原始数据格式。</ph><ph props="cpp bp unreal apple">详见 <xref keyref="VIDEO_PIXEL_FORMAT"/>。</ph></p>
            <ul props="android hmos">
            <li><ph keyref="VIDEO_PIXEL_DEFAULT"/>(0): 原始视频像素格式。</li>
            <li><ph keyref="VIDEO_PIXEL_I420"/>(1): I420 格式。</li>
            <li props="hide"><ph keyref="VIDEO_PIXEL_BGRA"/>(2): BGRA 格式。</li>
            <li props="hide"><ph keyref="VIDEO_PIXEL_NV21"/>(3): NV21 格式。</li>
            <li><ph keyref="VIDEO_PIXEL_RGBA"/>(4): RGBA 格式。</li>
            <li props="hide"><ph keyref="VIDEO_PIXEL_NV12"/>(8): NV12 格式。</li>
            <li props="hide"><ph keyref="VIDEO_TEXTURE_2D"/>(10)：TEXTURE_2D 格式。</li>
            <li><ph keyref="VIDEO_PIXEL_I422"/>(16): I422 格式。</li>
            </ul>
        </section>
    </refbody>
</reference>
