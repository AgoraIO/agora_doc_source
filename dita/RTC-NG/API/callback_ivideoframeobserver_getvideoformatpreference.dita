<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_getvideoformatpreference">
    <title><ph keyref="getVideoFormatPreference"/></title>
    <shortdesc id="short"><ph id="shortdesc">设置 SDK 输出的原始视频数据格式。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="getVideoFormatPreference"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int getVideoFormatPreference();
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (AgoraVideoFormat)getVideoFormatPreference;
</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual VIDEO_PIXEL_FORMAT getVideoFormatPreference() { return VIDEO_PIXEL_DEFAULT; }</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual VIDEO_OBSERVER_FRAME_TYPE GetVideoFormatPreference()
        {
            return VIDEO_OBSERVER_FRAME_TYPE.FRAME_TYPE_RGBA;
        }</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
           <codeblock props="flutter" outputclass="language-dart"/> 
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>如果你想获取 YUV 420 格式以外的原始视频数据，需要在调用 <xref keyref="registerVideoFrameObserver"/> 方法时注册该回调。 成功注册视频数据观测器后，SDK 会在捕捉到每个视频帧时触发该回调，你需要在该回调返回值中设置期望的视频数据格式。</p>
            <note type="note" props="hide">如果你想获取发送端采集的原始视频格式，则在返回值中设置原始视频数据格式为 <apiname keyref="VIDEO_PIXEL_DEFAULT"/>。在不同的平台上，原始视频像素格式也不同，实际的视频像素格式以 <xref keyref="VideoFrame"/> 为准。</note> </section>
        <section id="return_values">
            <title>返回值</title>
            <p><ph>设置 SDK 输出的原始数据格式。</ph><ph props="cpp unreal bp ios mac unity">详见 <xref keyref="VIDEO_PIXEL_FORMAT" props="cpp unreal bp ios mac"/><xref keyref="VIDEO_OBSERVER_FRAME_TYPE" props="unity"/>。</ph></p>  
            <p props="android">
            <note id="default" props="hide">
                    <p>在不同观测位置和采集场景下，该枚举值对应的实际视频像素格式都不同，建议你不要使用该值。以下列出了一些常见的情况。</p>
                    <ul>
                        <li>观测位置为 <apiname keyref="POSITION_POST_CAPTURER"/> 时：
                            <ul>
                            <li props="ios">仅支持像素格式为 CVPixelBufferRef 的视频。</li>
                            <li props="android">在用户采集 YUV 格式的视频数据、或采集的视频分辨率小于 256 × 256 时，支持的视频像素格式为 I420；其他情况下，支持 Texture 格式。</li>
                            <li props="mac cpp unreal bp">仅支持像素格式为 I420 的视频。</li>
                            </ul></li>
                        <li>观测位置为 <apiname keyref="POSITION_PRE_ENCODER"/> 时：
                            <ul>
                            <li props="ios">仅支持像素格式为 CVPixelBufferRef 的视频。</li>
                            <li props="android">在用户采集 YUV 格式的视频数据、或采集的视频分辨率小于 256 × 256 时，支持的视频像素格式为 I420；其他情况下，支持 Texture 格式。</li>
                            <li props="mac cpp unreal bp">仅支持像素格式为 I420 的视频。</li>
                            </ul></li>
                        <li>观测位置为 <apiname keyref="POSITION_PRE_RENDERER"/> 时：
                            <ul>
                            <li props="ios mac">默认支持像素格式为 CVPixelBufferRef 的视频。</li>
                            <li props="android">默认支持像素格式为 Texture 的视频。</li>
                            <li props="cpp unreal bp">支持像素格式为 I420 的视频。</li>
                            </ul></li>
                    </ul>
                </note>
            <ul>
            <li><ph keyref="VIDEO_PIXEL_DEFAULT"/>(0): 原始视频像素格式。</li>
            <li><ph keyref="VIDEO_PIXEL_I420"/>(1): I420 格式。</li>
            <li props="hide"><ph keyref="VIDEO_PIXEL_BGRA"/>(2): BGRA 格式。</li>
            <li props="hide"><ph keyref="VIDEO_PIXEL_NV21"/>(3): NV21 格式。</li>
            <li><ph keyref="VIDEO_PIXEL_RGBA"/>(4): RGBA 格式。</li>
            <li props="hide"><ph keyref="VIDEO_PIXEL_NV12"/>(8): NV12 格式。</li>
            <li props="hide"><ph keyref="VIDEO_TEXTURE_2D"/>(10)：TEXTURE_2D 格式。</li>
            <li><ph keyref="VIDEO_PIXEL_I422"/>(16): I422 格式。</li>
            </ul></p>
        </section>
    </refbody>
</reference>
