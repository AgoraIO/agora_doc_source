<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_encodedvideoframeinfo">
    <title><ph keyref="EncodedVideoFrameInfo" /></title>
    <shortdesc id="short"><ph id="shortdesc">外部编码视频帧的信息。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class EncodedVideoFrameInfo {
    public int codecType;
    public int width;
    public int height;
    public int framesPerSecond;
    public int frameType;
    public int rotation;

    public int trackId;
    public long captureTimeMs;
    public int uid;
    public int streamType;

  public EncodedVideoFrameInfo() {
    codecType = Constants.VIDEO_CODEC_H264;
    width = 0;
    height = 0;
    framesPerSecond = 0;
    frameType = Constants.VIDEO_FRAME_TYPE_BLANK_FRAME;
    rotation = Constants.VIDEO_ORIENTATION_0;
    trackId = 0;
    captureTimeMs = 0;
    uid = 0;
    streamType = Constants.VIDEO_STREAM_HIGH;
  }

  @CalledByNative
  public EncodedVideoFrameInfo(int codecType, int width, int height, int framesPerSecond,
      int frameType, int rotation, int trackId, long captureTimeMs, int uid, int streamType) {
    this.codecType = codecType;
    this.width = width;
    this.height = height;
    this.framesPerSecond = framesPerSecond;
    this.frameType = frameType;
    this.rotation = rotation;
    this.trackId = trackId;
    this.captureTimeMs = captureTimeMs;
    this.uid = uid;
    this.streamType = streamType;
  }

  @CalledByNative
  public int getCodecType() {
    return codecType;
  }

  @CalledByNative
  public int getWidth() {
    return width;
  }
  @CalledByNative
  public int getHeight() {
    return height;
  }
  @CalledByNative
  public int getFramesPerSecond() {
    return framesPerSecond;
  }
  @CalledByNative
  public int getFrameType() {
    return frameType;
  }
  @CalledByNative
  public int getRotation() {
    return rotation;
  }
  @CalledByNative
  public int getTrackId() {
    return trackId;
  }
  @CalledByNative
  public long getCaptureTimeMs() {
    return captureTimeMs;
  }
  @CalledByNative
  public int getUid() {
    return uid;
  }
  @CalledByNative
  public int getStreamType() {
    return streamType;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("codecType=").append(codecType);
    sb.append(" width=").append(width);
    sb.append(" height=").append(height);
    sb.append(" framesPerSecond=").append(framesPerSecond);
    sb.append(" frameType=").append(frameType);
    sb.append(" rotation=").append(rotation);
    sb.append(" trackId=").append(trackId);
    sb.append(" captureTimeMs=").append(captureTimeMs);
    sb.append(" uid=").append(uid);
    sb.append(" streamType=").append(streamType);
    return sb.toString();
  }
}
  </codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraEncodedVideoFrameInfo: NSObject

@property (assign, nonatomic) AgoraVideoCodecType codecType;
@property (assign, nonatomic) NSInteger width;
@property (assign, nonatomic) NSInteger height;
@property (assign, nonatomic) NSInteger framesPerSecond;
@property (assign, nonatomic) AgoraVideoFrameType frameType;
@property (assign, nonatomic) NSInteger rotation;
@property (assign, nonatomic) NSInteger trackId;
@property (assign, nonatomic) NSInteger captureTimeMs;
@property (assign, nonatomic) NSInteger uid;
@property (assign, nonatomic) AgoraVideoStreamType streamType;
@end
</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct EncodedVideoFrameInfo {
  EncodedVideoFrameInfo()
    : codecType(VIDEO_CODEC_H264),
      width(0),
      height(0),
      framesPerSecond(0),
      frameType(VIDEO_FRAME_TYPE_BLANK_FRAME),
      rotation(VIDEO_ORIENTATION_0),
      trackId(0),
      captureTimeMs(0),
      decodeTimeMs(0),
      uid(0),
      streamType(VIDEO_STREAM_HIGH) {}

  EncodedVideoFrameInfo(const EncodedVideoFrameInfo&amp; rhs)
    : codecType(rhs.codecType),
      width(rhs.width),
      height(rhs.height),
      framesPerSecond(rhs.framesPerSecond),
      frameType(rhs.frameType),
      rotation(rhs.rotation),
      trackId(rhs.trackId),
      captureTimeMs(rhs.captureTimeMs),
      decodeTimeMs(rhs.decodeTimeMs),
      uid(rhs.uid),
      streamType(rhs.streamType) {}

  EncodedVideoFrameInfo&amp; operator=(const EncodedVideoFrameInfo&amp; rhs) {
    if (this == &amp;rhs) return *this;
    codecType = rhs.codecType;
    width = rhs.width;
    height = rhs.height;
    framesPerSecond = rhs.framesPerSecond;
    frameType = rhs.frameType;
    rotation = rhs.rotation;
    trackId = rhs.trackId;
    captureTimeMs = rhs.captureTimeMs;
    decodeTimeMs = rhs.decodeTimeMs;
    uid = rhs.uid;
    streamType = rhs.streamType;
    return *this;
  }</codeblock>
<codeblock props="electron" outputclass="language-typescript">export class EncodedVideoFrameInfo {

  codecType?: VideoCodecType;

  width?: number;

  height?: number;

  framesPerSecond?: number;

  frameType?: VideoFrameType;

  rotation?: VideoOrientation;

  trackId?: number;

  captureTimeMs?: number;

  uid?: number;

  streamType?: VideoStreamType;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class EncodedVideoFrameInfo
    {
        public EncodedVideoFrameInfo()
        {
            codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
            width = 0;
            height = 0;
            framesPerSecond = 0;
            frameType = VIDEO_FRAME_TYPE_NATIVE.VIDEO_FRAME_TYPE_BLANK_FRAME;
            rotation = VIDEO_ORIENTATION.VIDEO_ORIENTATION_0;
            trackId = 0;
            captureTimeMs = 0;
            uid = 0;
            streamType = VIDEO_STREAM_TYPE.VIDEO_STREAM_HIGH;
        }

        public EncodedVideoFrameInfo(ref EncodedVideoFrameInfo rhs)
        {
            codecType = rhs.codecType;
            width = rhs.width;
            height = rhs.width;
            framesPerSecond = rhs.framesPerSecond;
            frameType = rhs.frameType;
            rotation = rhs.rotation;
            trackId = rhs.trackId;
            captureTimeMs = rhs.captureTimeMs;
            uid = rhs.uid;
            streamType = rhs.streamType;
        }

        public VIDEO_CODEC_TYPE codecType { set; get; }

        public int width { set; get; }

        public int height { set; get; }

        public int framesPerSecond { set; get; }

        public VIDEO_FRAME_TYPE_NATIVE frameType { set; get; }

        public VIDEO_ORIENTATION rotation { set; get; }

        public int trackId { set; get; }

        public int64_t captureTimeMs { set; get; }

        public uint uid { set; get; }

        public VIDEO_STREAM_TYPE streamType { set; get; }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class EncodedVideoFrameInfo {

  codecType?: VideoCodecType;

  width?: number;

  height?: number;

  framesPerSecond?: number;

  frameType?: VideoFrameType;

  rotation?: VideoOrientation;

  trackId?: number;

  captureTimeMs?: number;

  uid?: number;

  streamType?: VideoStreamType;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class EncodedVideoFrameInfo {
  const EncodedVideoFrameInfo(
      {this.codecType,
      this.width,
      this.height,
      this.framesPerSecond,
      this.frameType,
      this.rotation,
      this.trackId,
      this.captureTimeMs,
      this.uid,
      this.streamType});

  @JsonKey(name: 'codecType')
  final VideoCodecType? codecType;

  @JsonKey(name: 'width')
  final int? width;

  @JsonKey(name: 'height')
  final int? height;

  @JsonKey(name: 'framesPerSecond')
  final int? framesPerSecond;

  @JsonKey(name: 'frameType')
  final VideoFrameType? frameType;

  @JsonKey(name: 'rotation')
  final VideoOrientation? rotation;

  @JsonKey(name: 'trackId')
  final int? trackId;

  @JsonKey(name: 'captureTimeMs')
  final int? captureTimeMs;

  @JsonKey(name: 'uid')
  final int? uid;

  @JsonKey(name: 'streamType')
  final VideoStreamType? streamType;

  factory EncodedVideoFrameInfo.fromJson(Map&lt;String, dynamic> json) =>
      _$EncodedVideoFrameInfoFromJson(json);

  Map&lt;String, dynamic> toJson() => _$EncodedVideoFrameInfoToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>codecType</pt>
                <pd props="ios mac cpp unity electron rn flutter">视频编码类型，详见 <xref keyref="VIDEO_CODEC_TYPE" />。默认值为 <codeph><ph keyref="VIDEO_CODEC_H264" /> (2)</codeph>。</pd>
                <pd props="android"><p>视频编解码类型：
                  <ul>
                    <li><ph keyref="VIDEO_CODEC_VP8"/> (1): VP8。</li>
                    <li><ph keyref="VIDEO_CODEC_H264"/> (2):（默认值）H.264。</li>
                    <li><ph keyref="VIDEO_CODEC_H265"/> (3): H.265。</li>
                    </ul> </p></pd>
            </plentry>
            <plentry>
                <pt>width</pt>
                <pd>视频帧的宽度 (px)。</pd>
            </plentry>
            <plentry>
                <pt>height</pt>
                <pd>视频帧的高度 (px)。</pd>
            </plentry>
            <plentry>
                <pt>framesPerSecond</pt>
                <pd>
                    <p>每秒的视频帧数。</p>
                    <p>当该参数不为 <codeph>0</codeph> 时，你可以用它计算外部编码视频帧的 Unix 时间戳。</p>
                </pd>
            </plentry>
            <plentry>
                <pt>frameType</pt>
                <pd props="ios mac cpp unity electron rn flutter">视频帧的类型，详见 <xref keyref="VIDEO_FRAME_TYPE" />。</pd>
                <pd props="android">视频帧的类型：

                    <ul id="ul_djl_sqy_4qb">
                    <li>0：（默认）<ph keyref="VIDEO_FRAME_TYPE_BLANK_FRAME" />，空白帧。</li>
                    <li>3：<ph keyref="VIDEO_FRAME_TYPE_KEY_FRAME" />，关键帧。</li>
                    <li>4：<ph keyref="VIDEO_FRAME_TYPE_DELTA_FRAME" />，Delta 帧。</li>
                    <li>5：<ph keyref="VIDEO_FRAME_TYPE_B_FRAME" />，B 帧。</li>
                    <li>6：<ph keyref="VIDEO_FRAME_TYPE_UNKNOWN" />，未知。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>rotation</pt>
                <pd props="ios mac cpp unity electron rn flutter">视频帧的旋转信息，详见 <xref keyref="VIDEO_ORIENTATION" />。</pd>
                <pd props="android">视频帧的旋转信息，取值如下：

                    <ul>
                    <li>0：（默认）不旋转。</li>
                    <li>90：顺时针旋转 90 度。</li>
                    <li>180：顺时针旋转 180 度。</li>
                    <li>270：顺时针旋转 270 度。</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>trackId</pt>
                <pd>预留参数。</pd>
                <pd>轨道 ID。适用于频道中有多个视频轨道的场景。</pd>
            </plentry>
            <plentry>
                <pt>captureTimeMs</pt>
                <pd>采集外部编码视频帧的 Unix 时间戳 (ms)。</pd>
            </plentry>
                <plentry props="cpp">
                    <pt>decodeTimeMs</pt>
                    <pd>将外部编码视频帧进行解码的时间戳 (ms)。</pd>
            </plentry>
            <plentry>
                <pt>uid</pt>
                <pd>推送外部编码视频帧的用户 ID。</pd>
            </plentry>
            <plentry>
                <pt>streamType</pt>
                <pd><ph>视频流类型。</ph><ph props="apple cpp unity electron flutter rn">详见 <xref keyref="VIDEO_STREAM_TYPE" />。</ph></pd>
                <pd props="android">
                    <ul>
                      <li><ph keyref="VIDEO_STREAM_HIGH" /> (0)：视频大流，即高分辨率、高码率视频流。</li>
                      <li><ph keyref="VIDEO_STREAM_LOW" /> (1)：视频小流，即低分辨率、低码率视频流。</li>
                      </ul> </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
