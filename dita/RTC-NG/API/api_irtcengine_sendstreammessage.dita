<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_sendstreammessage">
    <title><ph keyref="sendStreamMessage" /></title>
    <shortdesc id="short"><ph id="shortdesc">发送数据流。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="sendStreamMessage" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int sendStreamMessage(int streamId, byte[] message);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)sendStreamMessage:(NSInteger)streamId
                    data:(NSData * _Nonnull)data;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int sendStreamMessage(int streamId,
     const char* data,
     size_t length) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SendStreamMessage(int streamId, FString data);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract sendStreamMessage(streamId: number, data: Uint8Array, length: number): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SendStreamMessage(int streamId, byte[] data, uint length);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract sendStreamMessage(
  streamId: number,
  data: Uint8Array,
  length: number
): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; sendStreamMessage(
    {required int streamId, required Uint8List data, required int length});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p id="desc">该方法发送数据流消息到频道内所有用户。SDK 对该方法的实现进行了如下限制：

            <ul>
            <li>频道内每秒最多能发送 30 个包，且每个包最大为 1 KB。</li>
            <li>每个客户端每秒最多能发送 6 KB 数据。</li>
            <li>频道内每人最多能同时有 5 个数据通道。</li>
            </ul></p>
            <p>成功调用该方法后，远端会触发 <xref keyref="onStreamMessage" /> 回调，远端用户可以在该回调中获取接收到的流消息；
       若调用失败，远端会触发 <xref keyref="onStreamMessageError" /> 回调。</p>
            <note type="attention">
            <ul>
            <li>请确保在调用该方法前，已调用 <xref keyref="createDataStream2" /> 创建了数据通道。</li>
            <li>直播场景下，该方法仅适用于主播用户。</li>
            </ul></note> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>streamId</pt>
                <pd>数据流 ID。可以通过 <apiname keyref="createDataStream2" /> 获取。</pd>
            </plentry>
            <plentry>
                <pt props="android">message</pt>
                <pt props="electron cpp unreal bp ios mac unity flutter rn cs">data</pt>
                <pd>待发送的数据。</pd>
            </plentry>
            <plentry props="cpp unreal bp unity flutter rn electron cs">
                <pt>length</pt>
                <pd>数据长度。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul>
            <li props="native unreal bp unity electron rn cs">0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
    </refbody>
</reference>