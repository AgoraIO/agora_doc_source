<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startmediarenderingtracing">
    <title><ph keyref="startMediaRenderingTracing"/></title>
    <shortdesc id="short"><ph id="shortdesc">启用视频帧渲染过程的追踪。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startMediaRenderingTracing"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int startMediaRenderingTracing();</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)startMediaRenderingTracing NS_SWIFT_NAME(startMediaRenderingTracing());</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int startMediaRenderingTracing() = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = "Agora|IRtcEngine")
	int StartMediaRenderingTracing();</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startMediaRenderingTracing(): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StartMediaRenderingTracing();</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startMediaRenderingTracing(): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startMediaRenderingTracing();</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>自从：</dt>
                <dd props="native">自 v4.1.1 版本新增。</dd>
            </dlentry>
            </dl>
            <p id="desc">调用该方法后，SDK 会开始追踪频道中视频帧的渲染状态，并通过 <xref keyref="onVideoRenderingTracingResult"/> 回调报告相关信息。声网建议你结合应用中的 UI 设置（如按钮和滑块）使用该方法，以提升用户体验。例如，当用户点击“加入频道”按钮时调用该方法，然后通过 <xref keyref="onVideoRenderingTracingResult"/> 回调获取视频帧渲染过程所花费的时间，从而优化相关指标。<xref keyref="onVideoRenderingTracingResult"/> 回调报告视频帧渲染的相关信息。</p>
            <note id="note">
            <ul>
            <li>如果你未调用该方法，SDK 默认以调用 <xref keyref="joinChannel2"/> 加入频道的时刻为起始点开始打点，自动开始跟踪视频的渲染事件。你可以根据实际业务场景，在合适的时机调用该方法，进行自定义打点。</li>
            <li>离开当前频道后，SDK 会自动重置该时间点为下一次加入频道的时刻。</li>
            </ul> </note> <note type="attention" props="cpp"><ul>
                        <li>如果你未调用该方法，SDK 会从调用 <codeph>joinChannel</codeph> 加入频道时开始追踪视频帧的渲染事件。你可以根据实际应用场景在合适的时间调用该方法，以设置视频渲染事件追踪的起始位置。</li>
                        <li>本地用户离开当前频道后，SDK 会自动从再次加入频道时开始追踪视频渲染事件。</li>
                        </ul>
                    </note>
            <note type="attention" props="apple"><ul>
                        <li>如果未调用该方法，SDK 会从调用 <codeph>joinChannelByToken</codeph> 加入频道时开始追踪视频帧的渲染事件。你可以根据实际应用场景在合适的时机调用该方法，以设置视频渲染事件追踪的起始位置。</li>
                        <li>本地用户离开当前频道后，SDK 会自动从再次加入频道时开始追踪视频渲染事件。</li>
                        </ul>
                    </note>
            </section>
        <section id="scenario">
            <title>适用场景</title>
            <p>声网推荐你将该方法和 App 中的 UI 设置（按钮、滑动条等）结合使用，用于获取符合终端用户实际体验的首帧出图耗时的场景。例如：在终端用户在点击 <q>加入频道</q> 按钮的时刻调用该方法进行打点，然后通过 <apiname keyref="onVideoRenderingTracingResult"/> 回调获取视频帧渲染过程中的各阶段耗时，从而针对各阶段耗时进行专项优化。</p>
        </section>
        <section id="return_values" props="bp cs electron flutter native rn unity unreal">
            <title><ph keyref="return-section-title"/></title>
        <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
        <ul props="android bp cs electron rn unity unreal">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph>
                <ul>
                <li>-7: <xref keyref="IRtcEngine"/> 尚未初始化就调用方法。</li>
                </ul></li>
            </ul>
        <p props="cpp"><ul>
                        <li>0：方法调用成功。</li>
                        <li>&lt; 0：方法调用失败。<ul>
                            <li>-7：在调用该方法前未初始化 <xref keyref="IRtcEngine"/> 实例。</li>
                            </ul>
                        </li>
                        </ul>
                    </p>
        <p props="apple"><ul>
                        <li>0：方法调用成功。</li>
                        <li>&lt; 0：方法调用失败。<ul>
                            <li>-7：在初始化 <xref keyref="IRtcEngine"/> 之前调用该方法。</li>
                            </ul>
                        </li>
                        </ul>
                    </p>
    </section>
    </refbody>
</reference>
