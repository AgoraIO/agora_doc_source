<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_getuserinfobyuid">
    <title><ph keyref="getUserInfoByUid" /></title>
    <shortdesc id="short"><ph id="shortdesc">通过 UID 获取用户信息。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="getUserInfoByUid" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int getUserInfoByUid(int uid, UserInfo userInfo);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (AgoraUserInfo* _Nullable)getUserInfoByUid:(NSUInteger)uid withError:(AgoraErrorCode* _Nullable)error;</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int getUserInfoByUid(uid_t uid, rtc::UserInfo* userInfo, const char* channelId = NULL, const char* localUserAccount = NULL) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract getUserInfoByUid(uid: number): UserInfo;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int GetUserInfoByUid(uint uid, ref UserInfo userInfo);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract getUserInfoByUid(uid: number): UserInfo;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;UserInfo&gt; getUserInfoByUid(int uid);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p id="getUserInfo_desc">远端用户加入频道后，SDK 会获取到该远端用户的 UID 和 User Account，然后缓存一个包含了远端用户 UID 和 User Account 的 Mapping 表，并在本地触发 <xref keyref="onUserInfoUpdated" /> 回调。收到这个回调后，你可以调用该方法，通过传入 UID 获取包含了指定用户 User Account 的 <xref keyref="UserInfo" /> 对象。</p>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>uid</pt>
                <pd>用户 ID。</pd>
            </plentry>
            <plentry props="cpp unreal bp unity android cs" id="userInfo">
                <pt>userInfo</pt>
                <pd>输入和输出参数。标识用户的 <xref keyref="UserInfo" /> 对象：
                    <ul>
                    <li>输入值：一个 <apiname keyref="UserInfo" /> 对象</li>
                    <li>输出值：一个包含了用户 User Account 和 UID 的 <apiname keyref="UserInfo" /> 对象</li>
                    </ul> 
                </pd>
            </plentry>
            <plentry id="channelId" props="cpp unreal bp">
                <pt>channelId</pt>
                <pd><p conkeyref="joinChannel2/channelID_desc" /></pd>
            </plentry>
            <plentry id="localUserAccount" props="cpp unreal bp">
                <pt>localUserAccount</pt>
                <pd>本地用户的 User Account。</pd>
            </plentry>
            <plentry props="ios mac" id="error">
                <pt>error</pt>
                <pd>错误码。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title>返回值</title>
            <ul props="ios mac flutter electron rn">
            <li>方法调用成功，返回 <xref keyref="UserInfo" /> 对象。</li>
            <li>方法调用失败，则返回 <ph keyref="NULL" />。</li>
            </ul>
            <ul props="cpp unreal bp unity android cs">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。</li>
            </ul> </section>
    </refbody>
</reference>