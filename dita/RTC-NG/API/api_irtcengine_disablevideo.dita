<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_disablevideo">
    <title><ph keyref="disableVideo" /></title>
    <shortdesc id="short"><ph id="shortdesc">关闭视频模块。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="disableVideo" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int disableVideo();</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract disableVideo(): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)disableVideo;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int disableVideo() = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int DisableVideo();</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract disableVideo(): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int DisableVideo();</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract disableVideo(): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; disableVideo();</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p>该方法用于关闭视频模块。</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>加入频道前后均可调用：<ul>
                <li>如果在加入频道前调用，则开启纯音频模式。</li>
                <li>如果在加入频道后调用，则由视频模式切换为纯音频模式，然后再调用 <xref keyref="enableVideo" /> 方法可开启视频模式。</li>
            </ul></p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <ul>
            <li>该方法设置的是内部引擎为禁用状态，在离开频道后仍然有效。</li>
            <li>调用该方法会重置整个引擎，响应时间较慢。你可以根据实际需求用以下方法来独立控制视频模块的某一项功能：
                <ul>
                <li><xref keyref="enableLocalVideo" />: 是否启动摄像头采集并创建本地视频流。</li>
                <li><xref keyref="muteLocalVideoStream" />: 是否发布本地视频流。</li>
                <li><xref keyref="muteRemoteVideoStream" />: 是否接收并播放远端视频流。</li>
                <li><xref keyref="muteAllRemoteVideoStreams" />: 是否接收并播放所有远端视频流。</li>
                </ul></li>
            </ul>
        </section>
        <section id="related" deliveryTarget="details">
            <title>相关回调</title>
            <p>成功调用该方法后，远端会触发 <xref keyref="onUserEnableVideo" /> (<codeph><ph keyref="false" /></codeph>) 回调。</p>
        </section>

        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
    </refbody>
</reference>