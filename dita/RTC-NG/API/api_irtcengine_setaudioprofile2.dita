<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setaudioprofile2">
    <title><ph keyref="setAudioProfile2" /></title>
    <shortdesc id="short"><ph id="shortdesc">设置音频编码属性。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setAudioProfile2" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public synchronized int setAudioProfile(int profile)</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract setAudioProfile(profile: Constants.AudioProfileType): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioProfile:(AgoraAudioProfile)profile;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setAudioProfile(AUDIO_PROFILE_TYPE profile) = 0;</codeblock>
           <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int SetAudioProfile(EAUDIO_PROFILE_TYPE profile = EAUDIO_PROFILE_TYPE::AUDIO_PROFILE_DEFAULT);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setAudioProfile(profile: AudioProfileType, scenario?: AudioScenarioType): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetAudioProfile(AUDIO_PROFILE_TYPE profile);</codeblock>
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart" /> </p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p>如果你想设置音频应用场景，可以直接调用 <xref keyref="setAudioScenario"/> 方法进行设置，也可以调用 <xref keyref="initialize" /> 并设置 <xref keyref="RtcEngineConfig" /> 结构体中的 <parmname props="android hmos">mAudioScenario</parmname><parmname props="apple cpp framework">audioScenario</parmname>。</p>
        </section>
        <section id="scenario" deliveryTarget="details">
            <title>适用场景</title>
            <p>该方法适用于各种音频场景，你可以按需选择。例如，在音乐教学等高音质需求的场景中，建议将 <codeph>profile</codeph> 设置为 <codeph><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY" /></codeph>(4)。</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>该方法在加入频道前后均可调用。</p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <p>无。</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>profile</pt>
                <pd>
                    <p conkeyref="setAudioProfile/profile" />
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native unreal unity cs">
            <title>返回值</title>
            <ul>
            <li>0: 方法调用成功。</li>
            <li> &lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
        </refbody>
</reference>