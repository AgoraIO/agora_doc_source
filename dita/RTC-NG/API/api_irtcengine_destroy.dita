<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_destroy">
    <title><ph keyref="destroy"/></title>
    <shortdesc id="short"><ph id="shortdesc">释放声网 SDK 使用的所有资源。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="destroy"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static synchronized void destroy(@Nullable IRtcEngineReleaseCallback callback)</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">+ (void)destroy:(void (^ _Nullable)(void))engineReleasedBlock NS_SWIFT_NAME(destroy(_:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp"/>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>自从：</dt>
                <dd props="android apple">自 v4.6.0 版本新增。</dd>
                </dlentry>
            </dl>
            <p>该方法适用于偶尔进行语音通话或视频通话的应用程序，在不通话时释放资源以供其他操作使用。一旦调用该方法销毁已创建的 <xref keyref="IRtcEngine"/> 实例，SDK 中的其他方法将无法使用，也不会再触发任何回调。若需重新开始通信，请调用 <codeph>sharedEngineWithAppId</codeph> 方法重新创建实例。</p>
            <note type="attention" props="apple">不要在 SDK 生成的任何回调中调用此方法，否则可能导致死锁。</note>
            </section>
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <p>无。</p>
        </section>
        <section id="parameters" deliveryTarget="details" props="android apple">
            <title>参数</title>
            <parml>
            <plentry props="android apple">
                <pt props="android">callback</pt>
                <pt props="apple">engineReleasedBlock</pt>
                <pd props="android">可选的回调实例。用于决定该方法是否为同步调用：
                    <ul>
                        <li>非 null：该方法为异步调用。即使 <xref keyref="IRtcEngine"/> 对象资源尚未释放，方法也会立即返回，并在引擎资源释放后触发 <xref keyref="onEngineReleased"/> 回调。</li>
                        <li>null：该方法为同步调用，方法返回时 <xref keyref="IRtcEngine"/> 对象资源已释放。请勿在 SDK 生成的任何回调中调用该方法，否则可能导致死锁。详见 <codeph>IRtcEngineReleaseCallback</codeph>。</li>
                        </ul>
                    </pd>
                <pd props="apple">当 <xref keyref="IRtcEngine"/> 被销毁时触发的回调 block。该参数决定该方法是同步调用还是异步调用。
                    <ul>
                        <li>非空：该方法为异步调用，即使 <xref keyref="IRtcEngine"/> 实例的资源尚未释放，该方法也会立即返回，并在资源释放后触发 <codeph>engineReleasedBlock</codeph>。</li>
                        <li>空：该方法为同步调用，即该方法在 <xref keyref="IRtcEngine"/> 实例资源释放后才返回。</li>
                        </ul>
                    </pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="bp cs electron flutter rn unity unreal">
            <title><ph keyref="return-section-title"/></title>
        <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
        <ul props="bp cpp cs electron rn unity unreal">
                <li>0: 方法调用成功。</li>
                <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
                </ul>
    </section>
        </refbody>
</reference>
