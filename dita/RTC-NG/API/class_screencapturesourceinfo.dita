<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencapturesourceinfo">
    <title><ph keyref="ScreenCaptureSourceInfo"/></title>
    <shortdesc id="short"><ph id="shortdesc">提供可共享的窗口或屏幕的信息。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraScreenCaptureSourceInfo : NSObject
@property(assign, nonatomic) AgoraScreenCaptureSourceType type;
@property(assign, nonatomic) CGWindowID sourceId;
@property(copy, nonatomic) NSString* _Nonnull sourceName;
@property(strong, nonatomic) NSImage* _Nonnull thumbImage;
@property(strong, nonatomic) NSImage* _Nullable iconImage;
@property(copy, nonatomic) NSString* _Nonnull processPath;
@property(copy, nonatomic) NSString* _Nonnull sourceTitle;
@property(assign, nonatomic) CGRect position;
@property(assign, nonatomic) BOOL primaryMonitor;

@end
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct ScreenCaptureSourceInfo {
ScreenCaptureSourceType type;
int64_t sourceId;
const char* sourceName;
ThumbImageBuffer thumbImage;
ThumbImageBuffer iconImage;
const char* processPath;
const char* sourceTitle;
bool primaryMonitor;
bool isOccluded;
Rectangle position;
#if defined(_WIN32)
bool minimizeWindow;
int64_t sourceDisplayId;
#else
#endif
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FScreenCaptureSourceInfo {
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	FENUMWRAP_ScreenCaptureSourceType type = FENUMWRAP_ScreenCaptureSourceType();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	int64 sourceId = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	FString sourceName = "";
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	FThumbImageBuffer thumbImage = FThumbImageBuffer();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	FThumbImageBuffer iconImage = FThumbImageBuffer();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	FString processPath = "";
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	FString sourceTitle = "";
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	bool primaryMonitor = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	bool isOccluded = false;
	
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	FRectangle position = FRectangle();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	bool minimizeWindow = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FScreenCaptureSourceInfo")
	int64 sourceDisplayId = 0;
#if defined(_WIN32) || (defined(__APPLE__) &amp;&amp; TARGET_OS_MAC &amp;&amp; !TARGET_OS_IPHONE)
	FScreenCaptureSourceInfo(){}
	FScreenCaptureSourceInfo(const agora::rtc::ScreenCaptureSourceInfo &amp; AgoraData){
		type = AgoraData.type;
		sourceId = UABT::FromViewToInt(AgoraData.sourceId);
		sourceName = UTF8_TO_TCHAR(AgoraData.sourceName);
		thumbImage = FThumbImageBuffer(AgoraData.thumbImage);
		iconImage = FThumbImageBuffer(AgoraData.iconImage);
		processPath = UTF8_TO_TCHAR(AgoraData.processPath);
		sourceTitle = UTF8_TO_TCHAR(AgoraData.sourceTitle);
		primaryMonitor = AgoraData.primaryMonitor;
		isOccluded = AgoraData.isOccluded;
		position = FRectangle(AgoraData.position);
#if defined(_WIN32)
		minimizeWindow = AgoraData.minimizeWindow;
		sourceDisplayId = UABT::FromViewToInt(AgoraData.sourceDisplayId);
#endif
	}
	agora::rtc::ScreenCaptureSourceInfo CreateAgoraData() const {
		agora::rtc::ScreenCaptureSourceInfo AgoraData;
		AgoraData.type = static_cast&lt;agora::rtc::ScreenCaptureSourceType&gt;(type.GetRawValue());
		AgoraData.sourceId = UABT::ToView(sourceId);
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.sourceName, sourceName)
		AgoraData.thumbImage = thumbImage.CreateAgoraData();
		AgoraData.iconImage = iconImage.CreateAgoraData();
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.processPath, processPath)
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.sourceTitle, sourceTitle)
		AgoraData.primaryMonitor = primaryMonitor;
		AgoraData.isOccluded = isOccluded;
		AgoraData.position = position.CreateAgoraData();
#if defined(_WIN32)
		AgoraData.minimizeWindow = minimizeWindow;
		AgoraData.sourceDisplayId = UABT::ToView(sourceDisplayId);
#endif
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::ScreenCaptureSourceInfo &amp; AgoraData) const {
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.sourceName)
		thumbImage.FreeAgoraData(AgoraData.thumbImage);
		thumbImage.FreeAgoraData(AgoraData.iconImage);
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.processPath)
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.sourceTitle)
		position.FreeAgoraData(AgoraData.position);
	}
#endif
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ScreenCaptureSourceInfo {
  
  type?: ScreenCaptureSourceType;
  
  sourceId?: any;
  
  sourceName?: string;
  
  thumbImage?: ThumbImageBuffer;
  
  iconImage?: ThumbImageBuffer;
  
  processPath?: string;
  
  sourceTitle?: string;
  
  primaryMonitor?: boolean;

  position?: Rectangle;

  minimizeWindow?: boolean;

  sourceDisplayId?: any;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ScreenCaptureSourceInfo
    {
        public ScreenCaptureSourceType type;
        public long sourceId;
        public string sourceName;
        public ThumbImageBuffer thumbImage;
        public ThumbImageBuffer iconImage;
        public string processPath;
        public string sourceTitle;
        public bool primaryMonitor;
        public Rectangle position;
        public long sourceDisplayId;
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart">class ScreenCaptureSourceInfo {
  const ScreenCaptureSourceInfo(
      {this.type,
      this.sourceId,
      this.sourceName,
      this.thumbImage,
      this.iconImage,
      this.processPath,
      this.sourceTitle,
      this.primaryMonitor,
      this.position,
      this.minimizeWindow,
      this.sourceDisplayId});

  @JsonKey(name: 'type')
  final ScreenCaptureSourceType? type;

  @JsonKey(name: 'sourceId')
  final int? sourceId;

  @JsonKey(name: 'sourceName')
  final String? sourceName;

  @JsonKey(name: 'thumbImage')
  final ThumbImageBuffer? thumbImage;

  @JsonKey(name: 'iconImage')
  final ThumbImageBuffer? iconImage;

  @JsonKey(name: 'processPath')
  final String? processPath;

  @JsonKey(name: 'sourceTitle')
  final String? sourceTitle;

  @JsonKey(name: 'primaryMonitor')
  final bool? primaryMonitor;

  @JsonKey(name: 'position')
  final Rectangle? position;

  @JsonKey(name: 'minimizeWindow')
  final bool? minimizeWindow;

  @JsonKey(name: 'sourceDisplayId')
  final int? sourceDisplayId;

  factory ScreenCaptureSourceInfo.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$ScreenCaptureSourceInfoFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$ScreenCaptureSourceInfoToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="cpp">
                <pt props="cpp">type</pt>
                <pd>共享目标的类型。详见 <xref keyref="ScreenCaptureSourceType"/>。</pd>
                <pd props="cpp">共享目标的类型，详见 <xref keyref="ScreenCaptureSourceType"/>。</pd>
                </plentry>
            <plentry props="cpp">
                <pt props="cpp">sourceId</pt>
                <pd>对于窗口，表示窗口 ID（Window ID）；对于屏幕，表示屏幕 ID（Display ID）。</pd>
                <pd props="cpp">共享目标的唯一标识符。</pd>
            </plentry>
            <plentry props="cpp">
                <pt props="cpp">sourceName</pt>
                <pd>窗口或屏幕的名称。UTF-8 编码。</pd>
                <pd props="cpp">共享目标的名称。</pd>
            </plentry>
            <plentry props="cpp">
                <pt props="cpp">thumbImage</pt>
                <pd><ph>缩略图的图像内容。</ph><ph>详见 <xref keyref="ThumbImageBuffer" props="bp cpp electron flutter rn unity unreal"/><xref keyref="nsimage-link" props="mac"/>。</ph></pd>
                <pd props="cpp">缩略图的图像内容，详见 <xref keyref="ThumbImageBuffer"/>。</pd>
                </plentry>
            <plentry props="cpp">
                <pt props="cpp">iconImage</pt>
                <pd><ph>图标的图像内容。</ph><ph>详见 <xref keyref="ThumbImageBuffer" props="bp cpp electron flutter rn unity unreal"/><xref keyref="nsimage-link" props="mac"/>。</ph></pd>
                <pd props="cpp">图标的图像内容，详见 <xref keyref="ThumbImageBuffer"/>。</pd>
                </plentry>
            <plentry props="cpp">
                <pt props="cpp">processPath</pt>
                <pd>窗口所属的进程。UTF-8 编码。</pd>
                <pd props="cpp">共享窗口所属进程的路径。</pd>
            </plentry>
            <plentry props="cpp">
                <pt props="cpp">sourceTitle</pt>
                <pd>窗口标题。UTF-8 编码。</pd>
                <pd props="cpp">共享窗口的标题。</pd>
            </plentry>
            <plentry props="cpp">
                <pt props="cpp">primaryMonitor</pt>
                <pd>屏幕是否为主显示屏： 
                        
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>: 屏幕为主显示屏。</li>
                    <li><codeph><ph keyref="false"/></codeph>: 屏幕不是主显示屏。</li>
                    </ul></pd>
                <pd props="cpp">是否为主显示器：
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：该屏幕是主显示器。</li>
                        <li><codeph><ph keyref="false"/></codeph>：该屏幕不是主显示器。</li>
                        </ul>
                    </pd>
                </plentry>
            <plentry props="cpp">
                <pt props="cpp">position</pt>
                <pd><ph>窗口相对于整个屏幕空间（包含所有可共享屏幕）的位置。</ph><ph props="bp cpp electron flutter unity unreal">详见 <xref keyref="Rectangle"/>。</ph><ph props="mac">详见 <xref keyref="rect-link"/>。</ph></pd>
                <pd props="cpp">窗口相对于整个屏幕空间（包括所有可共享屏幕）的位置信息，详见 <xref keyref="Rectangle"/>。</pd>
                </plentry>
            <plentry props="bp cpp electron flutter rn unreal">
                <pt props="cpp">minimizeWindow</pt>
                <pd>(仅适用于 Windows)  窗口是否已最小化：
                        
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>: 窗口已最小化。</li>
                    <li><codeph><ph keyref="false"/></codeph>: 窗口未最小化。</li>
                    </ul></pd>
                <pd props="cpp">（仅适用于 Windows）窗口是否最小化：
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>：窗口已最小化。</li>
                        <li><codeph><ph keyref="false"/></codeph>：窗口未最小化。</li>
                        </ul>
                    </pd>
                </plentry>
            <plentry props="bp cpp cs electron flutter unity unreal">
                <pt props="cpp">sourceDisplayId</pt>
                <pd>(仅适用于 Windows) 窗口所在的屏幕 ID。如果窗口为跨屏幕显示，则表示与该窗口相交面积最大的屏幕 ID。如果窗口位于可见屏幕之外，则该成员的值为 -2。</pd>
                <pd props="cpp">（仅适用于 Windows）窗口所在的屏幕 ID。如果窗口跨多个屏幕显示，该参数表示窗口与其交集面积最大的屏幕的 ID。如果窗口位于不可见屏幕区域，则该值为 -2。</pd>
            </plentry>
            <plentry props="cpp">
                <pt props="cpp">isOccluded</pt>
                <pd props="cpp">共享窗口是否被遮挡。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
