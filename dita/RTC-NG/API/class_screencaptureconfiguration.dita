<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencaptureconfiguration">
    <title><ph keyref="ScreenCaptureConfiguration" /></title>
    <shortdesc id="short"><ph id="shortdesc">屏幕采集配置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">#if (!(TARGET_OS_IPHONE) &amp;&amp; (TARGET_OS_MAC))

__attribute__((visibility("default"))) @interface AgoraScreenCaptureConfiguration: NSObject

@property(assign, nonatomic) BOOL isCaptureWindow;

@property(assign, nonatomic) UInt32 displayId;

@property(assign, nonatomic) UInt32 windowId;

@property(strong, nonatomic) AgoraScreenCaptureParameters* _Nonnull params;

@property(assign, nonatomic) CGRect regionRect;

@end
#endif</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct ScreenCaptureConfiguration {
  bool isCaptureWindow;
  uint32_t displayId;
  Rectangle screenRect;
  view_t windowId;
  ScreenCaptureParameters params;
  Rectangle regionRect;

  ScreenCaptureConfiguration() : isCaptureWindow(false), displayId(0) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FScreenCaptureConfiguration
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	bool isCaptureWindow;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	int displayId;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	FRectangle screenRect;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	int64 windowId;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	FScreenCaptureParameters params;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	FRectangle regionRect;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ScreenCaptureConfiguration {
  
  isCaptureWindow?: boolean;
  
  displayId?: number;
  
  screenRect?: Rectangle;
  
  windowId?: any;
  
  params?: ScreenCaptureParameters;
  
  regionRect?: Rectangle;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ScreenCaptureConfiguration
    {
        public ScreenCaptureConfiguration()
        {
            isCaptureWindow = false;
            displayId = 0;
        }

        public bool isCaptureWindow { set; get; }
        public uint displayId { set; get; }
        public Rectangle screenRect { set; get; }
        public uint windowId { set; get; }
        public ScreenCaptureParameters parameters { set; get; }
        public Rectangle regionRect { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ScreenCaptureConfiguration {
  
  isCaptureWindow?: boolean;
  
  displayId?: number;
  
  screenRect?: Rectangle;
  
  windowId?: any;
  
  params?: ScreenCaptureParameters;
  
  regionRect?: Rectangle;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class ScreenCaptureConfiguration {
  const ScreenCaptureConfiguration(
      {this.isCaptureWindow,
      this.displayId,
      this.screenRect,
      this.windowId,
      this.params,
      this.regionRect});

  @JsonKey(name: 'isCaptureWindow')
  final bool? isCaptureWindow;
  @JsonKey(name: 'displayId')
  final int? displayId;
  @JsonKey(name: 'screenRect')
  final Rectangle? screenRect;
  @JsonKey(name: 'windowId')
  final int? windowId;
  @JsonKey(name: 'params')
  final ScreenCaptureParameters? params;
  @JsonKey(name: 'regionRect')
  final Rectangle? regionRect;
  factory ScreenCaptureConfiguration.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$ScreenCaptureConfigurationFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$ScreenCaptureConfigurationToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>isCaptureWindow</pt>
                <pd>是否采集屏幕上的窗口：


                    <ul id="ul_ln3_hwd_mqb">
                    <li><codeph><ph keyref="true" /></codeph>：采集窗口。</li>
                    <li><codeph><ph keyref="false" /></codeph>：（默认）采集屏幕，不采集窗口。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>displayId</pt>
                <pd props="cpp unreal bp mac electron unity flutter"><ph props="cpp unreal bp electron unity flutter cs">（仅适用于 macOS 平台）</ph><ph>屏幕的 display ID。</ph>
                    <note type="attention">请仅在 Mac 设备上采集屏幕时使用该参数。</note></pd>
                <pd props="cs">屏幕的 display ID。你无需设置该参数。</pd>
            </plentry>
            <plentry props="cpp unreal bp electron unity flutter cs">
                <pt>screenRect</pt>
                <pd><ph props="cpp unreal bp electron unity flutter">（仅适用于 Windows 平台）</ph><ph>待共享的屏幕相对于虚拟屏的位置。</ph>


                    <note type="attention" id="note_ifh_swd_mqb">请仅在 Windows 设备上采集屏幕时使用该参数。</note></pd>
            </plentry>
            <plentry>
                <pt>windowId</pt>
                <pd><ph props="cpp unreal bp unity flutter">（仅适用于 Windows 和 macOS 平台）</ph><ph>窗口 ID。</ph>


                    <note type="attention">请仅在采集窗口时使用该参数。</note></pd>
            </plentry>
            <plentry>
                <pt props="mac cpp unreal bp electron rn flutter">params</pt>
                <pt props="unity cs">parameters</pt>
                <pd><ph props="cpp unreal bp unity flutter">（仅适用于 Windows 和 macOS 平台）</ph><ph>屏幕共享流的编码参数配置。详见 <xref keyref="ScreenCaptureParameters" />。</ph></pd>
            </plentry>
            <plentry>
                <pt>regionRect</pt>
                <pd props="cpp unreal bp unity flutter electron cs"><ph props="cpp unreal bp unity flutter">（仅适用于 Windows 和 macOS 平台）</ph>待共享区域相对于整个屏幕的位置。详见 <xref keyref="Rectangle" />。如不填，则表示共享整个屏幕。如果设置的共享区域超出了屏幕的边界，则只共享屏幕内的内容。 如果将 <apiname keyref="Rectangle" /> 中的 width 或 height 设为 0 ，则共享整个屏幕。</pd>
                <pd props="mac">待共享区域相对于整个屏幕的位置。类型为 CGRect。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>