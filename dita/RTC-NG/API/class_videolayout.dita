<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videolayout">
    <title><ph keyref="VideoLayout"/></title>
    <shortdesc id="short"><ph id="shortdesc">设置合流中某个子视频流的布局信息。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static class VideoLayout {
    public String channelId;
    public int uid;
    public String strUid;
    public int videoState;
    public int x;
    public int y;
    public int width;
    public int height;
  }</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraVideoLayoutInfo: NSObject
@property (assign, nonatomic) NSUInteger width NS_SWIFT_NAME(width);
@property (assign, nonatomic) NSUInteger height NS_SWIFT_NAME(height);
@property (assign, nonatomic) NSUInteger layoutCount NS_SWIFT_NAME(layoutCount);
@property(copy, nonatomic) NSArray&lt;AgoraVideoLayout *&gt; *_Nullable layoutList NS_SWIFT_NAME(layoutList);
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct VideoLayout
{
  const char* channelId;
  rtc::uid_t uid;
  user_id_t strUid;
  uint32_t x;
  uint32_t y;
  uint32_t width;
  uint32_t height;
  uint32_t videoState;
  VideoLayout() : channelId(OPTIONAL_NULLPTR), uid(0), strUid(OPTIONAL_NULLPTR), x(0), y(0), width(0), height(0), videoState(0) {}
};</codeblock>
            <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FVideoLayout
{
	GENERATED_BODY()
	
public:
	
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FVideoLayout")
	FString channelId = "";
	
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FVideoLayout")
	int64 uid = 0;
	
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FVideoLayout")
	FString strUid = "";
    UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FVideoLayout")
	int64 x = 0;
	
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FVideoLayout")
	int64 y = 0;
	
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FVideoLayout")
	int64 width = 0;
    UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FVideoLayout")
	int64 height = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|FVideoLayout")
	int64 videoState = 0;
	FVideoLayout(){}
	FVideoLayout(const agora::VideoLayout &amp; AgoraData){
		channelId = UTF8_TO_TCHAR(AgoraData.channelId);
		uid = AgoraData.uid;
		strUid = UTF8_TO_TCHAR(AgoraData.strUid);
		x = AgoraData.x;
		y = AgoraData.y;
		width = AgoraData.width;
		height = AgoraData.height;
		videoState = AgoraData.videoState;
	}
	agora::VideoLayout CreateAgoraData() const {
		agora::VideoLayout AgoraData;
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.channelId, channelId)
		AgoraData.uid = uid;
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.strUid, strUid)
		AgoraData.x = x;
		AgoraData.y = y;
		AgoraData.width = width;
		AgoraData.height = height;
		AgoraData.videoState = videoState;
		return AgoraData;
	}
	void FreeAgoraData(agora::VideoLayout &amp; AgoraData) const {
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.channelId)
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.strUid)
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp">public class VideoLayout
                {
                    public string channelId;
                    public uint uid;
                    public string strUid;
                    public uint x;
                    public uint y
                    public uint width;
                    public uint height;
                    public uint videoState;
                }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoLayout {
  channelId?: string;
  uid?: number;
  strUid?: string;
  x?: number;
  y?: number;
  width?: number;
  height?: number;
  videoState?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class VideoLayout {
  const VideoLayout(
      {this.channelId,
      this.uid,
      this.strUid,
      this.x,
      this.y,
      this.width,
      this.height,
      this.videoState});
  @JsonKey(name: 'channelId')
  final String? channelId;
  @JsonKey(name: 'uid')
  final int? uid;
  @JsonKey(name: 'strUid')
  final String? strUid;
  @JsonKey(name: 'x')
  final int? x;
  @JsonKey(name: 'y')
  final int? y;
  @JsonKey(name: 'width')
  final int? width;
  @JsonKey(name: 'height')
  final int? height;
  @JsonKey(name: 'videoState')
  final int? videoState;
  factory VideoLayout.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$VideoLayoutFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$VideoLayoutToJson(this);
}</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <p></p>
            </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="android">
                <pt props="android">channelId</pt>
                <pd>合图子视频流所属的频道名。</pd>
                <pd props="android">该子视频流所属的频道名。</pd>
            </plentry>
            <plentry props="android">
                <pt props="android">uid</pt>
                <pd>发布该合图子视频流的用户 ID。</pd>
                <pd props="android">发布该子视频流的用户 ID。</pd>
            </plentry>
            <plentry props="android">
                <pt props="android">strUid</pt>
                <pd>预留参数。</pd>
                <pd props="android">预留参数，供未来使用。</pd>
            </plentry>
            <plentry props="android">
                <pt props="android">x</pt>
                <pd>合图子视频在合图画布上的 x 坐标 (px)。即合图子视频的左上角相对于合图画布左上角（原点）的横向位移。</pd>
                <pd props="android">子视频流在视频合流画布上的 X 坐标（像素）。表示视频左上角相对于画布原点（画布左上角）的横向偏移量。</pd>
            </plentry>
            <plentry props="android">
                <pt props="android">y</pt>
                <pd>合图子视频在合图画布上的 y 坐标 (px)。即合图子视频的左上角相对于合图画布左上角（原点）的纵向位移。</pd>
                <pd props="android">子视频流在视频合流画布上的 Y 坐标（像素）。表示视频左上角相对于画布原点（画布左上角）的纵向偏移量。</pd>
            </plentry>
            <plentry id="width" props="android ios">
                <pt props="android ios">width</pt>
                <pd>合图子视频流的宽度 (px)。</pd>
                <pd props="android">子视频流的宽度（像素）。</pd>
                <pd props="ios">混合视频流的宽度（单位为像素）。</pd>
            </plentry>
            <plentry id="height" props="android ios">
                <pt props="android ios">height</pt>
                <pd>合图子视频流的高度 (px)</pd>
                <pd props="android">子视频流的高度（像素）。</pd>
                <pd props="ios">混合视频流的高度（单位为像素）。</pd>
            </plentry>
            <plentry props="android">
                <pt props="android">videoState</pt>
                <pd>合图子视频流在合图画布上的状态。
                        <ul>
                        <li>0：正常。该视频流已被渲染到合图画布。</li>
                        <li>1：占位图。该视频流无视频画面，在合图画布中显示为占位符。</li>
                        <li>2：黑色图片。该视频流被黑色图片替代。</li>
                        </ul></pd>
                <pd props="android">子视频流在视频合流画布上的状态：
                    <ul>
                        <li>0：正常，子视频流已被渲染到画布上。</li>
                        <li>1：占位图像，子视频流无视频帧，在画布上显示为占位图。</li>
                        <li>2：黑色图像，子视频流被黑色图像替代。</li>
                        </ul>
                    </pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">layoutCount</pt>
                <pd props="ios">混合视频流中布局信息的数量。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">layoutList</pt>
                <pd props="ios">混合视频流的详细布局信息。详见 <xref keyref="VideoLayout"/>。</pd>
                </plentry>
            </parml> </section>
                </refbody>
</reference>
