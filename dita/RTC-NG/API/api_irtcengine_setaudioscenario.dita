<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setaudioscenario">
    <title><ph keyref="setAudioScenario"/></title>
    <shortdesc id="short"><ph id="shortdesc">设置音频场景。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setAudioScenario"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setAudioScenario(int scenario);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract setAudioScenario(scenario: Constants.AudioScenarioType): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioScenario:(AgoraAudioScenario)scenario NS_SWIFT_NAME(setAudioScenario(_:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setAudioScenario(AUDIO_SCENARIO_TYPE scenario) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = "Agora|IRtcEngine")
	int SetAudioScenario(EAUDIO_SCENARIO_TYPE scenario = EAUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_DEFAULT);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setAudioScenario(scenario: AudioScenarioType): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetAudioScenario(AUDIO_SCENARIO_TYPE scenario);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setAudioScenario(scenario: AudioScenarioType): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setAudioScenario(AudioScenarioType scenario);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p>你可以根据实际需求选择不同的音频场景。例如，在对音质要求较高的音乐教学场景中，建议将 <codeph>scenario</codeph> 设置为 <ph keyref="AUDIO_SCENARIO_GAME_STREAMING"/>（3）。你可以在加入频道前或后调用该方法。</p>
            <note type="attention" props="cpp">由于 iOS 系统限制，在通话音量模式下部分音频路由可能无法识别。如果你需要使用外接声卡，建议将音频场景设置为 <ph keyref="AUDIO_SCENARIO_GAME_STREAMING"/>（3）。在该场景下，SDK 会切换为媒体音量模式，以避免该问题。</note>
            <note type="attention" props="apple">由于 iOS 系统限制，在通话音量模式下部分音频路由无法被识别。因此，如果你需要使用外置声卡，建议将音频场景设置为 <ph keyref="AgoraAudioScenarioGameStreaming"/>（3）。在该场景下，SDK 会切换为媒体音量，以避免该问题。</note>
            </section>
        <section id="scenario" deliveryTarget="details">
            <title>适用场景</title>
            <p>该方法适用于各种音频场景，你可以按需选择。例如，在音乐教学等高音质需求的场景中，建议将 <parmname>scenario</parmname> 设置为 <codeph><ph keyref="AUDIO_SCENARIO_GAME_STREAMING"/></codeph>(3)。</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>该方法在加入频道前后均可调用。</p>
        </section>
        <section id="restriction" deliveryTarget="details" conkeyref="setAudioProfile/restriction"/>
        <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>scenario</pt>
                <pd id="scenario-ng" props="bp cs electron flutter mac rn unity unreal"><ph>音频场景。不同的音频场景下，设备的音量类型是不同的。</ph>
                    <ph props="apple cpp framework hmos">详见 <xref keyref="AUDIO_SCENARIO_TYPE"/> 。</ph>
                    <ul props="android">
                    <li><codeph><ph keyref="AUDIO_SCENARIO_DEFAULT"/></codeph>(0):（默认）自动场景，根据用户角色和音频路由自动匹配合适的音质。</li>
                    <li><codeph><ph keyref="AUDIO_SCENARIO_GAME_STREAMING"/></codeph>(3): 高音质场景，适用于音乐为主的场景。</li>
                    <li><codeph><ph keyref="AUDIO_SCENARIO_CHATROOM"/></codeph>(5): 聊天室场景，适用于用户需要频繁上下麦的场景。</li>
                    <li><codeph><ph keyref="AUDIO_SCENARIO_CHORUS"/></codeph>(7): 合唱场景。适用于网络条件良好，要求极低延时的实时合唱场景。
                        <note type="attention" props="android" id="chorus">使用该枚举前，你需要调用 <xref keyref="getAudioDeviceInfo"/> 获取音频设备是否支持极低延时采集和播放。只有在支持极低延时（<parmname>isLowLatencyAudioSupported</parmname> = <codeph><ph keyref="true"/></codeph>）的音频设备上，才能够体验到极低延时。</note>
                    </li>
                    <li><codeph><ph keyref="AUDIO_SCENARIO_MEETING"/></codeph>(8): 会议场景，适用于人声为主的多人会议。</li>
                    <li><codeph><ph keyref="AUDIO_SCENARIO_AI_CLIENT"/></codeph>(10): AI 对话场景，仅适用于与<xref keyref="convoai"/>创建的智能体互动的场景。</li>
                    </ul>
                </pd>
            <pd props="android">音频场景。在不同的音频场景下，设备使用不同的音量类型：
                    <ul>
                        <li><ph keyref="AUDIO_SCENARIO_DEFAULT"/>（0）：默认场景，SDK 会根据用户角色和音频路由自动选择合适的音质。</li>
                        <li><ph keyref="AUDIO_SCENARIO_GAME_STREAMING"/>（3）：高音质场景，适用于主要播放音乐的场景。</li>
                        <li><ph keyref="AUDIO_SCENARIO_CHATROOM"/>（5）：聊天室场景，适用于用户频繁切换角色或静音/取消静音麦克风的场景。</li>
                        <li><ph keyref="AUDIO_SCENARIO_CHORUS"/>（7）：实时合唱场景，适用于网络状况良好且对超低延迟有要求的场景。使用该枚举前需调用 <xref keyref="getAudioDeviceInfo"/> 查看音频设备是否支持超低延迟采集和播放。要体验超低延迟，需确保音频设备支持超低延迟（<codeph>isLowLatencyAudioSupported</codeph> = <codeph><ph keyref="true"/></codeph>）。</li>
                        <li><ph keyref="AUDIO_SCENARIO_MEETING"/>（8）：会议场景，主要以人声为主。</li>
                        <li><ph keyref="AUDIO_SCENARIO_AI_CLIENT"/>（10）：AI 对话场景，仅适用于用户与由 <codeph>Conversational AI Engine</codeph> 创建的对话式智能体交互的场景。</li>
                        </ul>
                    </pd>
                <pd props="ios">音频场景，在不同的音频场景下，设备使用不同的音量类型。详见 <xref keyref="AUDIO_SCENARIO_TYPE"/>。</pd>
                <pd props="cpp">音频场景。详见 <xref keyref="AUDIO_SCENARIO_TYPE"/>。</pd>
                </plentry>
        </parml></section>
        <section id="return_values" props="bp cs electron flutter native rn unity unreal">
            <title><ph keyref="return-section-title"/></title>
        <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
        <ul props="bp cs electron rn unity unreal">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul>
        <p props="native"><ul>
                        <li>0：方法调用成功。</li>
                        <li>&lt; 0：方法调用失败。</li>
                        </ul>
                    </p>
    </section>
        </refbody>
</reference>
