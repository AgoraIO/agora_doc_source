<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videocanvas">
    <title><ph keyref="VideoCanvas"/></title>
    <shortdesc id="short"><ph id="shortdesc">视频画布对象的属性。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class VideoCanvas {
  public int uid;
  public int subviewUid;
  public static final int RENDER_MODE_HIDDEN = 1;
  public static final int RENDER_MODE_FIT = 2;
  public static final int RENDER_MODE_ADAPTIVE = 3;
  public static final int VIEW_SETUP_MODE_REPLACE = 0;
  public static final int VIEW_SETUP_MODE_ADD = 1;
  public static final int VIEW_SETUP_MODE_REMOVE = 2;
  public View view;
  public SurfaceTexture surfaceTexture;
  public int renderMode;
  public int mirrorMode;
  public int setupMode = VIEW_SETUP_MODE_REPLACE;
  public int sourceType;
  public int mediaPlayerId;
  public Rect rect;
  public boolean enableAlphaMask;
  public int backgroundColor;
  public Constants.VideoModulePosition position =
      Constants.VideoModulePosition.VIDEO_MODULE_POSITION_POST_CAPTURER;
  public VideoCanvas(View view) {
    uid = 0;
    this.view = view;
    this.renderMode = RENDER_MODE_HIDDEN;
    this.backgroundColor = 0;
  }
  public VideoCanvas(View view, int renderMode, int uid) {
    this.uid = uid;
    this.view = view;
    this.renderMode = renderMode;
    this.backgroundColor = 0;
  }
  public VideoCanvas(View view, int renderMode, int uid, int subviewUid) {
    this.uid = uid;
    this.subviewUid = subviewUid;
    this.view = view;
    this.renderMode = renderMode;
    this.backgroundColor = 0;
  }
}
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcVideoCanvas : NSObject
@property(assign, nonatomic) NSUInteger uid;
@property(assign, nonatomic) NSUInteger subviewUid;
@property(strong, nonatomic) VIEW_CLASS *_Nullable view;
@property(assign, nonatomic) AgoraVideoRenderMode renderMode;
@property(assign, nonatomic) AgoraVideoMirrorMode mirrorMode;
@property(assign, nonatomic) AgoraVideoViewSetupMode setupMode;
@property(nonatomic, assign) AgoraVideoSourceType sourceType;
@property(nonatomic, assign) int mediaPlayerId;
@property(assign, nonatomic) CGRect cropArea;
@property(assign, nonatomic) UInt32 backgroundColor;
@property(assign, nonatomic) BOOL enableAlphaMask;
@property(assign, nonatomic) AgoraVideoModulePosition position;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct VideoCanvas {
  uid_t uid;
  uid_t subviewUid;
  view_t view;
  uint32_t backgroundColor;
  media::base::RENDER_MODE_TYPE renderMode;
  VIDEO_MIRROR_MODE_TYPE mirrorMode;
  VIDEO_VIEW_SETUP_MODE setupMode;
  VIDEO_SOURCE_TYPE sourceType;
  int mediaPlayerId;
  Rectangle cropArea;
  bool enableAlphaMask;
  media::base::VIDEO_MODULE_POSITION position;
  VideoCanvas()
    : uid(0), subviewUid(0), view(NULL), backgroundColor(0x00000000), renderMode(media::base::RENDER_MODE_HIDDEN), mirrorMode(VIDEO_MIRROR_MODE_AUTO),
      setupMode(VIDEO_VIEW_SETUP_REPLACE), sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY),
      cropArea(0, 0, 0, 0), enableAlphaMask(false), position(media::base::POSITION_POST_CAPTURER) {}
  VideoCanvas(view_t v, media::base::RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt)
    : uid(0), subviewUid(0), view(v), backgroundColor(0x00000000), renderMode(m), mirrorMode(mt), setupMode(VIDEO_VIEW_SETUP_REPLACE),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY),
      cropArea(0, 0, 0, 0), enableAlphaMask(false), position(media::base::POSITION_POST_CAPTURER) {}
  VideoCanvas(view_t v, media::base::RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, uid_t u)
    : uid(u), subviewUid(0), view(v), backgroundColor(0x00000000), renderMode(m), mirrorMode(mt), setupMode(VIDEO_VIEW_SETUP_REPLACE),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY),
      cropArea(0, 0, 0, 0), enableAlphaMask(false), position(media::base::POSITION_POST_CAPTURER) {}
  VideoCanvas(view_t v, media::base::RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, uid_t u, uid_t subu)
    : uid(u), subviewUid(subu), view(v), backgroundColor(0x00000000), renderMode(m), mirrorMode(mt), setupMode(VIDEO_VIEW_SETUP_REPLACE),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY),
      cropArea(0, 0, 0, 0), enableAlphaMask(false), position(media::base::POSITION_POST_CAPTURER) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FVideoCanvas
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	UImage* view;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	ERENDER_MODE_TYPE renderMode = ERENDER_MODE_TYPE::RENDER_MODE_HIDDEN;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	EVIDEO_MIRROR_MODE_TYPE mirrorMode = EVIDEO_MIRROR_MODE_TYPE::VIDEO_MIRROR_MODE_AUTO;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	int64 uid;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	bool isScreenView = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	int64 priv_size;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	EVIDEO_SOURCE_TYPE sourceType = EVIDEO_SOURCE_TYPE::VIDEO_SOURCE_CAMERA_PRIMARY;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	FRectangle cropArea;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	EVIDEO_VIEW_SETUP_MODE setupMode = EVIDEO_VIEW_SETUP_MODE::VIDEO_VIEW_SETUP_REPLACE;
};</codeblock>
            <codeblock props="unreal" outputclass="language-cpp">struct VideoCanvas {
    view_t view;
    uid_t uid;
    VIDEO_SOURCE_TYPE sourceType;
    int mediaPlayerId;

  VideoCanvas()
    : view(NULL), uid(0), sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY) {}
  
  VideoCanvas(view_t v, uid_t u)
    : view(v), uid(u),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY)
  
  VideoCanvas(view_t v, user_id_t)
    : view(v), uid(0),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class VideoCanvas {
  view?: any
  uid?: number;
  subviewUid?: number;
  backgroundColor?: number;
  renderMode?: RenderModeType
  mirrorMode?: VideoMirrorModeType
  setupMode?: VideoViewSetupMode;
  sourceType?: VideoSourceType
  mediaPlayerId?: number;
  cropArea?: Rectangle;
  enableAlphaMask?: boolean;
  position?: VideoModulePosition;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class VideoCanvas
    {

        public view_t view;
        public uint uid;
        public uint subviewUid;
        public uint backgroundColor;
        public RENDER_MODE_TYPE renderMode;
        public VIDEO_MIRROR_MODE_TYPE mirrorMode;
        public VIDEO_VIEW_SETUP_MODE setupMode;
        public VIDEO_SOURCE_TYPE sourceType;
        public int mediaPlayerId;
        public Rectangle cropArea;
        public bool enableAlphaMask;
        public VIDEO_MODULE_POSITION position; 
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoCanvas {
  view?: any
  uid?: number;
  subviewUid?: number;
  backgroundColor?: number;
  renderMode?: RenderModeType
  mirrorMode?: VideoMirrorModeType
  setupMode?: VideoViewSetupMode;
  sourceType?: VideoSourceType
  mediaPlayerId?: number;
  cropArea?: Rectangle;
  enableAlphaMask?: boolean;
  position?: VideoModulePosition;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class VideoCanvas {
  const VideoCanvas(
      {this.uid,
      this.subviewUid,
      this.view,
      this.backgroundColor,
      this.renderMode,
      this.mirrorMode,
      this.setupMode,
      this.sourceType,
      this.mediaPlayerId,
      this.cropArea,
      this.enableAlphaMask,
      this.position});

  @JsonKey(name: &#x27;uid&#x27;)
  final int? uid;

  @JsonKey(name: &#x27;subviewUid&#x27;)
  final int? subviewUid;

  @JsonKey(name: &#x27;view&#x27;)
  final int? view;

  @JsonKey(name: &#x27;backgroundColor&#x27;)
  final int? backgroundColor;

  @JsonKey(name: &#x27;renderMode&#x27;)
  final RenderModeType? renderMode;

  @JsonKey(name: &#x27;mirrorMode&#x27;)
  final VideoMirrorModeType? mirrorMode;

  @JsonKey(name: &#x27;setupMode&#x27;)
  final VideoViewSetupMode? setupMode;

  @JsonKey(name: &#x27;sourceType&#x27;)
  final VideoSourceType? sourceType;

  @JsonKey(name: &#x27;mediaPlayerId&#x27;)
  final int? mediaPlayerId;

  @JsonKey(name: &#x27;cropArea&#x27;)
  final Rectangle? cropArea;

  @JsonKey(name: &#x27;enableAlphaMask&#x27;)
  final bool? enableAlphaMask;

  @JsonKey(name: &#x27;position&#x27;)
  final VideoModulePosition? position;

  factory VideoCanvas.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$VideoCanvasFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$VideoCanvasToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc"> </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>uid</pt>
                <pd>发布视频源的用户 ID。</pd>
                <pd props="cpp unity rn flutter">对于 Android 和 iOS 平台，当视频源为合图视频流 (<apiname keyref="VIDEO_SOURCE_TRANSCODED"/>) 时，该参数表示发布合图视频流的用户 ID。</pd>
                <pd props="android ios">当视频源为合图视频流 (<apiname keyref="VIDEO_SOURCE_TRANSCODED"/>) 时，该参数表示发布合图视频流的用户 ID。</pd>
              </plentry>
                <plentry>
                    <pt>subviewUid</pt>
                    <pd props="android ios cpp unity rn flutter">发布某一路合图子视频流的用户 ID。</pd>
                    <pd props="mac electron">预留参数。
                <note type="attention" props="cpp unity flutter">该参数仅适用于 Android 和 iOS 平台。</note></pd>
                </plentry>
                <plentry>
                    <pt>view</pt>
                    <pd props="native flutter unity cs electron rn">视频显示窗口。<ph props="android">必须为一个 <xref keyref="SurfaceView-link"/> 或 <xref keyref="TextureView-link"/> 对象。</ph>
                      <note type="attention">在一个 <apiname keyref="VideoCanvas"/> 中，你只能选择 <parmname>view</parmname> 或 <parmname>surfaceTexture</parmname> 其中一个进行设置，如果同时设置，只有 <parmname>view</parmname> 中的设置会生效。</note></pd>
                    <pd props="unreal bp">视频图像。你需要定义 UImage 类型的指针，并传入该参数，示例代码如下： 
                        <codeblock props="unreal bp" outputclass="language-cpp">agora::rtc::VideoCanvas videoCanvas;
    UImage* LocalVideo;
    videoCanvas.view = LocalVideo;</codeblock></pd>
                </plentry>
                <plentry props="android">
                    <pt>surfaceTexture</pt>
                    <pd>提供视频图像的容器，当你使用该成员时，需要自行实现 OPENGL 中的纹理绘制。详见 <xref keyref="SurfaceTexture-link"/>。 
                      <note type="attention">在一个 <apiname keyref="VideoCanvas"/> 中，你只能选择 <parmname>view</parmname> 或 <parmname>surfaceTexture</parmname> 其中一个进行设置，如果同时设置，只有 <parmname>view</parmname> 中的设置会生效。</note></pd>
                </plentry>
                <plentry props="native flutter unity cs electron rn bp">
                    <pt>renderMode</pt>
                    <pd props="ios mac cpp unity electron rn flutter cs bp">视频渲染模式，详见 <xref keyref="RENDER_MODE_TYPE"/>。</pd>
                    <pd props="android"><ul conkeyref="setLocalRenderMode2/rendermodetype"><li/></ul></pd>
                </plentry>
                <plentry props="native flutter unity cs electron rn bp">
                    <pt>mirrorMode</pt>
                <pd>
                        <p props="ios mac cpp unity electron rn flutter cs bp">视图镜像模式，详见 <xref keyref="VIDEO_MIRROR_MODE_TYPE" />。</p>
                        <p props="android">
                            <ul conkeyref="setLocalRenderMode2/videomirrormodetype">
                                <li/>
                            </ul>
                        </p>
                        <note type="attention">
                            <ul>
                                <li>本地视图镜像模式：如果你使用前置摄像头，默认启动本地视图镜像模式；如果你使用后置摄像头，默认关闭本地视图镜像模式。</li>
                                <li>远端用户视图镜像模式：默认关闭远端用户的镜像模式。</li>
                            </ul>
                        </note>
                    </pd>
            </plentry>
            <plentry>
                <pt>uid</pt>
                <pd>用户 ID。</pd>
            </plentry>
            <plentry id="sourcetype">
                <pt>sourceType</pt>
                <pd>视频源的类型，详见 <xref keyref="VIDEO_SOURCE_TYPE"/>。</pd>
            </plentry>
            <plentry props="native flutter unity cs electron rn bp">
                <pt>setupMode</pt>
                <pd props="ios mac cpp flutter unity cs electron rn bp">视图设置模式。详见 <xref keyref="VIDEO_VIEW_SETUP_MODE"/>。</pd>
                <pd props="android">视图设置模式：
                <ul>
                    <li><ph keyref="VIDEO_VIEW_SETUP_REPLACE"/> (0): (默认) 替换一个视图。</li>
                    <li><ph keyref="VIDEO_VIEW_SETUP_ADD"/> (1): 增加一个视图。</li>
                    <li><ph keyref="VIDEO_VIEW_SETUP_REMOVE"/> (2): 删除一个视图。</li>
                </ul></pd>
            </plentry>
            <plentry props="native unreal flutter unity cs electron rn">
                <pt>mediaPlayerId</pt>
                <pd>媒体播放器 ID。可通过 <xref keyref="getMediaPlayerId"/> 获取。</pd>
                <pd>当 <parmname>sourceType</parmname> 为 <apiname keyref="VIDEO_SOURCE_MEDIA_PLAYER"/> 时，此参数为必填项。</pd>
            </plentry>
            <plentry props="android">
              <pt>rect</pt>
              <pd>（可选）视频帧的展示区域。详见 <xref keyref="rect-link"/>。其中，<parmname>width</parmname> 和 <parmname>height</parmname> 表示该区域的视频像素宽度和高度。默认值为空值 (宽或高为 0)，表示展示实际分辨率的视频帧。</pd>
          </plentry>
          <plentry props="cpp flutter unity cs electron rn bp">
                <pt>cropArea</pt>
                <pd>（可选）视频帧的展示区域，详见 <xref keyref="Rectangle"/>。其中，<parmname>width</parmname> 和 <parmname>height</parmname> 表示该区域的视频像素宽度和高度。默认值为空值 (宽或高为 0)，表示展示实际分辨率的视频帧。</pd>
          </plentry>
          <plentry props="apple">
            <pt>cropArea</pt>
            <pd>（可选）视频帧的展示区域，详见 <xref keyref="rect-link"/>。其中，<parmname>width</parmname> 和 <parmname>height</parmname> 表示该区域的视频像素宽度和高度。默认值为空值 (宽或高为 0)，表示展示实际分辨率的视频帧。</pd>
          </plentry>
          <plentry props="native flutter unity cs electron rn">
              <pt>backgroundColor</pt>
              <pd>视频画布的背景颜色，格式为 RGBA。默认值为 0x00000000，代表完全透明的黑色。</pd>
          </plentry>
          <plentry props="native unity electron flutter cs">
                    <pt>enableAlphaMask</pt>
                    <pd props="native rn unity electron flutter">（可选）接收端是否开启 alpha 遮罩渲染： 
                        <ul>
                        <li><codeph><ph keyref="true"/></codeph>：接收端开启 alpha 遮罩渲染。</li>
                        <li><codeph><ph keyref="false"/></codeph>：（默认）接收端关闭 alpha 遮罩渲染。</li>
                        </ul>
                        <p>alpha 遮罩渲染可以创建具有透明效果的图像，还可以提取视频中的人像。与其他方法结合使用时，可以实现人像画中画、添加水印等效果。</p>
                        <note type="attention" props="cpp mac unity electron flutter">
                        <ul>
                            <li>仅当发送端开启 alpha 传输功能时，接收端才能渲染 alpha 通道的信息。</li>
                            <li>如需开启 alpha 传输功能，请<xref keyref="ticket-link"/>。</li>
                        </ul>
                        </note> </pd>
                    <pd props="cs">预留。</pd>
                </plentry>
                <plentry>
                    <pt>position</pt>
                    <pd>视频帧在视频链路中的位置。详见 <xref keyref="VIDEO_MODULE_POSITION"/>。</pd>
                </plentry>
            </parml> </section>
    </refbody>
</reference>
