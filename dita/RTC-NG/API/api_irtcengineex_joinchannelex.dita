<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengineex_joinchannelex">
    <title><ph keyref="joinChannelEx"/></title>
    <shortdesc id="short"><ph id="shortdesc">加入频道。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="joinChannelEx"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int joinChannelEx(String token, RtcConnection connection,
      ChannelMediaOptions options, IRtcEngineEventHandler eventHandler);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract joinChannelEx(token: string, connection: RtcConnection, options: ChannelMediaOptions, eventHandler: IRtcEngineEventHandler): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)joinChannelExByToken:(NSString* _Nullable)token
                 connection:(AgoraRtcConnection * _Nonnull)connection
                   delegate:(id&lt;AgoraRtcEngineDelegate&gt; _Nullable)delegate
               mediaOptions:(AgoraRtcChannelMediaOptions* _Nonnull)mediaOptions
                joinSuccess:(void(^ _Nullable)(NSString* _Nonnull channel, NSUInteger uid, NSInteger elapsed))joinSuccessBlock;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int joinChannelEx(const char* token, const RtcConnection&amp; connection,
                              const ChannelMediaOptions&amp; options,
                              IRtcEngineEventHandler* eventHandler) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int JoinChannelEx(const FString&amp; token, const FRtcConnection&amp; connection, const FChannelMediaOptions&amp; options);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract joinChannelEx(
    token: string,
    connection: RtcConnection,
    options: ChannelMediaOptions
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int JoinChannelEx(string token, RtcConnection connection, ChannelMediaOptions options);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract joinChannelEx(
    token: string,
    connection: RtcConnection,
    options: ChannelMediaOptions
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; joinChannelEx(
    {required String token,
    required RtcConnection connection,
    required ChannelMediaOptions options});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p>调用该方法，你可以同时加入多个频道。如果你想在不同的设备上加入相同的频道，请确保你在不同设备上使用的用户 ID 都不同。</p>
        </section>
            <section id="scenario" deliveryTarget="details">
                <title>适用场景</title>
                <p>该方法适用于多频道场景。</p>
            </section>
            <section id="timing" deliveryTarget="details">
                <title>调用时机</title>
                <p>该方法需要在 <xref keyref="initialize"/> 之后调用。</p>
                <p>在多摄像头采集场景下，你需要在调用该方法之后调用 <xref keyref="startPreview2"/> 方法设置 <parmname>sourceType</parmname> 为 <apiname keyref="VIDEO_SOURCE_CAMERA_SECONDARY"/>，以确保第二个摄像头采集正常。</p>
            </section>
            <section id="restriction" deliveryTarget="details">
                <title>调用限制</title>
                <p>如果你已经在一个频道内，你不能用相同的用户 ID 再次加入该频道。</p>
                <p>加入频道前，请确保用于生成 Token 的 App ID 和调用 <xref keyref="initialize" /> 方法初始化引擎时使用的是同一个 App ID，否则使用 Token 加入频道会失败。</p>
            </section>
            <section id="related" deliveryTarget="details">
                <title>相关回调</title>
                <p>成功调用该方法加入频道后会触发以下回调：
                    <ul>
                    <li>本地会触发 <xref keyref="onJoinChannelSuccess" /> 和 <xref keyref="onConnectionStateChanged" /> 回调。</li>
                    <li>通信场景下的用户和直播场景下的主播加入频道后，远端会触发 <xref keyref="onUserJoined" /> 回调。</li>
                    </ul></p>
                    <p>在网络状况不理想的情况下，客户端可能会与声网服务器失去连接，此时 SDK 会自动尝试重连，重连成功后，本地会触发 <xref keyref="onRejoinChannelSuccess" /> 回调。</p>
            </section>
            <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry conkeyref="joinChannel2/token">
                <pt/>
                <pd/>
            </plentry>
            <plentry id="connection">
                <pt>connection</pt>
                <pd>Connection 信息。详见 <xref keyref="RtcConnection"/>。</pd>
            </plentry>
            <plentry conkeyref="joinChannel2/options">
                <pt/>
                <pd/>
            </plentry>
            <plentry id="event" props="native unreal bp">
                <pt props="android hmos cpp unreal bp">eventHandler</pt>
                <pt props="ios mac">delegate</pt>
                <pd><xref keyref="IRtcEngineEx"/> 的回调类，详见 <xref keyref="IRtcEngineEventHandler"/>。多频道相关的事件通知通过你在此参数中传递的 <parmname props="android hmos cpp unreal bp">eventHandler</parmname><parmname props="ios mac">delegate</parmname> 对象回调。</pd>
            </plentry>
            <plentry props="ios mac" conkeyref="joinChannel2/joinsuccessblock">
                <pt/>
                <pd/>
            </plentry>
            </parml> </section>
        <section id="return_values" conkeyref="joinChannel2/return_values"/>
    </refbody>
</reference>
