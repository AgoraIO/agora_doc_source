<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_transcodinguser">
    <title><ph keyref="TranscodingUser"/></title>
    <shortdesc id="short"><ph id="shortdesc">每位主播的转码配置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">  public static class TranscodingUser {
    public int uid;
    public String userId;

    public int x;
    public int y;
    public int width;
    public int height;

    public int zOrder;
    public float alpha;
    public int audioChannel;

    public TranscodingUser() {
      alpha = 1;
    }
  }</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">export class TranscodingUser {
  
  public uid: number = 0;
  
  public x: number = 0;
  
  public y: number = 0;
  
  public width: number = 360;
  
  public height: number = 640;
  
  public zOrder: number = 0;
  
  public alpha: number = 1.0;
  
  public audioChannel: number = 0;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraLiveTranscodingUser : NSObject
@property(assign, nonatomic) NSUInteger uid;
@property(assign, nonatomic) CGRect rect;
@property(assign, nonatomic) NSInteger zOrder;
@property(assign, nonatomic) double alpha;
@property(assign, nonatomic) NSInteger audioChannel;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">truct TranscodingUser {
  uid_t uid;
  int x;
  int y;
  int width;
  int height;
  int zOrder;
  double alpha;
  int audioChannel;
  TranscodingUser()
      : uid(0),
        x(0),
        y(0),
        width(0),
        height(0),
        zOrder(0),
        alpha(1.0),
        audioChannel(0) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FTranscodingUser {
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|TranscodingUser")
	int64 uid = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|TranscodingUser")
	int x = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|TranscodingUser")
	int y = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|TranscodingUser")
	int width = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|TranscodingUser")
	int height = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|TranscodingUser")
	int zOrder = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|TranscodingUser")
	float alpha = 1.0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|TranscodingUser")
	int audioChannel = 0;
	FTranscodingUser(){}
	FTranscodingUser(const agora::rtc::TranscodingUser &amp; AgoraData){
		uid = AgoraData.uid;
		x = AgoraData.x;
		y = AgoraData.y;
		width = AgoraData.width;
		height = AgoraData.height;
		zOrder = AgoraData.zOrder;
		alpha = AgoraData.alpha;
		audioChannel = AgoraData.audioChannel;
	}
	agora::rtc::TranscodingUser CreateAgoraData() const {
		agora::rtc::TranscodingUser AgoraData;
		AgoraData.uid = uid;
		AgoraData.x = x;
		AgoraData.y = y;
		AgoraData.width = width;
		AgoraData.height = height;
		AgoraData.zOrder = zOrder;
		AgoraData.alpha = alpha;
		AgoraData.audioChannel = audioChannel;
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::TranscodingUser&amp; AgoraData) const {
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class TranscodingUser {
  uid?: number
  x?: number
  y?: number
  width?: number
  height?: number
  zOrder?: number
  alpha?: number
  audioChannel?: number
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class TranscodingUser
    {
        public TranscodingUser()
        {
            uid = 0;
            x = 0;
            y = 0;
            width = 0;
            height = 0;
            zOrder = 0;
            alpha = 1.0;
            audioChannel = 0;
        }

        public TranscodingUser(uint uid, int x, int y, int width, int height, int zOrder, double alpha,
            int audioChannel)
        {
            this.uid = uid;
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.zOrder = zOrder;
            this.alpha = alpha;
            this.audioChannel = audioChannel;
        }

        public uint uid { set; get; }
        public int x { set; get; }
        public int y { set; get; }
        public int width { set; get; }
        public int height { set; get; }
        public int zOrder { set; get; }
        public double alpha { set; get; }
        public int audioChannel { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class TranscodingUser {
  uid?: number;
  x?: number;
  y?: number;
  width?: number;
  height?: number;
  zOrder?: number;
  alpha?: number;
  audioChannel?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class TranscodingUser {
  const TranscodingUser(
      {this.uid,
      this.x,
      this.y,
      this.width,
      this.height,
      this.zOrder,
      this.alpha,
      this.audioChannel});

  @JsonKey(name: 'uid')
  final int? uid;
  @JsonKey(name: 'x')
  final int? x;
  @JsonKey(name: 'y')
  final int? y;
  @JsonKey(name: 'width')
  final int? width;
  @JsonKey(name: 'height')
  final int? height;
  @JsonKey(name: 'zOrder')
  final int? zOrder;
  @JsonKey(name: 'alpha')
  final double? alpha;
  @JsonKey(name: 'audioChannel')
  final int? audioChannel;
  factory TranscodingUser.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$TranscodingUserFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$TranscodingUserToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="ios">
                <pt props="ios">uid</pt>
                <pd>
                    <p>主播的用户 ID。</p>
                </pd>
                <pd props="ios">主播的用户 ID。</pd>
            </plentry>
            <plentry props="android bp cpp cs electron flutter hmos rn unity unreal">
                <pt>x</pt>
                <pd>
                    <p>主播视频画面在输出视频画面的 x 坐标 (px)，以输出视频画面的左上角为原点。取值范围为[0,width]，width 为 <xref keyref="LiveTranscoding"/> 中设置的 <codeph>width</codeph>。</p>
                </pd>
            </plentry>
            <plentry props="android bp cpp cs electron flutter hmos rn unity unreal">
                <pt>y</pt>
                <pd>主播视频画面在输出视频画面的 y 坐标 (px)，以输出视频画面的左上角为原点。取值范围为[0,height]，height 为 <xref keyref="LiveTranscoding"/> 中设置的 <codeph>height</codeph>。</pd>
            </plentry>
            <plentry props="android bp cpp cs electron flutter hmos rn unity unreal">
                <pt>width</pt>
                <pd>主播视频画面的宽 (px)。</pd>
            </plentry>
            <plentry props="android bp cpp cs electron flutter hmos rn unity unreal">
                <pt>height</pt>
                <pd>
                    <p>主播视频画面的高 (px)。</p>
                </pd>
            </plentry>
            <plentry props="apple ios">
                <pt props="ios">rect</pt>
                <pd>主播视频画面在输出视频画面的位置和大小，类型为 CGRect。</pd>
                <pd props="ios">主播视频在输出画面中的位置和大小。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">zOrder</pt>
                <pd>
                    <p>主播视频画面的图层编号。取值范围为 [0,100]。




                    
                    
                    <ul>
                    <li>0:（默认）视频画面位于图层的最下层。</li>
                    <li>100: 视频画面位于图层的最上层。</li>
                    </ul> </p>
                    <note type="attention">
                    <ul>
                    <li>如果取值小于 0 或大于 100，会返回错误 <apiname keyref="ERR_INVALID_ARGUMENT"/>。</li>
                    <li>支持将 zOrder 设置为 0。</li>
                    </ul> </note> </pd>
                <pd props="ios">主播视频的图层索引号。取值范围为 [0, 100]。
                    <ul>
                        <li>0：（默认）主播视频处于底层。</li>
                        <li>100：主播视频处于顶层。</li>
                        <li>如果取值小于 0 或大于 100，会返回 <ph keyref="ERR_INVALID_ARGUMENT"/> 错误码。</li>
                        <li>支持将 <codeph>zOrder</codeph> 设置为 0。</li>
                        </ul>
                    </pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">alpha</pt>
                <pd>
                    <p>主播视频画面的透明度。取值范围为 [0.0,1.0]。




                    
                    
                    <ul>
                    <li>0.0: 完全透明。</li>
                    <li>1.0:（默认）完全不透明。</li>
                    </ul> </p>
                </pd>
                <pd props="ios">主播视频的透明度。取值范围为 [0.0, 1.0]。
                    <ul>
                        <li>0.0：完全透明。</li>
                        <li>1.0：（默认）不透明。</li>
                        </ul>
                    </pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">audioChannel</pt>
                <pd>
                    <p>主播音频在输出音频中占用的声道。默认值为 0，取值范围为 [0,5]：




                    
                    
                    <ul id="ul_ugm_rrh_v4b">
                    <li><codeph>0</codeph>: （推荐）默认混音设置，最多支持双声道，与主播上行音频相关。</li>
                    <li><codeph>1</codeph>: 主播音频在输出音频的 FL 声道。如果主播上行音频是多声道，声网服务器会先把多声道混音成单声道。</li>
                    <li><codeph>2</codeph>: 主播音频在输出音频的 FC 声道。如果主播上行音频是多声道，声网服务器会先把多声道混音成单声道。</li>
                    <li><codeph>3</codeph>: 主播音频在输出音频的 FR 声道。如果主播上行音频是多声道，声网服务器会先把多声道混音成单声道。</li>
                    <li><codeph>4</codeph>: 主播音频在输出音频的 BL 声道。如果主播上行音频是多声道，声网服务器会先把多声道混音成单声道。</li>
                    <li><codeph>5</codeph>: 主播音频在输出音频的 BR 声道。如果主播上行音频是多声道，声网服务器会先把多声道混音成单声道。</li>
                    <li><codeph>0xFF</codeph> 或取值大于 <codeph>5</codeph>: 该主播音频静音，声网服务器移除该主播的音频。</li>
                    </ul>
                    <note type="attention">取值不为 <codeph>0</codeph> 时，需要使用特殊的播放器。</note></p>
                </pd>
                <pd props="ios">主播音频在输出音频中使用的音频声道。默认值为 0，取值范围为 [0, 5]。
                    <ul>
                        <li>0：（推荐）默认设置，最多支持双声道，具体取决于主播的上行音频。</li>
                        <li>1：主播音频使用 FL 声道。如果主播上行使用多声道，声网服务器会先混合为单声道。</li>
                        <li>2：主播音频使用 FC 声道。如果主播上行使用多声道，声网服务器会先混合为单声道。</li>
                        <li>3：主播音频使用 FR 声道。如果主播上行使用多声道，声网服务器会先混合为单声道。</li>
                        <li>4：主播音频使用 BL 声道。如果主播上行使用多声道，声网服务器会先混合为单声道。</li>
                        <li>5：主播音频使用 BR 声道。如果主播上行使用多声道，声网服务器会先混合为单声道。</li>
                        <li>0xFF 或大于 5 的值：主播音频会被静音，声网服务器会移除主播音频。</li>
                        <li>如果该值不为 0，需要使用特殊播放器。</li>
                        </ul>
                    </pd>
                </plentry>
            </parml> </section>
    </refbody>
</reference>
