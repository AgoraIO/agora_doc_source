<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaplayer_registeraudioframeobserver2">
    <title><ph keyref="registerAudioFrameObserver2_IMediaPlayer"/></title>
    <shortdesc id="short"><ph id="shortdesc">注册音频帧观测器。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="registerAudioFrameObserver2_IMediaPlayer"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int registerAudioFrameObserver(IMediaPlayerAudioFrameObserver audioFrameObserver, int mode);
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec"/>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int registerAudioFrameObserver(media::IAudioPcmFrameSink* observer,
                                         RAW_AUDIO_FRAME_OP_MODE_TYPE mode) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract registerAudioFrameObserver(
    observer: IAudioPcmFrameSink,
    mode?: RawAudioFrameOpModeType
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int RegisterAudioFrameObserver(IAudioPcmFrameSink observer, RAW_AUDIO_FRAME_OP_MODE_TYPE mode);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract registerAudioFrameObserver(
    observer: IAudioPcmFrameSink,
    mode?: RawAudioFrameOpModeType
  ): number;</codeblock>
           <codeblock props="flutter" outputclass="language-dart">void registerAudioFrameObserver(
      {required AudioPcmFrameSink observer,
      RawAudioFrameOpModeType mode =
          RawAudioFrameOpModeType.rawAudioFrameOpModeReadOnly});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt props="android">audioFrameObserver</pt>
                <pt props="cpp unreal bp unity cs electron rn flutter">observer</pt>
                <pd>
                    <p props="android">音频帧观测器，观测每帧音频的接收，详见 <xref keyref="IMediaPlayerAudioFrameObserver"/>。</p>
                    <p props="cpp unreal bp electron unity cs rn flutter">音频帧观测器，观测每帧音频的接收，详见 <xref keyref="IAudioPcmFrameSink"/>。</p>
                </pd>
            </plentry>
            <plentry>
                <pt>mode</pt>
                <pd>
                    <p props="cpp unreal bp electron unity cs rn flutter">音频帧的使用模式，详见 <xref keyref="RAW_AUDIO_FRAME_OP_MODE_TYPE"/>。</p>
                    <p props="android" id="mode">音频帧的使用模式：
                    <ul>
                    <li><ph keyref="RAW_AUDIO_FRAME_OP_MODE_READ_ONLY"/> (0): 只读模式。例如: 若用户通过 SDK 采集数据，自己进行 RTMP 推流，则可以选择该模式。</li>
                    <li><ph keyref="RAW_AUDIO_FRAME_OP_MODE_READ_WRITE"/> (2): 读写模式。例如：若用户自己有音效处理模块，且想要根据实际需要对数据进行前处理 (例如变声)，则可以选择该模式。</li>
                    </ul> </p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title>返回值</title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。</p>
            <ul id="ul_uns_l2y_hqb" props="native unreal bp electron unity cs rn">
                <li>0: 方法调用成功。</li>
                <li>&lt; 0: 方法调用失败。</li>
            </ul>
        </section>
    </refbody>
</reference>
