<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onuseroffline">
    <title> <ph keyref="onUserOffline"/> </title>
    <shortdesc id="short"> <ph id="shortdesc"><xref keyref="onUserOffline"/> 回调在远端用户（通信频道场景）或主播（极速直播频道场景）离开频道时触发。</ph> </shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onUserOffline"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onUserOffline(int uid, int reason) {}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">onUserOffline?:(uid:number, reason:number) =&gt; void;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine didOfflineOfUid:(NSUInteger)uid reason:(AgoraUserOfflineReason)reason NS_SWIFT_NAME(rtcEngine(_:didOfflineOfUid:reason:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual void onUserOffline(uid_t uid, USER_OFFLINE_REASON_TYPE reason)</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintNativeEvent, Category = "Agora|Event")
	void OnUserOffline(int64 uid, EUSER_OFFLINE_REASON_TYPE reason);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">  onUserOffline?(
    connection: RtcConnection,
    remoteUid: number,
    reason: UserOfflineReasonType
  ): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual void OnUserOffline(RtcConnection connection, uint remoteUid, USER_OFFLINE_REASON_TYPE reason) {}</codeblock>
            <codeblock props="rn" outputclass="language-typescript">  onUserOffline?(
    connection: RtcConnection,
    remoteUid: number,
    reason: UserOfflineReasonType
  ): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(RtcConnection connection, int remoteUid,
      UserOfflineReasonType reason)? onUserOffline;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p id="desc">用户离线通常有以下两种原因：
                    <ul>
                <li>正常离开：远端用户或主播会发送类似“再见”的消息然后主动离开频道。</li>
                <li>超时掉线：在一定时间内（通信场景为 20 秒，直播场景稍有延时），用户没有收到对方的任何数据包，则判定为对方掉线。在网络较差的情况下，有可能会误报。建议使用 RTM SDK 来做可靠的掉线检测。</li>
                </ul><ul>
                        <li>离开频道：当用户或主播离开频道时，会发送一条离开消息。</li>
                        <li>掉线：在一段时间内（通信频道场景为 20 秒，极速直播频道场景更长）未收到用户或主播的数据包时，SDK 会认为其掉线。网络连接不佳可能导致误判，建议使用声网 RTM SDK 进行可靠的离线检测。</li>
                        </ul>
                    </p>
            </section>
        <section id="timing" deliveryTarget="details">
            <title>触发时机</title>
            <p>当远端用户（通信频道场景）或主播（极速直播频道场景）离开频道时触发该回调。</p>
        </section>
        <section id="restriction" deliveryTarget="details">
            <title>使用限制</title>
            <p>无。</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title> <ph keyref="callback-section-title"/> </title>
            <parml>
            <plentry conkeyref="onJoinChannelSuccess/engine" props="apple">
                <pt/>
                <pd/>
            </plentry>
            <plentry props="cs electron flutter rn unity">
                <pt>connection</pt>
                <pd>Connection 信息。详见 <xref keyref="RtcConnection"/>。</pd>
            </plentry>
            <plentry id="uid">
                <pt props="bp native unreal">uid</pt>
                <pt props="cs electron flutter rn unity">remoteUid</pt>
                <pd>离线的远端用户或主播的 ID。</pd>
            </plentry>
            <plentry id="reason">
                <pt>reason</pt>
                <pd props="bp cs electron flutter mac rn unity unreal">
                    <p props="apple bp cpp cs electron flutter rn unity unreal">远端用户（通信场景）或主播（直播场景）离线的原因，详见 <xref keyref="USER_OFFLINE_REASON_TYPE"/>。</p>
                    <p props="android hmos">远端用户（通信场景）或主播（直播场景）离线的原因：
                    <ul>
                    <li> <ph keyref="USER_OFFLINE_QUIT"/>(0)：用户主动离开。此时离开频道的用户会发送一个类似“再见”的消息。</li>
                    <li> <ph keyref="USER_OFFLINE_DROPPED"/>(1)：因过长时间收不到对方数据包，SDK 判定该远端用户超时掉线。注意：在网络连接不稳定时，该判定可能会有误。建议使用 RTM SDK 来做可靠的掉线检测。</li>
                    <li> <ph keyref="USER_OFFLINE_BECOME_AUDIENCE"/>(2)：用户的角色从主播切换为观众。</li>
                    </ul> </p>
                </pd>
            <pd props="android">远端用户（在通信场景中）或主播（在直播场景中）离线的原因：
                    <ul>
                        <li><ph keyref="USER_OFFLINE_QUIT"/> (0)：用户主动退出频道，发送离开消息。</li>
                        <li><ph keyref="USER_OFFLINE_DROPPED"/> (1)：在一定时间内未收到任何数据包，SDK 判断用户掉线。网络不佳可能导致误判，建议使用声网 RTM SDK 进行可靠的离线检测。</li>
                        <li><ph keyref="USER_OFFLINE_BECOME_AUDIENCE"/> (2)：用户将角色从主播切换为观众。</li>
                        </ul>
                    </pd>
                <pd props="ios">远端用户（通信场景）或主播（极速直播场景）离线的原因，详见 <xref keyref="USER_OFFLINE_REASON_TYPE"/>。</pd>
                <pd props="cpp">远端用户（通信频道场景）或主播（极速直播频道场景）离线的原因，详见 <xref keyref="USER_OFFLINE_REASON_TYPE"/>。</pd>
                </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">uid</pt>
                <pd props="android cpp">离开频道或掉线的用户 ID。</pd>
                <pd props="ios">离开频道或掉线的远端用户 ID。</pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">engine</pt>
                <pd props="ios"><xref keyref="IRtcEngine"/> 对象。详见 <xref keyref="IRtcEngine"/>。</pd>
                </plentry>
        </parml> </section>
    </refbody>
</reference>
