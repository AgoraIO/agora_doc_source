<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setlogfilter">
    <title><ph keyref="setLogFilter" /></title>
    <shortdesc id="short"><ph id="shortdesc">设置日志输出等级。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setLogFilter" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setLogFilter(int filter);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setLogFilter:(NSUInteger)filter;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setLogFilter(unsigned int filter) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetLogFilter(int filter);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setLogFilter(filter: LogFilterType): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetLogFilter(uint filter);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setLogFilter(filter: LogFilterType): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setLogFilter(LogFilterType filter);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <dl outputclass="deprecated">
            <dlentry>
                <dt>弃用：</dt>
                <dd>请改用 <xref keyref="initialize" /> 中的 <parmname>logConfig</parmname>。</dd>
            </dlentry>
            </dl>
            <p props="native unreal bp rn electron flutter">该方法设置 SDK 的输出日志输出等级。不同的输出等级可以单独或组合使用。日志级别顺序依次为 <apiname keyref="LOG_FILTER_OFF" />、<apiname keyref="LOG_FILTER_CRITICAL" />、<apiname keyref="LOG_FILTER_ERROR" />、<apiname keyref="LOG_FILTER_WARN" />、<apiname keyref="LOG_FILTER_INFO" /> 和 <apiname keyref="LOG_FILTER_DEBUG" />。
       选择一个级别，你就可以看到在该级别之前所有级别的日志信息。</p>
            <p props="native unreal bp rn electron flutter">例如，你选择 <apiname keyref="LOG_FILTER_WARN" /> 级别，就可以看到在 <apiname keyref="LOG_FILTER_CRITICAL" />、<apiname keyref="LOG_FILTER_ERROR" /> 和 <apiname keyref="LOG_FILTER_WARN" /> 级别的日志信息。</p>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>filter</pt>
                <pd>
                    <p><ph>日志过滤等级。</ph><ph props="ios mac cpp unreal rn electron flutter">详见 <xref keyref="LOG_FILTER_TYPE" />。</ph>
                    <ul props="android bp">
                    <li><ph keyref="LOG_FILTER_OFF" /> (0)：不输出日志信息。</li>
                    <li><ph keyref="LOG_FILTER_DEBUG" /> (0x80f)：输出所有 API 日志信息。如果你想获取最完整的日志，可以将日志级别设为该等级。</li>
                    <li><ph keyref="LOG_FILTER_INFO" /> (0x0f)：输出 <apiname keyref="LOG_FILTER_CRITICAL" />、<apiname keyref="LOG_FILTER_ERROR" />、<apiname keyref="LOG_FILTER_WARN" /> 和 <apiname keyref="LOG_FILTER_INFO" /> 级别的日志信息。建议你将日志级别设为该等级。</li>
                    <li><ph keyref="LOG_FILTER_WARN" /> (0x0e)：输出 <apiname keyref="LOG_FILTER_CRITICAL" />、<apiname keyref="LOG_FILTER_ERROR" /> 和 <apiname keyref="LOG_FILTER_WARN" /> 级别的日志信息。</li>
                    <li><ph keyref="LOG_FILTER_ERROR" /> (0x0c)：输出 <apiname keyref="LOG_FILTER_CRITICAL" /> 和 <apiname keyref="LOG_FILTER_ERROR" /> 级别的日志信息。</li>
                    <li><ph keyref="LOG_FILTER_CRITICAL" /> (0x08)：输出 <apiname keyref="LOG_FILTER_CRITICAL" /> 级别的日志信息。</li>
                    </ul></p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul>
            <li props="native unreal bp electron unity rn cs">0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
    </refbody>
</reference>