<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_pushreverseaudioframe">
    <title><ph keyref="pushReverseAudioFrame1" /></title>
    <shortdesc id="short"><ph id="shortdesc">推送外部音频帧，该音频帧经过自定义回声消除模块处理。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="pushReverseAudioFrame1" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int pushReverseAudioFrame(byte[] data, int lengthInByte);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)pushReverseAudioFrame:(AgoraAudioFrame* _Nonnull)audioFrame;</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int pushReverseAudioFrame(IAudioFrameObserver::AudioFrame* frame) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract pushReverseAudioFrame(frame: AudioFrame): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp" />
            <codeblock props="rn" outputclass="language-typescript">abstract pushReverseAudioFrame(frame: AudioFrame): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; pushReverseAudioFrame(AudioFrame frame);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p>为避免本地用户听到自己的回声，本地用户调用 <xref keyref="pushCaptureAudioFrame1" /> 后，远端用户需要先后调用 <xref keyref="pullAudioFrame" /> 和 <apiname keyref="pushReverseAudioFrame1" /> 将自己采集的音频帧和接收到的音频帧一起推送到自定义的回声消除模块进行处理。</p>
            <note type="attention">调用该方法前，你需要将 <xref keyref="ChannelMediaOptions" /> 中的 <parmname>publishCustomAudioTrackAec</parmname> 设为 <codeph><ph keyref="true" /></codeph> 并将 <parmname>publishCustomAudioTrack</parmname> 设为 <codeph><ph keyref="false" /></codeph>。</note> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry props="cpp unreal bp ios mac" id="frame">
                <pt props="cpp unreal bp">frame</pt>
                <pt props="ios mac">audioFrame</pt>
                <pd>外部音频帧。详见 <xref keyref="AudioFrame" />。</pd>
            </plentry>
            <plentry props="android" id="data">
                <pt>data</pt>
                <pd>待推送的音频数据，数据类型为 <codeph>byte[]</codeph>。</pd>
            </plentry>
            <plentry props="android" conkeyref="pullAudioFrame/length">
                <pt />
                <pd />
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。</p>
            <ul>
            <li props="native unreal bp unity rn electron cs">0：方法调用成功。</li>
            <li>&lt; 0：方法调用失败。</li>
            </ul> </section>
    </refbody>
</reference>