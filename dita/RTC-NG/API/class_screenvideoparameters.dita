<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screenvideoparameters">
    <title><ph keyref="ScreenVideoParameters"/></title>
    <shortdesc id="short"><ph id="shortdesc">共享屏幕流的视频编码配置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">  public static class VideoCaptureParameters {
        public int bitrate = 0;
        public int framerate = 15;
        public int width = 1280;
        public int height = 720;
        public int contentHint = Constants.SCREEN_CAPTURE_CONTENT_HINT_MOTION;

    @CalledByNative("VideoCaptureParameters")
    public int getBitrate() {
      return bitrate;
    }

    @CalledByNative("VideoCaptureParameters")
    public int getFramerate() {
      return framerate;
    }

    @CalledByNative("VideoCaptureParameters")
    public int getWidth() {
      return width;
    }

    @CalledByNative("VideoCaptureParameters")
    public int getHeight() {
      return height;
    }

    @CalledByNative("VideoCaptureParameters")
    public int getContentHint() {
      return contentHint;
    }

    @Override
    public String toString() {
      return "VideoCaptureParameters{"
          + "bitrate=" + bitrate + ", framerate=" + framerate + ", width=" + width
          + ", height=" + height + ", contentHint=" + contentHint + '}';
    }
  }
</codeblock>
            <codeblock props="ios" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraScreenVideoParameters : NSObject

@property(assign, nonatomic) CGSize dimensions;
@property(assign, nonatomic) AgoraVideoFrameRate frameRate;
@property(assign, nonatomic) NSInteger bitrate;
@property(assign, nonatomic) AgoraVideoContentHint contentHint;

@end
</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct ScreenVideoParameters {
    VideoDimensions dimensions;
    int frameRate = 15;
     int bitrate;
    VIDEO_CONTENT_HINT contentHint = VIDEO_CONTENT_HINT::CONTENT_HINT_MOTION;

  ScreenVideoParameters() : dimensions(1280, 720) {}
};
</codeblock>
            <codeblock props="cs" outputclass="language-csharp"/>
            <codeblock props="electron" outputclass="language-typescript">export class ScreenVideoParameters {
  
  dimensions?: VideoDimensions;
  
  frameRate?: number;
  
  bitrate?: number;
  
  contentHint?: VideoContentHint;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class ScreenVideoParameters
    {
        public VideoDimensions dimensions { set; get; }

        public int frameRate { set; get; }

        public int bitrate { set; get; }

        public VIDEO_CONTENT_HINT contentHint = VIDEO_CONTENT_HINT.CONTENT_HINT_MOTION;

        public ScreenVideoParameters()
        {
            dimensions = new VideoDimensions(1280, 720);
            frameRate = 15;
        }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ScreenVideoParameters {
  
  dimensions?: VideoDimensions;
  
  frameRate?: number;
  
  bitrate?: number;
  
  contentHint?: VideoContentHint;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class ScreenVideoParameters {
  const ScreenVideoParameters(
      {this.dimensions, this.frameRate, this.bitrate, this.contentHint});
 
  @JsonKey(name: 'dimensions')
  final VideoDimensions? dimensions;
  @JsonKey(name: 'frameRate')
  final int? frameRate;
  @JsonKey(name: 'bitrate')
  final int? bitrate;
  @JsonKey(name: 'contentHint')
  final VideoContentHint? contentHint;
  factory ScreenVideoParameters.fromJson(Map&lt;String, dynamic> json) =>
      _$ScreenVideoParametersFromJson(json);
  Map&lt;String, dynamic> toJson() => _$ScreenVideoParametersToJson(this);
}</codeblock>            
            <codeblock props="unreal" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p props="android"
            >仅适用于 <parmname>captureVideo</parmname> 为 <codeph><ph keyref="true"
            /></codeph> 的场景。</p>
        </section>
        <section id="parameters">
            <title><text
            conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"
            /></title>
            <parml>
            <plentry props="ios cpp electron unity rn flutter">
                <pt>dimensions</pt>
                <pd>视频编码的分辨率。默认值为 1280 × 720。</pd>
                <pd>如果 <parmname>dimensions</parmname> 宽高比与屏幕像素值的宽高比不一致，SDK 会按照如下规则调节视频编码分辨率，以 <parmname>dimensions</parmname> 是 1280 × 720 为例：

                    
                    
                    <ul>
                    <li>当屏幕宽和高的像素值均小于 <parmname>dimensions</parmname> 时，例如屏幕像素值为 640 × 360，SDK 以 640 × 360 编码。</li>
                    <li>当屏幕宽或高的像素值大于 <parmname>dimensions</parmname> 时，例如屏幕像素值为 2000 × 1500，SDK 以屏幕像素值的宽高比，即 4:3，取 <parmname>dimensions</parmname> 内最大分辨率进行编码，即 960 × 720。</li>
                    </ul>
                    <note>
                    <ul>
                    <li>屏幕共享流的计费以 <parmname>dimensions</parmname> 的值为准：当你未传值时，以 1280 × 720 计费；当你传值时，以你传入的值计费。详细的计费规则请参考<xref keyref="guide-bill"/>。</li>
                    <li>该值不代表最终视频输出的方向。详见 <xref keyref="ORIENTATION_MODE"/> 了解设置视频方向。</li>
                    <li>视频能否达到 720P 的分辨率取决于设备的性能，在性能配备较低的设备上有可能无法实现。如果采用 720P 分辨率而设备性能跟不上，则有可能出现帧率过低的情况。</li>
                    </ul> </note></pd>
            </plentry>
            <plentry props="android">
                <pt>width</pt>
                <pd>视频编码分辨率中的宽 (px)。默认值为 1280。如果 width 和 height 的宽高比与屏幕像素值的宽高比不一致，SDK 会按照如下规则调节视频编码分辨率， 以 width × height 是 1280 × 720 为例：

                    
                    
                    <ul>
                    <li>当屏幕宽和高的像素值均小于 width 和 height 时，例如屏幕像素值为 640 × 360，SDK 以 640 × 360 编码。</li>
                    <li>当屏幕宽或高的像素值大于 width 或 height 时，例如屏幕像素值为 2000 × 1500，SDK 以屏幕像素值的宽高比，即 4:3，取 width × height 内最大分辨率进行编码，即 960 × 720。</li>
                    </ul>
                    <note>
                    <ul>
                    <li>屏幕共享流的计费以 width 和 height 的值为准：当你未传值时，以 1280 × 720 计费；当你传值时，以你传入的值计费。详细的计费规则请参考<xref
                        keyref="guide-bill"/>。</li>
                    <li>该值不代表最终视频输出的方向。请查阅 <xref keyref="ORIENTATION_MODE"
                        /> 了解设置视频方向。</li>
                    <li>视频能否达到 720P 的分辨率取决于设备的性能，在性能配备较低的设备上有可能无法实现。如果采用 720P 分辨率而设备性能跟不上，则有可能出现帧率过低的情况。</li>
                    </ul> </note></pd>
            </plentry>
            <plentry props="android">
                <pt>height</pt>
                <pd>视频编码分辨率中的高 (px)。默认值为 720。如果 width 和 height 的宽高比与屏幕像素值 的宽高比不一致，SDK 会按照如下规则调节视频编码分辨率，以 width × height 是 1280 × 720 为例：
                        
                    
                    <ul>
                    <li>当屏幕宽和高的像素值均小于 width 和 height 时，例如屏幕像素值为 640 × 360，SDK 以 640 × 360 编码。</li>
                    <li>当屏幕宽或高的像素值大于 width 或 height 时，例如屏幕像素值为 2000 × 1500，SDK 以屏幕像素值的宽高比，即 4:3，取 width × height 内最大分辨率进行编码，即 960 × 720。</li>
                    </ul>
                    <note>
                    <ul>
                    <li>屏幕共享流的计费以 width 和 height 的值为准：当你未传值时，以 1280 × 720 计费；当你传值时，以你传入的值计费。详细的计费规则请参考<xref
                        keyref="guide-bill"/>。</li>
                    <li>该值不代表最终视频输出的方向。请查阅 <xref keyref="ORIENTATION_MODE"
                        /> 了解设置视频方向。</li>
                    <li>视频能否达到 720P 的分辨率取决于设备的性能，在性能配备较低的设备上有可能无法实现。如果采用 720P 分辨率而设备性能跟不上，则有可能出现帧率过低的情况。</li>
                    </ul> </note> </pd>
            </plentry>
            <plentry>
                <pt props="android">framerate</pt>
                <pt props="ios cpp electron unity rn flutter">frameRate</pt>
                <pd>视频编码帧率 (fps)。默认值为 15。</pd>
            </plentry>
            <plentry>
                <pt>bitrate</pt>
                <pd>视频编码码率 (Kbps)。</pd>
            </plentry>
            <plentry>
                <pt>contentHint</pt>
                <pd><ph>屏幕共享视频的内容类型。</ph><ph props="cpp ios">详见 <xref
                    keyref="VIDEO_CONTENT_HINT"/>。</ph>
                    <ul props="android">
                    <li><ph keyref="CONTENT_HINT_NONE"/>(0)：（默认）无指定的内容类型。</li>
                    <li><ph keyref="CONTENT_HINT_MOTION"
                        />(1)：内容类型为动画。当共享的内容是视频、电影或视频游戏时，推荐选择该内容类型。</li>
                    <li><ph keyref="CONTENT_HINT_DETAILS"
                        />(2)：内容类型为细节。当共享的内容是图片或文字时，推荐选择该内容类型。</li>
                    </ul></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
