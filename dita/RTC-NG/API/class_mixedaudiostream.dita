<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_mixedaudiostream">
    <title><ph keyref="MixedAudioStream"/></title>
    <shortdesc id="short"><ph id="shortdesc"><?oxy-placeholder content="Provide a short description for this class."?></ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static class MixedAudioStream {
    public int remoteUserUid;
    public String channelId;
    public Constants.AudioSourceType sourceType;
    public int trackId;
    public MixedAudioStream() {
      this.sourceType = Constants.AudioSourceType.AUDIO_SOURCE_UNKNOWN;
      this.remoteUserUid = 0;
      this.channelId = "";
      this.trackId = 0;
    }
  };</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraMixedAudioStream: NSObject
@property (assign, nonatomic) AgoraAudioSourceType sourceType;
@property (assign, nonatomic) NSUInteger remoteUserUid;
@property (copy, nonatomic) NSString * _Nullable channelId;
@property (assign, nonatomic) NSUInteger trackId;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct MixedAudioStream {
  AUDIO_SOURCE_TYPE sourceType;
  uid_t remoteUserUid;
  const char* channelName;
  track_id_t trackId;
  MixedAudioStream(AUDIO_SOURCE_TYPE source)
    : sourceType(source),
      remoteUserUid(0),
      channelName(NULL),
      trackId(-1) {}
  MixedAudioStream(AUDIO_SOURCE_TYPE source, track_id_t track)
    : sourceType(source),
      trackId(track) {}
  MixedAudioStream(AUDIO_SOURCE_TYPE source, uid_t uid, const char* channel)
    : sourceType(source),
      remoteUserUid(uid),
      channelName(channel) {}
  MixedAudioStream(AUDIO_SOURCE_TYPE source, uid_t uid, const char* channel, track_id_t track)
    : sourceType(source),
      remoteUserUid(uid),
      channelName(channel),
      trackId(track) {}
};</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>自从</dt>
                <dd>v</dd>
            </dlentry>
            </dl>
            <p/>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt><?oxy-placeholder content="The name of the attribute or property."?></pt>
                <pd><?oxy-placeholder content="The description of the attribute or property."?></pd>
            </plentry>
            </parml> </section>
            <section id="sub-class">
                <title>类</title>
                <parml>
                <plentry>
                    <pt><?oxy-placeholder content="The name of the sub-class."?></pt>
                    <pd><?oxy-placeholder content="The description of the sub-class."?></pd>
                </plentry>
                </parml> </section>
                <section id="sub-method">
                    <title>方法</title>
                    <parml>
                    <plentry>
                        <pt><?oxy-placeholder content="The name of the sub-method."?></pt>
                        <pd><?oxy-placeholder content="The description of the sub-method."?></pd>
                    </plentry>
                    </parml> </section>
                </refbody>
</reference>
