<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_mixedaudiostream">
    <title><ph keyref="MixedAudioStream"/></title>
    <shortdesc id="short"><ph id="shortdesc">本地混音音频流的来源。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static class MixedAudioStream {
    public int remoteUserUid;
    public String channelId;
    public Constants.AudioSourceType sourceType;
    public int trackId;
    public MixedAudioStream() {
      this.sourceType = Constants.AudioSourceType.AUDIO_SOURCE_UNKNOWN;
      this.remoteUserUid = 0;
      this.channelId = "";
      this.trackId = 0;
    }
  };</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraMixedAudioStream: NSObject
@property (assign, nonatomic) AgoraAudioSourceType sourceType;
@property (assign, nonatomic) NSUInteger remoteUserUid;
@property (copy, nonatomic) NSString * _Nullable channelId;
@property (assign, nonatomic) NSUInteger trackId;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct MixedAudioStream {
  AUDIO_SOURCE_TYPE sourceType;
  uid_t remoteUserUid;
  const char* channelId;
  track_id_t trackId;
  MixedAudioStream(AUDIO_SOURCE_TYPE source)
    : sourceType(source),
      remoteUserUid(0),
      channelId(NULL),
      trackId(-1) {}
  MixedAudioStream(AUDIO_SOURCE_TYPE source, track_id_t track)
    : sourceType(source),
      trackId(track) {}
  MixedAudioStream(AUDIO_SOURCE_TYPE source, uid_t uid, const char* channel)
    : sourceType(source),
      remoteUserUid(uid),
      channelId(channel) {}
  MixedAudioStream(AUDIO_SOURCE_TYPE source, uid_t uid, const char* channel, track_id_t track)
    : sourceType(source),
      remoteUserUid(uid),
      channelId(channel),
      trackId(track) {}
};</codeblock>
            <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FUABT_MixedAudioStream {

	GENERATED_BODY()

public:

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	EUABT_AUDIO_SOURCE_TYPE sourceType = EUABT_AUDIO_SOURCE_TYPE::AUDIO_SOURCE_MICROPHONE;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	int64 remoteUserUid;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	FString channelName;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	int64 trackId;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class MixedAudioStream {
  sourceType?: AudioSourceType;
  remoteUserUid?: number;
  channelId?: string;
  trackId?: number;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class MixedAudioStream
{
    public AUDIO_SOURCE_TYPE sourceType;
    public uint remoteUserUid;
    public string channelId;
    public uint trackId;
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class MixedAudioStream {
  sourceType?: AudioSourceType;
  remoteUserUid?: number;
  channelId?: string;
  trackId?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class MixedAudioStream {

  const MixedAudioStream(
      {this.sourceType, this.remoteUserUid, this.channelId, this.trackId});

  @JsonKey(name: 'sourceType')
  final AudioSourceType? sourceType;

  @JsonKey(name: 'remoteUserUid')
  final int? remoteUserUid;

  @JsonKey(name: 'channelId')
  final String? channelId;

  @JsonKey(name: 'trackId')
  final int? trackId;

  factory MixedAudioStream.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$MixedAudioStreamFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$MixedAudioStreamToJson(this);
}</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <p></p>
            </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="ios">
                <pt props="ios">sourceType</pt>
                <pd props="ios">音频源的类型。详见 <xref keyref="AUDIO_SOURCE_TYPE"/>。</pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">remoteUserUid</pt>
                <pd>
                  <p>远端用户 ID。</p>
                  <note type="attention">当参与本地音频合流的音频源类型为 <ph keyref="AUDIO_SOURCE_REMOTE_USER"/> 时，需要设置该参数。</note></pd>
                <pd props="ios">远端用户 ID。当本地混音音频流的源类型为 <ph keyref="AgoraAudioSourceRemoteUser"/> 时设置该参数。</pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">channelId</pt>
                <pd>
              <p conkeyref="joinChannel2/channelID_desc"/>
              <note type="attention">当参与本地音频合流的音频源类型为 <ph keyref="AUDIO_SOURCE_REMOTE_CHANNEL"/> 或 <ph keyref="AUDIO_SOURCE_REMOTE_USER"/> 时，需要设置该参数。</note></pd>
                <pd props="ios">频道名。在相同 App ID 的前提下，填写相同频道名的用户会进入同一个频道进行音视频互动。字符串长度必须小于 64 字节。支持的字符（共 89 个）：
                    <ul>
                        <li>所有小写英文字母：a 到 z。</li>
                        <li>所有大写英文字母：A 到 Z。</li>
                        <li>所有数字字符：0 到 9。</li>
                        <li>特殊字符："!", "#", "$", "%", "&amp;", "(", ")", "+", "-", ":", ";", "&lt;", "=", ".", "&gt;", "?", "@", "[", "]", "^", "_", "{", "}", "|", "~", ","。当本地混音音频流的源类型为 <ph keyref="AgoraAudioSourceRemoteChannel"/> 或 <ph keyref="AgoraAudioSourceRemoteUser"/> 时设置该参数。</li>
                        </ul>
                    </pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">trackId</pt>
                <pd>
            <p>音频轨道 ID。将该参数设置为调用 <apiname keyref="createCustomAudioTrack"/> 方法返回的自定义音频轨道 ID。</p>
            <note type="attention">当参与本地本地音频合流的音频源类型为 <ph keyref="AUDIO_SOURCE_CUSTOM"/> 时，需要设置该参数。</note>
          </pd>
                <pd props="ios">音频轨道 ID。当本地混音音频流的源类型为 <ph keyref="AgoraAudioSourceCustom"/> 时设置该参数。设置为 <xref keyref="createCustomAudioTrack"/> 返回的自定义音频轨道 ID。</pd>
                </plentry>
            </parml> </section>
                </refbody>
</reference>
