<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaplayer_preloadsrc">
    <title><ph keyref="preloadSrc" /></title>
    <shortdesc id="short"><ph id="shortdesc">预加载媒体资源。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="preloadSrc" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int preloadSrc(String src, long startPos);
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)preloadSrc:(NSString *)src startPos:(int)startPos;
</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int preloadSrc(const char* src, int64_t startPos) = 0;
</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract preloadSrc(src: string, startPos: number): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int PreloadSrc(string src, Int64 startPos);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract preloadSrc(src: string, startPos: number): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; preloadSrc({required String src, required int startPos});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p>你可以调用该方法将一个媒体资源预加载到播放列表中。如果需要预加载多个媒体资源，你可以多次调用该方法。</p>
            <p props="native rn electron">调用该方法后，如果收到 <xref keyref="onPreloadEvent" /> 回调报告事件 <apiname keyref="PLAYER_PRELOAD_EVENT_COMPLETE" />，则预加载成功；如果你收到 <xref keyref="onPreloadEvent" /> 回调报告事件 <apiname keyref="PLAYER_PRELOAD_EVENT_ERROR" />，则预加载失败。</p>
            <p>预加载成功后，如果你想播放媒体资源，请调用 <xref keyref="playPreloadedSrc" />；如果你想清空播放列表，请调用 <xref keyref="stop" />。</p>
            <note type="note">
            <p>SDK 不支持你预加载重复的媒体资源到播放列表，但支持你将正在播放的媒体资源再次预加载到播放列表。</p>
            </note> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry conkeyref="switchSrc/src">
                <pt />
                <pd />
            </plentry>
            <plentry>
                <pt>startPos</pt>
                <pd>预加载到播放列表后，开始播放时的起始位置（毫秒）。预加载直播流时，将该参数设置为 0。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。</p>
            <ul>
            <li props="native electron unity rn">0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。</li>
            </ul> </section>
    </refbody>
</reference>