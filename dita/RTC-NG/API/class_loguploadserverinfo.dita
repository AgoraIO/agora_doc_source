<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_loguploadserverinfo">
    <title><ph keyref="LogUploadServerInfo"/></title>
    <shortdesc id="short"><ph id="shortdesc">日志服务器的配置信息。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static class LogUploadServerInfo {
  public String serverDomain = null;
 
  public String serverPath = null;
 
  public int serverPort = 0;
  public boolean serverHttps = true;
  public LogUploadServerInfo() {
  serverDomain = null;
  serverPath = null;
  serverPort = 0;
  serverHttps = true;
  }
 
  public LogUploadServerInfo(String domain, String path, int port, boolean https){
   serverDomain =  domain;
   serverPath = path;
   serverPort = port;
   serverHttps = https;
  }
};</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface LogUploadServerInfo : NSObject
@property(copy, nonatomic) NSString* _Nullable serverDomain;
 
@property(copy, nonatomic) NSString* _Nullable serverPath;
 
@property(assign, nonatomic) NSInteger serverPort;
 
@property(assign, nonatomic) BOOL serverHttps;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct LogUploadServerInfo {
  const char* serverDomain;
 
  const char* serverPath;
 
  int serverPort;
 
  bool serverHttps;
 
  LogUploadServerInfo() : serverDomain(nullptr), serverPath(nullptr), serverPort(0), serverHttps(true) {}
 
  LogUploadServerInfo(const char* domain, const char* path, int port, bool https) : serverDomain(domain),
serverPath(path), serverPort(port), serverHttps(https) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FLogUploadServerInfo {
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LogUploadServerInfo&quot;)
	FString serverDomain = &quot;&quot;;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LogUploadServerInfo&quot;)
	FString serverPath = &quot;&quot;;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LogUploadServerInfo&quot;)
	int serverPort = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LogUploadServerInfo&quot;)
	bool serverHttps = true;
	FLogUploadServerInfo() {}
	FLogUploadServerInfo(const agora::rtc::LogUploadServerInfo&amp; AgoraData) {
		serverDomain = UTF8_TO_TCHAR(AgoraData.serverDomain);
		serverPath = UTF8_TO_TCHAR(AgoraData.serverPath);
		serverPort = AgoraData.serverPort;
		serverHttps = AgoraData.serverHttps;
	}
	agora::rtc::LogUploadServerInfo CreateAgoraData() const {
		agora::rtc::LogUploadServerInfo AgoraData;
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.serverDomain, serverDomain)
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.serverPath, serverPath)
		
		AgoraData.serverPort = serverPort;
		AgoraData.serverHttps = serverHttps;
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::LogUploadServerInfo&amp; AgoraData) const {
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.serverDomain)
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.serverPath)
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class LogUploadServerInfo {
  serverDomain?: string;
  serverPath?: string;
  serverPort?: number;
  serverHttps?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript">export class LogUploadServerInfo {
  serverDomain?: string;
  serverPath?: string;
  serverPort?: number;
  serverHttps?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class LogUploadServerInfo {
  const LogUploadServerInfo(
      {this.serverDomain, this.serverPath, this.serverPort, this.serverHttps});

  @JsonKey(name: 'serverDomain')
  final String? serverDomain;

  @JsonKey(name: 'serverPath')
  final String? serverPath;

  @JsonKey(name: 'serverPort')
  final int? serverPort;

  @JsonKey(name: 'serverHttps')
  final bool? serverHttps;

  factory LogUploadServerInfo.fromJson(Map&lt;String, dynamic> json) =>
      _$LogUploadServerInfoFromJson(json);

  Map&lt;String, dynamic> toJson() => _$LogUploadServerInfoToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since">
            <dlentry props="android apple cpp">
                <dt>自从</dt>
                <dd>v4.1.0</dd>
            </dlentry>
            </dl>
            <p/>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>serverDomain</pt>
                <pd>日志服务器的域名。</pd>
            </plentry>
            <plentry>
                <pt>serverPath</pt>
                <pd>日志在服务器上的存储路径。</pd>
            </plentry>
            <plentry>
                <pt>serverPort</pt>
                <pd>日志服务器的端口。</pd>
            </plentry>
            <plentry>
                <pt>serverHttps</pt>
                <pd>日志服务器是否使用 HTTPS 协议：
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>: 使用 HTTPS 协议。</li>
                    <li><codeph><ph keyref="false"/></codeph>: 使用 HTTP 协议。</li>
                    </ul> </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
