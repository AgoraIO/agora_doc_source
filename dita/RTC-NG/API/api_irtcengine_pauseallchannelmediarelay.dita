<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_pauseallchannelmediarelay">
    <title><ph keyref="pauseAllChannelMediaRelay"/></title>
    <shortdesc id="short"><ph id="shortdesc">暂停向所有目标频道的跨频道媒体流转发。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="pauseAllChannelMediaRelay"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int pauseAllChannelMediaRelay();</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract pauseAllChannelMediaRelay():number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)pauseAllChannelMediaRelay NS_SWIFT_NAME(pauseAllChannelMediaRelay());</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int pauseAllChannelMediaRelay() = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = "Agora|IRtcEngine")
	int PauseAllChannelMediaRelay();</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract pauseAllChannelMediaRelay(): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int PauseAllChannelMediaRelay();</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract pauseAllChannelMediaRelay(): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; pauseAllChannelMediaRelay();</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p>你可以在跨频道媒体流转发开始后调用该方法暂停向所有目标频道转发媒体流。如需恢复转发，请调用 <xref keyref="resumeAllChannelMediaRelay"/> 方法。<xref keyref="resumeAllChannelMediaRelay"/> 方法。<xref keyref="resumeAllChannelMediaRelay"/> 方法。</p>
            <note type="attention">该方法需要在调用 <xref keyref="startOrUpdateChannelMediaRelay"/> 开始跨频道媒体流转发后调用。</note> <note type="attention" props="android cpp">请在调用 <xref keyref="startOrUpdateChannelMediaRelay"/> 方法之后调用该方法。</note>
            <note type="attention" props="apple">请在调用 <xref keyref="startOrUpdateChannelMediaRelay"/> 方法之后调用本方法。</note>
            </section>
        <section id="return_values" props="bp cs electron flutter native rn unity unreal">
            <title><ph keyref="return-section-title"/></title>
        <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
        <ul props="bp cs electron rn unity unreal">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph>
            <ul><li>-5: 方法调用被拒绝。当前没有正在进行的跨频道媒体流转发。</li></ul>
            </li>
            </ul>
        <p props="native"><ul>
                        <li>0：方法调用成功。</li>
                        <li>&lt; 0：方法调用失败。<ul>
                            <li>-5：方法调用被拒绝，当前没有正在进行的跨频道媒体流转发。</li>
                            </ul>
                        </li>
                        </ul>
                    </p>
    </section>
    </refbody>
</reference>
