<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediarecorder_removelistener">
    <title><ph keyref="removeListener_IMediaRecorder"/></title>
    <shortdesc id="short"><ph id="shortdesc">移除指定的 <xref keyref="IMediaRecorderEvent"/> 监听器。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="removeListener_IMediaRecorder"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="ios mac" outputclass="language-objectivec"/>
            <codeblock props="cpp" outputclass="language-cpp"/>
            <codeblock props="cs" outputclass="language-csharp"/>
            <codeblock props="electron" outputclass="language-typescript">removeListener?&lt;EventType extends keyof IMediaRecorderEvent>(
      eventType: EventType,
      listener: IMediaRecorderEvent[EventType]
    ): void;</codeblock>
            <codeblock props="unity" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript">removeListener?&lt;EventType extends keyof IMediaRecorderEvent>(
      eventType: EventType,
      listener: IMediaRecorderEvent[EventType]
    ): void;</codeblock>
            <codeblock props="unreal" outputclass="language-cpp"></codeblock></p>
        </section>
        <section conkeyref="removeListener/detailed_desc"/>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry conkeyref="addListener_IMediaRecorder/eventType">
                <pt/>
                <pd/>
            </plentry>
            <plentry id="listener">
                <pt>listener</pt>
                <pd><parmname>eventType</parmname> 对应的回调函数。必须传入 <xref keyref="addListener_IMediaRecorder"/> 中传入的同一个函数对象。以取消监听 <xref keyref="onRecorderStateChanged"/> 为例： 
                        <codeblock outputclass="language-typescript">// 新建 onRecorderStateChanged 对象
const onRecorderStateChanged = (state: RecorderState, error: RecorderErrorCode) => {};
// 添加 onRecorderStateChanged 监听器
engine.addListener('onRecorderStateChanged', onRecorderStateChanged);
// 移除 onRecorderStateChanged 监听器
engine.removeListener('onRecorderStateChanged', onRecorderStateChanged);</codeblock></pd>
            </plentry>            
            </parml> </section>
    </refbody>
</reference>
