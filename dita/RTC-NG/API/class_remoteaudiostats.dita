<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_remoteaudiostats">
    <title><ph keyref="RemoteAudioStats" /></title>
    <shortdesc id="short"><ph id="shortdesc">远端用户的音频统计数据。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static class RemoteAudioStats {
    public int uid;
    public int quality;
    public int networkTransportDelay;
    public int jitterBufferDelay;
    public int audioLossRate;
    public int numChannels;
    public int receivedSampleRate;
    public int receivedBitrate;
    public int totalFrozenTime;
    public int frozenRate;
    public int mosValue;
    public long totalActiveTime;
    public long publishDuration;
    public long qoeQuality;
    public int qualityChangedReason;
  }</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcRemoteAudioStats : NSObject
@property(assign, nonatomic) NSUInteger uid;
@property(assign, nonatomic) NSUInteger quality;
@property(assign, nonatomic) NSUInteger networkTransportDelay;
@property(assign, nonatomic) NSUInteger jitterBufferDelay;
@property(assign, nonatomic) NSUInteger audioLossRate;
@property(assign, nonatomic) NSUInteger numChannels;
@property(assign, nonatomic) NSUInteger receivedSampleRate;
@property(assign, nonatomic) NSUInteger receivedBitrate;
@property(assign, nonatomic) NSUInteger totalFrozenTime;
@property(assign, nonatomic) NSUInteger totalActiveTime;
@property(assign, nonatomic) NSInteger publishDuration;
@property(assign, nonatomic) NSUInteger frozenRate;
@property(assign, nonatomic) NSUInteger mosValue;
@property(assign, nonatomic) NSInteger qoeQuality;
@property(assign, nonatomic) AgoraExperiencePoorReason qualityChangedReason;
@end</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">struct RemoteAudioStats
{
  uid_t uid;
  int quality;
  int networkTransportDelay;
  int jitterBufferDelay;
  int audioLossRate;
  int numChannels;
  int receivedSampleRate;
  int receivedBitrate;
  int totalFrozenTime;
  int frozenRate;
  int mosValue;
  int totalActiveTime;
  int publishDuration;
  int qoeQuality;
  int qualityChangedReason;

  RemoteAudioStats() :
    uid(0),
    quality(0),
    networkTransportDelay(0),
    jitterBufferDelay(0),
    audioLossRate(0),
    numChannels(0),
    receivedSampleRate(0),
    receivedBitrate(0),
    totalFrozenTime(0),
    frozenRate(0),
    mosValue(0),
    totalActiveTime(0),
    publishDuration(0),
    qoeQuality(0) {}
    qualityChangedReason(0){}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class RemoteAudioStats {
  
  uid?: number;
  
  quality?: number;
  
  networkTransportDelay?: number;
  
  jitterBufferDelay?: number;
  
  audioLossRate?: number;
  
  numChannels?: number;
  
  receivedSampleRate?: number;
  
  receivedBitrate?: number;
  
  totalFrozenTime?: number;
  
  frozenRate?: number;
  
  mosValue?: number;
  
  totalActiveTime?: number;
  
  publishDuration?: number;
  
  qoeQuality?: number;
  
  qualityChangedReason?: number;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class RemoteAudioStats
    {
        public RemoteAudioStats()
        {
            uid = 0;
            quality = 0;
            networkTransportDelay = 0;
            jitterBufferDelay = 0;
            audioLossRate = 0;
            numChannels = 0;
            receivedSampleRate = 0;
            receivedBitrate = 0;
            totalFrozenTime = 0;
            frozenRate = 0;
            mosValue = 0;
            totalActiveTime = 0;
            publishDuration = 0;
            qoeQuality = 0;
            qualityChangedReason = 0;
        }

        public RemoteAudioStats(uint uid, int quality, int networkTransportDelay, int jitterBufferDelay,
            int audioLossRate, int numChannels, int receivedSampleRate, int receivedBitrate, int totalFrozenTime,
            int frozenRate, int mosValue, int totalActiveTime, int publishDuration, int qoeQuality, int qualityChangedReason)
        {
            this.uid = uid;
            this.quality = quality;
            this.networkTransportDelay = networkTransportDelay;
            this.jitterBufferDelay = jitterBufferDelay;
            this.audioLossRate = audioLossRate;
            this.numChannels = numChannels;
            this.receivedSampleRate = receivedSampleRate;
            this.receivedBitrate = receivedBitrate;
            this.totalFrozenTime = totalFrozenTime;
            this.frozenRate = frozenRate;
            this.mosValue = mosValue;
            this.totalActiveTime = totalActiveTime;
            this.publishDuration = publishDuration;
            this.qoeQuality = qoeQuality;
            this.qualityChangedReason = qualityChangedReason;
        }

        public uint uid { set; get; }
        public int quality { set; get; }
        public int networkTransportDelay { set; get; }
        public int jitterBufferDelay { set; get; }
        public int audioLossRate { set; get; }
        public int numChannels { set; get; }
        public int receivedSampleRate { set; get; }
        public int receivedBitrate { set; get; }
        public int totalFrozenTime { set; get; }
        public int frozenRate { set; get; }
        public int mosValue { set; get; }
        public int totalActiveTime { set; get; }
        public int publishDuration { set; get; }
        public int qoeQuality { set; get; }
        public int qualityChangedReason { set; get; }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class RemoteAudioStats {
  
  uid?: number;
  
  quality?: number;
  
  networkTransportDelay?: number;
  
  jitterBufferDelay?: number;
  
  audioLossRate?: number;
  
  numChannels?: number;
  
  receivedSampleRate?: number;
  
  receivedBitrate?: number;
  
  totalFrozenTime?: number;
  
  frozenRate?: number;
  
  mosValue?: number;
  
  totalActiveTime?: number;
  
  publishDuration?: number;
  
  qoeQuality?: number;
  
  qualityChangedReason?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class RemoteAudioStats {
  const RemoteAudioStats(
      {this.uid,
      this.quality,
      this.networkTransportDelay,
      this.jitterBufferDelay,
      this.audioLossRate,
      this.numChannels,
      this.receivedSampleRate,
      this.receivedBitrate,
      this.totalFrozenTime,
      this.frozenRate,
      this.mosValue,
      this.totalActiveTime,
      this.publishDuration,
      this.qoeQuality,
      this.qualityChangedReason});

  @JsonKey(name: 'uid')
  final int? uid;

  @JsonKey(name: 'quality')
  final int? quality;

  @JsonKey(name: 'networkTransportDelay')
  final int? networkTransportDelay;

  @JsonKey(name: 'jitterBufferDelay')
  final int? jitterBufferDelay;

  @JsonKey(name: 'audioLossRate')
  final int? audioLossRate;

  @JsonKey(name: 'numChannels')
  final int? numChannels;

  @JsonKey(name: 'receivedSampleRate')
  final int? receivedSampleRate;

  @JsonKey(name: 'receivedBitrate')
  final int? receivedBitrate;

  @JsonKey(name: 'totalFrozenTime')
  final int? totalFrozenTime;

  @JsonKey(name: 'frozenRate')
  final int? frozenRate;

  @JsonKey(name: 'mosValue')
  final int? mosValue;

  @JsonKey(name: 'totalActiveTime')
  final int? totalActiveTime;

  @JsonKey(name: 'publishDuration')
  final int? publishDuration;

  @JsonKey(name: 'qoeQuality')
  final int? qoeQuality;

  @JsonKey(name: 'qualityChangedReason')
  final int? qualityChangedReason;

  factory RemoteAudioStats.fromJson(Map&lt;String, dynamic> json) =>
      _$RemoteAudioStatsFromJson(json);

  Map&lt;String, dynamic> toJson() => _$RemoteAudioStatsToJson(this);
}
</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>uid</pt>
                <pd>远端用户的用户 ID。</pd>
            </plentry>
            <plentry>
                <pt>quality</pt>
                <pd>
                    <p>远端用户发送的音频流质量。<ph props="ios mac cpp unreal bp electron rn unity flutter cs">详见 <xref keyref="QUALITY_TYPE" />。</ph></p>
                    <p props="android">
                    <ul id="qualitytype">
                    <li><ph keyref="QUALITY_UNKNOWN" /> (0)：质量未知。</li>
                    <li><ph keyref="QUALITY_EXCELLENT" /> (1)：质量极好。</li>
                    <li><ph keyref="QUALITY_GOOD" /> (2)：用户主观感觉和极好差不多，但码率可能略低于极好。</li>
                    <li><ph keyref="QUALITY_POOR" /> (3)：用户主观感受有瑕疵但不影响沟通。</li>
                    <li><ph keyref="QUALITY_BAD" /> (4)：勉强能沟通但不顺畅。</li>
                    <li><ph keyref="QUALITY_VBAD" /> (5)：网络质量非常差，基本不能沟通。</li>
                    <li><ph keyref="QUALITY_DOWN" /> (6)：网络连接断开，完全无法沟通。</li>
                    </ul> </p>
                </pd>
            </plentry>
            <plentry>
                <pt>networkTransportDelay</pt>
                <pd>音频发送端到接收端的网络延迟（毫秒）。</pd>
            </plentry>
            <plentry>
                <pt>jitterBufferDelay</pt>
                <pd>
                    <p>音频接收端到网络抖动缓冲的网络延迟（毫秒）。
                    
                    
                    
                    <note type="attention">当接收端为观众且 <xref keyref="ClientRoleOptions" /> 的 <parmname>audienceLatencyLevel</parmname> 为 1 时，该参数不生效。</note></p>
                </pd>
            </plentry>
            <plentry>
                <pt>audioLossRate</pt>
                <pd>统计周期内的远端音频流的丢帧率 (%)。</pd>
            </plentry>
            <plentry>
                <pt>numChannels</pt>
                <pd>声道数。</pd>
            </plentry>
            <plentry>
                <pt>receivedSampleRate</pt>
                <pd>统计周期内接收到的远端音频流的采样率。</pd>
            </plentry>
            <plentry>
                <pt>receivedBitrate</pt>
                <pd>接收到的远端音频流在统计周期内的平均码率（Kbps）。</pd>
            </plentry>
            <plentry>
                <pt>totalFrozenTime</pt>
                <pd>远端用户在加入频道后发生音频卡顿的累计时长（毫秒）。通话过程中，音频丢帧率达到 4% 即记为一次音频卡顿。</pd>
            </plentry>
            <plentry>
                <pt>frozenRate</pt>
                <pd>音频卡顿的累计时长占音频总有效时长的百分比 (%)。音频有效时长是指远端用户加入频道后音频未被停止发送或禁用的时长。</pd>
            </plentry>
            <plentry>
                <pt>totalActiveTime</pt>
                <pd>
                    <p>远端用户在音频通话开始到本次回调之间的有效时长（毫秒）。</p>
                    <p>有效时长是指去除了远端用户进入静音状态的总时长。</p>
                </pd>
            </plentry>
            <plentry>
                <pt>publishDuration</pt>
                <pd>
                    <p>远端音频流的累计发布时长（毫秒）。</p>
                </pd>
            </plentry>
            <plentry>
                <pt>qoeQuality</pt>
                <pd>
                    <p><ph>接收远端音频时，本地用户的主观体验质量。</ph><ph props="ios mac cpp unreal bp electron rn unity cs">详见 <xref keyref="EXPERIENCE_QUALITY_TYPE" />。</ph>
                    <ul props="android">
                    <li><ph keyref="EXPERIENCE_QUALITY_GOOD" /> (0)：主观体验质量较好。</li>
                    <li><ph keyref="EXPERIENCE_QUALITY_BAD" /> (1)：主观体验质量较差。</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>qualityChangedReason</pt>
                <pd>
                    <p><ph>接收远端音频时，本地用户主观体验质量较差的原因。</ph><ph props="ios mac cpp unreal bp unity rn electron flutter cs">详见 <xref keyref="EXPERIENCE_POOR_REASON" />。</ph>
                    <ul props="android">
                    <li><ph keyref="EXPERIENCE_REASON_NONE" /> (0): 无原因，说明主观体验质量较好。</li>
                    <li><ph keyref="REMOTE_NETWORK_QUALITY_POOR" /> (1): 远端用户的网络较差。</li>
                    <li><ph keyref="LOCAL_NETWORK_QUALITY_POOR" /> (2): 本地用户的网络较差。</li>
                    <li><ph keyref="WIRELESS_SIGNAL_POOR" /> (4): 本地用户的 Wi-Fi 或者移动数据网络信号弱。</li>
                    <li><ph keyref="WIFI_BLUETOOTH_COEXIST" /> (8): 本地用户同时开启 Wi-Fi 和蓝牙，二者信号互相干扰，导致音频传输质量下降。</li>
                    </ul> </p>
                </pd>
            </plentry>
            <plentry>
                <pt>mosValue</pt>
                <pd>
                    <p>统计周期内，声网实时音频 MOS（平均主观意见分）评估方法对接收到的远端音频流的质量评分。返回值范围为 [0,500]。返回值除以 100 即可得到 MOS 分数，范围为 [0,5] 分，分数越高，音频质量越好。</p>
                    <p>声网实时音频 MOS 评分对应的主观音质感受如下：<simpletable>
                    <sthead>
                        <stentry>MOS 分数</stentry>
                        <stentry>音质感受</stentry>
                    </sthead>
                    <strow>
                        <stentry>大于 4 分</stentry>
                        <stentry>音频质量佳，清晰流畅。</stentry>
                    </strow>
                    <strow>
                        <stentry>3.5 - 4 分</stentry>
                        <stentry>音频质量较好，偶有音质损伤，但依然清晰。</stentry>
                    </strow>
                    <strow>
                        <stentry>3 - 3.5 分</stentry>
                        <stentry>音频质量一般，偶有卡顿，不是非常流畅，需要一点注意力才能听清。</stentry>
                    </strow>
                    <strow>
                        <stentry>2.5 - 3 分</stentry>
                        <stentry>音频质量较差，卡顿频繁，需要集中精力才能听清。</stentry>
                    </strow>
                    <strow>
                        <stentry>2 - 2.5 分</stentry>
                        <stentry>音频质量很差，偶有杂音，部分语义丢失，难以交流。</stentry>
                    </strow>
                    <strow>
                        <stentry>小于 2 分</stentry>
                        <stentry>音频质量非常差，杂音频现，大量语义丢失，完全无法交流。</stentry>
                    </strow>
                    </simpletable></p>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>