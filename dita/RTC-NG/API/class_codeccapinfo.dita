<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_codeccapinfo">
    <title><ph keyref="CodecCapInfo"/></title>
    <shortdesc id="short"><ph id="shortdesc">SDK 的编解码器能力信息。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class CodecCapInfo {
  public int codecType;
  public int codecCapMask;
  public CodecCapLevels codecLevels;
  @CalledByNative
  public CodecCapInfo(int codecType, int codecCapMask, CodecCapLevels levels) {
    this.codecType = codecType;
    this.codecCapMask = codecCapMask;
    this.codecLevels = levels;
  }
  @CalledByNative
  public void SetCodecType(int codecType) {
    this.codecType = codecType;
  }
  @CalledByNative
  public void SetCodecCapMask(int codecCapMask) {
    this.codecCapMask = codecCapMask;
  }
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraVideoCodecCapInfo : NSObject
@property(assign, nonatomic) AgoraVideoCodecType codecType;
@property(assign, nonatomic) NSUInteger codecCapMask;
@property(strong, nonatomic) AgoraVideoCodecCapLevels *_Nonnull codecCapLevels;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct CodecCapInfo {
  VIDEO_CODEC_TYPE codecType;
  int codecCapMask;
  CodecCapLevels codecLevels;
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FCodecCapInfo {
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|CodecCapInfo")
	EVIDEO_CODEC_TYPE codecType = EVIDEO_CODEC_TYPE::VIDEO_CODEC_NONE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|CodecCapInfo")
	int codecCapMask = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|CodecCapInfo")
	FCodecCapLevels codecLevels;
	FCodecCapInfo(){}
	FCodecCapInfo(const agora::rtc::CodecCapInfo &amp; AgoraData){
		codecType = static_cast&lt;EVIDEO_CODEC_TYPE&gt;(AgoraData.codecType);
		codecCapMask = AgoraData.codecCapMask;
		codecLevels = AgoraData.codecLevels;
	}
	agora::rtc::CodecCapInfo CreateAgoraData() const {
		agora::rtc::CodecCapInfo AgoraData;
		AgoraData.codecType = static_cast&lt;agora::rtc::VIDEO_CODEC_TYPE&gt;(codecType);
		AgoraData.codecCapMask = codecCapMask;
		AgoraData.codecLevels = codecLevels.CreateAgoraData();
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::CodecCapInfo&amp; AgoraData) const {
		codecLevels.FreeAgoraData(AgoraData.codecLevels);
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class CodecCapInfo {
  codecType?: VideoCodecType;
  codecCapMask?: number;
  codecLevels?: CodecCapLevels;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class CodecCapInfo
    {
        public VIDEO_CODEC_TYPE codecType;

        public int codecCapMask;

        public CodecCapLevels codecLevels;
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class CodecCapInfo {
  codecType?: VideoCodecType;
  codecCapMask?: number;
  codecLevels?: CodecCapLevels;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class CodecCapInfo {
  const CodecCapInfo({this.codecType, this.codecCapMask, this.codecLevels});

  @JsonKey(name: 'codecType')
  final VideoCodecType? codecType;

  @JsonKey(name: 'codecCapMask')
  final int? codecCapMask;

  @JsonKey(name: 'codecLevels')
  final CodecCapLevels? codecLevels;

  factory CodecCapInfo.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$CodecCapInfoFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$CodecCapInfoToJson(this);
}</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <p/>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="ios">
                <pt props="ios">codecType</pt>
                <pd props="apple bp cpp cs electron flutter rn unity unreal">视频编解码类型。详见 <xref keyref="VIDEO_CODEC_TYPE"/>。</pd>
                <pd props="android hmos">
                    <p>视频编解码类型：
                    <ul>
                    <li>1：VP8。</li>
                    <li>2：H.264。</li>
                    <li>3：（默认）H.265。</li></ul> </p>
                </pd>
                <pd props="ios">视频编解码器类型。详见 <xref keyref="VIDEO_CODEC_TYPE"/>。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">codecCapMask</pt>
                <pd props="apple cpp cs electron flutter rn unity unreal">SDK 编解码类型的 bit mask。详见 <xref keyref="CODEC_CAP_MASK"/>。</pd>
                <pd props="android bp">
                    <p>编解码类型的 bit mask：
                    <ul>
                    <li>0：不支持编解码。</li>
                    <li>1 &lt;&lt; 0：支持硬件解码。</li>
                    <li>1 &lt;&lt; 1：支持硬件编码。</li>
                    <li>1 &lt;&lt; 2：支持软件解码。</li>
                    <li>1 &lt;&lt; 3：支持软件编码。</li>
                    </ul></p>
                </pd>
                <pd props="ios">SDK 中编解码器类型的位掩码。详见 <xref keyref="CODEC_CAP_MASK"/>。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="android bp cpp cs electron en flutter hmos unity unreal">codecLevels</pt>
                <pt props="apple ios">codecCapLevels</pt>
                <pd>SDK 支持的编解码能力等级。详见 <xref keyref="CodecCapLevels"/>。</pd>
                <pd props="ios">SDK 的编解码器能力。详见 <xref keyref="CodecCapLevels"/>。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
