<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaengine_pushvideoframe">
    <title><ph keyref="pushVideoFrame" /></title>
    <shortdesc id="short"><ph id="shortdesc">将外部原始视频帧通过自定义视频轨道发布到频道中。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="pushVideoFrame" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int pushExternalVideoFrameById(AgoraVideoFrame frame, int videoTrackId);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)pushExternalVideoFrame:(AgoraVideoFrame * _Nonnull)frame videoTrackId:(NSUInteger)videoTrackId NS_SWIFT_NAME(pushExternalVideoFrame(_:videoTrackId:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int pushVideoFrame(base::ExternalVideoFrame* frame, unsigned int videoTrackId = 0) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract pushVideoFrame(
    frame: ExternalVideoFrame,
    videoTrackId?: number
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int PushVideoFrame(ExternalVideoFrame frame, uint videoTrackId = 0);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract pushVideoFrame(
    frame: ExternalVideoFrame,
    videoTrackId?: number
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> pushVideoFrame(
    {required ExternalVideoFrame frame, int videoTrackId = 0});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <dl outputclass="deprecated" props="android">
            <dlentry>
                <dt>弃用：</dt>
                <dd>如果你需要推送 I422 格式的视频帧，请使用该方法。其他情况下，请改用 <xref keyref="pushVideoFrame3"/>。</dd>
            </dlentry>
            </dl>
            <p id="desc1">当你需要在频道中发布自定义采集视频时，可参考以下步骤：<ol>
            <li>调用 <xref keyref="createCustomVideoTrack"/> 方法创建视频轨道并获得视频轨道 ID。</li>
            <li>调用 <xref keyref="joinChannel2"/> 加入频道时，将 <xref keyref="ChannelMediaOptions"/> 中的 <parmname>customVideoTrackId</parmname> 设置为你想要发布的视频轨道 ID，并将 <parmname>publishCustomVideoTrack</parmname> 设置为 <codeph><ph keyref="true"/></codeph>。</li>
            <li>调用该方法将 <parmname>videoTrackId</parmname> 指定为步骤 2 中指定的视频轨道 ID，即可实现在频道内发布对应的自定义视频源。</li></ol></p>
            <note type="danger" id="desc2">调用该方法后，即使你停止推送外部视频帧到 SDK，自定义采集的视频流仍然会被计入视频时长用量并产生费用，声网建议你根据实际情况采取相应措施避免此类视频计费：<ul>
            <li>如果你不再需要采集外部视频数据，可以调用 <xref keyref="destroyCustomVideoTrack"/> 销毁自定义采集的视频轨道。</li>
            <li>如果你只想将采集到的外部视频数据用于本地预览、而不在频道内发布，可以调用 <xref keyref="muteLocalVideoStream"/> 取消发送视频流，或调用 <xref keyref="updateChannelMediaOptions"/> 将 <parmname>publishCustomVideoTrack</parmname> 设置为 <codeph><ph keyref="false"/></codeph>。</li>
            </ul></note>
            <p props="android">调用该方法或 <xref keyref="pushVideoFrame3"/> 均能将视频帧数据传递给 SDK。区别为该方法不支持 Texture 格式的视频数据。</p>
        </section>
        <section props="cpp" id="scenario">
            <title>适用场景</title>
            <p>SDK 自 v4.2.3 起支持 ID3D11Texture2D 类型的视频格式，该类型在游戏场景下应用较为广泛。当你需要将该类型的视频帧推送的 SDK 时，需要调用该方法，并设置 <parmname>frame</parmname> 中的 <parmname>format</parmname> 为 <codeph>VIDEO_TEXTURE_ID3D11TEXTURE2D</codeph>、设置 <parmname>d3d11_texture_2d</parmname> 和 <parmname>texture_slice_index</parmname> 成员，将视频帧的格式设置为 ID3D11Texture2D。</p>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry id="frame">
                <pt>frame</pt>
                <pd>
                    <p>待推送的视频帧。详见 <xref keyref="ExternalVideoFrame" />。</p>
                </pd>
            </plentry>
            <plentry id="videotrackid">
                <pt>videoTrackId</pt>
                <pd>调用 <apiname keyref="createCustomVideoTrack"/> 方法返回的视频轨道 ID。默认值为 0。</pd>
            </plentry>    
            </parml>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="android cpp unreal bp unity rn electron cs">
            <li>0：方法调用成功。</li>
            <li>&lt; 0：方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul>
            <ul props="apple">
            <li><codeph><ph keyref="true"/></codeph>：方法调用成功。</li>
            <li><codeph><ph keyref="false"/></codeph>：方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
    </refbody>
</reference>
