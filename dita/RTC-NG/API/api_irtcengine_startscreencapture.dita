<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startscreencapture">
    <title><ph keyref="startScreenCapture"/></title>
    <shortdesc id="short"><ph id="shortdesc">开始屏幕共享。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startScreenCapture"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int startScreenCapture(ScreenCaptureParameters screenCaptureParameters);
</codeblock>
            <codeblock props="ios" outputclass="language-objectivec">- (int)startScreenCapture:(AgoraScreenCaptureParameters2* _Nullable)parameters NS_SWIFT_NAME(startScreenCapture(_:));</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">#if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
                virtual int startScreenCapture(const ScreenCaptureParameters2&amp; captureParams) = 0;
              #endif</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startScreenCapture(captureParams: ScreenCaptureParameters2): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int StartScreenCapture(ScreenCaptureParameters2 captureParams);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startScreenCapture(captureParams: ScreenCaptureParameters2): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> startScreenCapture(ScreenCaptureParameters2 captureParams);</codeblock>
            <codeblock props="unreal" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p id="apisequence" props="android ios cpp unity flutter">开启屏幕共享有如下两种方案，你可以根据实际场景进行选择：
            
            
            <ul>
            <li>在加入频道前调用该方法，然后调用 <xref keyref="joinChannel2"/> 加入频道并设置 <parmname>publishScreenCaptureVideo</parmname> 为 <codeph><ph keyref="true"/></codeph>，即可开始屏幕共享。</li>
            <li>在加入频道后调用该方法，然后调用 <xref keyref="updateChannelMediaOptions"/> 设置 <parmname>publishScreenCaptureVideo</parmname> 为 <codeph><ph keyref="true"/></codeph>，即可开始屏幕共享。</li>
            </ul></p>
            <p props="ios">屏幕共享 Extension 进程状态发生改变时，SDK 会相应地触发 <xref keyref="onLocalVideoStateChanged"/> 回调，当 <parmname>sourceType</parmname> 的类型为 <apiname keyref="VIDEO_SOURCE_SCREEN"/> 时,<parmname>state</parmname> 参数表示屏幕共享的状态。</p>
            <note type="attention">
            <ul>
            <li props="cpp rn unity flutter">该方法适用于 Android 和 iOS 平台。</li>
            <li props="cpp rn unity flutter ios">在 iOS 平台上，屏幕共享仅适用于 iOS 12.0 及以上。</li>
            <li props="cpp ios unity rn flutter">屏幕共享流的计费以 <apiname keyref="ScreenVideoParameters"/> 中的 <parmname>dimensions</parmname> 值为准：当你未传值时，以 1280 × 720 计费；当你传值时，以你传入的值计费。详细的计费规则请参考<xref keyref="guide-bill"/>。</li>
            <li props="cpp ios unity rn flutter">在 iOS 平台上，如果你使用音频自采集而非 SDK 采集音频，为避免应用退后台后屏幕共享停止，Agora 建议你对应用添加保活处理逻辑。</li>
            <li props="cpp ios unity rn flutter">在 iOS 平台上，该功能对设备性能要求较高，Agora 推荐你在 iPhone X 及之后机型上使用。</li>
            <li props="cpp ios unity rn flutter">在 iOS 平台上，该方法依赖于屏幕共享动态库 <codeph>AgoraReplayKitExtension.xcframework</codeph>，如果删除该动态库会导致无法正常开启屏幕共享。</li>
            <li props="cpp android unity rn flutter">在 Android 平台上，请确保用户已授予 app 屏幕采集权限。</li>
            <li props="cpp android">请确保 Android API 级别不低于 21，否则 SDK 会报告错误码 <codeph><apiname keyref="ERR_SCREEN_CAPTURE_PERMISSION_DENIED"/>(16)</codeph> 和 <codeph><apiname keyref="ERR_SCREEN_CAPTURE_SYSTEM_NOT_SUPPORTED"/>(2)</codeph>。 </li>
            <li props="cpp android">如需在屏幕共享时采集系统音频，你还需确保 Android API 级别不低于 29，否则 SDK 会报告错误码 <codeph><apiname keyref="ERR_SCREEN_CAPTURE_SYSTEM_AUDIO_NOT_SUPPORTED"/>(3)</codeph>。</li>
            <li props="cpp android unity rn flutter">在 Android 9 及之后版本上，为避免应用退后台后被系统杀死，Agora 建议你在 <codeph>/app/Manifests/AndroidManifest.xml</codeph> 文件中添加前台服务权限：<codeph>android.permission.FOREGROUND_SERVICE</codeph>。</li>
            <li props="cpp android unity rn flutter">因 Android 性能限制，屏幕共享不支持 Android TV。</li>
            <li props="cpp android unity rn flutter">因 Android 系统限制，使用华为手机进行屏幕共享时，为避免崩溃，请不要在共享过程中调节屏幕共享流的视频编码分辨率。</li>
            <li props="cpp android unity rn flutter">因 Android 系统限制，部分小米手机不支持屏幕共享时采集系统音频。</li>
            <li props="cpp android unity rn flutter">为提高屏幕共享时采集系统音频的成功率，Agora 推荐你在加入频道前通过 <xref keyref="setAudioScenario"/> 方法设置音频场景为 <apiname keyref="AUDIO_SCENARIO_GAME_STREAMING"/>。</li>
            </ul></note> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry id="params">
                <pt props="ios">parameters</pt>
                <pt props="android">screenCaptureParameters</pt>
                <pt props="cpp rn unity flutter">captureParams</pt>
                <pd>屏幕共享的编码参数配置。默认的分辨率为 1920 x 1080，即 2,073,600 像素。该像素值为计费标准。详见 <xref keyref="ScreenCaptureParameters2" props="android ios cpp rn unity flutter"/>。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="cpp android ios unity rn">
            <title>返回值</title>
            <ul>
            <li>0: 方法调用成功</li>
            <li>&lt; 0: 方法调用失败
                <ul>
                <li>-2: 参数为空。</li>
                </ul></li>
            </ul> </section>
    </refbody>
</reference>
