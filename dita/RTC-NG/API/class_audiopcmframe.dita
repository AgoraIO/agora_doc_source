<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_audiopcmframe">
    <title> <ph keyref="AudioPcmFrame" /> </title>
    <shortdesc id="short"> <ph id="shortdesc">外部 PCM 格式音频帧的信息。</ph> </shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraAudioPcmFrame: NSObject
                @property (assign, nonatomic) uint32_t captureTimestamp;
                @property (assign, nonatomic) size_t samplesPerChannel;
                @property (assign, nonatomic) int sampleRateHz;
                @property (assign, nonatomic) size_t channelNumbers;
                @property (strong, nonatomic) NSData* __nonnull pcmBuffer;
                @property (assign, nonatomic) BytesPerSampleType bytesPerSample;
               @end
            </codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct AudioPcmFrame {
                OPTIONAL_ENUM_SIZE_T {
                  kMaxDataSizeSamples = 3840,
                  kMaxDataSizeBytes = kMaxDataSizeSamples * sizeof(int16_t),
                };
              
                uint32_t capture_timestamp;
                size_t samples_per_channel_;
                int sample_rate_hz_;
                size_t num_channels_;
                rtc::BYTES_PER_SAMPLE bytes_per_sample;
                int16_t data_[kMaxDataSizeSamples];
              };
            </codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class AudioPcmFrame {
  capture_timestamp?: number;
  samples_per_channel_?: number;
  sample_rate_hz_?: number;
  num_channels_?: number;
  bytes_per_sample?: BytesPerSample;
  data_?: number[];
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">
        public struct AudioPcmFrame {
        public UInt32 capture_timestamp;
        public UInt64 samples_per_channel_;
        public int sample_rate_hz_;
        public UInt64 num_channels_;
        public BYTES_PER_SAMPLE bytes_per_sample;
        public Int16[] data_;
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class AudioPcmFrame {
  capture_timestamp?: number;
  samples_per_channel_?: number;
  sample_rate_hz_?: number;
  num_channels_?: number;
  bytes_per_sample?: BytesPerSample;
  data_?: number[];
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class AudioPcmFrame {
  const AudioPcmFrame(
      {this.captureTimestamp,
      this.samplesPerChannel,
      this.sampleRateHz,
      this.numChannels,
      this.bytesPerSample,
      this.data});

  @JsonKey(name: 'capture_timestamp')
  final int? captureTimestamp;

  @JsonKey(name: 'samples_per_channel_')
  final int? samplesPerChannel;

  @JsonKey(name: 'sample_rate_hz_')
  final int? sampleRateHz;

  @JsonKey(name: 'num_channels_')
  final int? numChannels;

  @JsonKey(name: 'bytes_per_sample')
  final BytesPerSample? bytesPerSample;

  @JsonKey(name: 'data_')
  final List&lt;int>? data;

  factory AudioPcmFrame.fromJson(Map&lt;String, dynamic> json) =>
      _$AudioPcmFrameFromJson(json);

  Map&lt;String, dynamic> toJson() => _$AudioPcmFrameToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title> <text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /> </title>
            <parml>
            <plentry props="cpp">
                <pt>OPTIONAL_ENUM_SIZE_T</pt>
                <pd>PCM 格式音频帧缓冲大小。初始值为 3840。</pd>
            </plentry>                
            <plentry>
                <pt props="cpp unity rn electron">capture_timestamp</pt>
                <pt props="ios mac flutter">captureTimestamp</pt>
                <pd>音频帧的时间戳 (ms)。</pd>
            </plentry>
            <plentry>
                <pt props="cpp unity rn electron">samples_per_channel_</pt>
                <pt props="ios mac flutter">samplesPerChannel</pt>
                <pd>每个声道的采样点数。</pd>
            </plentry>
            <plentry>
                <pt props="cpp unity rn electron">sample_rate_hz_</pt>
                <pt props="ios mac flutter">sampleRateHz</pt>
                <pd>音频采样率 (Hz)。</pd>
            </plentry>
            <plentry>
                <pt props="cpp unity rn electron">num_channels_</pt>
                <pt props="ios mac">channelNumbers</pt>
                <pt props="flutter">numChannels</pt>
                <pd>音频声道数。</pd>
            </plentry>
            <plentry>
                <pt props="cpp unity rn electron">bytes_per_sample</pt>
                <pt props="ios mac flutter">bytesPerSample</pt>
                <pd>音频数据的字节数。</pd>
            </plentry>
            <plentry>
                <pt props="cpp unity rn electron">data_</pt>
                <pt props="flutter">data</pt>
                <pd>音频帧数据。</pd>
            </plentry>
            <plentry props="ios mac">
                <pt>pcmBuffer</pt>
                <pd>缓存中的音频帧数量。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>