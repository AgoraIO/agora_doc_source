<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_loadextensionprovider">
    <title><ph keyref="loadExtensionProvider"/></title>
    <shortdesc id="short"><ph id="shortdesc">加载插件。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="loadExtensionProvider"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec"/>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int loadExtensionProvider(const char* path, bool unload_after_use = false) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int LoadExtensionProvider(const FString&amp; path, bool unload_after_use);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract loadExtensionProvider(
    path: string,
    unloadAfterUse?: boolean
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int LoadExtensionProvider(string path, bool unload_after_use = false);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract loadExtensionProvider(
    path: string,
    unloadAfterUse?: boolean
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> loadExtensionProvider(
      {required String path, bool unloadAfterUse = false});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p>该方法用于将 SDK 外部插件（例如云市场插件和 SDK 拓展插件）添加到 SDK 中。</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>请在初始化 <xref keyref="IRtcEngine" /> 后立即调用该方法。</p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <p>如果要加载多个插件，需要多次调用该方法。</p>
            <note type="attention" props="cpp unreal bp unity flutter">该方法仅适用于 Windows 和 Android。</note>
            <note type="attention" props="rn">该方法仅适用于 Android。</note>
            <note type="attention" props="electron">该方法仅适用于 Windows。</note>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>path</pt>
                <pd>插件的动态库路径和名称。例如：<codeph>/library/libagora_segmentation_extension.dll</codeph>。</pd>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp unity cs">unload_after_use</pt>
                <pt props="electron rn flutter">unloadAfterUse</pt>
                <pd>是否在插件使用完毕后自动卸载：
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>: 当 <xref keyref="IRtcEngine"/> 销毁时自动卸载插件。</li>
                        <li><codeph><ph keyref="false"/></codeph>: 不自动卸载插件，直到进程退出（推荐）。</li>    
                    </ul>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
    </refbody>
</reference>
