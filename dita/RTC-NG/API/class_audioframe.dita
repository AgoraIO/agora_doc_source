<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_audioframe">
    <title><ph keyref="AudioFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">原始音频数据。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class AudioFrame {
  public ByteBuffer buffer;
  public int sampleRataHz;
  public int bytesPerSample;
  public int channelNums;
  public int samplesPerChannel;
  public long timestamp;

  @CalledByNative
  public AudioFrame(ByteBuffer buffer, int sampleRataHz, int bytesPerSample, int channelNums,
      int samplesPerChannel, long timestamp) {
    this.sampleRataHz = sampleRataHz;
    this.bytesPerSample = bytesPerSample;
    this.channelNums = channelNums;
    this.samplesPerChannel = samplesPerChannel;
    this.timestamp = timestamp;
    this.buffer = buffer;
  }

  @CalledByNative
  public ByteBuffer getByteBuffer() {
    return buffer;
  }

  @CalledByNative
  public int getBytesPerSample() {
    return bytesPerSample;
  }

  @CalledByNative
  public int getChannelNums() {
    return channelNums;
  }

  @CalledByNative
  public int getSampleRataHz() {
    return sampleRataHz;
  }

  @CalledByNative
  public int getSamplesPerChannel() {
    return samplesPerChannel;
  }

  @CalledByNative
  public long getTimestamp() {
    return timestamp;
  }

  @Override
  public String toString() {
    return "AudioFrame{sampleRataHz=" + sampleRataHz + ", bytesPerSample=" + bytesPerSample
        + ", channelNums=" + channelNums + ", samplesPerChannel=" + samplesPerChannel
        + ", timestamp=" + timestamp + '}';
  }
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraAudioFrame : NSObject
@property(assign, nonatomic) NSInteger samplesPerChannel;
@property(assign, nonatomic) NSInteger bytesPerSample;
@property(assign, nonatomic) NSInteger channels;
@property(assign, nonatomic) NSInteger samplesPerSec;
@property(assign, nonatomic) void* _Nullable buffer;
@property(assign, nonatomic) int64_t renderTimeMs;
@property(assign, nonatomic) int64_t presentationMs;
@property(assign, nonatomic) NSInteger avSyncType;
@property(assign, nonatomic) uint32_t rtpTimestamp;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">  struct AudioFrame {
    AUDIO_FRAME_TYPE type;
    int samplesPerChannel;
    agora::rtc::BYTES_PER_SAMPLE bytesPerSample;
    int channels;
    int samplesPerSec;
    void* buffer;
    int64_t renderTimeMs;
    int avsync_type;

    AudioFrame() : type(FRAME_TYPE_PCM16),
                   samplesPerChannel(0),
                   bytesPerSample(rtc::TWO_BYTES_PER_SAMPLE),
                   channels(0),
                   samplesPerSec(0),
                   buffer(NULL),
                   renderTimeMs(0),
                   avsync_type(0),
  };
</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FAudioFrame {

	GENERATED_BODY()
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AudioFrame")
	EAUDIO_FRAME_TYPE type;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AudioFrame")
	int samplesPerChannel;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AudioFrame")
	EBYTES_PER_SAMPLE bytesPerSample;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AudioFrame")
	int channels;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AudioFrame")
	int samplesPerSec;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AudioFrame")
	int64 buffer;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AudioFrame")
	int64 renderTimeMs;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|AudioFrame")
	int avsync_type;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class AudioFrame {
  type?: AudioFrameType;
  samplesPerChannel?: number;
  bytesPerSample?: BytesPerSample;
  channels?: number;
  samplesPerSec?: number;
  buffer?: Uint8Array;
  renderTimeMs?: number;
  avsync_type?: number;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class AudioFrame
    {
        public AudioFrame()
        {
            type = AUDIO_FRAME_TYPE.FRAME_TYPE_PCM16;
            samplesPerChannel = 0;
            bytesPerSample = BYTES_PER_SAMPLE.TWO_BYTES_PER_SAMPLE;
            channels = 0;
            samplesPerSec = 0;
            RawBuffer = new byte[0];
            renderTimeMs = 0;
            avsync_type = 0;
        }

        public AudioFrame(AUDIO_FRAME_TYPE type, int samplesPerChannel, BYTES_PER_SAMPLE bytesPerSample, int channels, int samplesPerSec,
            byte[] buffer, long renderTimeMs, int avsync_type)
        {
            this.type = type;
            this.samplesPerChannel = samplesPerChannel;
            this.bytesPerSample = bytesPerSample;
            this.channels = channels;
            this.samplesPerSec = samplesPerSec;
            this.RawBuffer = buffer;
            this.renderTimeMs = renderTimeMs;
            this.avsync_type = avsync_type;
        }

        public AUDIO_FRAME_TYPE type { set; get; }
        public int samplesPerChannel { set; get; }
        public BYTES_PER_SAMPLE bytesPerSample { set; get; }
        public int channels { set; get; }
        public int samplesPerSec { set; get; }
        public byte[] RawBuffer { set; get; }
        public long renderTimeMs { set; get; }
        public int avsync_type { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class AudioFrame {
  type?: AudioFrameType;
  samplesPerChannel?: number;
  bytesPerSample?: BytesPerSample;
  channels?: number;
  samplesPerSec?: number;
  buffer?: Uint8Array;
  renderTimeMs?: number;
  avsync_type?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class AudioFrame {
  const AudioFrame(
      {this.type,
      this.samplesPerChannel,
      this.bytesPerSample,
      this.channels,
      this.samplesPerSec,
      this.buffer,
      this.renderTimeMs,
      this.avsyncType});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="parameters">
            <title> <text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/> </title>
            <parml>
            <plentry props="bp cpp cs electron flutter rn unity unreal">
                <pt>type</pt>
                <pd>
                    <p>音频帧类型，详见 <xref keyref="AUDIO_FRAME_TYPE"/>。</p>
                </pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">samplesPerChannel</pt>
                <pd>每个声道的采样点数。</pd>
                <pd props="ios">音频帧中每个声道的采样点数。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">bytesPerSample</pt>
                <pd>每个采样点的字节数。对于 PCM 来说，一般使用 16 bit，即两个字节。</pd>
                <pd props="ios">每个采样点的字节数。对于 PCM，此参数通常设置为 16 位（2 字节）。</pd>
            </plentry>
            <plentry>
                <pt><ph props="apple bp cpp cs electron flutter rn unity unreal">channels</ph><ph props="android hmos">channelNums</ph></pt>
                <pd>
                    <p>声道数量(如果是立体声，数据是交叉的)。
                        <ul id="ul_zxz_2wt_r4b">
                    <li>1: 单声道</li>
                    <li>2: 双声道</li>
                    </ul> </p>
                </pd>
            </plentry>
            <plentry props="ios">
                <pt props="apple bp cpp cs electron flutter rn unity unreal">samplesPerSec</pt>
                <pt props="android hmos">sampleRataHz</pt>
                <pd>每声道每秒的采样点数。</pd>
                <pd props="ios">音频帧中每个声道的采样率。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="bp electron flutter native rn unreal">buffer</pt>
                <pt props="cs unity">RawBuffer</pt>
                <pd>
                    <p>声音数据缓存区（如果是立体声，数据是交叉存储的）。</p>
                    <p>缓存区数据大小 <codeph>buffer</codeph> = <codeph>samples</codeph> × <codeph>channels</codeph> × <codeph>bytesPerSample</codeph>。</p>
                </pd>
                <pd props="ios">音频帧的数据缓冲区。当使用立体声通道时，数据缓冲区为交错排列。缓冲区大小计算方式为：<codeph>samplesPerChannel</codeph> × <codeph>channels</codeph> × <codeph>bytesPerSample</codeph>。</pd>
            </plentry>
            <plentry props="apple bp cpp cs electron flutter rn unity unreal">
                <pt props="ios">renderTimeMs</pt>
                <pd>
                    <p>外部音频帧的渲染时间戳。</p>
                    <p>你可以使用该时间戳还原音频帧顺序；在有视频的场景中（包含使用外部视频源的场景），该参数可以用于实现音视频同步。</p>
                </pd>
                <pd props="ios">外部音频帧的时间戳（毫秒）。可用于还原采集音频帧的顺序，并在视频场景中同步音频和视频帧，包括使用外部视频源的场景。</pd>
            </plentry>
            <plentry props="apple bp cpp cs electron flutter rn unity unreal">
                <pt> <ph props="flutter">avsyncType</ph> <ph props="apple">avSyncType</ph> <ph props="bp cpp cs electron rn unity unreal">avsync_type</ph> </pt>
                <pd>保留参数。</pd>
            </plentry>
            <plentry props="android hmos">
                <pt>timestamp</pt>
                <pd>音频帧的时间戳。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">channels</pt>
                <pd props="ios">音频声道数（如果为立体声，数据为交错排列）。
                    <ul>
                        <li>1：单声道。</li>
                        <li>2：立体声。</li>
                        </ul>
                    </pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">presentationMs</pt>
                <pd props="ios"></pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">avSyncType</pt>
                <pd props="ios">预留参数，供未来使用。</pd>
            </plentry>
            <plentry props="ios">
                <pt props="ios">rtpTimestamp</pt>
                <pd props="ios"></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
