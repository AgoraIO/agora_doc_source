<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_configrhythmplayer">
    <title><ph keyref="configRhythmPlayer"/></title>
    <shortdesc id="short"><ph id="shortdesc">配置虚拟节拍器。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="configRhythmPlayer"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int configRhythmPlayer(AgoraRhythmPlayerConfig config);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)configRhythmPlayer:(AgoraRhythmPlayerConfig * _Nullable)config;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int configRhythmPlayer(const AgoraRhythmPlayerConfig&amp; config) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int ConfigRhythmPlayer(const FAgoraRhythmPlayerConfig&amp; config);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract configRhythmPlayer(config: AgoraRhythmPlayerConfig): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int ConfigRhythmPlayer(AgoraRhythmPlayerConfig config);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract configRhythmPlayer(config: AgoraRhythmPlayerConfig): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> configRhythmPlayer(AgoraRhythmPlayerConfig config);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <ul>
            <li>调用 <xref keyref="startRhythmPlayer"/> 后，你可以调用该方法重新配置虚拟节拍器。</li>
            <li>开启虚拟节拍器后，SDK 会从头开始播放指定的音频文件，并根据你在 <xref keyref="AgoraRhythmPlayerConfig"/> 中设置的 <parmname>beatsPerMinute</parmname> 控制每个文件的播放时长。例如，将 <parmname>beatsPerMinute</parmname> 设为 <codeph>60</codeph>，则 SDK 会 1 秒播放 1 个节拍。如果文件时长超过了节拍时长，则 SDK 只播放节拍时长部分的音频。</li>
            <li>虚拟节拍器的声音默认不会发布至远端，如果你希望远端用户听到虚拟节拍器的声音，你可以在调用该方法后，将 <xref keyref="ChannelMediaOptions"/> 中的 <parmname>publishRhythmPlayerTrack</parmname> 设为 <codeph><ph keyref="true"/></codeph>。</li>
            </ul>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>加入频道前后均可调用。</p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>调用限制</title>
            <p>无。</p>
        </section>
        <section id="related" deliveryTarget="details">
            <title>相关回调</title>
            <p>成功调用该方法后，SDK 会在本地触发 <xref keyref="onRhythmPlayerStateChanged"/> 回调，报告虚拟节拍器的状态。</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>config</pt>
                <pd>节拍器配置。详见 <xref keyref="AgoraRhythmPlayerConfig"/>。</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp unity rn cs">
            <li>0: 方法调用成功。</li>
            <li>&lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
    </refbody>
</reference>
