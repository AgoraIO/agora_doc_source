<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_queryscreencapturecapability">
    <title><ph keyref="queryScreenCaptureCapability"/></title>
    <shortdesc id="short"><ph id="shortdesc">查询设备在屏幕共享时支持的最高帧率。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="queryScreenCaptureCapability"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int queryScreenCaptureCapability();</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (AgoraScreenCaptureFrameRateCapability)queryScreenCaptureCapability NS_SWIFT_NAME(queryScreenCaptureCapability());</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">#if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
    virtual int queryScreenCaptureCapability() = 0;
#endif</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int QueryScreenCaptureCapability();</codeblock>
            <codeblock props="electron" outputclass="language-typescript"></codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int QueryScreenCaptureCapability();</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract queryScreenCaptureCapability(): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;int> queryScreenCaptureCapability();</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>自从</dt>
                <dd>v4.2.0</dd>
            </dlentry>
            </dl>
            <p/>
        </section>
        <section id="scenario">
            <title>适用场景</title>
            <p props="cpp unreal bp unity flutter">该方法仅适用于 Android 和 iOS。</p>
            <p>在屏幕共享场景下，如果你想启用高帧率（如 60 fps）、但不确定设备是否支持时，可以先调用该方法查询设备支持的最高帧率。如果设备不支持高帧率，你可以在开启屏幕共享时适当调低屏幕共享流的帧率，以确保共享场景的效果符合预期。</p>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <ul props="apple"><li>方法调用成功时，返回设备支持的最高帧率。详见 <apiname keyref="SCREEN_CAPTURE_FRAMERATE_CAPABILITY"/>。</li>
                <li>方法调用失败时，返回 <apiname keyref="NULL"/>。</li></ul>
                <ul props="cpp unreal bp android unity rn flutter cs">
                    <li><ph>方法调用成功时，返回设备支持的最高帧率。</ph><ph props="cpp unreal unity rn flutter cs">详见 <apiname keyref="SCREEN_CAPTURE_FRAMERATE_CAPABILITY"/>。</ph>
                    <ul props="android bp">
                    <li>0：最高支持 15 fps。</li>
                    <li>1：最高支持 30 fps。</li>
                    <li>2：最高支持 60 fps。</li></ul></li>
                    <li>&lt;0：方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li></ul>
        </section>
    </refbody>
</reference>
