<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onlocalvideostatechanged">
    <title> <ph keyref="onLocalVideoStateChanged"/> </title>
    <shortdesc id="short"> <ph id="shortdesc">本地视频流状态发生变化时触发的回调。</ph> </shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onLocalVideoStateChanged"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onLocalVideoStateChanged(Constants.VideoSourceType source, int state, int reason) {}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">onLocalVideoStateChanged?:(source: Constants.VideoSourceType, state:Constants.LocalVideoStreamState,reason:Constants.LocalVideoStreamReason) =&gt; void</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine localVideoStateChangedOfState:(AgoraVideoLocalState)state reason:(AgoraLocalVideoStreamReason)reason sourceType:(AgoraVideoSourceType)sourceType NS_SWIFT_NAME(rtcEngine(_:localVideoStateChangedOf:reason:sourceType:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual void onLocalVideoStateChanged(VIDEO_SOURCE_TYPE source, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_REASON reason)</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintNativeEvent, Category = "Agora|Event")
	void OnLocalVideoStateChanged(EVIDEO_SOURCE_TYPE source, ELOCAL_VIDEO_STREAM_STATE state, ELOCAL_VIDEO_STREAM_REASON reason);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">onLocalVideoStateChanged?(
    source: VideoSourceType,
    state: LocalVideoStreamState,
    reason: LocalVideoStreamReason
  ): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual void OnLocalVideoStateChanged(VIDEO_SOURCE_TYPE source, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_REASON reason)</codeblock>
            <codeblock props="rn" outputclass="language-typescript">onLocalVideoStateChanged?(
    source: VideoSourceType,
    state: LocalVideoStreamState,
    reason: LocalVideoStreamReason
  ): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(VideoSourceType source, LocalVideoStreamState state,
    LocalVideoStreamReason reason)? onLocalVideoStateChanged;;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p id="desc1"></p>
            <note type="attention" props="cpp"><ul>
                        <li>视频帧重复检测仅适用于分辨率大于 200 × 200、帧率大于等于 10 fps 且码率小于 20 Kbps 的视频帧。</li>
                        <li>通常情况下，如果视频采集出现异常，可以通过该回调中的 <codeph>reason</codeph> 参数排查问题。但在部分设备上，采集异常（如卡顿）时，Android 系统不会抛出任何错误回调，SDK 无法上报本地视频状态变化的原因。此时，你可以通过以下方式判断是否未采集到视频帧：该回调上报的 <xref keyref="State"/> 为 <ph keyref="LOCAL_VIDEO_STREAM_STATE_CAPTURING"/> 或 <ph keyref="LOCAL_VIDEO_STREAM_STATE_ENCODING"/>，且 <xref keyref="onLocalVideoStats"/> 回调中的 <codeph>captureFrameRate</codeph> 为 0。</li>
                        </ul>
                    </note>
            <note type="attention" props="apple">请注意，视频帧重复检测仅适用于分辨率大于 200 × 200、帧率大于等于 10 fps 且码率小于 20 Kbps 的视频帧。

通常情况下，如果视频采集出现异常，可以通过此回调中的 <codeph>reason</codeph> 参数排查问题。但在某些设备上，采集出现问题（如卡顿）时，Android 系统不会抛出任何错误回调，因此 SDK 无法上报本地视频状态变化的原因。此时，你可以通过以下方式判断是否未采集到视频帧：此回调上报的 <xref keyref="State"/> 为 <ph keyref="AgoraVideoLocalStateCapturing"/> 或 <ph keyref="AgoraVideoLocalStateEncoding"/>，且 <xref keyref="onLocalVideoStats"/> 回调中的 <codeph>captureFrameRate</codeph> 为 0。</note>
            <note type="attention" props="android">注意：视频帧重复检测仅适用于分辨率大于 200 × 200、帧率大于等于 10 fps 且码率小于 20 Kbps 的视频帧。
通常情况下，如果视频采集出现异常，可通过该回调中的 <codeph>reason</codeph> 参数排查问题。但在部分设备上，若采集出现问题（如卡顿），Android 系统不会抛出任何错误回调，SDK 也无法上报本地视频状态变化的原因。此时可通过以下方式判断是否未采集到视频帧：该回调上报的 <xref keyref="State"/> 为 <ph keyref="LOCAL_VIDEO_STREAM_STATE_CAPTURING"/> 或 <ph keyref="LOCAL_VIDEO_STREAM_STATE_ENCODING"/>，且 <xref keyref="onLocalVideoStats"/> 回调中的 <codeph>captureFrameRate</codeph> 为 0。</note>
            </section>
        <section id="scenario" deliveryTarget="details">
            <title>适用场景</title>
            <p>你可以通过该回调及时了解本地视频流的状态变化，并根据状态改变的原因采取相应的措施，更好地管理和调试视频流相关的问题。</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>触发时机</title>
            <ul><li>SDK 会在如下情况触发该回调，且 <parmname>state</parmname> 为 <ph keyref="LOCAL_VIDEO_STREAM_STATE_FAILED"/>，<parmname>reason</parmname> 为 <codeph><ph keyref="LOCAL_VIDEO_STREAM_REASON_CAPTURE_FAILURE"/></codeph>：
                    <ul>
                    <li props="apple cpp framework">应用退到后台，系统回收摄像头。</li>
                    <li props="android bp cpp flutter rn unity unreal">Android 9 及以上版本，App 切后台一段时间后，系统会收回相机权限。</li>
                    <li props="android bp cpp flutter rn unity unreal">Android 6 及以上版本，如果相机被第三方应用占用一段时间后释放，则 SDK 会触发该回调，并报告 <apiname keyref="onLocalVideoStateChanged"/>(<codeph><ph keyref="LOCAL_VIDEO_STREAM_STATE_CAPTURING"/>，<ph keyref="LOCAL_VIDEO_STREAM_REASON_OK"/></codeph>) 回调。</li>
                    <li>摄像头正常启动，但连续 4 秒都没有输出采集的视频。</li></ul></li>
                <li>当摄像头输出采集的视频帧时，如果 SDK 检测到连续 15 个重复的视频帧，会触发该回调，且 <parmname>state</parmname> 为 <apiname keyref="LOCAL_VIDEO_STREAM_STATE_CAPTURING"/>，<parmname>reason</parmname> 为 <apiname keyref="LOCAL_VIDEO_STREAM_REASON_CAPTURE_FAILURE"/>。
                <note><ul><li>帧重复检测仅针对分辨率大于 200 × 200、帧率大于等于 10 fps、码率小于 20 Kbps 的视频帧。</li>
                <li>如果视频采集出现异常，正常情况下可以通过该回调的 <codeph>reason</codeph> 参数来排查问题。但在部分设备上，采集出现问题时（如卡死） Android 系统不会抛出任何错误回调，因此 SDK 无法报告本地视频状态改变的原因，此时你可以通过下列方式来判断采集是否无帧：该回调报告 <codeph>state</codeph> 为 <codeph><ph keyref="LOCAL_VIDEO_STREAM_STATE_CAPTURING"/></codeph> 或 <codeph><ph keyref="LOCAL_VIDEO_STREAM_STATE_ENCODING"/></codeph>，且 <xref keyref="onLocalVideoStats"/> 回调的 <codeph>captureFrameRate</codeph> 为 0。</li></ul></note></li></ul>
        </section>
        <section id="parameters">
            <title><ph keyref="callback-section-title"/></title>
            <parml>
            <plentry conkeyref="onJoinChannelSuccess/engine" props="apple">
                <pt/>
                <pd/>
            </plentry>
            <plentry id="source">
                <pt props="apple">sourceType</pt>
                <pt props="android bp cpp cs electron flutter hmos rn unity unreal">source</pt>
                <pd>视频源的类型。详见 <xref keyref="VIDEO_SOURCE_TYPE"/>。</pd>
            </plentry>
            <plentry>
                <pt>state</pt>
                <pd props="bp cs electron flutter mac rn unity unreal">
                    <p props="apple bp cpp cs electron flutter hmos rn unity unreal">本地视频状态，详见 <xref keyref="LOCAL_VIDEO_STREAM_STATE"/>。</p>
                    <p props="android">
                    <ul>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_STATE_STOPPED"/> (0): 本地视频默认初始状态。</li>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_STATE_CAPTURING"/> (1): 本地视频采集设备启动成功。</li>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_STATE_ENCODING"/> (2): 本地视频首帧编码成功。</li>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_STATE_FAILED"/> (3): 本地视频启动失败。</li>
                    </ul> </p>
                </pd>
            <pd props="android"><ul>
                        <li><codeph>LOCAL_VIDEO_STREAM_STATE_STOPPED (0)</codeph>：本地视频处于初始状态。</li>
                        <li><codeph>LOCAL_VIDEO_STREAM_STATE_CAPTURING (1)</codeph>：本地视频采集设备启动成功。</li>
                        <li><codeph>LOCAL_VIDEO_STREAM_STATE_ENCODING (2)</codeph>：首帧本地视频编码成功。</li>
                        <li><codeph>LOCAL_VIDEO_STREAM_STATE_FAILED (3)</codeph>：本地视频启动失败。</li>
                        </ul>
                    </pd>
                <pd props="ios">本地视频的状态，详见 <xref keyref="LOCAL_VIDEO_STREAM_STATE"/>。</pd>
                <pd props="cpp">本地视频状态，详见 <xref keyref="LOCAL_VIDEO_STREAM_STATE"/>。</pd>
                </plentry>
            <plentry>
                <pt>reason</pt>
                <pd props="bp cs electron flutter mac rn unity unreal">
                    <p props="apple bp cpp cs electron flutter hmos rn unity unreal">本地视频状态改变原因，详见 <xref keyref="LOCAL_VIDEO_STREAM_REASON"/>。</p>
                    <p props="android">
                    <ul>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_REASON_OK"/> (0): 本地视频状态正常。</li>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_REASON_FAILURE"/> (1): 出错原因不明确。</li>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_BUSY"/> (3): 本地视频采集设备正在使用中。请提示用户检查摄像头是否被其他 App 占用，或者尝试重新加入频道。</li>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_REASON_CAPTURE_FAILURE"/> (4): 本地视频采集失败。请提示用户检查视频采集设备是否正常工作，检查摄像头是否被其他 App 占用，或者尝试重新加入频道。</li>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_REASON_CODEC_NOT_SUPPORT"/> (5)：本地视频编码失败。</li>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_NOT_FOUND"/> (8)：找不到本地视频采集设备。需检查摄像头是否与设备正常连接、摄像头是否正常工作，或者尝试重新加入频道。</li>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_INTERRUPT"/> (14)：视频采集中断。可能的原因是：<ul>
                        <li>摄像头被其他 App 占用。请提示用户检查摄像头是否被其他 App 占用。</li>
                        <li>设备已锁屏，或当前 App 已被切换到后台。可以使用前台服务通知操作系统，确保 App 在切换到后台时仍可采集视频。<ph props="cn">详见<xref keyref="android-background"/>。</ph></li>
                    </ul></li>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_FATAL_ERROR"/> (15)：视频采集设备出错。请提示用户关闭并重新启动摄像头以恢复功能，如果该操作不能解决问题，请检查摄像头是否出现硬件故障。</li>
                    <li><ph keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_FAILURE"/> (21)：当前采集的窗口无数据。</li>
                    </ul> </p>
                </pd>
            <pd props="android"><ul>
                        <li><codeph>LOCAL_VIDEO_STREAM_REASON_OK (0)</codeph>：本地视频状态正常。</li>
                        <li><codeph>LOCAL_VIDEO_STREAM_REASON_FAILURE (1)</codeph>：本地视频失败，未指定原因。</li>
                        <li><codeph>LOCAL_VIDEO_STREAM_REASON_DEVICE_BUSY (3)</codeph>：本地视频采集设备被占用。提示用户检查摄像头是否被其他应用占用，或尝试重新加入频道。</li>
                        <li><codeph>LOCAL_VIDEO_STREAM_REASON_CAPTURE_FAILURE (4)</codeph>：本地视频采集失败。提示用户检查视频采集设备是否正常工作，摄像头是否被其他应用占用，或尝试重新加入频道。</li>
                        <li><codeph>LOCAL_VIDEO_STREAM_REASON_CODEC_NOT_SUPPORT (5)</codeph>：本地视频编码失败。</li>
                        <li><codeph>LOCAL_VIDEO_STREAM_REASON_DEVICE_NOT_FOUND (8)</codeph>：未找到本地视频采集设备。提示用户检查摄像头是否正确连接或是否正常工作，然后重新加入频道。</li>
                        <li><codeph>LOCAL_VIDEO_STREAM_REASON_DEVICE_INTERRUPT (14)</codeph>：视频采集中断。可能原因包括：<ul>
                            <li>摄像头被其他应用占用。提示用户检查摄像头是否被其他应用占用。</li>
                            <li>设备被锁屏，或当前应用被切换到后台。可使用前台服务通知操作系统，确保应用切换到后台后仍可采集视频。</li>
                            </ul>
                        </li>
                        <li><codeph>LOCAL_VIDEO_STREAM_REASON_DEVICE_FATAL_ERROR (15)</codeph>：视频采集设备出现错误。提示用户关闭并重启摄像头以恢复功能。如果该操作无效，请检查摄像头是否存在硬件故障。</li>
                        <li><codeph>LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_FAILURE (21)</codeph>：当前被采集的窗口无数据。</li>
                        </ul>
                    </pd>
                <pd props="cpp ios">本地视频状态变化的原因，详见 <xref keyref="LOCAL_VIDEO_STREAM_REASON"/>。</pd>
                </plentry>
            <plentry props="android cpp ios">
                <pt props="android cpp ios">source</pt>
                <pd props="android">视频源的类型。详见 <xref keyref="VIDEO_SOURCE_TYPE"/>。</pd>
                <pd props="ios">视频源的类型，详见 <xref keyref="VIDEO_SOURCE_TYPE"/>。</pd>
                <pd props="cpp">视频源类型，详见 <xref keyref="VIDEO_SOURCE_TYPE"/>。</pd>
                </plentry>
            <plentry props="ios">
                <pt props="ios">engine</pt>
                <pd props="ios">输入参数，<xref keyref="IRtcEngine"/> 对象。详见 <xref keyref="IRtcEngine"/>。</pd>
                </plentry>
        </parml> </section>
    </refbody>
</reference>
