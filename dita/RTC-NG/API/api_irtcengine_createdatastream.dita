<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_createdatastream">
    <title><ph keyref="createDataStream1" /></title>
    <shortdesc id="short"><ph id="shortdesc">创建数据流。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="createDataStream1" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int createDataStream(boolean reliable, boolean ordered);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)createDataStream:(NSInteger * _Nonnull)streamId
               reliable:(BOOL)reliable
                ordered:(BOOL)ordered;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int createDataStream(int* streamId, bool reliable, bool ordered) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int CreateDataStream(ref int streamId, bool reliable, bool ordered);</codeblock>
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart" />
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p id="desc">你可以调用该方法创建数据流并提高数据传输的可靠性和有序性。</p>
        </section>
        <section id="timing" deliveryTarget="details" conkeyref="createDataStream2/timing"/> 
        <section id="restriction" deliveryTarget="details" conkeyref="createDataStream2/restriction"/>
        <section id="related" deliveryTarget="details">
            <title>相关回调</title>
            <p>将 <parmname>reliable</parmname> 设置为 <codeph><ph keyref="true" /></codeph> 后，如果接收方 5 秒没有收到发送方所发送的数据，会触发 <xref keyref="onStreamMessageError" /> 回调并获得相应报错信息。</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>参数</title>
            <parml>
            <plentry props="cpp unreal ios mac unity cs" conkeyref="createDataStream2/streamId">
                <pt />
                <pd />
            </plentry>
            <plentry id="reliable">
                <pt>reliable</pt>
                <pd>
                    <p>是否保证数据可靠性，即接收方是否需要在数据发送后的 5 秒内接收：
                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>: 接收方 5 秒内会收到发送方所发送的数据，否则会收到 <apiname keyref="onStreamMessageError" /> 回调并获得相应报错信息。</li>
                    <li><codeph><ph keyref="false" /></codeph>: 接收方不保证收到，就算数据丢失也不会报错。</li>
                    </ul></p>
                    <note type="attention">请确保将 <parmname>reliable</parmname> 和 <parmname>ordered</parmname> 同时设为 <codeph><ph keyref="true"/></codeph> 或同时设为 <codeph><ph keyref="false"/></codeph>。</note>
                </pd>
            </plentry>
            <plentry id="ordered">
                <pt>ordered</pt>
                <pd>
                    <p>是否保证数据有序性，即接收方是否需要收到有序的数据：<ul>
                    <li><codeph><ph keyref="true" /></codeph>: 接收方会按照发送方发送的顺序收到数据包。</li>
                    <li><codeph><ph keyref="false" /></codeph>: 接收方不保证按照发送方发送的顺序收到数据包。</li>
                    </ul></p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values" conkeyref="createDataStream2/return_values" />
    </refbody>
</reference>