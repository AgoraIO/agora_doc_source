<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_createdatastream">
    <title><ph keyref="createDataStream1" /></title>
    <shortdesc id="short"><ph id="shortdesc">创建数据流。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="createDataStream1" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int createDataStream(boolean reliable, boolean ordered);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)createDataStream:(NSInteger * _Nonnull)streamId
               reliable:(BOOL)reliable
                ordered:(BOOL)ordered;</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int createDataStream(int* streamId, bool reliable, bool ordered) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract createDataStream(config: DataStreamConfig): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int CreateDataStream(ref int streamId, bool reliable, bool ordered);</codeblock>
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart">Future&lt;int&gt; createDataStream(DataStreamConfig config);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <p id="desc">在 <xref keyref="IRtcEngine" /> 生命周期内，每个用户最多只能创建 5 个数据流。离开频道时数据流会被销毁，如需使用需要重新创建数据流。</p>
            <note type="attention" id="note">
            <ul>
            <li>该方法需要在加入频道后调用。</li>
            <li>不可将 <parmname>reliable</parmname> 设为 <codeph><ph keyref="true" /></codeph> 且将 <parmname>ordered</parmname> 设为 <codeph><ph keyref="false"/></codeph>。</li>
            </ul> </note> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry props="cpp unreal bp ios mac unity cs" conkeyref="createDataStream2/streamId">
                <pt />
                <pd />
            </plentry>
            <plentry>
                <pt>reliable</pt>
                <pd>
                    <p>该数据流是否可靠：

                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>: 接收方 5 秒内会收到发送方所发送的数据，否则会收到 <xref keyref="onStreamMessageError" /> 回调并获得相应报错信息。</li>
                    <li><codeph><ph keyref="false" /></codeph>: 接收方不保证收到，就算数据丢失也不会报错。</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry id="ordered">
                <pt>ordered</pt>
                <pd>
                    <p>该数据流是否有序：

                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>: 接收方会按照发送方发送的顺序收到数据包。</li>
                    <li><codeph><ph keyref="false" /></codeph>: 接收方不保证按照发送方发送的顺序收到数据包。</li>
                    </ul></p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values" conkeyref="createDataStream2/return_values" />
    </refbody>
</reference>