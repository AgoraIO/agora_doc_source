<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_logconfig">
    <title><ph keyref="LogConfig" /></title>
    <shortdesc id="short"><ph id="shortdesc">SDK 日志文件的配置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static class LogConfig {
  public String filePath;
  public int fileSizeInKB;
  public int level = Constants.LogLevel.getValue(Constants.LogLevel.LOG_LEVEL_INFO);
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraLogConfig: NSObject
@property (copy, nonatomic) NSString * _Nullable filePath;
@property (assign, nonatomic) NSInteger fileSizeInKB;
@property (assign, nonatomic) AgoraLogLevel level;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct LogConfig
{
  const char* filePath;
  uint32_t fileSizeInKB;
  LOG_LEVEL level;
  LogConfig() : filePath(NULL), fileSizeInKB(DEFAULT_LOG_SIZE_IN_KB), level(OPTIONAL_LOG_LEVEL_SPECIFIER LOG_LEVEL_INFO) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class LogConfig {
  
  filePath?: string;
  
  fileSizeInKB?: number;
  
  level?: LogLevel;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class LogConfig
    {
        public LogConfig()
        {
            filePath = "";
            fileSizeInKB = 0;
            level = LOG_LEVEL.LOG_LEVEL_INFO;
        }

        public LogConfig(string filePath, uint fileSize = 1024, LOG_LEVEL level = LOG_LEVEL.LOG_LEVEL_INFO)
        {
            this.filePath = filePath;
            this.fileSizeInKB = 0;
            this.level = level;
        }
        public string filePath { set; get; }
        public uint fileSizeInKB { set; get; }
        public LOG_LEVEL level { set; get; }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class LogConfig {
  
  filePath?: string;
  
  fileSizeInKB?: number;
  
  level?: LogLevel;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class LogConfig {
  const LogConfig({this.filePath, this.fileSizeInKB, this.level});

  @JsonKey(name: 'filePath')
  final String? filePath;
  @JsonKey(name: 'fileSizeInKB')
  final int? fileSizeInKB;
  @JsonKey(name: 'level')
  final LogLevel? level;
  factory LogConfig.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$LogConfigFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$LogConfigToJson(this);
}</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>filePath</pt>
                <pd>
                    <p>日志文件的完整路径。请确保你指定的目录存在且可写。你可以通过该参数修改日志文件名。</p>
                    <p props="cpp unity electron rn">默认路径为：



                    <ul>
                    <li props="cpp unity rn flutter">Android：<filepath id="android-path">/storage/emulated/0/Android/data/&lt;packagename&gt;/files/agorasdk.log</filepath>。</li>
                    <li props="cpp unity rn flutter">iOS：<filepath id="ios-path">App Sandbox/Library/caches/agorasdk.log</filepath>。</li>
                    <li props="cpp unity electron flutter">macOS：
                        <ul id="mac-path">
                        <li>开启沙盒: <filepath>App Sandbox/Library/Logs/agorasdk.log</filepath>，例如 <filepath>/Users/&lt;username&gt;/Library/Containers/&lt;AppBundleIdentifier&gt;/Data/Library/Logs/agorasdk.log</filepath>。</li>
                        <li>关闭沙盒: <filepath>～/Library/Logs/agorasdk.log</filepath></li>
                        </ul></li>
                    <li props="cpp unity electron flutter">Windows：<filepath>C:\Users\&lt;user_name&gt;\AppData\Local\Agora\&lt;process_name&gt;\agorasdk.log</filepath>。</li>
                    </ul></p>
                    <p props="android">默认路径为 <filepath>/storage/emulated/0/Android/data/&lt;packagename&gt;/files/agorasdk.log</filepath>。</p>
                    <p props="ios">默认路径为 <filepath>AppSandbox/Library/caches/agorasdk.log</filepath>。</p>
                    <p props="mac">默认路径为：

                    <ul>
                    <li>开启沙盒: <filepath>AppSandbox/Library/Logs/agorasdk.log</filepath>，例如 <filepath>/Users/&lt;username&gt;/Library/Containers/&lt;AppBundleIdentifier&gt;/Data/Library/Logs/agorasdk.log</filepath>。</li>
                    <li>关闭沙盒: <filepath>～/Library/Logs/agorasdk.log</filepath>
                    </li>
                    </ul> </p>
                </pd>
            </plentry>
            <plentry>
                <pt>fileSizeInKB</pt>
                <pd>单个 <codeph>agorasdk.log</codeph> 日志文件的大小，单位为 KB，取值范围为 [128,1024]，默认值为 1,024 KB。 如果你将 <codeph>fileSizeInKByte</codeph> 设为小于 128 KB，SDK 会自动调整到 128 KB；如果你将 <codeph>fileSizeInKByte</codeph> 设为大于 1,024 KB，SDK 会自动调整到 1,024 KB。</pd>
                <pd>
                    <note id="note_vwq_yfm_kqb" type="attention">
                    <p>该方法仅用于设置 <codeph>agorasdk.log</codeph> 文件的大小，对 <codeph>agoraapi.log</codeph> 不生效。</p>
                    </note> </pd>
            </plentry>
            <plentry>
                <pt>level</pt>
                <pd>
                    <p>SDK 的日志输出等级，详见 <xref keyref="LOG_LEVEL" />。</p>
                    <p>例如，如果你选择 WARN 级别，就可以看到在 FATAL、ERROR 和 WARN 级别上的所有日志信息。</p>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>