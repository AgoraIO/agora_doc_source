<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_recorderstreaminfo">
    <title><ph keyref="RecorderStreamInfo"/></title>
    <shortdesc id="short"><ph id="shortdesc">包含录制媒体流的相关信息。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class RecorderStreamInfo {
  public int uid;
  public String channelId;
  public int recorderStreamType;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">export class RecorderStreamInfo {
  
  public uid: number = 0;
  
  public channelId: string;
  public constructor() {
    this.uid = 0;
    this.channelId = "";
  }
  public toString(): string {
    return "channelId=" + this.channelId;
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRecorderStreamInfo: NSObject

@property (nonatomic, copy) NSString *_Nonnull channelId;
@property (nonatomic, nonatomic) NSUInteger uid;

@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct RecorderStreamInfo {
    const char* channelId;
    uid_t uid;
    RecorderStreamInfo() : channelId(NULL), uid(0) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FRecorderStreamInfo {

	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|RecorderStreamInfo")
	FString channelId;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|RecorderStreamInfo")
	int64 uid;

};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class RecorderStreamInfo {
  channelId?: string;
  uid?: number;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class RecorderStreamInfo
    {
        public string channelId;
        public uint uid;

    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class RecorderStreamInfo {
  channelId?: string;
  uid?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RecorderStreamInfo {
  const RecorderStreamInfo({this.channelId, this.uid});

  @JsonKey(name: 'channelId')
  final String? channelId;

  @JsonKey(name: 'uid')
  final int? uid;

  factory RecorderStreamInfo.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;
      _$RecorderStreamInfoFromJson(json);

  Map&amp;lt;String, dynamic&amp;gt; toJson() =&amp;gt; _$RecorderStreamInfoToJson(this);
}</codeblock> </p>
        </section>
        <section id="detailed_desc">
            </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>channelId</pt>
                <pd>需录制的频道名称。</pd>
            </plentry>
            <plentry>
                <pt>uid</pt>
                <pd>需录制的用户 ID。</pd>
            </plentry>
            <plentry props="android">
                <pt props="android">recorderStreamType</pt>
                <pd props="android">录制器实例的流类型，当前支持：
                    <ul>
                        <li>0：频道内的流（RTC 频道）。</li>
                        <li>1：频道外的流。</li>
                        </ul>
                    </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
