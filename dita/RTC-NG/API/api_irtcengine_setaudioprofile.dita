<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setaudioprofile">
    <title><ph keyref="setAudioProfile" /></title>
    <shortdesc id="short"><ph id="shortdesc">设置音频编码属性和音频场景。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setAudioProfile" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setAudioProfile(int profile, int scenario);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioProfile:(AgoraAudioProfile)profile scenario:(AgoraAudioScenario)scenario;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetAudioProfile(EAUDIO_PROFILE_TYPE profile = EAUDIO_PROFILE_TYPE::AUDIO_PROFILE_DEFAULT, EAUDIO_SCENARIO_TYPE scenario = EAUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_DEFAULT);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setAudioProfile(
    profile: AudioProfileType,
    scenario?: AudioScenarioType
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setAudioProfile(
    profile: AudioProfileType,
    scenario?: AudioScenarioType
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setAudioProfile(
    {required AudioProfileType profile,
    AudioScenarioType scenario = AudioScenarioType.audioScenarioDefault});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="deprecated">
            <dlentry props="native unreal unity cs">
                <dt>弃用：</dt>
                <dd>此方法已废弃，如需设置音频编码属性，请改用 <xref keyref="setAudioProfile2" />；如需设置音频场景，请改用 <xref keyref="setAudioScenario" />。</dd>
            </dlentry>
            </dl>
        </section>
        <section id="scenario" deliveryTarget="details">
            <title>适用场景</title>
            <p>该方法适用于各种音频场景，你可以按需选择。例如，在音乐教学等高音质需求的场景中，建议将 <parmname>profile</parmname> 设置为 <codeph><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY" />(4)</codeph>，<parmname>scenario</parmname> 设置为 <codeph><ph keyref="AUDIO_SCENARIO_GAME_STREAMING" />(3)</codeph>。</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>调用时机</title>
            <p>该方法在加入频道前后均可调用。</p>
        </section>        
        <section id="restriction" deliveryTarget="details" props="ios cpp unreal bp flutter rn">
            <title>调用限制</title>
            <p id="route">由于 iOS 系统限制，部分音频路由在通话音量模式下无法识别。因此，如需使用外接声卡，建议将音频应用场景设置为高音质场景 <codeph><ph keyref="AUDIO_SCENARIO_GAME_STREAMING" />(3)</codeph>。在这种场景下，SDK 会切换到媒体音量规避该问题。</p>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>profile</pt>
                <pd>
                    <p id="profile"><ph>音频编码属性，包含采样率、码率、编码模式和声道数。</ph><ph props="apple cpp framework">详见 <xref keyref="AUDIO_PROFILE_TYPE" />。</ph>
                    <ul props="android">
                    <li><codeph><ph keyref="AUDIO_PROFILE_DEFAULT" />(0)</codeph>：默认值。
                        <ul conkeyref="AUDIO_PROFILE_TYPE/default-profile">
                        <li />
                        </ul></li>
                    <li><codeph><ph keyref="AUDIO_PROFILE_SPEECH_STANDARD" />(1)</codeph>：指定 32 kHz 采样率，语音编码，单声道，编码码率最大值为 18 Kbps。</li>
                    <li><codeph><ph keyref="AUDIO_PROFILE_MUSIC_STANDARD" />(2)</codeph>：指定 48 kHz 采样率，音乐编码，单声道，编码码率最大值为 64 Kbps。</li>
                    <li><codeph><ph keyref="AUDIO_PROFILE_MUSIC_STANDARD_STEREO" />(3)</codeph>：指定 48 kHz 采样率，音乐编码，双声道，编码码率最大值为 80 Kbps。</li>
                    <li><codeph><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY" />(4)</codeph>：指定 48 kHz 采样率，音乐编码，单声道，编码码率最大值为 96 Kbps。</li>
                    <li><codeph><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO" />(5)</codeph>：指定 48 kHz 采样率，音乐编码，双声道，编码码率最大值为 128 Kbps。</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>scenario</pt>
                <pd conkeyref="setAudioScenario/scenario-ng"/>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: 方法调用成功。</li>
            <li> &lt; 0: 方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph></li>
            </ul> </section>
        </refbody>
</reference>