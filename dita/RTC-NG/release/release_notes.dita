<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="release_notes">
    <title>v4.4.0</title>
    <body>
        <p>该版本于 2024 年 7 月 x 日发布。</p>
    </body>
    <topic id="level2">
        <title/>
        <topic id="compatibility">
            <title>升级必看</title>
            <body>
                <p>该版本对部分功能的实现方式进行了优化，包括 SDK 的行为变更、API 的改名或删除，为确保项目的正常运行，你需要在升级到该版本后更新 App 中的代码。 
                    <note type="attention" props="native">自 v4.4.0 起，RTC SDK 提供 API 下架说明，包含各版本废弃及删除的 API 信息。详见 <xref href="https://doc.shengwang.cn/api-ref/rtc/android/API/rtc_api_sunset" props="android">API 下架说明</xref><xref href="https://doc.shengwang.cn/api-ref/rtc/android/API/rtc_api_sunset" props="cpp">API 下架说明</xref><xref href="https://doc.shengwang.cn/api-ref/rtc/ios/API/rtc_api_sunset" props="ios">API 下架说明</xref><xref href="https://doc.shengwang.cn/api-ref/rtc/macos/API/rtc_api_sunset" props="mac">API 下架说明</xref>。</note></p>
                <ol>
                    <li props="ios">在 v4.4.0 之前，当你的用户角色为观众时，调用 <apiname keyref="setAudioScenario"/> 将音频场景设为聊天室场景（<apiname keyref="AUDIO_SCENARIO_CHATROOM"/>）会收到申请麦克风权限的弹窗提示。自 v4.4.0 起，SDK 通过 iOS 原生的 API 控制麦克风开关，因此观众角色在聊天室场景下不会再收到申请麦克风权限的弹窗。</li>
                    <li props="apple">改版本将 <parmname>receiveMetadata</parmname> 回调改名为 <apiname keyref="onMetadataReceived"/>，并删除了回调中的 <parmname>data</parmname>、<parmname>timeStamp</parmname> 参数，你可以通过新增的 <parmname>metadata</parmname> 参数来获取 Metadata 的相关信息，包括 <parmname>timeStamp</parmname>（发送数据的时间戳）、<parmname>uid</parmname>（用户 ID）、<parmname>channelId</parmname>（源频道名称）等。</li>
                    <li props="android">改版本删除了 <apiname keyref="onMetadataReceived"/> 回调中的 <parmname>buffer</parmname>、<parmname>uid</parmname>、<parmname>timeStampMs</parmname> 参数，你可以通过新增的 <parmname>metadata</parmname> 参数来获取 Metadata 的相关信息，包括 <parmname>timeStampMs</parmname>（发送数据的时间戳）、<parmname>uid</parmname>（用户 ID）、<parmname>channelId</parmname>（源频道名称）等。</li>
                </ol>
            </body>
        </topic>
        <topic id="newfeature">
            <title>新增特性</title>
            <body>
                <ol>
                    <li props="android ios"><ph><b>Lite SDK</b></ph>
                        <p>自该版本起，声网推出 Lite 版 SDK，该 SDK 中仅包含音视频基础能力、对高阶音视频处理的功能进行部分裁剪，可有效减少集成 SDK 后的 App 体积。</p>
                        <ul>
                        <li>Lite SDK 支持手动集成或三方仓库集成，详见 <xref keyref="resource"/> 和 <xref keyref="quick-start"/>。</li>
                        <li>Lite SDK 包含的动态库信息详见<xref keyref="reduce-app-size"/>。</li>
                        <li>Lite SDK 支持的 API 清单详见 <xref href="https://doc.shengwang.cn/api-ref/rtc/android/API/rtc_lite_api" props="android">Lite SDK API 列表</xref><xref href="https://doc.shengwang.cn/api-ref/rtc/ios/API/rtc_lite_api" props="ios">Lite SDK API 列表</xref>。</li>
                        </ul></li>
                    <li><ph><b>Alpha 透明特效</b></ph>
                        <p>该版本新增 Alpha 透明特效功能，支持在 SDK 采集和自定义采集视频的场景下，在发送端发布视频帧的 Alpha 通道、在接收端对 Alpha 通道进行渲染处理，实现透明礼物特效、接收端自定义主播背景等：</p>
                        <ul>
                        <li><apiname keyref="VideoFrame"/> 和 <apiname keyref="ExternalVideoFrame"/> 中新增 <codeph>alphaBuffer</codeph>：设置 Alpha 通道数据。</li>
                        <li><apiname keyref="ExternalVideoFrame"/> 中新增 <codeph>fillAlphaBuffer</codeph>：对于 BGRA 或 RGBA 格式的视频数据，设置是否自动提取 Alpha 通道数据并填入到 <codeph>alphaBuffer</codeph> 中。</li>
                        <li><apiname keyref="VideoFrame"/> 和 <apiname keyref="ExternalVideoFrame"/> 中中新增 <codeph>alphaStitchMode</codeph>：设置 <codeph>alphaBuffer</codeph> 和视频帧拼接的相对位置。</li>
                        </ul>
                        <p>另外，<apiname keyref="AdvanceOptions"/> 中新增成员 <codeph>encodeAlpha</codeph>，用于设置是否将 Alpha 信息编码并发送到远端。SDK 默认不对 Alpha 信息进行编码发送；如果需要对 Alpha 信息编码发送至远端（例如开启了虚拟背景功能），请显式调用 <apiname keyref="setVideoEncoderConfiguration"/> 设置视频编码属性，并将 <codeph>encodeAlpha</codeph> 设置为 <codeph><ph keyref="true"/></codeph>。</p>
                    </li>
                    <li props="ios android"><ph><b>版权音乐优化</b></ph>
                        <ul>
                            <li>该版本在 <apiname keyref="IMusicPlayer"></apiname> 类下新增 <apiname keyref="setPlayMode"/> 方法，用于设置音乐资源的播放模式。在在线 K 歌房等场景下，你可以根据需求启用伴唱、原唱或导唱模式。</li>
                            <li props="ios">该版本在 <apiname keyref="IMusicContentCenter"/> 类下新增 <apiname keyref="destroyMusicPlayer"/> 方法，用于销毁音乐播放器并释放相应的资源。</li>
                            <li props="android">该版本废弃了 <apiname keyref="IMusicPlayer"></apiname> 类下的 <apiname keyref="destroy_IMusicPlayer"/> 方法。如需销毁音乐播放器，请改用<apiname keyref="IMusicContentCenter"/> 类下新增 <apiname keyref="destroyMusicPlayer"/> 方法。</li>
                        </ul>
                    </li>
                </ol>
            </body>
        </topic>
        <topic id="improvement">
            <title>改进</title>
            <body>
                <ol>
                    <li><ph><b>改进名称</b></ph>
                        <ul>
                        <li><?oxy-placeholder content="用 list 描述"?></li>
                        <li><?oxy-placeholder content="用 list 描述"?></li>
                        </ul></li>
                    <li><ph><b>改进名称</b></ph>
                        <p><?oxy-placeholder content="用段落描述"?></p>
                    </li>
                    <li props="cpp electron unity flutter unreal bp"><ph><b>渲染能力提升 (Windows)</b></ph>
                        <p>Windows 设备上默认启用 DirectX 11 渲染器，可提供高性能、高质量的图形渲染能力。</p>
                    </li>
                    <li><ph><b>其他改进</b></ph>
                        <p>该版本还进行了如下改进：
                        <ul>
                        <li/>
                        <li>优化了传输策略，调用 <apiname keyref="enableInstantMediaRendering"/> 不再对传输链路的安全性产生影响。</li>
                        <li/>
                        <li props="cpp mac electron unity flutter unreal bp"><apiname keyref="onLocalVideoStateChanged"/> 回调中新增 <apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_DISPLAY_DISCONNECTED"/> 枚举，表示进行屏幕采集的显示器已断开连接。(Windows, macOS)</li>
                        <li/>
                        <li props="mac electron unity flutter unreal bp">优化了共享窗口的视频链路，降低了 CPU 占用率。(macOS) </li>
                        <li props="cpp unity flutter electron unreal">优化了屏幕共享场景下的回声消除。</li>
                        <li props="cpp framework">该版本在 <apiname keyref="Metadata"/> 中新增 <parmname>channelId</parmname> 参数，用于获取发送 Metadata 的源频道名称。</li>
                        </ul></p>
                    </li>
                </ol>
            </body>
        </topic>
        <topic id="bugfix">
            <title>问题修复</title>
            <body>
                <p>该版本修复了以下问题：</p>
                <ul>
                    <li props="ios rn unity flutter unreal bp">在实时互动过程中，当多个远端同时加入频道时 App 偶现崩溃。(iOS)</li>
                    <li props="ios rn unity flutter unreal bp">App 切后台一段时间、然后返回前台时，远端视频画面偶现卡住或花屏。(iOS)</li>
                    <li props="android ios unity flutter rn unreal bp">调用 <xref keyref="pushAudioFrame" props="unity flutter rn unreal bp"/><xref keyref="pushAudioFrame2" props="android ios"/> 推送外部音频数据，外部音频渲染的采样率如果不是 SDK 推荐的值时，比如 22050 Hz 和 11025 Hz，声音播放失败。</li>
                </ul>
            </body>
        </topic>
    </topic>
</topic>
