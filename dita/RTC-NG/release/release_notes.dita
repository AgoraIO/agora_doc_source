<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="release_notes">
    <title>v4.3.1</title>
    <body>
        <p>该版本于 2024 年 x 月 x 日发布。</p>
    </body>
    <topic id="level2">
        <title/>
        <topic id="compatibility" props="android">
            <title>升级必看</title>
            <body>
                <p>为确保参数命名的一致性，该版本该版本将 <codeph><xref keyref="joinChannel1"/></codeph> 中的 <codeph>channelName</codeph> 改为 <codeph>channelId</codeph>，将 <codeph>optionalUid</codeph> 改为 <codeph>uid</codeph>。为确保项目的正常运行，你需要在升级到该版本后更新 App 中的代码。</p>
            </body>
        </topic>
        <topic id="newfeature">
            <title>新增特性</title>
            <body>
                <ol>
                    <li props="ios unity flutter rn"><ph><b>隐私清单文件 (iOS)</b></ph>
                        <p>为满足 Apple 对于 App 发布的安全合规要求，SDK 自该版本起新增隐私清单文件 <codeph>PrivacyInfo.xcprivacy</codeph>，其中包含 SDK 中需要访问或使用用户数据的 API 调用说明和 SDK 采集的数据类型说明。</p>
                        <note>如果你需要将集成 v4.3.1 之前的 SDK 版本的 App 发布到苹果应用商店，则需要在 Xcode 工程中手动添加 <codeph>PrivacyInfo.xcprivacy</codeph> 文件。<ph props="cn">详见<xref keyref="privacyinfo"/></ph></note></li>
                    <li props="apple framework"><ph><b>人像锁定 (iOS, macOS)</b></ph>
                        <p>为提升在线会议、秀场、在线教育等场景中的主播演讲效果，该版本新增 <xref keyref="enableCameraCenterStage"/> 方法开启人像锁定功能。该功能可确保主播无论移动与否，始终位于画面中心，以取得良好的演讲效果。 </p>
                        <p>在开启人像锁定前，建议你先调用 <xref keyref="isCameraCenterStageSupported"/> 查询当前设备性能是否支持该功能。支持的设备清单可参考 <xref keyref="enableCameraCenterStage">API 文档</xref>。</p>
                    </li>
                    <li props="ios unity flutter rn"><ph><b>摄像头防抖 (iOS)</b></ph>
                        <p>为改善在移动拍摄、暗光环境拍摄、手持拍摄等场景下的视频画面稳定性，该版本新增摄像头防抖功能。你可以调用 <xref keyref="setCameraStabilizationMode"/> 开启该功能并设置适合的防抖模式，以获得更加稳定、清晰的视频画面。</p>
                    </li>
                    <li props="android ios flutter unity rn"><ph><b>摄像头广角和超广角 (Android, iOS)</b></ph>
                        <p>为了让用户捕捉到更宽阔的视野和更完整的画面内容，该版本新增了对广角和超广角摄像头的支持。你可以先调用 <xref keyref="queryCameraFocalLengthCapability"/> 查询设备支持的焦距能力，然后调用 <xref keyref="setCameraCapturerConfiguration"/> 并将 <codeph>cameraFocalLengthType</codeph> 设置为支持的焦距类型，包括广角、超广角等。</p>
                    </li>
                    <li props="android flutter unity rn"><ph><b>摄像头多路采集 (Android)</b></ph>
                        <p>该版本针对 Android 摄像头采集新增以下功能：

                        <ol>
                        <li>支持第三个和第四个摄像头视频流的采集和发布。
                            <ul>
                            <li props="android">在 <xref keyref="VIDEO_SOURCE_TYPE"/> 中新增 <codeph><apiname keyref="VIDEO_SOURCE_CAMERA_THIRD"/></codeph>(11) 和 <codeph><apiname keyref="VIDEO_SOURCE_CAMERA_FOURTH"/></codeph>(12) 枚举，分别用于指定视频源为第三个和第四个摄像头。此项改动允许你在调用 <xref keyref="startCameraCapture"/> 开启摄像头采集时，指定最多 4 路摄像头采集的视频流。</li>
                            <li props="flutter unity rn"><xref keyref="VIDEO_SOURCE_TYPE"/> 中的 <codeph><apiname keyref="VIDEO_SOURCE_CAMERA_THIRD"/></codeph>(11) 和 <codeph><apiname keyref="VIDEO_SOURCE_CAMERA_FOURTH"/></codeph>(12) 枚举新增对 Android 的支持，分别用于指定视频源为第三个和第四个摄像头。此项改动允许你在调用 <xref keyref="startCameraCapture"/> 开启摄像头采集时，指定最多 4 路摄像头采集的视频流。</li>
                            <li props="android">在 <xref keyref="ChannelMediaOptions"/> 中新增 <codeph>publishThirdCameraTrack</codeph> 和 <codeph>publishFourthCameraTrack</codeph> 成员。调用 <xref keyref="joinChannel2"/> 加入频道时，将这两个成员参数设置为 <codeph><ph keyref="true"/></codeph> 即可在频道内发布第三个和第四个摄像头采集的视频流。</li>
                            <li props="flutter unity rn"><xref keyref="ChannelMediaOptions"/> 中的 <codeph>publishThirdCameraTrack</codeph> 和 <codeph>publishFourthCameraTrack</codeph> 成员新增对 Android 的支持。调用 <xref keyref="joinChannel2"/> 加入频道时，将这两个成员参数设置为 <codeph><ph keyref="true"/></codeph> 即可在频道内发布第三个和第四个摄像头采集的视频流。</li>
                            </ul></li>
                        <li>支持通过摄像头 ID 指定摄像头。
                            <ul props="android">
                            <li>在 <xref keyref="CameraCapturerConfiguration"/> 中新增 <codeph>cameraId</codeph> 成员。对于多摄像头的设备，<codeph>cameraDirection</codeph> 无法识别或访问全部可用摄像头。这种情况下，你可以通过 Android 原生系统 API 获取摄像头 ID，再调用 <xref keyref="startCameraCapture"/> 并传入 <codeph>cameraId</codeph> 指定所需的摄像头。</li>
                            <li>新增 <xref keyref="switchCamera2"/>，支持通过 <codeph>cameraId</codeph> 切换摄像头，允许 App 在运行期间基于可用摄像头的实际情况动态调整摄像头使用。</li>
                            </ul>
                            <p props="flutter unity rn">在 <xref keyref="CameraCapturerConfiguration"/> 中新增 <codeph>cameraId</codeph> 成员。对于多摄像头的设备，<codeph>cameraDirection</codeph> 无法识别或访问全部可用摄像头。这种情况下，你通过系统 API 获取摄像头 ID，再调用 <xref keyref="startCameraCapture"/> 并传入 <codeph>cameraId</codeph> 指定摄像头。</p>
                        </li>
                        </ol> </p>
                    </li>
                    <li><ph><b>数据流加密</b></ph>
                        <p>该版本在 <xref keyref="EncryptionConfig"/> 中新增 <codeph>datastreamEncryptionEnabled</codeph> 成员用于启用数据流加密。你可以在调用 <xref keyref="enableEncryption"/> 开启加密时来进行设置。如果在数据流加密或解密的过程中遇到问题导致失败，你可以通过新增的 <codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_DECRYPTION_FAILURE"/></codeph> 和 <codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_ENCRYPTION_FAILURE"/></codeph> 枚举得知。</p>
                    </li>
                    <li props="android ios"><ph><b>本地视频渲染</b></ph>
                        <p>该版本在 <xref keyref="VideoCanvas"/> 中新增如下成员，以支持更多本地渲染功能。

                        <ul>
                        <li props="android"><codeph>surfaceTexture</codeph>：设置一个 Android 原生的 <codeph>SurfaceTexture</codeph> 对象作为提供视频图像的容器，然后使用 SDK 外部的方法自行实现 OpenGL 中的纹理绘制。</li>
                        <li><codeph>enableAlphaMask</codeph>：可以通过该成员设置接收端是否开启 alpha 遮罩渲染。alpha 遮罩渲染功能可以创建具有透明效果的图像或提取视频中的人像。</li>
                        </ul></p>
                    </li>
                    <li><ph><b>视频小流自适应配置</b></ph>
                        <p>该版本新增视频小流的自适应配置功能，当你调用 <xref keyref="setDualStreamMode2"/> 在发送端设置双流模式并设置视频小流时，SDK 的默认行为如下所示：

                        <ul>
                        <li>将视频小流的默认编码分辨率设为原始视频编码分辨率的 50%。 </li>
                        <li>视频小流的码率根据视频分辨率和帧率自动匹配，无需指定。</li>
                        </ul></p>
                    </li>
                    <li><ph><b>其他</b></ph>
                        <p>
                        <ul>
                        <li>新增 <xref keyref="enableEncryptionEx"/> 方法，用于多频道场景下开启媒体流或数据流加密。</li>
                        <li>新增 <xref keyref="setAudioMixingPlaybackSpeed"/> 方法，用于设置音乐文件的播放速度。</li>
                        <li>新增 <xref keyref="getCallIdEx"/> 方法，用于多频道场景下获取通话 ID。</li>
                        </ul> </p>
                    </li>
                </ol>
            </body>
        </topic>
        <topic id="improvement">
            <title>改进</title>
            <body>
                <ol>
                    <li props="cpp unity flutter electron"><ph><b>屏幕共享游戏场景优化 (Windows) </b></ph>
                        <p>该版本对屏幕共享的游戏场景进行了专项优化，在超高清（4K, 60 fps）游戏场景下提升了性能表现，增强了窗口采集的稳定性，为游戏玩家带来更清晰、流畅、稳定的游戏体验。 </p>
                    </li>
                    <li props="android mac">
                        <p><b>本地视频状态回调优化</b></p>
                        <p props="mac">为方便你了解本地视频状态改变的具体原因，该版本在 <xref keyref="onLocalVideoStateChanged"/> 回调的 <xref keyref="LOCAL_VIDEO_STREAM_REASON"/> 枚举类中新增如下枚举：</p>
                        <p props="android">该版本新增如下枚举，你可以通过 <xref keyref="onLocalVideoStateChanged"/> 回调了解更多本地视频状态发生改变的原因：</p>
                        <ul>
                        <li props="android"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_INTERRUPT"/></codeph> (14)：由于摄像头被其他 App 占用或 App 切后台等原因导致的视频采集中断。</li>
                        <li props="android"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_FATAL_ERROR"/></codeph>  (15)：视频采集设备出错，可能由于摄像头设备故障导致。</li>
                        <li props="mac"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_RECOVER_FROM_MINIMIZED"/></codeph>  (27)：进行屏幕采集的窗口已经从最小化状态恢复正常。</li>
                        </ul> </li>
                    <li props="android"><ph><b>摄像头采集改进</b></ph>
                        <p>优化了摄像头采集的视频处理机制，减少噪点、提高亮度、改善色彩，使采集到的图形更加清晰、明亮和真实。</p>
                    </li>
                    <li props="mac"><ph><b>获取音频设备类型</b></ph>
                        <p>该版本在 <codeph><xref keyref="AgoraRtcDeviceInfo"/></codeph> 中新增 <codeph>deviceTypeName</codeph> 成员，用于获取音频设备的类型，如 built-in、USB、HDMI 等。</p>
                    </li>
                    <li><ph><b>虚拟背景算法优化</b></ph>
                        <p>为了提高纯色背景下开启虚拟背景时人像分割的精确度和稳定性，该版本优化了绿幕分割算法：

                        <ul>
                        <li>支持识别任意纯色背景，不再局限于绿幕。</li>
                        <li>对背景颜色的识别更加准确，并且在分割人像时露出的背景更少。</li>
                        <li>分割后的人像边缘（尤其是手指边缘）更加稳定，显著减少边缘的画面闪动现象。</li>
                        </ul></p>
                    </li>
                    <li props="ios mac"><ph><b>音频自采集优化</b></ph>
                        <p>为提升音频自采集的灵活性，该版本废弃 <xref keyref="pushExternalAudioFrameSampleBuffer1"/> 并新增 <xref keyref="pushExternalAudioFrameSampleBuffer2"/>。相比废弃方法，新增方法中增加了 <codeph>sampleRate</codeph>、<codeph>channels</codeph>、<codeph>trackId</codeph> 参数，支持你通过自定义音频轨道将外部 CMSampleBuffer 音频数据推送到频道内，并支持设置外部音频源的采样率和声道数。</p>
                    </li>
                    <li><ph><b>降低耳返的 CPU 消耗</b></ph>
                        <p>该版本<ph props="apple cpp framework">在 <codeph><apiname keyref="EAR_MONITORING_FILTER_TYPE"/></codeph> 中</ph>新增 <codeph><apiname keyref="EAR_MONITORING_FILTER_REUSE_POST_PROCESSING_FILTER"/></codeph>(1 &lt;&lt;15) 枚举。针对复杂的音效处理场景，你可以指定该选项，复用发送端音效处理后的 Audio filter，从而降低 CPU 的消耗。需要注意的是该选项会导致耳返延迟增加，适用于对耳返延迟不敏感的使用场景。</p>
                    </li>
                    <li><ph><b>其他改进</b></ph>
                        <p>该版本还进行了如下改进：

                        <ul>
                        <li props="ios mac cpp unity flutter rn electron ">优化了非屏幕共享场景的视频编解码策略，节省系统性能开销。(iOS, macOS, Windows)</li>
                        <li props="mac">针对 macOS 14 及以上系统，优化了 <xref keyref="getScreenCaptureSources"/> 的行为。自该版本起，调用该方法返回的可用窗口资源中会自动过滤小组件窗口。(macOS)</li>
                        <li props="android flutter unity rn">提升了本地合图功能的性能和稳定性，并降低了该功能对 CPU 的占用率。(Android)</li>
                        <li props="ios flutter">提升了原始视频帧观测器在处理视频时的稳定性。(iOS) </li>
                        <li>优化了媒体播放器对 WebM 格式视频的处理能力，支持渲染 alpha 通道。</li>
                        <li props="cpp apple framework">在 <xref keyref="AUDIO_EFFECT_PRESET"/> 中新增 <codeph><apiname keyref="ROOM_ACOUSTICS_CHORUS"/></codeph>（合唱音效），可使人声在合唱场景下更具空间立体感。</li>
                        <li props="android">新增 <codeph><apiname keyref="ROOM_ACOUSTICS_CHORUS"/></codeph>（合唱音效），可使人声在合唱场景下更具空间立体感。</li>
                        <li>在 <xref keyref="RemoteAudioStats"/> 中新增 <codeph>e2eDelay</codeph>，用于报告从发送端采集音频起，到接收端开始播放音频时的延时。</li>
                        </ul></p>
                    </li>
                </ol>
            </body>
        </topic>
        <topic id="bugfix">
            <title>问题修复</title>
            <body>
                <p>该版本修复了以下问题：</p>
                <ul>
                    <li>使用媒体播放器播放包含 SEI 数据的媒体流时，SEI 数据的输出与视频渲染不同步。</li>
                    <li props="android">加入频道后调用 <xref keyref="disableAudio"/> 关闭音频模块，音频播放没有立即停止。(Android)</li>
                    <li props="cpp electron unity flutter">屏幕共享场景中，App 调用 <xref keyref="enableLoopbackRecording"/> 开启声卡采集功能采集共享屏幕的音频，本地用户手动禁用本地音频采集设备后，声卡采集的音频发送失败，远端用户听不见共享屏幕的声音。(Windows)</li>
                    <li props="electron">在音视频互动中，如果用户将耳机插入设备并手动将系统音频输出切换为扬声器，之后 App 调用 <xref keyref="setPlaybackDevice"/> 方法指定音频播放设备为耳机，用户移除耳机后，音频输出并未按预期行为切换至扬声器。<ph props="electron"> (macOS)</ph></li>
                    <li props="cpp">用户插拔一次蓝牙或有线耳机，音频状态改变回调 <xref keyref="onAudioDeviceStateChanged"/> 会触发多次。</li>
                    <li props="mac">用户插拔一次蓝牙或有线耳机，音频状态改变回调 <xref keyref="stateChanged"/> 会触发多次。</li>
                    <li props="android unity rn flutter">主播使用部分型号设备在扬声器下进行音视频互动，之后切换 App 进程到后台再切回前台，偶现本地音频采集失败，远端用户听不到主播的声音。(Android)</li>
                    <li props="unity">播放指定用户混音前的音频流时偶现回声。(macOS、Windows)</li>
                    <li props="cpp unity flutter electron">在音视频互动过程中，本地用户调用 <xref keyref="setDevice_IAudioDeviceCollection"/> 设置系统默认播放设备为扬声器后，听远端无声。(Windows)</li>
                    <li props="android unity flutter rn">在 Android 8.0 系统的设备上，启用屏幕共享功能时 App 偶现崩溃。(Android)</li>
                    <li props="cpp unity flutter electron">在共享 Excel 文档窗口时，偶现远端用户看到的画面出现绿屏。(Windows)</li>
                    <li props="android unity flutter rn">使用摄像头采集本地视频场景下，在 App 切后台时已调用 <xref keyref="disableVideo"/> 或 <xref keyref="stopPreview"/> 关闭视频采集，但将 App 再切回前台时，摄像头采集被打开，不符合预期。(Android)</li>
                    <li props="cpp electron">在使用 Intel 显卡的设备上发布视频小流偶现性能回退。(Windows)</li>
                </ul>
            </body>
        </topic>
        <topic id="apichange">
            <title>API 变更</title>
            <body>
                <p><b>新增</b>
                    <ul>
                    <li props="apple flutter unity electron rn"><xref keyref="enableCameraCenterStage"/> (iOS, macOS)</li>
                    <li props="apple flutter unity electron rn"><xref keyref="isCameraCenterStageSupported"/> (iOS, macOS)</li>
                    <li props="ios flutter unity rn"><xref keyref="setCameraStabilizationMode"/> (iOS)</li>
                    <li props="ios flutter unity rn"><xref keyref="CAMERA_STABILIZATION_MODE"/> (iOS)</li>
                        <li props="android"><xref keyref="VideoCanvas"/> 中新增 <codeph>surfaceTexture</codeph> 和 <codeph>enableAlphaMask</codeph></li>
                        <li props="ios"><xref keyref="VideoCanvas"/> 中新增 <codeph>enableAlphaMask</codeph></li>
                        <li props="android mac"><ph><xref keyref="LOCAL_VIDEO_STREAM_REASON"/> 中新增如下枚举：</ph>
                        <ul>
                            <li props="android"><codeph>LOCAL_VIDEO_STREAM_REASON_DEVICE_INTERRUPT</codeph></li>
                            <li props="android"><codeph>LOCAL_VIDEO_STREAM_REASON_DEVICE_FATAL_ERROR</codeph></li>
                            <li props="mac"><codeph><ph keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_RECOVER_FROM_MINIMIZED"/></codeph></li>
                        </ul></li>
                    <li><xref keyref="EncryptionConfig"/> 中新增 <codeph>datastreamEncryptionEnabled</codeph></li>
                    <li props="cpp apple framework"><ph><xref keyref="ENCRYPTION_ERROR_TYPE"/> 中新增如下枚举：</ph>

                        <ul>
                        <li><codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_DECRYPTION_FAILURE"/></codeph></li>
                        <li><codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_ENCRYPTION_FAILURE"/></codeph></li>
                        </ul></li>
                    <li props="android"><codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_DECRYPTION_FAILURE"/></codeph></li>
                    <li props="android"><codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_ENCRYPTION_FAILURE"/></codeph></li>
                    <li props="unity electron flutter"><xref keyref="getDevice2_IAudioDeviceCollection"/><ph> (macOS)</ph></li>
                    <li props="unity electron flutter"><xref keyref="getDefaultDevice2_IAudioDeviceCollection"/><ph> (macOS)</ph></li>
                    <li props="unity electron flutter"><xref keyref="getPlaybackDeviceInfo2"/><ph> (macOS)</ph></li>
                    <li props="unity electron flutter"><xref keyref="getRecordingDeviceInfo2"/><ph> (macOS)</ph></li>
                    <li props="mac"><xref keyref="AgoraRtcDeviceInfo"/> 新增 <codeph>deviceTypeName</codeph></li>
                    <li><xref keyref="RemoteAudioStats"/> 新增 <codeph>e2eDelay</codeph></li>
                    <li props="apple cpp framework"><xref keyref="ERROR_CODE_TYPE"/> 新增 <codeph><apiname keyref="ERR_DATASTREAM_DECRYPTION_FAILED"/></codeph></li>
                    <li props="android"><codeph><apiname keyref="ERR_DATASTREAM_DECRYPTION_FAILED"/></codeph></li>
                    <li props="apple cpp framework"><xref keyref="AUDIO_EFFECT_PRESET"/> 新增 <codeph><apiname keyref="ROOM_ACOUSTICS_CHORUS"/></codeph></li>
                    <li props="android"><codeph><apiname keyref="ROOM_ACOUSTICS_CHORUS"/></codeph></li>
                    <li><xref keyref="getCallIdEx"/></li>
                    <li><xref keyref="enableEncryptionEx"/></li>
                    <li><xref keyref="setAudioMixingPlaybackSpeed"/></li>
                    <li props="android ios flutter unity rn"><xref keyref="queryCameraFocalLengthCapability"/> (Android, iOS)</li>
                    <li props="android ios flutter unity rn"><xref keyref="FocalLengthInfo"/> (Android, iOS)</li>
                    <li props="android ios flutter unity rn"><xref keyref="CAMERA_FOCAL_LENGTH_TYPE"/> (Android, iOS)</li>
                    <li props="android ios flutter unity rn"><xref keyref="CameraCapturerConfiguration"/> 新增成员 <codeph>cameraFocalLengthType</codeph> (Android, iOS)</li>
                    <li props="android"><ph><xref keyref="VIDEO_SOURCE_TYPE"/> 新增以下枚举：</ph>
                        <ul>
                        <li><codeph><apiname keyref="VIDEO_SOURCE_CAMERA_THIRD"/></codeph>(11)</li>
                        <li><codeph><apiname keyref="VIDEO_SOURCE_CAMERA_FOURTH"/></codeph>(12)</li>
                        </ul></li>
                    <li props="android"><ph><xref keyref="ChannelMediaOptions"/> 新增以下成员：</ph>
                        <ul>
                        <li><codeph>publishThirdCameraTrack</codeph></li>
                        <li><codeph>publishFourthCameraTrack</codeph></li>
                        </ul></li>
                    <li props="android flutter unity rn"><xref keyref="CameraCapturerConfiguration"/> 新增成员 <codeph>cameraId</codeph> (Android)</li>
                    <li props="android"><xref keyref="CAMERA_DIRECTION"/> 中新增 <codeph>CAMERA_EXTRA</codeph>(2)</li>
                    <li props="android"><xref keyref="switchCamera2"/></li>
                    <li><xref keyref="EAR_MONITORING_FILTER_TYPE"/> 新增枚举 <codeph><apiname keyref="EAR_MONITORING_FILTER_BUILT_IN_AUDIO_FILTERS"/></codeph>(1 &lt;&lt;15)</li>
                    <li props="ios mac"><xref keyref="pushExternalAudioFrameSampleBuffer2"/></li>
                    </ul></p>
                <p props="ios mac"><b>废弃</b>
                    <ul>
                    <li><xref keyref="pushExternalAudioFrameSampleBuffer1"/></li>
                    </ul></p>
            </body>
        </topic>
    </topic>
</topic>
