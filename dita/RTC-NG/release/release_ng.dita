<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="release_ng">
    <title/>
    <topic id="level2">
        <title>v4.2.2</title>
        <body><p>该版本于 2023 年 7 月 xx 日发布。</p></body>
        <topic id="level3">
            <title/>
            <topic id="compatibility" props="android ios unity rn unreal bp flutter">
                <title>升级必看</title>
                <body>
                    <p><b>版权音乐</b></p>
                    <p>该版本废弃了 <xref keyref="IMusicContentCenter"/> 类下的 <xref keyref="preload"/> 方法并新增 <xref keyref="preload2"/> 方法。如果你使用了 <xref keyref="preload"/> 方法实现预加载音乐资源，请在升级到该版本后更新 app 代码。</p>
                </body>
            </topic>
            <topic id="newfeature">
                <title>新增特性</title>
                <body>
                    <ol>
                        <li><b>通配 Token</b>
                            <p>该版本新增通配 Token。生成 Token 时，在用户 ID（<parmname>uid</parmname>）不为 0 的情况下，声网支持你将频道名（<parmname>channelName</parmname>）设为通配符，从而生成可以加入任何频道的通配 Token。在需要频繁切换频道及多频道场景下，使用通配 Token 可以避免 Token 的重复配置，有助于提升开发效率，减少你的 Token 服务端的压力。详见《使用通配 Token》。
                            <note type="note">声网 4.x SDK 均支持使用通配 Token。</note></p>
                        </li>
                        <li><b>预加载频道</b>
                            <p>该版本新增 <xref keyref="preloadChannel"/> 和 <xref keyref="preloadChannel2"/> 方法，支持角色为观众的用户在加入频道前预先加载一个或多个频道。该方法调用成功后可以减少观众加入频道的时间，从而缩短观众听到主播首帧音频以及看到首帧画面的耗时，提升观众端的音视频体验。</p>
                            <p>在同时预加载多个频道时，为避免观众在切换不同频道时需多次申请 Token 从而导致切换频道时间增长，因此声网推荐使用通配 Token 来减少你的业务服务端获取 Token 导致的耗时，进一步加快切换频道的速度，详见《使用通配 Token》。</p>
                        </li>
                        <li><b>自定义视频画布背景颜色</b>
                            <p>该版本在 <codeph><apiname keyref="VideoCanvas"/></codeph> 中增加了 <codeph>backgroundColor</codeph> 成员，支持你在设置本地或远端视频显示属性时，自定义视频画布的背景颜色。</p>
                        </li>
                        <li props="apple"><b>指定视频源进行预览</b>
                            <p>为支持用户选择不同类型的视频源进行本地视频预览，该版本新增 <codeph><apiname keyref="startPreview2"/></codeph> 和 <codeph><apiname keyref="stopPreview2"/></codeph>方法。你可以调用 <codeph><apiname keyref="startPreview2"/></codeph> 并设置 <codeph>sourceType</codeph> 指定待预览的视频源类型；然后掉用 <codeph><apiname keyref="stopPreview2"/></codeph> 关闭视频预览。 </p>
                        </li>
                        <li props="cpp mac unity rn unreal bp flutter"><b>发布多源采集的视频流</b>
                            <p>该版本在 <xref keyref="ChannelMediaOptions"/> 中新增下列成员，支持你发布第三个、第四个摄像头和屏幕采集到的视频流：
                            <ul><li><parmname>publishThirdCameraTrack</parmname>：发布第三个摄像头采集的视频。</li>
                            <li>publishFourthCameraTrack：发布第四个摄像头采集的视频。</li>
                            <li>publishThirdScreenTrack：发布第三个屏幕采集的视频。</li>
                            <li>publishFourthScreenTrack：发布第四个屏幕采集的视频。</li></ul>
                            <note>目前 SDK 支持在同一时间、同一 <xref keyref="RtcConnection"/> 中发布多路音频流、一路视频流。</note></p>
                        </li>
                        <li props="android ios unity rn unreal bp flutter"><b>支持仅播放副歌片段</b>
                            <p>该版本新增 <xref keyref="getInternalSongCode"/> 方法，如果你仅需要播放某一音乐资源的副歌片段，在播放前你需要调用该方法来为该副歌片段创建一个内部歌曲编号，作为该资源的唯一标识。你可以查看<xref keyref="ktv-docs"/>了解更多 K 歌场景方案。</p>
                        </li>
                    </ol>
                </body>
            </topic>
            <topic id="improvement">
                <title>改进</title>
                <body>
                    <ol>
                        <li props="android ios cpp unreal bp flutter unity rn"><b><ph>摄像头采集效果提升 </ph><ph props="cpp unreal bp flutter unity">(Android &amp; iOS)</ph></b>
                            <p props="ios cpp unreal bp flutter unity rn">该版本从以下几个方面提升了摄像头采集效果：<ol>
                                <li><ph>支持摄像头采集曝光调节</ph>
                                    <p>新增 <codeph><apiname keyref="isCameraExposureSupported"/></codeph> 和 <codeph><apiname keyref="setCameraExposureFactor"/></codeph> 方法，用于查询当前设备是否支持曝光调节和设置摄像头的曝光增益。</p></li>
                                <li><ph>优化默认摄像头选择 </ph><ph props="cpp unreal bp flutter unity rn">(iOS)</ph>
                                    <p>自该版本起，SDK 的默认摄像头选择对齐 iOS 系统相机行为。如果设备拥有多个后置摄像头，则在视频采集时可以获得更好的拍摄视野、变焦能力、低光性能和深度感应，从而提高视频采集的质量。</p></li>
                            </ol></p>
                            <p props="android">该版本支持摄像头采集曝光调节。新增 <codeph><apiname keyref="isCameraExposureSupported"/></codeph> 和 <codeph><apiname keyref="setCameraExposureFactor"/></codeph> 方法，用于查询当前设备是否支持曝光调节和设置摄像头的曝光增益。</p>
                        </li>
                        <li><b>虚拟背景算法升级</b>
                            <p>该版本升级了虚拟背景的人像分割算法，全面提升了人像分割的准确度、人像边缘与虚拟背景间的平滑度以及人物移动时边缘的贴合度，同时优化了虚拟背景在会议、办公、居家等场景下，以及逆光、弱光等条件下的人物边缘精度。</p>
                        </li>
                        <li><b>跨频道连麦优化</b>
                            <p>该版本将跨频道连麦时媒体流转发的目标频道增加至 6 个，在调用 <codeph><apiname keyref="startOrUpdateChannelMediaRelay"/></codeph> 和 <codeph><apiname keyref="startOrUpdateChannelMediaRelayEx"/></codeph> 时，你可以指定最多 6 个目标频道。</p>
                        </li>
                        <li><b>视频编解码查询能力增强</b>
                            <p>为提升设备编解码能力查询功能，该版本在 <codeph><apiname keyref="CodecCapInfo"/></codeph> 中新增 <codeph>codecLevels</codeph> 成员。当成功调用 <codeph><apiname keyref="queryCodecCapability"/></codeph> 后，可通过 <codeph>codecLevels</codeph> 得知当前设备对于 H.264 和 H.265 格式的视频的硬件和软件解码能力等级。</p>
                        </li>
                    </ol>
                    <p>该版本还进行了如下改进：
                        <ol>
                        <li props="android unity rn unreal bp flutter">为了提升多种音频路由之间的切换体验，该版本新增了 <codeph><apiname keyref="setRouteInCommunicationMode"/></codeph> 方法，用于在通话音量模式（<xref keyref="communication-audio-mode"/>）下，将音频路由从蓝牙耳机切换为听筒、有线耳机或扬声器。</li>
                        <li>在屏幕共享场景下，SDK 根据共享的场景自动调节发送端的帧率。尤其是在共享文档场景下，避免发送端的视频码率超出预期的情况，以提高传输效率、减小网络负担。</li>
                        <li>为帮助用户了解更多类型的远端视频状态改变的原因，<codeph><apiname keyref="onRemoteVideoStateChanged"/></codeph> 回调中新增了 <codeph><ph keyref="REMOTE_VIDEO_STATE_REASON_CODEC_NOT_SUPPORT"/></codeph> 枚举，表示本地的视频解码器不支持对收到的远端视频流进行解码。</li>
                        <li props="android ios unity rn unreal bp flutter">版权音乐新增 <xref keyref="getSongSimpleInfo"/> 方法，可用于获取某一指定歌曲的详细信息，你可以通过触发的 <xref keyref="onSongSimpleInfoResult"/> 回调来获取歌曲信息。</li>
                        </ol></p>
                </body>
            </topic>
            <topic id="bugfix">
                <title>问题修复</title>
                <body>
                    <ul>
                        <li props="mac">加入频道后，偶现本地用户听自己及远端的声音时出现杂音。</li>
                        <li>网络异常导致频道连接断开后，频道连接恢复较慢。</li>
                        <li>在屏幕共享场景下，部分机型偶现屏幕共享画面出图延迟高于预期。</li> 
                        <li>自采集场景下，<codeph><apiname keyref="setBeautyEffectOptions"/></codeph>、<codeph><apiname keyref="setLowlightEnhanceOptions"/></codeph>、<codeph><apiname keyref="setVideoDenoiserOptions"/></codeph> 和 <codeph><apiname keyref="setColorEnhanceOptions"/></codeph> 无法自动加载插件。</li>
                        <li props="cpp mac unity electron unreal bp flutter">多设备音频录制场景下，反复插拔或开启/禁用音频录制设备后，偶现调用 <codeph><apiname keyref="startRecordingDeviceTest"/></codeph> 进行音频采集设备测试时听不到声音。</li>
                        
                    </ul>
                </body>
            </topic>
            <topic id="apichange">
                <title>API 变更</title>
                <body>
                    <p><b>新增</b>
                        <ul>
                        <li props="apple"><codeph><apiname keyref="startPreview2"/></codeph></li>
                        <li props="apple"><codeph><apiname keyref="stopPreview2"/></codeph></li>
                        <li props="android ios cpp unreal bp flutter unity rn"><codeph><apiname keyref="setCameraExposureFactor"/></codeph><ph props="cpp unreal bp flutter unity"> (Android &amp; iOS)</ph></li>
                        <li props="android ios cpp unreal bp flutter unity rn"><codeph><apiname keyref="isCameraExposureSupported"/></codeph><ph props="cpp unreal bp flutter unity"> (Android &amp; iOS)</ph></li>
                        <li><codeph><apiname keyref="VideoCanvas"/></codeph> 中增加 <codeph>backgroundColor</codeph> 成员</li>
                        <li><codeph><apiname keyref="CodecCapInfo"/></codeph> 中增加 <codeph>codecLevels</codeph> 成员</li>
                        <li><codeph><apiname keyref="CodecCapLevels"/></codeph></li>
                        <li><codeph><apiname keyref="VIDEO_CODEC_CAPABILITY_LEVEL"/></codeph></li>
                        <li><codeph><apiname keyref="REMOTE_VIDEO_STATE_REASON"/></codeph> 中增加 <codeph><ph keyref="REMOTE_VIDEO_STATE_REASON_CODEC_NOT_SUPPORT"/></codeph> 枚举</li>
                        <li props="android unity rn flutter unreal bp"><codeph><apiname keyref="setRouteInCommunication"/></codeph><ph props="unity rn flutter unreal bp"> (Android)</ph></li>
                        <li><codeph><apiname keyref="preloadChannel"/></codeph></li>
                        <li><codeph><apiname keyref="preloadChannel2"/></codeph></li>
                        <li><codeph><apiname keyref="updatePreloadChannelToken"/></codeph></li>
                        <li props="android ios unity rn flutter unreal bp"><codeph><apiname keyref="getSongSimpleInfo"/></codeph><ph props="unreal bp flutter unity rn"> (Android &amp; iOS)</ph></li>
                        <li props="android ios unity rn flutter unreal bp"><codeph><apiname keyref="onSongSimpleInfoResult"/></codeph><ph props="unreal bp flutter unity rn"> (Android &amp; iOS)</ph></li>
                        <li props="android ios unity rn flutter unreal bp"><codeph><apiname keyref="getInternalSongCode"/></codeph><ph props="unreal bp flutter unity rn"> (Android &amp; iOS)</ph></li>
                        <li props="android ios unity rn flutter unreal bp"><codeph><apiname keyref="preload2"/></codeph><ph props="unreal bp flutter unity rn"> (Android &amp; iOS)</ph></li>
                        <li><codeph><apiname keyref="ChannelMediaOptions"/></codeph> 中增加下列成员：
                        <ul>
                        <li><codeph><apiname keyref="publishThirdCameraTrack"/></codeph></li>
                        <li><codeph><apiname keyref="publishFourthCameraTrack"/></codeph></li>
                        <li><codeph><apiname keyref="publishThirdScreenTrack"/></codeph></li>
                        <li><codeph><apiname keyref="publishFourthScreenTrack"/></codeph></li></ul>
                        </li>
                        </ul></p>
                    <p props="android ios unity rn flutter unreal bp"><b>修改</b>
                        <ul>
                        <li><codeph><apiname keyref="onLyricResult"/></codeph> 新增 <parmname>songCode</parmname><ph props="unreal bp flutter unity rn"> (Android &amp; iOS)</ph></li>
                            <li><codeph><apiname keyref="onPreLoadEvent"/></codeph> 新增 <parmname>requestId</parmname><ph props="unreal bp flutter unity rn"> (Android &amp; iOS)</ph></li>
                        </ul></p>
                    <p props="android ios unity rn flutter unreal bp"><b>废弃</b>
                        <ul>
                        <li><codeph><apiname keyref="preload"/></codeph><ph props="unreal bp flutter unity rn"> (Android &amp; iOS)</ph></li>
                        </ul></p>
                </body>
            </topic>
        </topic>
    </topic>
</topic>
