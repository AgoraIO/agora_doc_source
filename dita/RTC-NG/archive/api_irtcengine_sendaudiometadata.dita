<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_sendaudiometadata">
    <title><ph keyref="sendAudioMetadata"/></title>
    <shortdesc id="short"><ph id="shortdesc">发送音频附属信息。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="sendAudioMetadata"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int sendAudioMetadata(byte[] metadata);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)sendAudioMetadata:(NSData * _Nonnull)metadata NS_SWIFT_NAME(sendAudioMetadata(_:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int sendAudioMetadata(const char* metadata, size_t length) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc">
            <title>详情</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>自从</dt>
                <dd>v4.3.1</dd>
            </dlentry>
            </dl>
            <p id="details">如果成功发送了音频附属信息，接收端会收到 <xref keyref="onAudioMetadataReceived"/> 回调。</p>
            <note type="attention">该方法需要再加入频道后调用。</note>
        </section>
        <section id="scenario">
            <title>适用场景</title>
            <p>你可以调用该方法来发送音频的附属信息，如音频文件的标题、歌词、专辑、版权等信息。</p>
        </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry id="meta">
                <pt>metadata</pt>
                <pd props="cpp">指向要发送的音频附属信息的指针。</pd>
                <pd props="apple android">要发送的音频附属信息。</pd>
            </plentry>
             <plentry props="cpp" id="length">
                 <pt>length</pt>
                 <pd>音频附属信息的大小（字节）。最大值为 64 字节。</pd>
             </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">方法成功调用时，无返回值；方法调用失败时，会抛出 <xref keyref="AgoraRtcException"/> 异常，你需要捕获异常并进行处理。</p>
            <ul props="native electron unity rn unreal bp">
                <li>0: 方法调用成功。</li>
                <li>&lt; 0：方法调用失败。<ph props="cn">详见<xref keyref="error-code-link"/>了解详情和解决建议。</ph>
                <ul>
                <li>-12：调用频率超出限制。</li>
                <li>-3：<xref keyref="IRtcEngine" /> 对象初始化失败。你需要重新初始化 <apiname keyref="IRtcEngine" /> 对象。</li>
                <li>-7：<apiname keyref="IRtcEngine" /> 对象尚未初始化。你需要在调用该方法前成功初始化 <apiname keyref="IRtcEngine" /> 对象。</li>
                <li>-8：<apiname keyref="IRtcEngine" /> 对象内部状态错误。可能的原因是：调用 <xref keyref="startEchoTest3" /> 开始通话回路测试后，未调用 <xref keyref="stopEchoTest" /> 停止测试就调用该方法加入频道。你需要在该方法前调用 <apiname keyref="stopEchoTest" />。</li>
                <li>-17：加入频道被拒绝。可能的原因是用户已经在频道中。建议通过 <xref keyref="onConnectionStateChanged" /> 回调判断用户是否在频道中。除收到 <apiname keyref="CONNECTION_STATE_DISCONNECTED" />(1) 状态外，不要再次调用该方法加入频道。</li>
                <li>-102：频道名无效。你需要在 <parmname>channelId</parmname> 中填入有效的频道名，重新加入频道。</li>
                <li>-121：用户 ID 无效。你需要在 <parmname>uid</parmname> 中填入有效的用户 ID，重新加入频道。</li>
                </ul></li>
            </ul>  </section>
        </refbody>
</reference>
