<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_ichannel_sendstreammessage">
    <title><ph keyref="IChannel_sendStreamMessage" /></title>
    <shortdesc conkeyref="sendStreamMessage/short" /> 
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="IChannel_sendStreamMessage" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java" />
                <codeblock props="ios mac" outputclass="language-objectivec" />
                <codeblock props="windows" outputclass="language-cpp">virtual int sendStreamMessage(int streamId, const char* data, size_t length) = 0;</codeblock>
                <codeblock props="electron" outputclass="language-typescript">sendStreamMessage(streamId: number, data: string): number</codeblock>
                <codeblock props="unity" outputclass="language-csharp">public abstract int SendStreamMessage(int streamId, byte[] data);</codeblock>
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; sendStreamMessage(int streamId, Uint8List message);</codeblock>
        </p>
        </section>
        <section id="detailed_desc">
   
   <p conkeyref="sendStreamMessage/desc" />
   <p>成功调用该方法后，远端会触发 <xref keyref="IChannel_onStreamMessage" /> 回调，远端用户可以在该回调中获取接收到的流消息；
       若调用失败，远端会触发 <xref keyref="IChannel_onStreamMessageError" /> 回调。</p>
   <note type="attention"><ul>
       <li>请确保在调用该方法前，已调用 <xref keyref="createDataStream2" /> 创建了数据通道。</li>
       <li>直播场景下，该方法仅适用于主播用户。</li>
   </ul></note>
        </section>
        <section id="parameters" conkeyref="sendStreamMessage/parameters" />
        <section id="return_values" conkeyref="sendStreamMessage/return_values" props="native electron unity" /></refbody>
</reference>