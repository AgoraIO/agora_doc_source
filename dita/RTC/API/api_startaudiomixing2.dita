<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_startaudiomixing2">
    <title><ph keyref="startAudioMixing2" /></title>
    <shortdesc id="short"><ph id="shortdesc">开始播放音乐文件。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startAudioMixing2" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public abstract int startAudioMixing(String filePath, boolean loopback, boolean replace, int cycle, int startPos);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (int)startAudioMixing:(NSString* _Nonnull)filePath loopback:(BOOL)loopback replace:(BOOL)replace cycle:(NSInteger)cycle startPos:(NSInteger)startPos;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual int startAudioMixing(const char* filePath, bool loopback, bool replace, int cycle, int startPos) = 0;</codeblock>
                <codeblock props="electron" outputclass="language-typescript">startAudioMixing(
  filePath: string,
  loopback: boolean,
  replace: boolean,
  cycle: number,
  startPos?: number,
): number </codeblock>
                <codeblock props="unity" outputclass="language-csharp">public abstract int StartAudioMixing(string filePath, bool loopback, bool replace, int cycle, int startPos);</codeblock>
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startAudioMixing(
      String filePath, bool loopback, bool replace, int cycle,
      [int? startPos]);</codeblock>
            </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since" props="rtc">
                <dlentry props="native">
                    <dt>自从</dt>
                    <dd>v3.4.0</dd>
                </dlentry>
            </dl>
            <p id="audiomixing_detailed">该方法支持将本地或在线音乐文件和麦克风采集的音频进行混音或替换。成功播放音乐文件后，本地会触发 <xref keyref="onAudioMixingStateChanged" /> (<codeph>PLAY</codeph>) 回调。播放结束后，本地会触发 <apiname keyref="onAudioMixingStateChanged" /> (<codeph>STOPPED</codeph>) 回调。</p>
   <note type="attention" id="audiomixing_note">
       <ul>
           <li>该方法需要在加入频道后调用。如需多次调用 <apiname keyref="startAudioMixing2" />，请确保调用间隔大于 500 ms。</li>
           <li>如果本地音乐文件不存在、文件格式不支持或无法访问在线音乐文件 URL，则 SDK 会报告 <codeph>WARN_AUDIO_MIXING_OPEN_ERROR</codeph> (701)。</li>
           <li conkeyref="getAudioFileInfo/audioFormats"/>
           <li props="android">如需调用该方法，请确保使用 Android 4.2 或以上设备，且 API Level 不低于 16。</li>
           <li props="android">如果播放的是在线音乐文件，Agora 建议不要使用重定向地址。重定向地址在某些机型上可能无法打开。</li>
           <li props="android">如果在模拟器上调用该方法，则请确保音乐文件在 /sdcard/ 目录下，且格式为 MP3。</li>
       </ul>
   </note>
        </section>
        <section id="parameters"><title>参数</title>
            <parml>
                <plentry conkeyref="getAudioFileInfo/filePath">
                    <pt/>
                    <pd/>
                </plentry>
                <plentry>
                    <pt>loopback</pt> 
                    <pd><p>是否只在本地播放音乐文件：
                           <ul>
                               <li><codeph><ph keyref="true" /></codeph>: 只在本地播放音乐文件，只有本地用户能听到音乐。</li>
                               <li><codeph><ph keyref="false" /></codeph>: 将本地播放的音乐文件发布至远端，本地用户和远端用户都能听到音乐。</li>
                           </ul></p></pd> 
                </plentry>
                <plentry>
                    <pt>replace</pt> 
                    <pd><p>是否用音乐文件替换麦克风采集的音频：
                           <ul>
                               <li><codeph><ph keyref="true" /></codeph>: 替换。用户只能听到音乐。</li>
                               <li><codeph><ph keyref="false" /></codeph>: 不替换。用户可以听到音乐和麦克风采集的音频。</li>
                           </ul></p></pd> 
                </plentry>
                <plentry>
                    <pt>cycle</pt> 
                    <pd><p>音乐文件的播放次数。
                           <ul>
                               <li>≥ 0: 播放次数。例如，0 表示不播放；1 表示播放 1 次。</li>
                               <li>-1: 无限循环播放。</li>
                           </ul></p></pd> 
                </plentry>
                <plentry>
                    <pt>startPos</pt>
                    <pd>音乐文件的播放位置，单位为毫秒。</pd>
                </plentry>
            </parml>
        </section>
        <section id="return_values" props="native unity electron">
            <title>返回值</title>
            <ul>
                <li>0: 方法调用成功</li>
                <li>&lt; 0: 方法调用失败</li>
            </ul>
        </section>
    </refbody>
</reference>
