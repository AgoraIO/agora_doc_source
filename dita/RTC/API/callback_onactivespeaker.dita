<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_onactivespeaker">
    <title><ph keyref="onActiveSpeaker"/></title>
    <shortdesc id="short"><ph id="shortdesc">监测到最活跃用户回调。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onActiveSpeaker"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock" props="rtc-ng">
                <codeblock props="cpp" outputclass="language-cpp">virtual void onActiveSpeaker(uid_t userId) { (void)userId; }</codeblock>
                <codeblock props="cs" outputclass="language-csharp">public virtual void OnActiveSpeaker(uint userId) {}</codeblock></p>
            <p outputclass="codeblock" props="rtc">
                <codeblock props="cpp" outputclass="language-cpp">virtual void onActiveSpeaker(uid_t uid) {
                (void)uid;
                }</codeblock>
                <codeblock props="cs" outputclass="language-csharp">public virtual void OnActiveSpeaker(uint uid)</codeblock></p>
            <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public void onActiveSpeaker(int uid) {}</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine activeSpeaker:(NSUInteger)speakerUid;</codeblock>
                <codeblock props="electron" outputclass="language-typescript">on(evt: EngineEvents.ACTIVE_SPEAKER, cb: (uid: number) =&gt; void): this;</codeblock>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart">UidCallback? activeSpeaker;</codeblock>
            </p>
        </section>
        <section id="detailed_desc">
            <p>成功调用 <xref keyref="enableAudioVolumeIndication"/> 后，SDK
                会持续监测音量最大的远端用户，并统计该用户被判断为音量最大者的次数。当前时间段内，该次数累积最多的远端用户为最活跃的用户。</p>
            <p>当频道内用户数量大于或等于 2 且有活跃用户时，SDK 会触发该回调并报告最活跃用户的 <parmname>uid</parmname>。 <ul>
                    <li>如果最活跃用户一直是同一位用户，则 SDK 不会再次触发 <apiname keyref="onActiveSpeaker"/> 回调。</li>
                    <li>如果最活跃用户有变化，则 SDK 会再次触发该回调并报告新的最活跃用户的 <parmname>uid</parmname>。</li>
                </ul>
            </p>
        </section>
        <section id="parameters">
            <title><ph keyref="callback-section-title"/></title>
            <p conkeyref="onJoinChannelSuccess/callback-desc" props="flutter rn"/>
            <parml>
                <plentry conkeyref="onJoinChannelSuccess/engine" props="ios mac">
                    <pt/>
                    <pd/>
                </plentry>
                <plentry id="uid">
                    <pt props="cpp cs"><ph props="rtc">uid</ph><ph props="rtc-ng">userId</ph></pt>
                    <pt props="android electron flutter">uid</pt>
                    <pt props="ios mac">speakerUid</pt>
                    <pd>远端最活跃用户的 ID。</pd>
                </plentry>
            </parml>
        </section>
    </refbody>
</reference>
