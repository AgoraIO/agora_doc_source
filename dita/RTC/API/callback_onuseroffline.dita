<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_onuseroffline">
    <title><ph keyref="onUserOffline"/></title>
    <shortdesc id="short"><ph id="shortdesc">远端用户（通信场景）/主播（直播场景）离开当前频道回调。</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="onUserOffline"/>
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public void onUserOffline(int uid, int reason) {}</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine
    didOfflineOfUid:(NSUInteger)uid
    reason:(AgoraUserOfflineReason)reason;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual void onUserOffline(uid_t uid, USER_OFFLINE_REASON_TYPE reason) {
    (void)uid;
    (void)reason;
    }</codeblock>
                <codeblock props="electron" outputclass="language-typescript">on(
  evt: EngineEvents.USER_OFFLINE,
  cb: (uid: number, reason: USER_OFFLINE_REASON_TYPE) =&gt; void
): this;</codeblock>
                <codeblock props="unity" outputclass="language-csharp">public virtual void OnUserOffline(uint uid, USER_OFFLINE_REASON_TYPE reason)</codeblock>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart">UserOfflineCallback? userOffline;</codeblock>
        </p>
        </section>
        <section id="detailed_desc">

   <p id="desc">用户离开频道有两个原因：<ul>
                    <li>正常离开：远端用户/主播会发送类似“再见”的消息。接收此消息后，判断用户离开频道。</li>
                    <li>超时掉线：在一定时间内（通信场景为 20
                        秒，直播场景稍有延时），用户没有收到对方的任何数据包，则判定为对方掉线。在网络较差的情况下，有可能会误报。我们建议使用 Agora 云信令 SDK
                        来做可靠的掉线检测。</li>
                </ul>
            </p>
        </section>
        <section id="parameters"><title><ph keyref="callback-section-title"/></title>             <p conkeyref="onJoinChannelSuccess/callback-desc" props="flutter rn"/>
   <parml>
                <plentry conkeyref="onJoinChannelSuccess/engine" props="ios mac">
                    <pt/>
                    <pd/>
                </plentry>
                <plentry id="uid">
                    <pt>uid</pt>
                    <pd>离线用户或主播的用户 ID。</pd>
                </plentry>
                <plentry id="reason">
                    <pt>reason</pt>
                    <pd><p props="ios mac windows unity flutter">离线原因: <xref keyref="USER_OFFLINE_REASON_TYPE"/>。</p>
                        <p props="android">远端用户（通信场景）或主播（直播场景）下线的原因： <ul>
                                <li><ph keyref="USER_OFFLINE_QUIT"/>
                                    (0)：用户主动离开。此时离开频道的用户会发送一个类似“再见”的消息。收到该消息是，SDK 判定该用户、 离开频道</li>
                                <li><ph keyref="USER_OFFLINE_DROPPED"/> (1)：因过长时间收不到对方数据包，SDK
                                    判定该远端用户超时掉线。注意：在网络连接不稳定时，该判定 可能会有误。我们建议使用 Agora 实时消息 SDK
                                    来做可靠的掉线检测。</li>
                                <li><ph keyref="USER_OFFLINE_BECOME_AUDIENCE"/>
                                    (2)：用户的角色从主播切换为观众。</li>
                            </ul>
                        </p>
                    </pd>
                </plentry>
            </parml>
        </section></refbody>
</reference>
