<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_livetranscoding">
    <title><ph keyref="LiveTranscoding"/></title>
    <shortdesc id="short"><ph id="shortdesc">CDN 直播推流的转码属性。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock" props="rtc-ng">
                <codeblock props="android" outputclass="language-java">public LiveTranscoding() {
    width = 360;
    height = 640;
    videoBitrate = 400;
    videoCodecProfile = VideoCodecProfileType.HIGH;
    videoGop = 30;
    videoFramerate = 15;
    watermark = new AgoraImage();
    backgroundImage = new AgoraImage();

    lowLatency = false;
    audioSampleRate = AudioSampleRateType.TYPE_44100;
    audioBitrate = 48;
    audioChannels = 1;
    audioCodecProfile = AudioCodecProfileType.LC_AAC;
    transcodingUsers = new HashMap&lt;&gt;();
    backgroundColor = 0xFF000000;
    userConfigExtraInfo = null;
    metadata = null;
  }</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraLiveTranscoding : NSObject

@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) NSInteger videoBitrate;
@property(assign, nonatomic) NSInteger videoFramerate;
@property(assign, nonatomic) BOOL lowLatency;
@property(assign, nonatomic) NSInteger videoGop;
@property(assign, nonatomic) AgoraVideoCodecProfileType videoCodecProfile;
@property(copy, nonatomic) NSArray&lt;AgoraLiveTranscodingUser *&gt; *_Nullable transcodingUsers;
@property(copy, nonatomic) NSString *_Nullable transcodingExtraInfo;
@property(strong, nonatomic) AgoraImage *_Nullable watermark;
@property (copy, nonatomic) NSArray&lt;AgoraImage *&gt; *_Nullable watermarkArray;
@property(strong, nonatomic) AgoraImage *_Nullable backgroundImage;
@property (copy, nonatomic) NSArray&lt;AgoraImage *&gt; *_Nullable backgroundImageArray;
@property(strong, nonatomic) COLOR_CLASS *_Nullable backgroundColor;
@property(assign, nonatomic) AgoraAudioSampleRateType audioSampleRate;
@property(assign, nonatomic) NSInteger audioBitrate;
@property(assign, nonatomic) NSInteger audioChannels;
@property(assign, nonatomic) AgoraAudioCodecProfileType audioCodecProfile;
+ (AgoraLiveTranscoding *_Nonnull)defaultTranscoding;
- (int)addUser:(AgoraLiveTranscodingUser *_Nonnull)user;
- (int)removeUser:(NSUInteger)uid;
@end</codeblock>
                <codeblock props="windows" outputclass="language-cpp">struct LiveTranscoding {
  int width;
  int height;
  int videoBitrate;
  int videoFramerate;
  bool lowLatency;
  int videoGop;
  VIDEO_CODEC_PROFILE_TYPE videoCodecProfile;
  unsigned int backgroundColor;
  unsigned int userCount;
  TranscodingUser* transcodingUsers;
  const char* transcodingExtraInfo;
  const char* metadata;
  RtcImage* watermark;
  unsigned int watermarkCount;
  RtcImage* backgroundImage;
  unsigned int backgroundImageCount;
  AUDIO_SAMPLE_RATE_TYPE audioSampleRate;
  int audioBitrate;
  int audioChannels;
  AUDIO_CODEC_PROFILE_TYPE audioCodecProfile;

  LiveTranscoding()
      : width(360),
        height(640),
        videoBitrate(400),
        videoFramerate(15),
        lowLatency(false),
        videoGop(30),
        videoCodecProfile(VIDEO_CODEC_PROFILE_HIGH),
        backgroundColor(0x000000),
        userCount(0),
        transcodingUsers(NULL),
        transcodingExtraInfo(NULL),
        metadata(NULL),
        watermark(NULL),
        watermarkCount(0),
        backgroundImage(NULL),
        backgroundImageCount(0),
        audioSampleRate(AUDIO_SAMPLE_RATE_48000),
        audioBitrate(48),
        audioChannels(1),
        audioCodecProfile(AUDIO_CODEC_PROFILE_LC_AAC) {}
};</codeblock>
            </p>
            <p outputclass="codeblock" props="rtc">
                <codeblock props="windows unity" outputclass="language-cpp">typedef struct LiveTranscoding {
    int width;
    int height;
    int videoBitrate;
    int videoFramerate;

    bool lowLatency;

    int videoGop;
    VIDEO_CODEC_PROFILE_TYPE videoCodecProfile;
    unsigned int backgroundColor;
    unsigned int userCount;
    TranscodingUser *transcodingUsers;
    const char *transcodingExtraInfo;
    RtcImage* watermark;

    AUDIO_SAMPLE_RATE_TYPE audioSampleRate;
    int audioBitrate;
    int audioChannels;

    LiveTranscoding()
    : width(360)
    , height(640)
    , videoBitrate(400)
    , videoFramerate(15)
    , lowLatency(false)
    , backgroundColor(0x000000)
    , videoGop(30)
    , videoCodecProfile(VIDEO_CODEC_PROFILE_HIGH)
    , userCount(0)
    , transcodingUsers(nullptr)
    , transcodingExtraInfo(nullptr)
    , watermark(nullptr)
    , audioSampleRate(AUDIO_SAMPLE_RATE_48000)
    , audioBitrate(48)
    , audioChannels(1)
    {}
    } LiveTranscoding;</codeblock>
                <codeblock props="electron" outputclass="language-typescript">export interface LiveTranscoding {
    width: number;
    height: number;
    videoBitrate: number;
    videoFrameRate: number;
    lowLatency: boolean;
    videoGop: number;
    videoCodecProfile: VIDEO_CODEC_PROFILE_TYPE;
    videoCodecType: VIDEO_CODEC_TYPE_FOR_STREAM;
    backgroundColor: number;
    userCount: number;
    audioSampleRate: number;
    audioChannels: number;
    audioCodecProfile: AUDIO_CODEC_PROFILE_TYPE;
    audioBitrate: number;
    transcodingExtraInfo: string;
    metadata?: string;
    watermark: RtcImage;
    backgroundImage: RtcImage;
    transcodingUsers: Array&lt;TranscodingUser&gt;
    }</codeblock>
                <codeblock props="flutter" outputclass="language-dart">class LiveTranscoding {
  
  int? width;
  int? height;
  int? videoBitrate;
  VideoFrameRate? videoFramerate;
  bool? lowLatency;
  int? videoGop;
  AgoraImage? watermark;
  AgoraImage? backgroundImage;
  AudioSampleRateType? audioSampleRate;
  int? audioBitrate;
  AudioChannel? audioChannels;
  AudioCodecProfileType? audioCodecProfile;
  VideoCodecProfileType? videoCodecProfile;
  Color? backgroundColor;
  String? userConfigExtraInfo;
  List&lt;TranscodingUser&gt; transcodingUsers;

  LiveTranscoding(
    this.transcodingUsers, {
    this.width,
    this.height,
    this.videoBitrate,
    this.videoFramerate,
    this.lowLatency,
    this.videoGop,
    this.watermark,
    this.backgroundImage,
    this.audioSampleRate,
    this.audioBitrate,
    this.audioChannels,
    this.audioCodecProfile,
    this.videoCodecProfile,
    this.backgroundColor,
    this.userConfigExtraInfo,
  });
}</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
                <plentry props="android windows electron unity">
                    <pt>width</pt>
                    <pd>
                        <p>输出媒体流的宽，单位为像素。默认值为 360。</p>
                        <ul>
                            <li>如果输出视频流，<codeph>width</codeph> 的值不得低于 64，否则 Agora 会调整为 64。</li>
                            <li>如果输出纯音频流，请将 <codeph>width</codeph> 设为 0。</li>
                        </ul>
                    </pd>
                </plentry>
                <plentry props="android windows electron unity">
                    <pt>height</pt>
                    <pd>
                        <p>输出媒体流的高，单位为像素。默认值为 640。</p>
                        <ul>
                            <li>如果输出视频流，<codeph>height</codeph> 的值不得低于 64，否则 Agora 会调整为 64。</li>
                            <li>如果输出纯音频流，请将 <codeph>height</codeph> 设为 0。</li>
                        </ul>
                    </pd>
                </plentry>
                <plentry props="ios mac">
                    <pt>size</pt>
                    <pd>输出媒体流的宽和高，单位为像素。</pd>
                </plentry>
                <plentry>
                    <pt>videoBitrate</pt>
                    <pd>输出媒体流的视频码率（Kbps）。默认值为 400。<ph props="ios android windows">你可以参考 <xref keyref="guide-cdn-streaming">推流到
                            CDN</xref> 设置该参数的值。</ph></pd>
                </plentry>
                <plentry>
                    <pt>videoFrameRate</pt>
                    <pd>输出媒体流的视频帧率（fps）。默认值为 15，取值范围是 [1,30]。<note type="attention">Agora 服务器会将高于
                            30 fps 的帧率统一调整为 30 fps。</note></pd>
                </plentry>
                <plentry>
                    <pt>lowLatency</pt>
                    <pd>
                        <dl outputclass="deprecated">
                            <dlentry>
                                <dt>弃用</dt>
                                <dd>该属性自 v2.8.0 起废弃，Agora 不推荐使用。</dd>
                            </dlentry>
                        </dl>
                        <ul>
                            <li><codeph><ph keyref="true"/></codeph>: 低延时，不保证画质。</li>
                            <li><codeph><ph keyref="false"/></codeph>:（默认值）高延时，保证画质。</li>
                        </ul>
                    </pd>
                </plentry>
                <plentry>
                    <pt>videoGop</pt>
                    <pd>输出媒体流的视频 GOP（Group of Pictures)。默认值为 30。</pd>
                </plentry>
                <plentry>
                    <pt>videoCodecProfile</pt>
                    <pd>
                        <p>输出媒体流的视频编码规格，详见 <xref keyref="VIDEO_CODEC_PROFILE_TYPE"/>。</p>
                        <note type="attention">如果你把这个参数设为其他值，Agora 服务器会将其调整为默认值。</note>
                    </pd>
                </plentry>
                <plentry props="electron">
                    <pt>videoCodecType</pt>
                    <pd>输出视频的编解码类型。详见 <xref keyref="VIDEO_CODEC_TYPE_FOR_STREAM"/>。</pd>
                </plentry>
                <plentry>
                    <pt>transcodingUsers</pt>
                    <pd>
                        <p>参与转码合流的每个主播的设置。Agora 频道内最多支持 17 个主播。详见 <xref keyref="TranscodingUser"/>。</p>
                    </pd>
                </plentry>
                <plentry>
                    <pt>transcodingExtraInfo</pt>
                    <pd>输出媒体流中嵌入的用户 SEI 信息。用于向 CDN 推送 SEI 信息。长度限制 4096 字节。详见 <xref keyref="faq-sei">SEI 帧相关问题</xref>。</pd>
                </plentry>
                <plentry>
                    <pt>backgroundColor</pt>
                    <pd>输出媒体流的视频背景色。格式为 RGB 定义下的十六进制整数，不要带 # 号。如 <codeph>0xFFB6C1</codeph>
                        表示浅粉色。默认值为 <codeph>0x000000</codeph>，表示黑色。</pd>
                </plentry>
                <plentry props="android windows electron unity">
                    <pt>userCount</pt>
                    <pd>参与转码合流的主播数量。默认值为 0。</pd>
                </plentry>
                <plentry props="android windows unity">
                    <pt>metadata</pt>
                    <pd>
                        <dl outputclass="deprecated">
                            <dlentry>
                                <dt>弃用：</dt>
                                <dd>该属性已废弃。</dd>
                            </dlentry>
                        </dl> 发送给 CDN 客户端的 metadata。</pd>
                </plentry>
                <plentry>
                    <pt>watermark</pt>
                    <pd>输出媒体流的视频水印。必须为 PNG 格式。详见 <xref keyref="RtcImage"/>。</pd>
                </plentry>
                <plentry>
                    <pt>backgroundImage</pt>
                    <pd> 输出媒体流的视频背景图。详见 <xref keyref="RtcImage"/>。</pd>
                </plentry>
                <plentry>
                    <pt>audioSampleRate</pt>
                    <pd>输出媒体流的音频采样率 (Hz)，详见 <xref keyref="AUDIO_SAMPLE_RATE_TYPE"/>。</pd>
                </plentry>
                <plentry>
                    <pt>audioBitrate</pt>
                    <pd>输出媒体流的音频码率 (Kbps)。默认值为 48，最大值为 128。</pd>
                </plentry>
                <plentry>
                    <pt>audioChannels</pt>
                    <pd>输出媒体流的音频声道数。默认值为 1。建议取值为 1 或 2。<ul>
                            <li>1: （默认）单声道</li>
                            <li>2: 双声道</li>
                            <li>3: 三声道</li>
                            <li>4: 四声道</li>
                            <li>5: 五声道</li>
                        </ul>
                    </pd>
                </plentry>
                <plentry>
                    <pt>audioCodecProfile</pt>
                    <pd>输出媒体流的音频编码规格。详见 <xref keyref="AUDIO_CODEC_PROFILE_TYPE"/>。</pd>
                </plentry>
            </parml>
            <parml props="rtc-ng">
                <plentry>
                    <pt props="ios mac">watermarkArray</pt>
                    <pt props="windows">watermarkCount</pt>
                    <pd><p>输出媒体流的视频水印 (watermark) 的数量。</p>
                        <ul>
                            <li>如果你不添加水印，或仅添加一个水印，该参数为选填。</li>
                            <li>如果你添加多个水印，该参数为必填。</li>
                        </ul>
                    </pd>
                </plentry>
                <plentry>
                    <pt props="ios mac">backgroundArray</pt>
                    <pt props="windows">backgroundCount</pt>
                    <pd><p>输出媒体流的视频背景图 (backgroundImage) 的数量。</p>
                        <ul>
                            <li>如果你不添加背景图，或仅添加一个背景图，该参数为选填。</li>
                            <li>如果你添加多个背景图，该参数为必填。</li>
                        </ul>
                    </pd>
                </plentry>
            </parml>
        </section>
    </refbody>
</reference>
