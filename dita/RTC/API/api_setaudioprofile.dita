<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_setaudioprofile">
    <title><ph keyref="setAudioProfile"/></title>
    <shortdesc id="short"><ph id="shortdesc">设置音频编码属性和音频场景。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setAudioProfile"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setAudioProfile(int profile, int scenario);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioProfile:(AgoraAudioProfile)profile scenario:(AgoraAudioScenario)scenario;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int setAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">setAudioProfile(profile: AUDIO_PROFILE_TYPE, scenario: AUDIO_SCENARIO_TYPE): number</codeblock>
            <codeblock props="cs" outputclass="language-csharp">public abstract int SetAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario);</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setAudioProfile(AudioProfile profile, AudioScenario scenario);</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <note type="attention">
            <ul>
            <li props="rtc-ng">该方法在加入频道前后均可调用。</li>
            <li props="rtc">该方法需要在加入频道前调用。</li>
            <li>在有高音质需求的场景（例如音乐教学场景）中，建议将 <parmname>profile</parmname> 设置为 <ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY"/>(4)，<parmname>scenario</parmname> 设置为 <ph keyref="AUDIO_SCENARIO_GAME_STREAMING"/>(3)<ph props="rtc-ng"> 或 <ph keyref="AUDIO_SCENARIO_HIGH_DEFINITION"/>(6)</ph>。</li>
            </ul> </note> </section>
        <section id="parameters">
            <title>参数</title>
            <parml>
            <plentry>
                <pt>profile</pt>
                <pd>
                    <p id="profile"><ph>音频编码属性，包含采样率、码率、编码模式和声道数。</ph><ph props="ios mac cpp electron cs flutter">详见 <xref keyref="AUDIO_PROFILE_TYPE"/>。</ph>
                    <ul props="android">
                    <li><ph keyref="AUDIO_PROFILE_DEFAULT"/> (0)：默认值
                        
                        
                        <ul conkeyref="AUDIO_PROFILE_TYPE/default-profile">
                        <li/>
                        </ul></li>
                    <li><ph keyref="AUDIO_PROFILE_SPEECH_STANDARD"/> (1)：指定 32 kHz 采样率，语音编码，单声道，编码码率最大值为 18 Kbps。</li>
                    <li><ph keyref="AUDIO_PROFILE_MUSIC_STANDARD"/> (2)：指定 48 kHz 采样率，音乐编码，单声道，编码码率最大值为 64 Kbps。</li>
                    <li><ph keyref="AUDIO_PROFILE_MUSIC_STANDARD_STEREO"/> (3)：指定 48 kHz 采样率，音乐编码，双声道，编码码率最大值为 80 Kbps。</li>
                    <li><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY"/> (4)：指定 48 kHz 采样率，音乐编码，单声道，编码码率最大值为 96 Kbps。</li>
                    <li><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO"/> (5)：指定 48 kHz 采样率，音乐编码，双声道，编码码率最大值为 128 Kbps。</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>scenario</pt>
                <pd props="rtc-ng" id="scenario-ng"><ph>音频场景。</ph><ph props="ios mac cpp electron cs flutter">详见 <xref keyref="AUDIO_SCENARIO_TYPE"/> 。</ph><ph>不同的音频场景下，设备的音量类型是不同的。</ph>
                    <ul props="android" id="scenario">
                    <li><ph keyref="AUDIO_SCENARIO_DEFAULT"/> (0): （默认）自动场景，根据用户角色和音频路由自动匹配合适的音质。</li>
                    <li><ph keyref="AUDIO_SCENARIO_GAME_STREAMING"/> (3): 高音质场景，适用于音乐为主的场景。</li>
                    <li><ph keyref="AUDIO_SCENARIO_CHATROOM"/> (5): 聊天室场景，适用于用户需要频繁上下麦的场景。</li>
                    <li><ph keyref="AUDIO_SCENARIO_HIGH_DEFINITION"/> (6): 高音质场景，适用于音乐为主的场景。</li>
                    <li><ph keyref="AUDIO_SCENARIO_CHORUS"/> (7): 合唱场景。适用于网络条件良好，要求极低延时的实时合唱场景。
                        
                        
                        <note conkeyref="AUDIO_SCENARIO_TYPE/chorus"/></li>
                    </ul></pd>
                <pd props="rtc"><ph>音频场景。</ph><ph props="ios mac cpp electron cs flutter">详见 <xref keyref="AUDIO_SCENARIO_TYPE"/> 。</ph><ph>不同的音频场景下，设备的音量类型是不同的。</ph>
                    <ul props="android">
                    <li><ph keyref="AUDIO_SCENARIO_DEFAULT"/> (0): 默认的音频应用场景。</li>
                    <li><ph keyref="AUDIO_SCENARIO_CHATROOM_ENTERTAINMENT"/>(1): 娱乐场景，适用于用户需要频繁上下麦的场景。</li>
                    <li><ph keyref="AUDIO_SCENARIO_EDUCATION"/>(2): 教育场景，适用于需要高流畅度和稳定性的场景。</li>
                    <li><ph keyref="AUDIO_SCENARIO_GAME_STREAMING"/> (3): 高音质场景，适用于音乐为主的场景。</li>
                    <li><ph keyref="AUDIO_SCENARIO_SHOWROOM"/>(4): 秀场场景，适用于需要高音质的单主播场景。</li>
                    <li><ph keyref="AUDIO_SCENARIO_CHATROOM_GAMING"/>(5): 游戏开黑场景，适用于只有人声的场景。</li>
                    <li><ph keyref="AUDIO_SCENARIO_IOT"/> (6): IoT（物联网）场景，适用于使用低功耗 IoT 设备的场景。</li>
                    <li><ph keyref="AUDIO_SCENARIO_MEETING"/>(8): 会议场景，适用于人声为主的多人会议</li>
                    </ul></pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native electron cs">
            <title>返回值</title>
            <ul>
            <li>0: 方法调用成功</li>
            <li> &lt; 0: 方法调用失败</li>
            </ul> </section>
    </refbody>
</reference>
