<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_onaudiomixingstatechanged">
    <title><ph keyref="onAudioMixingStateChanged"/></title>
    <shortdesc id="short"><ph id="shortdesc">音乐文件的播放状态已改变回调。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onAudioMixingStateChanged"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public void onAudioMixingStateChanged(int state,int reason)</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit* _Nonnull)engine
                    localAudioMixingStateDidChanged:(AgoraAudioMixingStateCode)state
                    reason:(AgoraAudioMixingReasonCode)reason;</codeblock>
                <codeblock props="cpp" outputclass="language-cpp">virtual void onAudioMixingStateChanged(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_REASON_TYPE reason)</codeblock>
                <codeblock props="electron" outputclass="language-typescript">on(
  evt: EngineEvents.AUDIO_MIXING_STATE_CHANGED,
  cb: (
    state: AUDIO_MIXING_STATE_TYPE,
    reason: AUDIO_MIXING_REASON_TYPE
  ) =&gt; void
): this;</codeblock>
                <codeblock props="cs" outputclass="language-csharp">public virtual void OnAudioMixingStateChanged(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_REASON_TYPE reason)</codeblock>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart">AudioMixingStateCallback? audioMixingStateChanged;</codeblock>
            </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since" props="rtc">
                <dlentry props="native">
                    <dt>自从</dt>
                    <dd>v3.4.0</dd>
                </dlentry>
            </dl>
            <p>该回调在音乐文件播放状态发生改变时触发，并报告当前的播放状态和错误码。</p>
        </section>
        <section id="parameters">
            <title><ph keyref="callback-section-title"/></title>
            <p conkeyref="onJoinChannelSuccess/callback-desc" props="flutter rn"/>
            <parml>
                <plentry conkeyref="onJoinChannelSuccess/engine" props="ios mac">
                    <pt/>
                    <pd/>
                </plentry>
                <plentry>
                    <pt>state</pt>
                    <pd>音乐文件播放状态。<ph props="ios mac cpp flutter cs">详见 <xref
                                keyref="AUDIO_MIXING_STATE_TYPE"/>。</ph>
                        <p props="android">
                            <ul>
                                <li><ph keyref="AUDIO_MIXING_STATE_PLAYING"/> (710): 音乐文件正常播放。</li>
                                <li><ph keyref="AUDIO_MIXING_STATE_PAUSED"/> (711): 音乐文件暂停播放。</li>
                                <li><ph keyref="AUDIO_MIXING_STATE_STOPPED"/> (713): 音乐文件停止播放。</li>
                                <li><ph keyref="AUDIO_MIXING_STATE_FAILED"/> (714): 音乐文件报错。SDK 会在
                                        <codeph>reason</codeph> 参数中返回具体的报错原因。</li>
                                <li><ph keyref="AUDIO_MIXING_STATE_COMPLETED"/>(715):
                                    音乐文件已结束一次播放。</li>
                                <li><ph keyref="AUDIO_MIXING_STATE_ALL_LOOPS_COMPLETED"/> (716):
                                    音乐文件已结束循环播放。</li>
                            </ul>
                        </p>
                    </pd>
                </plentry>
                <plentry>
                    <pt>reason</pt>
                    <pd>音乐文件播放状态改变的原因。<ph props="ios mac cpp flutter cs">详见 <xref
                                keyref="AUDIO_MIXING_REASON_TYPE"/>。</ph>
                        <p props="android">
                            <ul>
                                <li><ph keyref="AUDIO_MIXING_REASON_CAN_NOT_OPEN"/> (701):
                                    音乐文件打开出错。例如，本地音乐文件不存在、文件格式不支持或无法访问在线音乐文件 URL。</li>
                                <li><ph keyref="AUDIO_MIXING_REASON_TOO_FREQUENT_CALL"/> (702):
                                    音乐文件打开太频繁。如需多次调用该方法，请确保调用间隔大于 500 ms。</li>
                                <li><ph keyref="AUDIO_MIXING_REASON_INTERRUPTED_EOF"/> (703):
                                    音乐文件播放中断。</li>
                                <li><ph keyref="AUDIO_MIXING_REASON_STARTED_BY_USER"/> (720): 成功调用
                                        <apiname keyref="startAudioMixing2"/> 播放音乐文件。</li>
                                <li><ph keyref="AUDIO_MIXING_REASON_ONE_LOOP_COMPLETED"/>(721):
                                    音乐文件完成一次循环播放。</li>
                                <li><ph keyref="AUDIO_MIXING_REASON_START_NEW_LOOP"/> (722):
                                    音乐文件开始新的一次循环播放。</li>
                                <li><ph keyref="AUDIO_MIXING_REASON_ALL_LOOPS_COMPLETED"/> (723):
                                    音乐文件完成所有循环播放。。</li>
                                <li><ph keyref="AUDIO_MIXING_REASON_STOPPED_BY_USER"/> (724): 成功调用
                                        <xref keyref="stopAudioMixing"/> 停止播放音乐文件。。</li>
                                <li><ph keyref="AUDIO_MIXING_REASON_PAUSED_BY_USER"/> (725): 成功调用
                                        <xref keyref="pauseAudioMixing"/> 暂停播放音乐文件。。</li>
                                <li><ph keyref="AUDIO_MIXING_REASON_RESUMED_BY_USER"/> (726): 成功调用
                                        <xref keyref="resumeAudioMixing"/> 恢复音乐文件播放。。</li>
                            </ul>
                        </p>
                    </pd>
                </plentry>
            </parml>
        </section>
    </refbody>
</reference>
