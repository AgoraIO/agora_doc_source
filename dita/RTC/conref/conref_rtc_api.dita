<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="apidef">
        <title>RTC API Syntax</title>
        <body>
       <section id="section_mjq_rgy_vnb"
       ><title>Methods</title>
  <!--createAgoraRtcEngine-->
  <p id="createAgoraRtcEngine">
      <codeblock props="windows" outputclass="language-cpp">AGORA_API agora::rtc::IRtcEngine *AGORA_CALL createAgoraRtcEngine ()</codeblock>
  </p>
  
  <!--initialize-->
  <p id="create2">
      <codeblock props="windows" outputclass="language-cpp">virtual int initialize(const RtcEngineContext&amp; context) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">initialize(appId: string, areaCode: AREA_CODE = (0xFFFFFFFF), logConfig?: LogConfig): number</codeblock>
  </p>
  
  <!--release-->
  <p id="release">
      <codeblock props="windows" outputclass="language-cpp">AGORA_CPP_API static void release (bool sync = false);</codeblock>
      <codeblock props="rust" outputclass="language-rust">pub fn release(&amp;self, sync: bool) {
    unsafe {
    let is_sync: i32 = if sync { 1 } else { 0 };
    agorartcnative::release(self.native_engine, is_sync);
    }
    }
      </codeblock>
      <codeblock props="electron" outputclass="language-typescript">release(sync: boolean = false): number</codeblock>
  </p>
  
  <!--setChannelProfile-->
  <p id="setChannelProfile">
      <codeblock props="android" outputclass="language-java">public abstract int setChannelProfile(int profile);</codeblock>
      <codeblock props="windows" outputclass="language-cpp">virtual int setChannelProfile(CHANNEL_PROFILE_TYPE profile) = 0;</codeblock>
      <codeblock props="rust" outputclass="language-rust">pub fn set_channel_profile(&amp;self, profile: CHANNEL_PROFILE_TYPE) -> i32 {
    unsafe {
    return agorartcnative::setChannelProfile(self.native_engine, profile as u32);
    }
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setChannelProfile(profile: number): number</codeblock>
  </p>
  
  <!--setClientRole1-->
  <p id="setClientRole1">
      <codeblock props="android" outputclass="language-java">public abstract int setClientRole(int role);</codeblock>
      <codeblock props="ios" outputclass="objective-c">- (int)setClientRole:(AgoraClientRole)role;</codeblock>
      <codeblock props="windows" outputclass="language-cpp">virtual int setClientRole(CLIENT_ROLE_TYPE role) = 0;</codeblock>
      <codeblock props="rust" outputclass="language-rust">pub fn set_client_role(&amp;self, role: CLIENT_ROLE_TYPE) -> i32 {
    unsafe {
        return agorartcnative::setClientRole(self.native_engine, role as u32);
    }
}
      </codeblock>
      <codeblock props="electron" outputclass="language-typescript">setClientRole(role: CLIENT_ROLE_TYPE): number</codeblock>
  </p>
  
  <!--setClientRole2-->
  <p id="setClientRole2">
      <codeblock props="windows" outputclass="language-cpp">virtual int setClientRole(CLIENT_ROLE_TYPE role, const ClientRoleOptions&amp; options) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setClientRoleWithOptions(role: CLIENT_ROLE_TYPE, options: ClientRoleOptions): number</codeblock>
  </p>
  
  <!--joinChannel1-->
  <p id="joinChannel1">
      <codeblock props="android" outputclass="language-java">public abstract int joinChannel(String token, String channelName, String optionalInfo, int optionalUid);</codeblock>
      <codeblock props="windows" outputclass="language-cpp">virtual int joinChannel(const char* token, const char* channelId, const char* info, uid_t uid) = 0;</codeblock>
      <codeblock props="rust" outputclass="language-rust">pub fn join_channel(&amp;self, token: &amp;str, channel_id: &amp;str, info: &amp;str, uid: u32) -> i32 {
  unsafe {
      let the_token: &amp;CStr = &amp;CString::new(token).expect("token new failed");
      let the_channel_id: &amp;CStr = &amp;CString::new(channel_id).expect("channel_id new failed");
      let the_info: &amp;CStr = &amp;CString::new(info).expect("info new failed");
      return agorartcnative::joinChannel(self.native_engine, the_token.as_ptr(), the_channel_id.as_ptr(), the_info.as_ptr(), uid);
  }
}</codeblock>
  </p>
  
  <!--joinChannel2-->
  <p id="joinChannel2">
      <codeblock props="windows" outputclass="language-cpp">virtual int joinChannel(const char* token,
    const char* channelId,
    const char* info,
    uid_t uid,
    const ChannelMediaOptions&amp; options) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">joinChannel(
          token: string,
          info: string,
          uid: number,
          options?: ChannelMediaOptions
          ): number</codeblock>
  </p>
  
  <!--switchChannel1-->
  <p id="switchChannel1">       
      <codeblock props="windows" outputclass="language-cpp">virtual int switchChannel(const char* token, const char* channelId) = 0;</codeblock>
  </p>
  
  <!--switchChannel2-->
  <p id="switchChannel2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int switchChannel(const char* token, const char* channelId, const ChannelMediaOptions&amp; options) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">switchChannel(token: string, channelId: string, options?: ChannelMediaOptions): number</codeblock>
  </p>
  
  <!--leaveChannel-->
  <p id="leaveChannel">       
      <codeblock props="windows" outputclass="language-cpp">virtual int leaveChannel() = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn leave_channel(&amp;self) -> i32 {
    unsafe {
        return agorartcnative::leaveChannel(self.native_engine);
    }
}
      </codeblock>
      <codeblock props="electron" outputclass="language-typescript">leaveChannel(): number</codeblock>
  </p>
  
  <!--renewToken-->
  <p id="renewToken">       
      <codeblock props="windows" outputclass="language-cpp">virtual int renewToken(const char* token) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">renewToken(token: string): number</codeblock>
  </p>
  
  <!--getConnectionState-->
  <p id="getConnectionState">       
      <codeblock props="windows" outputclass="language-cpp">virtual CONNECTION_STATE_TYPE getConnectionState() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getConnectionState(): CONNECTION_STATE_TYPE</codeblock>
  </p>
  
  <!--registerLocalUserAccount-->
  <p id="registerLocalUserAccount">       
      <codeblock props="windows" outputclass="language-cpp">virtual int registerLocalUserAccount(
    const char* appId, const char* userAccount) = 0;
      </codeblock>
      <codeblock props="electron" outputclass="language-typescript">registerLocalUserAccount(appId: string, userAccount: string): number</codeblock>
  </p>
  
  <!--joinChannelWithUserAccount1-->
  <p id="joinChannelWithUserAccount1">       
  <codeblock props="windows" outputclass="language-cpp">virtual int joinChannelWithUserAccount(const char* token,
   const char* channelId,
   const char* userAccount) = 0;</codeblock>   
  </p>
  
  <!--joinChannelWithUserAccount2-->
  <p id="joinChannelWithUserAccount2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int joinChannelWithUserAccount(const char* token,
       const char* channelId,
       const char* userAccount,
       const ChannelMediaOptions&amp; options) = 0;  </codeblock>
      <codeblock props="electron" outputclass="language-typescript">joinChannelWithUserAccount(
          token: string,
          userAccount: string,
          options: ChannelMediaOptions
          ): number</codeblock>
  </p>

  <!--getUserInfoByUserAccount-->
  <p id="getUserInfoByUserAccount">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getUserInfoByUserAccount(const char* userAccount, UserInfo* userInfo) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getUserInfoByUserAccount(
          userAccount: string
          ): { errCode: number; userInfo: UserInfo }</codeblock>
  </p>
  
  <!--getUserInfoByUid-->
  <p id="getUserInfoByUid">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getUserInfoByUid(uid_t uid, UserInfo* userInfo) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getUserInfoByUid(uid: number): { errCode: number; userInfo: UserInfo }</codeblock>
  </p>
  
  <!--enableWebSdkInteroperability-->
  <p id="enableWebSdkInteroperability">     
      <codeblock props="windows" outputclass="language-cpp">virtual int enableWebSdkInteroperability(bool enabled) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableWebSdkInteroperability(enabled: boolean): number</codeblock>
  </p>
  
  <!--enableAudio-->
  <p id="enableAudio">     
      <codeblock props="windows" outputclass="language-cpp">virtual int enableAudio() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableAudio(): number</codeblock>
  </p>
  
  <!--disableAudio-->
  <p id="disableAudio">       
      <codeblock props="windows" outputclass="language-cpp">virtual int disableAudio() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">disableAudio(): number</codeblock>
  </p>
    
  <!--setAudioProfile-->
  <p id="setAudioProfile">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario) = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn set_audio_profile(&amp;self, profile: AUDIO_PROFILE_TYPE, scenario: AUDIO_SCENARIO_TYPE) -> i32 {
      unsafe {
      return agorartcnative::setAudioProfile(self.native_engine, profile as u32, scenario as u32);
      }
      }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioProfile(
          profile: AUDIO_PROFILE_TYPE,
          scenario: AUDIO_SCENARIO_TYPE
          ): number </codeblock>
  </p>
  
  <!--setHighQualityAudioParameters-->
  <p id="setHighQualityAudioParameters">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setHighQualityAudioParameters(bool fullband, bool stereo, bool fullBitrate) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setHighQualityAudioParameters(
          fullband: boolean,
          stereo: boolean,
          fullBitrate: boolean
          ): number</codeblock>
  </p>
  
  <!--adjustRecordingSignalVolume-->
  <p id="adjustRecordingSignalVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int adjustRecordingSignalVolume(int volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">adjustRecordingSignalVolume(volume: number): number</codeblock>
  </p>
  
  <!--adjustUserPlaybackSignalVolume-->
  <p id="adjustUserPlaybackSignalVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int adjustUserPlaybackSignalVolume(unsigned int uid, int volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">adjustUserPlaybackSignalVolume(uid: number, volume: number): number</codeblock>
  </p>
  
  <!--adjustPlaybackSignalVolume-->
  <p id="adjustPlaybackSignalVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int adjustPlaybackSignalVolume(int volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">adjustPlaybackSignalVolume(volume: number): number</codeblock>
  </p>
  
  <!--enableLocalAudio-->
  <p id="enableLocalAudio">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableLocalAudio(bool enabled) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableLocalAudio(enabled: boolean): number</codeblock>
  </p>
  
  <!--muteLocalAudioStream-->
  <p id="muteLocalAudioStream">       
      <codeblock props="windows" outputclass="language-cpp">virtual int muteLocalAudioStream(bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">muteLocalAudioStream(mute: boolean): number</codeblock>
  </p>
  
  <!--muteRemoteAudioStream-->
  <p id="muteRemoteAudioStream">       
      <codeblock props="windows" outputclass="language-cpp">virtual int muteRemoteAudioStream(uid_t userId, bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">muteRemoteAudioStream(userId: number, mute: boolean): number</codeblock>
  </p>
  
  <!--muteAllRemoteAudioStreams-->
  <p id="muteAllRemoteAudioStreams">       
      <codeblock props="windows" outputclass="language-cpp">virtual int muteAllRemoteAudioStreams(bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">muteAllRemoteAudioStreams(mute: boolean): number</codeblock>
  </p>
  
  <!--setDefaultMuteAllRemoteAudioStreams-->
  <p id="setDefaultMuteAllRemoteAudioStreams">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setDefaultMuteAllRemoteAudioStreams(bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setDefaultMuteAllRemoteAudioStreams(mute: boolean): number</codeblock>
  </p>
  
  <!--enableVideo-->
  <p id="enableVideo">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableVideo() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableVideo(): number</codeblock>
  </p>
  
  <!--disableVideo-->
  <p id="disableVideo">       
      <codeblock props="windows" outputclass="language-cpp">virtual int disableVideo() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">disableVideo(): number</codeblock>
  </p>
  
  <!-- setVideoQualityParameters -->
  <p id="setVideoQualityParameters">
      <codeblock props="windows" outputclass="language-cpp">virtual int setVideoQualityParameters(bool preferFrameRateOverImageQuality) = 0;</codeblock>
  </p>
           
  <!--setVideoProfile-->
  <p id="setVideoProfile">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setVideoProfile(VIDEO_PROFILE_TYPE profile, bool swapWidthAndHeight) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setVideoProfile(
          profile: VIDEO_PROFILE_TYPE,
          swapWidthAndHeight: boolean = false
          ): number</codeblock>
  </p>
  
  <!--setVideoEncoderConfiguration-->
  <p id="setVideoEncoderConfiguration">       
      <codeblock outputclass="language-cpp" props="windows">virtual int setVideoEncoderConfiguration(const VideoEncoderConfiguration&amp; config) = 0;</codeblock>       
      <codeblock props="rust">pub fn set_video_encoder_configuration(&amp;self, config: agorartcnative::VideoEncoderConfiguration) -> i32 {
 unsafe {
 return agorartcnative::setVideoEncoderConfiguration(self.native_engine, config);
 }
 }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setVideoEncoderConfiguration(config: VideoEncoderConfiguration): number</codeblock>
  </p>
  
  <!--setupLocalVideo-->
  <p id="setupLocalVideo">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setupLocalVideo(const VideoCanvas&amp; canvas) = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn setup_local_video(&amp;self, canvas: agorartcnative::VideoCanvas) -> i32 {
 unsafe {
 return agorartcnative::setupLocalVideo(self.native_engine, canvas);
 }
 }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setupLocalVideo(view: Element, options?: RendererOptions): number</codeblock>
  </p>
  
  <!--setupRemoteVideo-->
  <p id="setupRemoteVideo">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setupRemoteVideo(const VideoCanvas&amp; canvas) = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn setup_remote_video(&amp;self, canvas: agorartcnative::VideoCanvas) -> i32 {
 unsafe {
 return agorartcnative::setupRemoteVideo(self.native_engine, canvas);
 }
 }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setupRemoteVideo(uid: number, view?: Element, channel?: string, options?: RendererOptions): number</codeblock>
  </p>
  
  <!--setLocalRenderMode1-->
  <p id="setLocalRenderMode1">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLocalRenderMode(RENDER_MODE_TYPE renderMode) = 0;</codeblock>   
  </p>
  
  <!--setLocalRenderMode2-->
  <p id="setLocalRenderMode2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLocalRenderMode(RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode) = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn set_local_render_mode(&amp;self, render_mode: RENDER_MODE_TYPE) -> i32 {
 unsafe {
 return agorartcnative::setLocalRenderMode(self.native_engine, render_mode as u32);
 }
 }</codeblock>
  </p>
  
  <!--setRemoteRenderMode1-->
  <p id="setRemoteRenderMode1">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteRenderMode(uid_t userId, RENDER_MODE_TYPE renderMode) = 0;</codeblock>   
  </p>
  
  <!--setRemoteRenderMode2-->
  <p id="setRemoteRenderMode2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteRenderMode(uid_t userId, RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode) = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn set_remote_render_mode(&amp;self, uid: u32, render_mode: RENDER_MODE_TYPE) -> i32 {
 unsafe {
 return agorartcnative::setRemoteRenderMode(self.native_engine, uid, render_mode as u32);
 }
 }</codeblock>
  </p>
           
  <!-- setVideoRenderDimension -->
  <p id="setVideoRenderDimension">
      <codeblock props="electron" outputclass="language-typescript">setVideoRenderDimension(
          rendertype: number,
          uid: number,
          width: number,
          height: number
          )</codeblock>
  </p>
  
  <!-- setVideoRenderFPS -->
  <p id="setVideoRenderFPS">
      <codeblock props="electron" outputclass="language-typescript">setVideoRenderFPS(fps: number)</codeblock>
  </p>
           
  <!-- setVideoRenderHighFPS -->
  <p id="setVideoRenderHighFPS">
      <codeblock props="electron" outputclass="language-typescript">setVideoRenderHighFPS(fps: number)</codeblock>
  </p>
           
  <!-- addVideoRenderToHighFPS -->
  <p id="addVideoRenderToHighFPS">
      <codeblock props="electron" outputclass="language-typescript">addVideoRenderToHighFPS(uid: number)</codeblock>
  </p>
           
  <!-- removeVideoRenderFromHighFPS -->
  <p id="removeVideoRenderFromHighFPS">
      <codeblock props="electron" outputclass="language-typescript">removeVideoRenderFromHighFPS(uid: number)</codeblock>
  </p>
           
  <!-- setupViewContentMode -->
  <p id="setupViewContentMode">
      <codeblock props="electron" outputclass="language-typescript">setupViewContentMode(
          uid: number | 'local' | 'videosource',
          mode: 0 | 1,
          channelId: string | undefined
          ): number</codeblock>
  </p>
       
  <!-- setRenderMode -->
  <p id="setRenderMode">
      <codeblock props="electron" outputclass="language-typescript">setRenderMode(mode: RENDER_MODE = RENDER_MODE.WEBGL): void</codeblock>
  </p>
  
  <!-- setCustomRenderer -->
  <p id="setCustomRenderer">
      <codeblock props="electron" outputclass="language-typescript">setCustomRenderer(customRenderer: IRenderer)</codeblock>
  </p>
           
  <!-- destroyRender -->
  <p id="destroyRender">
      <codeblock props="electron" outputclass="language-typescript">destroyRender(
          key: 'local' | 'videosource' | number, channelId: string | undefined,
          onFailure?: (err: Error) => void
          )</codeblock>
  </p>
  
  <!--startPreview-->
  <p id="startPreview">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startPreview() = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn start_preview(&amp;self) -> i32 {
 unsafe {
 return agorartcnative::startPreview(self.native_engine);
 }
 }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startPreview(): number</codeblock>
  </p>
  
  <!-- stopPreview -->
  <p id="stopPreview">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopPreview() = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn stop_preview(&amp;self) -> i32 {
 unsafe {
 return agorartcnative::stopPreview(self.native_engine);
 }
 }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopPreview(): number</codeblock>
  </p>
  
  <!--enableLocalVideo-->
  <p id="enableLocalVideo">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableLocalVideo(bool enabled) = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn enable_video(&amp;self) -> i32 {
 unsafe {
 return agorartcnative::enableVideo(self.native_engine);
 }
 }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableLocalVideo(enabled: boolean): number</codeblock>
  </p>
  
  <!--muteLocalVideoStream-->
  <p id="muteLocalVideoStream">       
      <codeblock props="windows" outputclass="language-cpp">virtual int agora::rtc::IRtcEngine::muteLocalVideoStream(bool mute) = 0; </codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn mute_local_video_stream(&amp;self, mute: bool) -> i32 {
 unsafe {
 let m: i32 = if mute { 1 } else { 0 };
 return agorartcnative::muteLocalVideoStream(self.native_engine, m);
 }
 } </codeblock>
      <codeblock props="electron" outputclass="language-typescript">muteLocalVideoStream(mute: boolean): number</codeblock>
  </p>
  
  <!--muteRemoteVideoStream-->
  <p id="muteRemoteVideoStream">       
      <codeblock outputclass="language-cpp" props="windows">virtual int muteRemoteVideoStream(uid_t userId, bool mute) = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn mute_remote_video_stream(&amp;self, uid: u32, mute: bool) -> i32 {
 unsafe {
 let m: i32 = if mute { 1 } else { 0 };
 return agorartcnative::muteRemoteVideoStream(self.native_engine, uid, m);
 }
 }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">muteRemoteVideoStream(userId: number, mute: boolean): number</codeblock>
  </p>
  
  <!--muteAllRemoteVideoStreams-->
  <p id="muteAllRemoteVideoStreams">       
      <codeblock props="windows" outputclass="language-cpp">virtual int muteAllRemoteVideoStreams(bool mute) = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn mute_all_remote_video_streams(&amp;self, mute: bool) -> i32 {
 unsafe {
 let m: i32 = if mute { 1 } else { 0 };
 return agorartcnative::muteAllRemoteVideoStreams(self.native_engine, m);
 }
 }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">muteAllRemoteVideoStreams(mute: boolean): number</codeblock>
  </p>
  
  <!--setDefaultMuteAllRemoteVideoStreams-->
  <p id="setDefaultMuteAllRemoteVideoStreams">       
      <codeblock outputclass="language-cpp" props="windows">virtual int setDefaultMuteAllRemoteVideoStreams(bool mute) = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn set_default_mute_all_remote_video_streams(&amp;self, mute: bool) -> i32 {
 unsafe {
 let is_mute: i32 = if mute { 1 } else { 0 };
 return agorartcnative::channel_setDefaultMuteAllRemoteVideoStreams(self.native_channel, is_mute);
 }
 }       
      </codeblock>
      <codeblock props="electron" outputclass="language-typescript">setDefaultMuteAllRemoteVideoStreams(mute: boolean): number</codeblock>
  </p>
  
  <!--setBeautyEffectOptions-->
  <p id="setBeautyEffectOptions">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setBeautyEffectOptions(bool enabled, BeautyOptions options) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setBeautyEffectOptions(
          enabled: boolean,
          options: BeautyOptions
          ): number</codeblock>
  </p>
  
  <!--createChannel-->
  <p id="createChannel">       
      <codeblock props="windows" outputclass="language-cpp">virtual IChannel* createChannel(const char *channelId) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">createChannel(channelId: string): (AgoraRtcChannel | null)</codeblock>
  </p>
  
  <!--IChannel_release-->
  <p id="IChannel_release">
       <codeblock props="windows" outputclass="language-cpp">virtual int release() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">release(): number</codeblock>
   </p>
  
  <!--IChannel_setChannelEventHandler-->
  <p id="IChannel_setChannelEventHandler">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setChannelEventHandler(IChannelEventHandler *channelEh) = 0;</codeblock>
  </p>
  
  <!--IChannel_joinChannel-->
  <p id="IChannel_joinChannel">       
      <codeblock props="windows" outputclass="language-cpp">virtual int joinChannel(const char* token,
 const char* info,
 uid_t uid,
 const ChannelMediaOptions&amp; options) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">joinChannel(
          token: string,
          info: string,
          uid: number,
          options?: ChannelMediaOptions
          ): number</codeblock>
  </p>
  
  <!--IChannel_joinChannelWithUserAccount-->
  <p id="IChannel_joinChannelWithUserAccount">       
      <codeblock props="windows" outputclass="language-cpp">virtual int joinChannelWithUserAccount(const char* token,
       const char* userAccount,
       const ChannelMediaOptions&amp; options) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">joinChannelWithUserAccount(
          token: string,
          userAccount: string,
          options: ChannelMediaOptions
          ): number</codeblock>
  </p>
  
  <!--IChannel_leaveChannel-->
  <p id="IChannel_leaveChannel">       
      <codeblock props="windows" outputclass="language-cpp">virtual int leaveChannel() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">leaveChannel(): number</codeblock>
  </p>

  <!--IChannel_publish-->
  <p id="IChannel_publish">       
      <codeblock props="windows" outputclass="language-cpp">virtual int publish() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">publish(): number</codeblock>
  </p>

  <!--IChannel_unpublish-->
  <p id="IChannel_unpublish">       
      <codeblock props="windows" outputclass="language-cpp">virtual int unpublish() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">unpublish(): number</codeblock>
  </p>

  <!--IChannel_channelId-->
  <p id="IChannel_channelId">       
      <codeblock props="windows" outputclass="language-cpp">virtual const char *channelId() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">channelId(): string</codeblock>
  </p>

  <!--IChannel_getCallId-->
  <p id="IChannel_getCallId">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getCallId(agora::util::AString&amp; callId) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getCallId(): string</codeblock>
  </p>

  <!--IChannel_renewToken-->
  <p id="IChannel_renewToken">       
      <codeblock props="windows" outputclass="language-cpp">virtual int renewToken(const char* token) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">renewToken(token: string): number</codeblock>
  </p>

  <!--IChannel_setEncryptionSecret-->
  <p id="IChannel_setEncryptionSecret">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setEncryptionSecret(const char* secret) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setEncryptionSecret(secret: string): number</codeblock>
  </p>

  <!--IChannel_setEncryptionMode-->
  <p id="IChannel_setEncryptionMode">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setEncryptionMode(const char* encryptionMode) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setEncryptionMode(encryptionMode: string): number</codeblock>
  </p>

  <!--IChannel_enableEncryption-->
  <p id="IChannel_enableEncryption">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableEncryption(bool enabled, const EncryptionConfig&amp; config) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableEncryption(enabled: boolean, config: EncryptionConfig): number</codeblock>
  </p>

  <!--IChannel_registerPacketObserver-->
  <p id="IChannel_registerPacketObserver">       
      <codeblock props="windows" outputclass="language-cpp">virtual int registerPacketObserver(IPacketObserver* observer) = 0;</codeblock>   
  </p>

  <!--IChannel_registerMediaMetadataObserver-->
  <p id="IChannel_registerMediaMetadataObserver">       
      <codeblock props="windows" outputclass="language-cpp">virtual int registerMediaMetadataObserver(IMetadataObserver *observer, IMetadataObserver::METADATA_TYPE type) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">registerMediaMetadataObserver(): number</codeblock>
  </p>
           
  <!-- IChannel_unregisterMediaMetadataObserver -->
  <p id="IChannel_unregisterMediaMetadataObserver">
      <codeblock props="electron" outputclass="language-typescript">unRegisterMediaMetadataObserver(): number</codeblock>
  </p>
  
  <!-- IChannel_sendMetadata -->
  <p id="IChannel_sendMetadata">
      <codeblock props="electron" outputclass="language-typescript">sendMetadata(metadata: Metadata): number</codeblock>
  </p>
           
  <!-- IChannel_setMaxMetadataSize -->
  <p id="IChannel_setMaxMetadataSize">
      <codeblock props="electron" outputclass="language-typescript">setMaxMetadataSize(size: number): number</codeblock>
  </p>
  
  <!--IChannel_setClientRole1-->
  <p id="IChannel_setClientRole1">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setClientRole(CLIENT_ROLE_TYPE role) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setClientRole(role: CLIENT_ROLE_TYPE): number</codeblock>
  </p>
  
  <!--IChannel_setClientRole2-->
  <p id="IChannel_setClientRole2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setClientRole(CLIENT_ROLE_TYPE role, const ClientRoleOptions&amp; options) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setClientRoleWithOptions(role: CLIENT_ROLE_TYPE, options: ClientRoleOptions): number</codeblock>
  </p>
  
  <!--IChannel_setRemoteUserPriority-->
  <p id="IChannel_setRemoteUserPriority">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteUserPriority(uid_t uid, PRIORITY_TYPE userPriority) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setRemoteUserPriority(uid: number, userPriority: PRIORITY_TYPE): number</codeblock>
  </p>
  
  <!--IChannel_setRemoteVoicePosition-->
  <p id="IChannel_setRemoteVoicePosition">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteVoicePosition(uid_t uid, double pan, double gain) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setRemoteVoicePosition(uid: number, pan: number, gain: number): number</codeblock>
  </p>
  
  <!--IChannel_setRemoteRenderMode-->
  <p id="IChannel_setRemoteRenderMode">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteRenderMode(uid_t userId, RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode) = 0;</codeblock>
  </p>
  
  <!--IChannel_setDefaultMuteAllRemoteAudioStreams-->
  <p id="IChannel_setDefaultMuteAllRemoteAudioStreams">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setDefaultMuteAllRemoteAudioStreams(bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setDefaultMuteAllRemoteAudioStreams(mute: boolean): number</codeblock>
  </p>
  
  <!--IChannel_setDefaultMuteAllRemoteVideoStreams-->
  <p id="IChannel_setDefaultMuteAllRemoteVideoStreams">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setDefaultMuteAllRemoteVideoStreams(bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setDefaultMuteAllRemoteVideoStreams(mute: boolean): number</codeblock>
  </p>
  
  <!--IChannel_muteAllRemoteAudioStreams-->
  <p id="IChannel_muteAllRemoteAudioStreams">       
      <codeblock props="windows" outputclass="language-cpp">virtual int muteAllRemoteAudioStreams(bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setDefaultMuteAllRemoteVideoStreams(mute: boolean): number</codeblock>
  </p>
  
  <!--IChannel_adjustUserPlaybackSignalVolume-->
  <p id="IChannel_adjustUserPlaybackSignalVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int adjustUserPlaybackSignalVolume(uid_t userId, int volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">adjustUserPlaybackSignalVolume(userId: number, volume: number): number</codeblock>
  </p>

  <!--IChannel_muteRemoteAudioStream-->
  <p id="IChannel_muteRemoteAudioStream">       
      <codeblock props="windows" outputclass="language-cpp">virtual int muteRemoteAudioStream(uid_t userId, bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">muteRemoteAudioStream(userId: number, mute: boolean): number</codeblock>
  </p>
  
  <!--IChannel_muteAllRemoteVideoStreams-->
  <p id="IChannel_muteAllRemoteVideoStreams">       
      <codeblock props="windows" outputclass="language-cpp">virtual int muteAllRemoteVideoStreams(bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">muteAllRemoteVideoStreams(mute: boolean): number</codeblock>
  </p>
  
  <!--IChannel_muteRemoteVideoStream-->
  <p id="IChannel_muteRemoteVideoStream">       
      <codeblock props="windows" outputclass="language-cpp">virtual int muteRemoteVideoStream(uid_t userId, bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">muteRemoteVideoStream(userId: number, mute: boolean): number</codeblock>
  </p>
  
  <!--IChannel_setRemoteVideoStreamType-->
  <p id="IChannel_setRemoteVideoStreamType">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteVideoStreamType(uid_t userId, REMOTE_VIDEO_STREAM_TYPE streamType) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setRemoteVideoStreamType(userId: number, streamType: REMOTE_VIDEO_STREAM_TYPE): number</codeblock>
  </p>
  
  <!--IChannel_setRemoteDefaultVideoStreamType-->
  <p id="IChannel_setRemoteDefaultVideoStreamType">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteDefaultVideoStreamType(REMOTE_VIDEO_STREAM_TYPE streamType) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setRemoteDefaultVideoStreamType(streamType: REMOTE_VIDEO_STREAM_TYPE): number</codeblock>
  </p>
  
  <!--IChannel_createDataStream1-->
  <p id="IChannel_createDataStream1">       
      <codeblock props="windows" outputclass="language-cpp">virtual int createDataStream(int* streamId, bool reliable, bool ordered) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">createDataStream(reliable: boolean, ordered: boolean): number</codeblock>
  </p>
  
  <!--IChannel_createDataStream2-->
  <p id="IChannel_createDataStream2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int createDataStream(int* streamId, DataStreamConfig&amp; config) = 0;</codeblock>   
  </p>
  
  <!--IChannel_sendStreamMessage-->
  <p id="IChannel_sendStreamMessage">       
      <codeblock props="windows" outputclass="language-cpp">virtual int sendStreamMessage(int streamId, const char* data, size_t length) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">sendStreamMessage(streamId: number, msg: string): number</codeblock>
  </p>
  
  <!--IChannel_addPublishStreamUrl-->
  <p id="IChannel_addPublishStreamUrl">       
      <codeblock props="windows" outputclass="language-cpp">virtual int addPublishStreamUrl(const char *url, bool transcodingEnabled) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">addPublishStreamUrl(url: string, transcodingEnabled: boolean): number</codeblock>
  </p>
  
  <!--IChannel_removePublishStreamUrl-->
  <p id="IChannel_removePublishStreamUrl">       
      <codeblock props="windows" outputclass="language-cpp">virtual int removePublishStreamUrl(const char *url) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">removePublishStreamUrl(url: string): number</codeblock>
  </p>

  <!--IChannel_setLiveTranscoding-->
  <p id="IChannel_setLiveTranscoding">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLiveTranscoding(const LiveTranscoding &amp;transcoding) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setLiveTranscoding(transcoding: LiveTranscoding): number</codeblock>
  </p>
  
  <!--IChannel_addInjectStreamUrl-->
  <p id="IChannel_addInjectStreamUrl">       
      <codeblock props="windows" outputclass="language-cpp">virtual int addInjectStreamUrl(const char* url, const InjectStreamConfig&amp; config) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">addInjectStreamUrl(url: string, config: InjectStreamConfig): number</codeblock>
  </p>
  
  <!--IChannel_removeInjectStreamUrl-->
  <p id="IChannel_removeInjectStreamUrl">       
      <codeblock props="windows" outputclass="language-cpp">virtual int removeInjectStreamUrl(const char* url) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">removeInjectStreamUrl(url: string): number</codeblock>
  </p>
  
  <!--IChannel_startChannelMediaRelay-->
  <p id="IChannel_startChannelMediaRelay">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startChannelMediaRelay(const ChannelMediaRelayConfiguration &amp;configuration) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startChannelMediaRelay(configuration: ChannelMediaRelayConfiguration): number</codeblock>
  </p>
  
  <!--IChannel_updateChannelMediaRelay-->
  <p id="IChannel_updateChannelMediaRelay">       
      <codeblock props="windows" outputclass="language-cpp">virtual int updateChannelMediaRelay(const ChannelMediaRelayConfiguration &amp;configuration) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">updateChannelMediaRelay(configuration: ChannelMediaRelayConfiguration): number</codeblock>
  </p>
  
  <!--IChannel_stopChannelMediaRelay-->
  <p id="IChannel_stopChannelMediaRelay">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopChannelMediaRelay() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopChannelMediaRelay(): number</codeblock>
  </p>
  
  <!--IChannel_getConnectionState-->
  <p id="IChannel_getConnectionState">       
      <codeblock props="windows" outputclass="language-cpp">virtual CONNECTION_STATE_TYPE getConnectionState() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getConnectionState(): CONNECTION_STATE_TYPE</codeblock>
  </p>
           
  <!-- getScreenWindowsInfo -->
  <p id="getScreenWindowsInfo">
      <codeblock props="electron" outputclass="language-typescript">getScreenWindowsInfo(): Array&lt;Object&gt;</codeblock>
  </p>
           
  <!-- getScreenDisplaysInfo -->
  <p id="getScreenDisplaysinfo">
      <codeblock props="electron" outputclass="language-typescript">getScreenDisplaysInfo(): Array&lt;Object&gt;</codeblock>
  </p>
  
  <!--startScreenCapture-->
  <p id="startScreenCapture">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startScreenCapture(WindowIDType windowId, int captureFreq, const Rect* rect, int bitrate) = 0;</codeblock>   
  </p>
  
  <!--startScreenCaptureByDisplayId-->
  <p id="startScreenCaptureByDisplayId">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startScreenCaptureByDisplayId(unsigned int displayId, const Rectangle&amp; regionRect, const ScreenCaptureParameters&amp; captureParams) = 0;</codeblock>   
  </p>
  
  <!--startScreenCaptureByScreenRect-->
  <p id="startScreenCaptureByScreenRect">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startScreenCaptureByScreenRect(const Rectangle&amp; screenRect, const Rectangle&amp; regionRect, const ScreenCaptureParameters&amp; captureParams) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startScreenCaptureByScreen(
          screenSymbol: ScreenSymbol,
          regionRect: Rectangle,
          captureParams: ScreenCaptureParameters
          ): number</codeblock>
  </p>
  
  <!--startScreenCaptureByWindowId-->
  <p id="startScreenCaptureByWindowId">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startScreenCaptureByWindowId(view_t windowId, const Rectangle&amp; regionRect, const ScreenCaptureParameters&amp; captureParams) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startScreenCaptureByWindow(
          windowId: number,
          regionRect: Rectangle,
          captureParams: ScreenCaptureParameters
          ): number</codeblock>
  </p>
  
  <!--setScreenCaptureContentHint-->
  <p id="setScreenCaptureContentHint">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setScreenCaptureContentHint(VideoContentHint contentHint) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setScreenCaptureContentHint(contentHint: VideoContentHint): number</codeblock>
  </p>
  
  <!--updateScreenCaptureParameters-->
  <p id="updateScreenCaptureParameters">       
      <codeblock props="windows" outputclass="language-cpp">virtual int updateScreenCaptureParameters(const ScreenCaptureParameters&amp; captureParams) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">updateScreenCaptureParameters(captureParams: ScreenCaptureParameters): number</codeblock>
  </p>
  
  <!--updateScreenCaptureRegion1-->
  <p id="updateScreenCaptureRegion1">       
      <codeblock props="windows" outputclass="language-cpp">virtual int updateScreenCaptureRegion(const Rectangle&amp; regionRect) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">updateScreenCaptureRegion(regionRect: Rectangle): number</codeblock>
  </p>
  
  <!--updateScreenCaptureRegion2-->
  <p id="updateScreenCaptureRegion2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int updateScreenCaptureRegion(const Rect* rect) = 0;</codeblock>   
  </p>
  
  <!--stopScreenCapture-->
  <p id="stopScreenCapture">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopScreenCapture() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopScreenCapture(): number</codeblock>
  </p>

  <!--startAudioMixing-->
  <p id="startAudioMixing">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startAudioMixing(const char* filePath, bool loopback, bool replace, int cycle) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startAudioMixing(
          filePath: string,
          loopback: boolean,
          replace: boolean,
          cycle: number
          ): number</codeblock>
  </p>
  
  <!--stopAudioMixing-->
  <p id="stopAudioMixing">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopAudioMixing() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopAudioMixing(): number</codeblock>
  </p>
  
  <!--pauseAudioMixing-->
  <p id="pauseAudioMixing">       
      <codeblock props="windows" outputclass="language-cpp">virtual int pauseAudioMixing() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">pauseAudioMixing(): number</codeblock>
  </p>
  
  <!--resumeAudioMixing-->
  <p id="resumeAudioMixing">       
      <codeblock props="windows" outputclass="language-cpp">virtual int resumeAudioMixing() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">resumeAudioMixing(): number</codeblock>
  </p>
  
  <!--adjustAudioMixingVolume-->
  <p id="adjustAudioMixingVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int adjustAudioMixingVolume(int volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">adjustAudioMixingVolume(volume: number): number</codeblock>
  </p>
  
  <!--adjustAudioMixingPlayoutVolume-->
  <p id="adjustAudioMixingPlayoutVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int adjustAudioMixingPlayoutVolume(int volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">adjustAudioMixingPlayoutVolume(volume: number): number</codeblock>
  </p>
  
  <!--adjustAudioMixingPublishVolume-->
  <p id="adjustAudioMixingPublishVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int adjustAudioMixingPublishVolume(int volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">adjustAudioMixingPublishVolume(volume: number): number</codeblock>
  </p>
  
  <!--setAudioMixingPitch-->
  <p id="setAudioMixingPitch">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setAudioMixingPitch(int pitch) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioMixingPitch(pitch: number): number</codeblock>
  </p>
  
  <!--getAudioMixingPlayoutVolume-->
  <p id="getAudioMixingPlayoutVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getAudioMixingPlayoutVolume() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getAudioMixingPlayoutVolume(): number</codeblock>
  </p>

  <!--getAudioMixingPublishVolume-->
  <p id="getAudioMixingPublishVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getAudioMixingPublishVolume() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getAudioMixingPublishVolume(): number</codeblock>
  </p>
  
  <!--getAudioMixingDuration-->
  <p id="getAudioMixingDuration">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getAudioMixingDuration() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getAudioMixingDuration(): number</codeblock>
  </p>
  
  <!--getAudioMixingCurrentPosition-->
  <p id="getAudioMixingCurrentPosition">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getAudioMixingCurrentPosition() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getAudioMixingCurrentPosition(): number</codeblock>
  </p>
  
  <!--setAudioMixingPosition-->
  <p id="setAudioMixingPosition">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setAudioMixingPosition(int pos /*in ms*/) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioMixingPosition(pos: number): number</codeblock>
  </p>
  
  <!--getEffectsVolume-->
  <p id="getEffectsVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getEffectsVolume() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getEffectsVolume(): number</codeblock>
  </p>
  
  <!--setEffectsVolume-->
  <p id="setEffectsVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setEffectsVolume(int volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setEffectsVolume(volume: number): number</codeblock>
  </p>
  
  <!--setVolumeOfEffect-->
  <p id="setVolumeOfEffect">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setVolumeOfEffect(int soundId, int volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setVolumeOfEffect(soundId: number, volume: number): number</codeblock>
  </p>
           
    <!--playEffect1-->
    <p id="playEffect1"> 
        <codeblock props="android" outputclass="language-java">public int playEffect(int soundId, String filePath, int loop, double pitch, double pan, double gain);</codeblock>
        <codeblock props="apple" outputclass="language-objectivec">- (int)playEffect:(int)soundId filePath:(NSString* _Nullable)filePath loopCount:(int)loopCount pitch:(double)pitch pan:(double)pan gain:(double)gain __deprecated;</codeblock>
    </p>

  <!--playEffect2-->
  <p id="playEffect2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int playEffect(int soundId, const char* filePath, int loopCount, double pitch, double pan, int gain, bool publish = false) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">playEffect(
          soundId: number,
          filePath: string,
          loopCount: number,
          pitch: number,
          pan: number,
          gain: number,
          publish: number
          ): number</codeblock>
  </p>

  <!--playEffect3-->
  <p id="playEffect3">       
      <codeblock props="windows" outputclass="language-cpp">virtual int playEffect(int soundId, const char* filePath, int loopCount, double pitch, double pan, int gain, bool publish, int startPos) = 0;</codeblock>   
  </p>
  
  <!--stopEffect-->
  <p id="stopEffect">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopEffect(int soundId) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopEffect(soundId: number): number</codeblock>
  </p>
  
  <!--stopAllEffects-->
  <p id="stopAllEffects">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopAllEffects() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopAllEffects(): number</codeblock>
  </p>
  
  <!--preloadEffect-->
  <p id="preloadEffect">     
      <codeblock props="windows" outputclass="language-cpp">virtual int preloadEffect(int soundId, const char* filePath) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">preloadEffect(soundId: number, filePath: string): number</codeblock>
  </p>
  
  <!--unloadEffect-->
  <p id="unloadEffect">       
      <codeblock props="windows" outputclass="language-cpp">virtual int unloadEffect(int soundId) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">unloadEffect(soundId: number): number</codeblock>
  </p>
  
  <!--pauseEffect-->
  <p id="pauseEffect">       
      <codeblock props="windows" outputclass="language-cpp">virtual int pauseEffect(int soundId) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">pauseEffect(soundId: number): number</codeblock>
  </p>
  
  <!--pauseAllEffects-->
  <p id="pauseAllEffects">       
      <codeblock props="windows" outputclass="language-cpp">virtual int pauseAllEffects() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">pauseAllEffects(): number</codeblock>
  </p>
  
  <!--resumeEffect-->
  <p id="resumeEffect">       
      <codeblock props="windows" outputclass="language-cpp">virtual int resumeEffect(int soundId) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">resumeEffect(soundId: number): number</codeblock>
  </p>
  
  <!--resumeAllEffects-->
  <p id="resumeAllEffects">       
      <codeblock props="windows" outputclass="language-cpp">virtual int resumeAllEffects() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">resumeAllEffects(): number</codeblock>
  </p>
  
  <!--setLocalVoiceChanger-->
  <p id="setLocalVoiceChanger">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLocalVoiceChanger(VOICE_CHANGER_PRESET voiceChanger) = 0;</codeblock>
      <codeblock props="electron" outputclass="lanuage-typescript">setLocalVoiceChanger(voiceChanger: VOICE_CHANGER_PRESET): number</codeblock>
  </p>
  
  <!--setLocalVoiceReverbPreset-->
  <p id="setLocalVoiceReverbPreset">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLocalVoiceReverbPreset(AUDIO_REVERB_PRESET reverbPreset) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setLocalVoiceReverbPreset(reverbPreset: AUDIO_REVERB_PRESET)</codeblock>
  </p>
  
  <!--setLocalVoicePitch-->
  <p id="setLocalVoicePitch">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLocalVoicePitch(double pitch) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setLocalVoicePitch(pitch: number): number</codeblock>
  </p>
  
  <!--setLocalVoiceEqualization-->
  <p id="setLocalVoiceEqualization">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLocalVoiceEqualization(AUDIO_EQUALIZATION_BAND_FREQUENCY bandFrequency, int bandGain) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">etLocalVoiceEqualization(bandFrequency: number, bandGain: number): number</codeblock>
  </p>
  
  <!--setLocalVoiceReverb-->
  <p id="setLocalVoiceReverb">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLocalVoiceReverb(AUDIO_REVERB_TYPE reverbKey, int value) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setLocalVoiceReverb(reverbKey: number, value: number): number</codeblock>
  </p>
  
  <!--setVoiceBeautifierPreset-->
  <p id="setVoiceBeautifierPreset">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setVoiceBeautifierPreset(VOICE_BEAUTIFIER_PRESET preset) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setVoiceBeautifierPreset(preset: VOICE_BEAUTIFIER_PRESET): number</codeblock>
  </p>
  
  <!--setVoiceBeautifierParameters-->
  <p id="setVoiceBeautifierParameters">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setVoiceBeautifierParameters(VOICE_BEAUTIFIER_PRESET preset, int param1, int param2) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioEffectParameters(preset: AUDIO_EFFECT_PRESET, param1: number, param2: number): number</codeblock>
  </p>
  
  <!--setAudioEffectPreset-->
  <p id="setAudioEffectPreset">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setAudioEffectPreset(AUDIO_EFFECT_PRESET preset) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioEffectPreset(preset: AUDIO_EFFECT_PRESET): number</codeblock>
  </p>
  
  <!--setAudioEffectParameters-->
  <p id="setAudioEffectParameters">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setAudioEffectParameters(AUDIO_EFFECT_PRESET preset, int param1, int param2) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioEffectParameters(preset: AUDIO_EFFECT_PRESET, param1: number, param2: number): number</codeblock>
  </p>
           
           <!--setVoiceConversionPreset-->
           <p id="setVoiceConversionPreset">       
       <codeblock props="windows" outputclass="language-cpp">virtual int setVoiceConversionPreset(VOICE_CONVERSION_PRESET preset) = 0;</codeblock>
    </p>
  
  <!--enableSoundPositionIndication-->
  <p id="enableSoundPositionIndication">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableSoundPositionIndication(bool enabled) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableSoundPositionIndication(enabled: boolean)</codeblock>
  </p>
  
  <!--setRemoteVoicePosition-->
  <p id="setRemoteVoicePosition">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteVoicePosition(uid_t uid, double pan, double gain) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setRemoteVoicePosition(uid: number, pan: number, gain: number): number</codeblock>
  </p>
  
  <!--setLiveTranscoding-->
  <p id="setLiveTranscoding">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLiveTranscoding(const LiveTranscoding &amp;transcoding) = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn set_live_transcoding(&amp;self, transcoding: *const agorartcnative::LiveTranscoding) -> i32 {
 unsafe {
 return agorartcnative::setLiveTranscoding(self.native_engine, transcoding);
 }
 }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setLiveTranscoding(transcoding: LiveTranscoding): number</codeblock>
  </p>
  
  <!--addPublishStreamUrl-->
  <p id="addPublishStreamUrl">       
      <codeblock props="windows" outputclass="language-cpp">virtual int addPublishStreamUrl(const char *url, bool transcodingEnabled) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">addPublishStreamUrl(url: string, transcodingEnabled: boolean): number</codeblock>
  </p>
  
  <!--removePublishStreamUrl-->
  <p id="removePublishStreamUrl">       
      <codeblock props="windows" outputclass="language-cpp">virtual int removePublishStreamUrl(const char *url) = 0;</codeblock>       
      <codeblock props="rust" outputclass="language-rust">pub fn remove_publish_stream_url(&amp;self, url: &amp;str) -> i32 {
 unsafe {
 let the_url: &amp;CStr = &amp;CString::new(url).expect("url new failed");
 return agorartcnative::channel_removePublishStreamUrl(self.native_channel, the_url.as_ptr());
 }
 }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">removePublishStreamUrl(url: string): number</codeblock>
  </p>
 
  <!--startChannelMediaRelay-->
  <p id="startChannelMediaRelay">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startChannelMediaRelay(const ChannelMediaRelayConfiguration &amp;configuration) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startChannelMediaRelay(config: ChannelMediaRelayConfiguration): number</codeblock>
  </p>
  
  <!--updateChannelMediaRelay-->
  <p id="updateChannelMediaRelay">       
      <codeblock props="windows" outputclass="language-cpp">virtual int updateChannelMediaRelay(const ChannelMediaRelayConfiguration &amp;configuration) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">updateChannelMediaRelay(config: ChannelMediaRelayConfiguration): number</codeblock>
  </p>
 
  <!--stopChannelMediaRelay-->
  <p id="stopChannelMediaRelay">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopChannelMediaRelay() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopChannelMediaRelay(): number</codeblock>
  </p>
  
  <!--enableAudioVolumeIndication-->
  <p id="enableAudioVolumeIndication">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableAudioVolumeIndication(int interval, int smooth, bool report_vad) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableAudioVolumeIndication(interval: number, smooth: number, report_vad: boolean = false): number</codeblock>
  </p>
  
  <!--enableFaceDetection-->
  <p id="enableFaceDetection">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableFaceDetection(bool enable) = 0;</codeblock>   
  </p>
  
  <!--setDefaultAudioRouteToSpeakerphone-->
  <p id="setDefaultAudioRouteToSpeakerphone">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setDefaultAudioRouteToSpeakerphone(bool defaultToSpeaker) = 0;</codeblock>   
  </p>
  
  <!--setEnableSpeakerphone-->
  <p id="setEnableSpeakerphone">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setEnableSpeakerphone(bool speakerOn) = 0;</codeblock>   
  </p>
  
  <!--isSpeakerphoneEnabled-->
  <p id="isSpeakerphoneEnabled">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool isSpeakerphoneEnabled() = 0;</codeblock>   
  </p>
  
  <!--enableInEarMonitoring-->
  <p id="enableInEarMonitoring">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableInEarMonitoring(bool enabled) = 0;</codeblock>   
  </p>
 
  <!--setInEarMonitoringVolume-->
  <p id="setInEarMonitoringVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setInEarMonitoringVolume(int volume) = 0;</codeblock>   
  </p>
  
  <!--enableDualStreamMode-->
  <p id="enableDualStreamMode">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableDualStreamMode(bool enabled) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableDualStreamMode(enabled: boolean): number</codeblock>
  </p>
  
  <!--setRemoteVideoStreamType-->
  <p id="setRemoteVideoStreamType">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteVideoStreamType(uid_t userId, REMOTE_VIDEO_STREAM_TYPE streamType) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setRemoteVideoStreamType(userId: number, streamType: REMOTE_VIDEO_STREAM_TYPE): number</codeblock>
  </p>
  
  <!--setRemoteDefaultVideoStreamType-->
  <p id="setRemoteDefaultVideoStreamType">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteDefaultVideoStreamType(REMOTE_VIDEO_STREAM_TYPE streamType) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setRemoteDefaultVideoStreamType(streamType: REMOTE_VIDEO_STREAM_TYPE): number</codeblock>
  </p>
  
  <!--setLocalPublishFallbackOption-->
  <p id="setLocalPublishFallbackOption">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLocalPublishFallbackOption(STREAM_FALLBACK_OPTIONS option) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setLocalPublishFallbackOption(option: STREAM_FALLBACK_OPTIONS): number</codeblock>
  </p>
  
  <!--setRemoteSubscribeFallbackOption-->
  <p id="setRemoteSubscribeFallbackOption">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteSubscribeFallbackOption(STREAM_FALLBACK_OPTIONS option) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setRemoteSubscribeFallbackOption(option: STREAM_FALLBACK_OPTIONS): number</codeblock>
  </p>
  
  <!--setRemoteUserPriority-->
  <p id="setRemoteUserPriority">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteUserPriority(uid_t uid, PRIORITY_TYPE userPriority) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setRemoteUserPriority(uid: number, userPriority: PRIORITY_TYPE)</codeblock>
  </p>
  
  <!--startEchoTest1-->
  <p id="startEchoTest1">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startEchoTest() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startEchoTest(): number</codeblock>
  </p>
  
  <!--startEchoTest2-->
  <p id="startEchoTest2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startEchoTest(int intervalInSeconds) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startEchoTestWithInterval(intervalInSeconds: number): number</codeblock>
  </p>
  
  <!--stopEchoTest-->
  <p id="stopEchoTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopEchoTest() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopEchoTest(): number</codeblock>
  </p>
  <!--enableLastmileTest-->
  <p id="enableLastmileTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableLastmileTest() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableLastmileTest(): number</codeblock>
  </p>
  
  <!--disableLastmileTest-->
  <p id="disableLastmileTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int disableLastmileTest() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">disableLastmileTest(): number</codeblock>
  </p>
  
  <!--startLastmileProbeTest-->
  <p id="startLastmileProbeTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startLastmileProbeTest(const LastmileProbeConfig&amp; config) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startLastmileProbeTest(config: LastmileProbeConfig): number</codeblock>
  </p>
  
  <!--stopLastmileProbeTest-->
  <p id="stopLastmileProbeTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopLastmileProbeTest() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopLastmileProbeTest(): number</codeblock>
  </p>
  
  <!--setVideoSource-->
  <p id="setVideoSource">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool setVideoSource(IVideoSource *source) = 0;</codeblock>  
  </p>
  
  <!--setExternalVideoSource-->
  <p id="setExternalVideoSource">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setExternalVideoSource(bool enable, bool useTexture) = 0;</codeblock>   
  </p>
  
  <!--pushVideoFrame-->
  <p id="pushVideoFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual int pushVideoFrame(ExternalVideoFrame *frame) = 0;</codeblock>   
  </p>
  
  <!--setExternalAudioSource-->
  <p id="setExternalAudioSource">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setExternalAudioSource(bool enabled, int sampleRate, int channels) = 0;</codeblock>   
  </p>
  
  <!--pushAudioFrame1-->
  <p id="pushAudioFrame1">       
      <codeblock props="windows" outputclass="language-cpp">virtual int pushAudioFrame(MEDIA_SOURCE_TYPE type,
  IAudioFrameObserver::AudioFrame* frame,
  bool wrap) = 0;</codeblock>  
  </p>
  
  <!--pushAudioFrame2-->
  <p id="pushAudioFrame2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int pushAudioFrame(IAudioFrameObserver::AudioFrame* frame) = 0;</codeblock>   
  </p>
  
  <!--setExternalAudioSink-->
  <p id="setExternalAudioSink">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setExternalAudioSink(bool enabled, int sampleRate, int channels) = 0;</codeblock>   
  </p>
 
  <!--pullAudioFrame-->
  <p id="pullAudioFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual int pullAudioFrame(IAudioFrameObserver::AudioFrame* frame) = 0;</codeblock>   
  </p>
  
  <!--registerAudioFrameObserver-->
  <p id="registerAudioFrameObserver">       
      <codeblock props="windows" outputclass="language-cpp">virtual int registerAudioFrameObserver(IAudioFrameObserver* observer) = 0;</codeblock>   
  </p>
  
  <!--setRecordingAudioFrameParameters-->
  <p id="setRecordingAudioFrameParameters">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRecordingAudioFrameParameters(int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setRecordingAudioFrameParameters(sampleRate: number, channel: 1 | 2, mode: 0 | 1 | 2, samplesPerCall: number): number</codeblock>
  </p>
  
  <!--setPlaybackAudioFrameParameters-->
  <p id="setPlaybackAudioFrameParameters">
      <codeblock props="windows" outputclass="language-cpp">virtual int setPlaybackAudioFrameParameters(int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall) = 0;</codeblock>
  </p>
  
  <!--setMixedAudioFrameParameters-->
  <p id="setMixedAudioFrameParameters">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setMixedAudioFrameParameters(int sampleRate, int samplesPerCall) = 0;</codeblock>   
  </p>
  
  <!--registerVideoFrameObserver-->
  <p id="registerVideoFrameObserver">       
      <codeblock props="windows" outputclass="language-cpp">virtual int registerVideoFrameObserver(IVideoFrameObserver* observer) = 0;</codeblock>   
  </p>
  
  <!-- consumeRawVideoFrame -->
  <p id="consumeRawVideoFrame">
      <codeblock props="windows" outputclass="language-cpp">virtual void consumeRawVideoFrame(const unsigned char *buffer, agora::media::ExternalVideoFrame::VIDEO_PIXEL_FORMAT frameType, int width, int height, int rotation, long timestamp) = 0;</codeblock>
  </p>
  <!--registerMediaMetadataObserver-->
  <p id="registerMediaMetadataObserver">       
      <codeblock props="windows" outputclass="language-cpp">virtual int registerMediaMetadataObserver(IMetadataObserver *observer, IMetadataObserver::METADATA_TYPE type) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">registerMediaMetadataObserver(): number</codeblock>
  </p>
           
  <!-- unregisterMediaMetadataObserver -->
  <p id="unregisterMediaMetadataObserver">
      <codeblock props="electron" outputclass="language-typescript">unRegisterMediaMetadataObserver(): number</codeblock>
  </p>
           
  <!-- sendMetadata -->
  <p id="sendMetadata">
      <codeblock props="electron" outputclass="language-typescript">sendMetadata(metadata: Metadata): number</codeblock>
  </p>
           
  <!-- setMaxMetadataSize -->
  <p id="setMaxMetadataSize">
      <codeblock props="electron" outputclass="language-typescript">setMaxMetadataSize(size: number): number</codeblock>
  </p>
  
  <!--addVideoWatermark1-->
  <p id="addVideoWatermark1">       
      <codeblock props="windows" outputclass="language-cpp">virtual int addVideoWatermark(const RtcImage&amp; watermark) = 0;</codeblock>
      
  </p>
  
  <!--addVideoWatermark2-->
  <p id="addVideoWatermark2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int addVideoWatermark(const char* watermarkUrl, const WatermarkOptions&amp; options) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">addVideoWatermark(watermarkUrl: string, options: WatermarkOptions): number</codeblock>
  </p>
  
  <!--clearVideoWatermarks-->
  <p id="clearVideoWatermarks">       
      <codeblock props="windows" outputclass="language-cpp">virtual int clearVideoWatermarks() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">clearVideoWatermarks(): number</codeblock>
  </p>
  
  <!--enableEncryption-->
  <p id="enableEncryption">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableEncryption(bool enabled, const EncryptionConfig&amp; config) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableEncryption(enabled: boolean, config: EncryptionConfig): number</codeblock>
  </p>
  
  <!--registerPacketObserver-->
  <p id="registerPacketObserver">       
      <codeblock props="windows" outputclass="language-cpp">virtual int registerPacketObserver(IPacketObserver* observer) = 0;</codeblock>   
  </p>
  
  <!--onReceiveAudioPacket-->
  <p id="onReceiveAudioPacket">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onReceiveAudioPacket(Packet&amp; packet) = 0;</codeblock>   
  </p>       

  <!--onReceiveVideoPacket-->
  <p id="onReceiveVideoPacket">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onReceiveVideoPacket(Packet&amp; packet) = 0;
};</codeblock>   
  </p>   

  <!--onSendAudioPacket-->
  <p id="onSendAudioPacket">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onSendAudioPacket(Packet&amp; packet) = 0;</codeblock>   
  </p>   

  <!--onSendVideoPacket-->
  <p id="onSendVideoPacket">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onSendVideoPacket(Packet&amp; packet) = 0;</codeblock>   
  </p>   
  
  <!--setEncryptionMode-->
  <p id="setEncryptionMode">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setEncryptionMode(const char* encryptionMode) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setEncryptionMode(encryptionMode: string): number</codeblock>
  </p>
  
  <!--setEncryptionSecret-->
  <p id="setEncryptionSecret">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setEncryptionSecret(const char* secret) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setEncryptionSecret(secret: string): number</codeblock>
  </p>
  
  <!--startAudioRecording1-->
  <p id="startAudioRecording1">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startAudioRecording(const char* filePath, AUDIO_RECORDING_QUALITY_TYPE quality) = 0;</codeblock>   
  </p>
  
  <!--startAudioRecording2-->
  <p id="startAudioRecording2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startAudioRecording(const char* filePath, int sampleRate, AUDIO_RECORDING_QUALITY_TYPE quality) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startAudioRecording(filePath: string, sampleRate: number, quality: number): number</codeblock>
  </p>
  
  <!--stopAudioRecording-->
  <p id="stopAudioRecording">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopAudioRecording() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopAudioRecording(): number</codeblock>
  </p>
  
  <!--addInjectStreamUrl-->
  <p id="addInjectStreamUrl">       
      <codeblock props="windows" outputclass="language-cpp">virtual int addInjectStreamUrl(const char* url, const InjectStreamConfig&amp; config) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">addInjectStreamUrl(url: string, config: InjectStreamConfig): number</codeblock>
  </p>
  
  <!--removeInjectStreamUrl-->
  <p id="removeInjectStreamUrl">       
      <codeblock props="windows" outputclass="language-cpp">virtual int removeInjectStreamUrl(const char* url) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">removeInjectStreamUrl(url: string): number</codeblock>
  </p>
  
  <!--switchCamera-->
  <p id="switchCamera">       
      <codeblock props="windows" outputclass="language-cpp">virtual int switchCamera() = 0;</codeblock>   
  </p>
  
  <!--isCameraZoomSupported-->
  <p id="isCameraZoomSupported" >
      <codeblock props="android" outputclass="language-java">public abstract boolean isCameraZoomSupported();</codeblock>
  </p>
  
  <!--isCameraTorchSupported-->
  <p id="isCameraTorchSupported">
      <codeblock props="android" outputclass="language-java">public abstract boolean isCameraTorchSupported();</codeblock>
  </p>
  
  <!--isCameraFocusSupported-->
  <p id="isCameraFocusSupported">
      <codeblock props="android" outputclass="language-java">public abstract boolean isCameraFocusSupported();</codeblock>
  </p>
  
  <!--isCameraExposurePositionSupported-->
  <p id="isCameraExposurePositionSupported">
      <codeblock props="android" outputclass="language-java">public abstract boolean isCameraExposurePositionSupported();</codeblock>
  </p>
 
  <!--isCameraAutoFocusFaceModeSupported-->
  <p id="isCameraAutoFocusFaceModeSupported">
      <codeblock props="android" outputclass="language-java">public abstract boolean isCameraAutoFocusFaceModeSupported();</codeblock>
  </p>
  
  <!--setCameraZoomFactor-->
  <p id="setCameraZoomFactor">    
      <codeblock props="android" outputclass="language-java">public abstract int setCameraZoomFactor(float factor);</codeblock>
  </p>
  
  <!--getCameraMaxZoomFactor-->
  <p id="getCameraMaxZoomFactor"> 
      <codeblock props="android" outputclass="language-java">public abstract float getCameraMaxZoomFactor();</codeblock>
  </p>
  
  <!--setCameraFocusPositionInPreview-->
  <p id="setCameraFocusPositionInPreview">
      <codeblock props="android" outputclass="language-java">public abstract int setCameraFocusPositionInPreview(float positionX, float positionY);</codeblock>      
  </p>
  
  <!--setCameraExposurePosition-->
  <p id="setCameraExposurePosition">
      <codeblock props="android" outputclass="language-java">public abstract int setCameraExposurePosition(float positionXinView, float positionYinView);</codeblock>
  </p>
  
  <!--setCameraTorchOn-->
  <p id="setCameraTorchOn">
      <codeblock props="android" outputclass="language-java">public abstract int setCameraTorchOn(boolean isOn);</codeblock>
  </p>
  
  <!--setCameraAutoFocusFaceModeEnabled-->
  <p id="setCameraAutoFocusFaceModeEnabled">
      <codeblock props="android" outputclass="language-java">public abstract int setCameraAutoFocusFaceModeEnabled(boolean enabled);</codeblock>
  </p>
  
  <!--IAudioDeviceCollection_getCount-->
  <p id="IAudioDeviceCollection_getCount">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getCount() = 0;</codeblock>   
  </p>
  
  <!--IAudioDeviceCollection_getDevice-->
  <p id="IAudioDeviceCollection_getDevice">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getDevice(int index, char deviceName[MAX_DEVICE_ID_LENGTH], char deviceId[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>   
  </p>
  
  <!--IAudioDeviceCollection_setDevice-->
  <p id="IAudioDeviceCollection_setDevice">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setDevice(const char deviceId[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>   
  </p>
  
  <!--setApplicationVolume-->
  <p id="setApplicationVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setApplicationVolume(int volume) = 0;</codeblock>   
  </p>
  
  <!--getApplicationVolume-->
  <p id="getApplicationVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getApplicationVolume(int&amp; volume) = 0;</codeblock>   
  </p>
  
  <!--setApplicationMute-->
  <p id="setApplicationMute">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getApplicationVolume(int&amp; volume) = 0;</codeblock>   
  </p>
  
  <!--isApplicationMute-->
  <p id="isApplicationMute">       
      <codeblock props="windows" outputclass="language-cpp">virtual int isApplicationMute(bool&amp; mute) = 0;</codeblock>   
  </p>
  
  <!--IAudioDeviceCollection_release-->
  <p id="IAudioDeviceCollection_release">       
      <codeblock props="windows" outputclass="language-cpp">virtual void release() = 0;</codeblock>   
  </p>
  
  <!--enumeratePlaybackDevices-->
  <p id="enumeratePlaybackDevices">       
      <codeblock props="windows" outputclass="language-cpp">virtual IAudioDeviceCollection* enumeratePlaybackDevices() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getAudioPlaybackDevices(): Array&lt;{ deviceid: string, devicename: string }&gt;</codeblock>
  </p>
  
  <!--enumerateRecordingDevices-->
  <p id="enumerateRecordingDevices">      
      <codeblock props="windows" outputclass="language-cpp">virtual IAudioDeviceCollection* enumerateRecordingDevices() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getAudioRecordingDevices(): Array&lt;{ deviceid: string, devicename: string }&gt;</codeblock>
  </p>
  
  <!--setPlaybackDevice-->
  <p id="setPlaybackDevice">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setPlaybackDevice(const char deviceId[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioPlaybackDevice(deviceId: string): number</codeblock>
  </p>
  
  <!--setRecordingDevice-->
  <p id="setRecordingDevice">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRecordingDevice(const char deviceId[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioRecordingDevice(deviceId: string): number</codeblock>
  </p>
  
  <!--startPlaybackDeviceTest-->
  <p id="startPlaybackDeviceTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startPlaybackDeviceTest(const char* testAudioFilePath) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startAudioPlaybackDeviceTest(testAudioFilePath: string): number</codeblock>
  </p>
  
  <!--stopPlaybackDeviceTest-->
  <p id="stopPlaybackDeviceTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopPlaybackDeviceTest() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopAudioPlaybackDeviceTest(): number</codeblock>
  </p>
  
  <!--startRecordingDeviceTest-->
  <p id="startRecordingDeviceTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startRecordingDeviceTest(int indicationInterval) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startAudioRecordingDeviceTest(testAudioFilePath: string): number</codeblock>
  </p>
  
  <!--stopRecordingDeviceTest-->
  <p id="stopRecordingDeviceTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopRecordingDeviceTest() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopAudioRecordingDeviceTest(): number</codeblock>
  </p>
  
  <!--getPlaybackDevice-->
  <p id="getPlaybackDevice">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getPlaybackDevice(char deviceId[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getCurrentAudioPlaybackDevice(): { deviceId: String }</codeblock>
  </p>
  <!--getPlaybackDeviceInfo-->
  <p id="getPlaybackDeviceInfo">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getPlaybackDeviceInfo(char deviceId[MAX_DEVICE_ID_LENGTH], char deviceName[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getPlaybackDeviceInfo(): Array&lt;{ deviceid: string, devicename: string }&gt;</codeblock>
  </p>
  <!--getRecordingDevice-->
  <p id="getRecordingDevice">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getRecordingDevice(char deviceId[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getCurrentAudioRecordingDevice(): { deviceid: string, devicename: string }</codeblock>
  </p>
  <!--getRecordingDeviceInfo-->
  <p id="getRecordingDeviceInfo">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getRecordingDeviceInfo(char deviceId[MAX_DEVICE_ID_LENGTH], char deviceName[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getRecordingDeviceInfo(): Array&lt;{ deviceid: string, devicename: string }&gt;</codeblock>
  </p>
  
  <!--startAudioDeviceLoopbackTest-->
  <p id="startAudioDeviceLoopbackTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startAudioDeviceLoopbackTest(int indicationInterval) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startAudioDeviceLoopbackTest(indicationInterval: number): number</codeblock>
  </p>
  
  <!--stopAudioDeviceLoopbackTest-->
  <p id="stopAudioDeviceLoopbackTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopAudioDeviceLoopbackTest() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopAudioDeviceLoopbackTest(): number</codeblock>
  </p>
  
  <!--setPlaybackDeviceVolume-->
  <p id="setPlaybackDeviceVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setPlaybackDeviceVolume(int volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioPlaybackVolume(volume: number): number</codeblock>
  </p>
  
  <!--getPlaybackDeviceVolume-->
  <p id="getPlaybackDeviceVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getPlaybackDeviceVolume(int *volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getAudioPlaybackVolume(): number</codeblock>
  </p>
  
  <!--setRecordingDeviceVolume-->
  <p id="setRecordingDeviceVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRecordingDeviceVolume(int volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioRecordingVolume(volume: number): number</codeblock>
  </p>
  
  <!--getRecordingDeviceVolume-->
  <p id="getRecordingDeviceVolume">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getRecordingDeviceVolume(int *volume) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getAudioRecordingVolume(): number</codeblock>
  </p>
  
  <!--setPlaybackDeviceMute-->
  <p id="setPlaybackDeviceMute">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setPlaybackDeviceMute(bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioPlaybackDeviceMute(mute: boolean): number</codeblock>
  </p>
 
  
  <!--getPlaybackDeviceMute-->
  <p id="getPlaybackDeviceMute">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getPlaybackDeviceMute(bool *mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getAudioRecordingDeviceMute(): boolean</codeblock>
  </p>
  
  <!--setRecordingDeviceMute-->
  <p id="setRecordingDeviceMute">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setRecordingDeviceMute(bool mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setAudioRecordingDeviceMute(mute: boolean): number</codeblock>
  </p>
  
  <!--getRecordingDeviceMute-->
  <p id="getRecordingDeviceMute">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getRecordingDeviceMute(bool *mute) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getAudioRecordingDeviceMute(): boolean</codeblock>
  </p>
  <!--IAudioDeviceManager_release-->
  <p id="IAudioDeviceManager_release">       
      <codeblock props="windows" outputclass="language-cpp">virtual void release() = 0;</codeblock>  
  </p>
  
  <!--enumerateVideoDevices-->
  <p id="enumerateVideoDevices">       
      <codeblock props="windows" outputclass="language-cpp">virtual IVideoDeviceCollection* enumerateVideoDevices() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getVideoDevices(): Array&lt;{ deviceid: string, devicename: string }&gt;</codeblock>
  </p>
  
  <!--startDeviceTest-->
  <p id="startDeviceTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int startDeviceTest(view_t hwnd) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">startVideoDeviceTest(): number</codeblock>
  </p>
  
  <!--stopDeviceTest-->
  <p id="stopDeviceTest">       
      <codeblock props="windows" outputclass="language-cpp">virtual int stopDeviceTest() = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">stopVideoDeviceTest(): number</codeblock>
  </p>
  <!--IVideoDeviceManager_setDevice-->
  <p id="IVideoDeviceManager_setDevice">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setDevice(const char deviceId[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setVideoDevice(deviceId: string): number</codeblock>
  </p>
  <!--IVideoDeviceManager_getDevice-->
  <p id="IVideoDeviceManager_getDevice">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getDevice(char deviceId[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getCurrentVideoDevice(): Object</codeblock>
  </p>
  <!--IVideoDeviceManager_release-->
  <p id="IVideoDeviceManager_release">       
      <codeblock props="windows" outputclass="language-cpp">virtual void release() = 0;</codeblock>  
  </p>
  
  <!--IVideoDeviceCollection_getCount-->
  <p id="IVideoDeviceCollection_getCount">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getCount() = 0;</codeblock>   
  </p>
  <!--IVideoDeviceCollection_getDevice-->
  <p id="IVideoDeviceCollection_getDevice">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getDevice(int index, char deviceName[MAX_DEVICE_ID_LENGTH], char deviceId[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>   
  </p>
  <!--IVideoDeviceCollection_setDevice-->
  <p id="IVideoDeviceCollection_setDevice">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setDevice(const char deviceId[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>   
  </p>
  <!--IVideoDeviceCollection_release-->
  <p id="IVideoDeviceCollection_release">       
      <codeblock props="windows" outputclass="language-cpp">virtual void release() = 0;</codeblock>   
  </p>
  

  
  <!--createDataStream1-->
  <p id="createDataStream1">       
      <codeblock props="windows" outputclass="language-cpp">virtual int createDataStream(int* streamId, bool reliable, bool ordered) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">createDataStream(reliable: boolean, ordered: boolean): number</codeblock>
  </p>
  
  <!--createDataStream2-->
  <p id="createDataStream2">       
      <codeblock props="windows" outputclass="language-cpp">virtual int createDataStream(int* streamId, DataStreamConfig&amp; config) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript"></codeblock>
  </p>
  
  <!--sendStreamMessage-->
  <p id="sendStreamMessage">       
      <codeblock props="windows" outputclass="language-cpp">virtual int sendStreamMessage(int streamId, const char* data, size_t length) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">sendStreamMessage(streamId: number, msg: string): number</codeblock>
  </p>
  
  <!--setLogFile-->
 <p id="setLogFile">       
     <codeblock props="windows" outputclass="language-cpp">virtual int setLogFile(const char* filePath) = 0;</codeblock>
     <codeblock props="electron" outputclass="language-typescript">setLogFile(filePath: string): number</codeblock>
 </p>
  
  <!--setLogFilter-->
  <p id="setLogFilter">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLogFilter(unsigned int filter) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setLogFilter(filter: number): number</codeblock>
  </p>
  
  <!--setLogFileSize-->
  <p id="setLogFileSize">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLogFileSize(unsigned int fileSizeInKBytes) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setLogFileSize(fileSizeInKBytes: number): number</codeblock>
  </p>
  
  <!--uploadLogFile-->
  <p id="uploadLogFile">       
      <codeblock props="windows" outputclass="language-cpp">virtual int uploadLogFile(agora::util::AString&amp; requestId) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">uploadLogFile(): string</codeblock>
  </p>
  
  <!--enableLoopbackRecording-->
  <p id="enableLoopbackRecording">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableLoopbackRecording(bool enabled, const char* deviceName = NULL) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableLoopbackRecording(
          enabled = false,
          deviceName: string | null = null
          ): number</codeblock>
  </p>
  
  <!--setAudioSessionOperationRestriction-->
  <p id="setAudioSessionOperationRestriction">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setAudioSessionOperationRestriction(AUDIO_SESSION_OPERATION_RESTRICTION restriction) = 0;</codeblock>  
  </p>
  
  <!--setLocalVideoMirrorMode-->
  <p id="setLocalVideoMirrorMode">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setLocalVideoMirrorMode(VIDEO_MIRROR_MODE_TYPE mirrorMode) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setLocalVideoMirrorMode(mirrorMode: VIDEO_MIRROR_MODE_TYPE): number</codeblock>
  </p>
  
  <!--setCameraCapturerConfiguration-->
  <p id="setCameraCapturerConfiguration">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setCameraCapturerConfiguration(const CameraCapturerConfiguration&amp; config) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setCameraCapturerConfiguration(config: CameraCapturerConfiguration): number</codeblock>
  </p>

  <!--complain-->
  <p id="complain">       
      <codeblock props="windows" outputclass="language-cpp">virtual int complain(const char* callId, const char* description) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">complain(callId: string, description: string): number</codeblock>
  </p>

  <!--enableDeepLearningDenoise-->
  <p id="enableDeepLearningDenoise">       
      <codeblock props="windows" outputclass="language-cpp">virtual int enableDeepLearningDenoise(bool enable) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">enableDeepLearningDenoise(enable: boolean): number</codeblock>
  </p>

  <!--getCallId-->
  <p id="getCallId">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getCallId(agora::util::AString&amp; callId) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getCallId(): string</codeblock>
  </p>

  <!--getErrorDescription-->
  <p id="getErrorDescription">       
      <codeblock props="windows" outputclass="language-cpp">virtual const char* getErrorDescription(int code) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getErrorDescription(errorCode: number): string</codeblock>
  </p>

  <!--getVersion-->
  <p id="getVersion">       
      <codeblock props="windows" outputclass="language-cpp">virtual const char* getVersion(int* build) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">getVersion(): string</codeblock>
  </p>

  <!--queryInterface-->
  <p id="queryInterface">      
      <codeblock props="windows" outputclass="language-cpp">virtual int queryInterface(INTERFACE_ID_TYPE iid, void** inter) = 0;</codeblock>
  </p>

  <!--rate-->
  <p id="rate">       
      <codeblock props="windows" outputclass="language-cpp">virtual int rate(const char* callId, int rating, const char* description) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">rate(callId: string, rating: number, description: string): number</codeblock>
  </p>

  <!--sendCustomReportMessage-->
  <p id="sendCustomReportMessage">      
      <codeblock props="windows" outputclass="language-cpp">virtual int sendCustomReportMessage(const char *id, const char* category, const char* event, const char* label, int value) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">sendCustomReportMessage(id: string, category: string, event: string, label: string, value: number): number</codeblock>      
  </p>
  
  <!--setCloudProxy-->
  <p id="setCloudProxy">       
      <codeblock props="windows" outputclass="language-cpp">virtual int setCloudProxy(CLOUD_PROXY_TYPE proxyType) = 0;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">setCloudProxy(type: CLOUD_PROXY_TYPE): number</codeblock>
  </p>
  
  <!--getNativeHandle-->
  <p id="getNativeHandle">       
      <codeblock props="android" outputclass="language-java">public abstract long getNativeHandle();</codeblock>
      <codeblock props="ios mac" outputclass="language-objectivec">- (void* _Nullable)getNativeHandle;</codeblock>
      
  </p>
  
  <!--delegate-->
  <p id="delegate">       
      <codeblock props="ios mac" outputclass="language-objectivec">@property(nonatomic, weak) id&lt;AgoraRtcEngineDelegate> _Nullable delegate;</codeblock>   
  </p>
  
  <!--addHandler-->
  <p id="addHandler">       
      <codeblock props="android" outputclass="language-java">public void addHandler(IRtcEngineEventHandler handler) {
 mInstance.addHandler(handler);
 }</codeblock>   
  </p>
  
  <!--removeHandler-->
  <p id="removeHandler">       
      <codeblock props="android" outputclass="language-java">public void removeHandler(IRtcEngineEventHandler handler) {
 mInstance.removeHandler(handler);
 }</codeblock>
  </p>
   
  <!-- videoSourceInitialize -->
  <p id="videoSourceInitialize">
      <codeblock props="electron" outputclass="language-typescript">videoSourceInitialize(appId: string, areaCode: AREA_CODE = (0xFFFFFFFF), logConfig?: LogConfig): number</codeblock>
  </p>
           
  <!-- videoSourceSetLogFile -->
  <p id="videoSourceSetLogFile">
      <codeblock props="electron" outputclass="language-typescript">videoSourceSetLogFile(filePath: string): number</codeblock>
  </p>
   
  <!-- setupLocalVideoSource -->
  <p id="setupLocalVideoSource">
      <codeblock props="electron" outputclass="language-typescript">setupLocalVideoSource(view: Element): void</codeblock>
  </p>
           
  <!-- videoSourceEnableWebSdkInteroperability -->
  <p id="videoSourceEnableWebSdkInteroperability">
      <codeblock props="electron" outputclass="language-typescript">videoSourceEnableWebSdkInteroperability(enabled: boolean): number</codeblock>
  </p>
           
  <!-- videoSourceJoin -->
  <p id="videoSourceJoin">
      <codeblock props="electron" outputclass="language-typescript">videoSourceJoin(
          token: string,
          channelId: string,
          info: string,
          uid: number,
          options?: ChannelMediaOptions
          ): number</codeblock>
  </p>
           
  <!-- videoSourceLeave -->
  <p id="videoSourceLeave">
      <codeblock props="electron" outputclass="language-typescript">videoSourceLeave(): number</codeblock>
  </p>
           
  <!-- videoSourceRenewToken -->
  <p id="videoSourceRenewToken">
      <codeblock props="electron" outputclass="language-typescript">videoSourceRenewToken(token: string): number</codeblock>
  </p>
           
  <!-- videoSourceSetChannelProfile -->
  <p id="videoSourceSetChannelProfile">
      <codeblock props="electron" outputclass="language-typescript">videoSourceSetChannelProfile(profile: number): number</codeblock>
  </p>
           
  <!-- videoSourceSetVideoProfile -->
  <p id="videoSourceSetVideoProfile">
      <codeblock props="electron" outputclass="language-typescript">videoSourceSetVideoProfile(
          profile: VIDEO_PROFILE_TYPE,
          swapWidthAndHeight = false
          ): number</codeblock>
  </p>
           
  <!-- videoSourceEnableDualStreamMode -->
  <p id="videoSourceEnableDualStreamMode">
      <codeblock props="electron" outputclass="language-typescript">videoSourceEnableDualStreamMode(enabled: boolean): number</codeblock>
  </p>
           
  <!-- videoSourceUpdateScreenCaptureRegion -->
  <p id="videoSourceUpdateScreenCaptureRegion">
      <codeblock props="electron" outputclass="language-typescript">videoSourceUpdateScreenCaptureRegion(regionRect: Rectangle)</codeblock>
  </p>
           
  <!-- videoSourceEnableLoopbackRecording -->
  <p id="videoSourceEnableLoopbackRecording">
      <codeblock props="electron" outputclass="language-typescript">videoSourceEnableLoopbackRecording(enabled: boolean, deviceName: string | null = null): number</codeblock>
  </p>
           
  <!-- videoSourceEnableAudio -->
  <p id="videoSourceEnableAudio">
      <codeblock props="electron" outputclass="language-typescript">videoSourceEnableAudio(): number</codeblock>
  </p>
           
  <!-- videoSourceEnableEncryption -->
  <p id="videoSourceEnableEncryption">
      <codeblock props="electron" outputclass="language-typescript">videoSourceEnableEncryption(enabled: boolean, config: EncryptionConfig): number</codeblock>
  </p>
           
  <!-- videoSourceSetEncryptionMode -->
  <p id="videoSourceSetEncryptionMode">
      <codeblock props="electron" outputclass="language-typescript">videoSourceSetEncryptionMode(encryptionMode: string): number</codeblock>
  </p>
  
  <!-- videoSourceSetEncryptionSecret -->
  <p id="videoSourceSetEncryptionSecret">
      <codeblock props="electron" outputclass="language-typescript">videoSourceSetEncryptionSecret(secret: string): number</codeblock>
  </p>
  
  <!-- videoSourceRelease -->
  <p id="videoSourceRelease">
      <codeblock props="electron" outputclass="language-typescript">videoSourceRelease(): number</codeblock>
  </p>
           
  <!-- videoSourceStartScreenCaptureByScreen -->
  <p id="videoSourceStartScreenCaptureByScreen">
      <codeblock props="electron" outputclass="language-typescript">videoSourceStartScreenCaptureByScreen(
          screenSymbol: ScreenSymbol,
          regionRect: CaptureRect,
          captureParams: ScreenCaptureParameters
          ): number</codeblock>
  </p>
           
  <!-- videoSourceStartScreenCaptureByWindow -->
  <p id="videoSourceStartScreenCaptureByWindow">
      <codeblock props="electron" outputclass="language-typescript">videoSourceStartScreenCaptureByWindow(windowId: number, regionRect: CaptureRect, captureParams: ScreenCaptureParameters): number</codeblock>
  </p>
           
  <!-- videoSourceUpdateScreenCaptureParameters -->
  <p id="videoSourceUpdateScreenCaptureParameters">
      <codeblock props="electron" outputclass="language-typescript">videoSourceUpdateScreenCaptureParameters(captureParams: ScreenCaptureParameters): number</codeblock>
  </p>
           
  <!-- videoSourceSetScreenCaptureContentHint -->
  <p id="videoSourceSetScreenCaptureContentHint">
      <codeblock props="electron" outputclass="language-typescript">videoSourceSetScreenCaptureContentHint(contentHint: VideoContentHint): number</codeblock>
  </p>
           
  <!-- videoSourceStartScreenCapture -->
  <p id="videoSourceStartScreenCapture">
      <codeblock props="electron" outputclass="language-typescript">videoSourceStartScreenCapture(
          windowId: number,
          captureFreq: number,
          rect: Rect,
          bitrate: number
          ): number</codeblock>
  </p>
           
  <!-- videoSourceStopScreenCapture -->
  <p id="videoSourceStopScreenCapture">
      <codeblock props="electron" outputclass="language-typescript">videoSourceStopScreenCapture(): number</codeblock>
  </p>
           
  <!-- videoSourceStartScreenCapturePreview -->
  <p id="videoSourceStartScreenCapturePreview">
      <codeblock props="electron" outputclass="language-typescript">videoSourceStartScreenCapturePreview(): number</codeblock>
  </p>
           
  <!-- videoSourceStopScreenCapturePreview -->
  <p id="videoSourceStopScreenCapturePreview">
      <codeblock props="electron" outputclass="language-typescript">videoSourceStopScreenCapturePreview(): number</codeblock>
  </p>
  
       </section>
   
   
       <section>       
  <title>Callbacks</title>
  <!--onConnectionStateChanged-->
  <p id="onConnectionStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onConnectionStateChanged(
      CONNECTION_STATE_TYPE state, CONNECTION_CHANGED_REASON_TYPE reason) {
        (void)state;
        (void)reason;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'connectionStateChanged', cb: (
          state: CONNECTION_STATE_TYPE,
          reason: CONNECTION_CHANGED_REASON_TYPE
          ) => void): this;</codeblock>
  </p>
  
  <!--onJoinChannelSuccess-->
  <p id="onJoinChannelSuccess">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onJoinChannelSuccess(const char* channel, uid_t uid, int elapsed) {
        (void)channel;
        (void)uid;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'joinedChannel',
          cb: (channel: string, uid: number, elapsed: number) => void
          ): this;</codeblock>
  </p>
  
  <!--onRejoinChannelSuccess-->
  <p id="onRejoinChannelSuccess">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRejoinChannelSuccess(const char* channel, uid_t uid, int elapsed) {
        (void)channel;
        (void)uid;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'rejoinedChannel',
          cb: (channel: string, uid: number, elapsed: number) => void
          ): this;</codeblock>
  </p>
  
  <!--onLeaveChannel-->
  <p id="onLeaveChannel">
      <codeblock props="rust windows" outputclass="language-cpp">virtual void onLeaveChannel(const RtcStats&amp; stats) {
        (void)stats;
    }</codeblock>
  </p>
  
  <!--onClientRoleChanged-->
  <p id="onClientRoleChanged">
      <codeblock props="android" outputclass="language-java">public void onClientRoleChanged(int oldRole, int newRole);</codeblock>
      <codeblock props="ios" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine didClientRoleChanged:(AgoraClientRole)oldRole newRole:(AgoraClientRole)newRole;</codeblock>
      <codeblock props="rust windows" outputclass="language-cpp">virtual void onClientRoleChanged(CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole) {
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'clientRoleChanged',
          cb: (oldRole: CLIENT_ROLE_TYPE, newRole: CLIENT_ROLE_TYPE) => void
          ): this;</codeblock>
  </p>
  
  <!--onUserJoined-->
  <p id="onUserJoined">
      <codeblock props="rust windows" outputclass="language-cpp">virtual void onUserJoined(uid_t uid, int elapsed) {
        (void)uid;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'userJoined', cb: (uid: number, elapsed: number) => void): this;</codeblock>
  </p>
  
  <!--onUserOffline-->
  <p id="onUserOffline">
      <codeblock props="rust windows" outputclass="language-cpp">virtual void onUserOffline(uid_t uid, USER_OFFLINE_REASON_TYPE reason) {
        (void)uid;
        (void)reason;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'userOffline', cb: (uid: number, reason: number) => void): this;</codeblock>
  </p>
  
  <!--onNetworkTypeChanged-->
  <p id="onNetworkTypeChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onNetworkTypeChanged(NETWORK_TYPE type) {
        (void)type;
    }</codeblock>   
  </p>
  
  <!--onConnectionInterrupted-->
  <p id="onConnectionInterrupted">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onConnectionInterrupted() {}</codeblock>   
  </p>
  
  <!--onConnectionLost-->
  <p id="onConnectionLost">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onConnectionLost() {}</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'connectionLost', cb: () => void): this;</codeblock>
  </p>
  
  <!--onConnectionBanned-->
  <p id="onConnectionBanned">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onConnectionBanned() {}</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'connectionBanned', cb: () => void): this;</codeblock>
  </p>
  
  <!--onTokenPrivilegeWillExpire-->
  <p id="onTokenPrivilegeWillExpire">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onTokenPrivilegeWillExpire(const char* token) {
        (void)token;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'tokenPrivilegeWillExpire', cb: (token: string) => void): this;</codeblock>
  </p>

  <!--onRequestToken-->
  <p id="onRequestToken">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRequestToken() {
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'requestToken', cb: () => void): this;</codeblock>
  </p>
  
  <!--onLocalUserRegistered-->
  <p id="onLocalUserRegistered">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onLocalUserRegistered(uid_t uid, const char* userAccount) {
      (void)uid;
      (void)userAccount;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'localUserRegistered',
          cb: (uid: number, userAccount: string) => void
          ): this;</codeblock>
  </p>
  
  <!--onUserInfoUpdated-->
  <p id="onUserInfoUpdated">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onUserInfoUpdated(uid_t uid, const UserInfo&amp; info) {
      (void)uid;
      (void)info;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'userInfoUpdated',
          cb: (uid: number, userInfo: UserInfo) => void
          ): this;</codeblock>
  </p>

  <!--onLocalAudioStateChanged-->
  <p id="onLocalAudioStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onLocalAudioStateChanged(LOCAL_AUDIO_STREAM_STATE state, LOCAL_AUDIO_STREAM_ERROR error) {
        (void)state;
        (void)error;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'localAudioStateChanged', cb: (
          state: number,
          error: number
          ) => void): this;</codeblock>
  </p>
  
  <!--onFirstLocalAudioFrame-->
  <p id="onFirstLocalAudioFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onFirstLocalAudioFrame(int elapsed) {
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'firstLocalAudioFrame', cb: (elapsed: number) => void): this;</codeblock>
  </p>
           
   <!-- onMicrophoneEnabled -->
   <p id="onMicrophoneEnabled">
       <codeblock props="windows" outputclass="language-cpp">virtual void onMicrophoneEnabled(bool enabled) { (void)enabled; }</codeblock>
       <codeblock props="electron" outputclass="language-typescript">on(evt: 'microphoneEnabled', cb: (enabled: boolean) => void): this;</codeblock>
   </p>
           
  <!--onLocalVideoStateChanged-->
  <p id="onLocalVideoStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onLocalVideoStateChanged(LOCAL_VIDEO_STREAM_STATE localVideoState, LOCAL_VIDEO_STREAM_ERROR error) {
        (void)localVideoState;
        (void)error;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'localVideoStateChanged', cb: (
          localVideoState: number,
          error: number
          ) => void): this;</codeblock>
  </p>
  
  <!--onVideoStopped-->
  <p id="onVideoStopped">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onVideoStopped() {}</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'videoStopped', cb: () => void): this;</codeblock>
  </p>

  <!--onFirstLocalAudioFramePublished-->
  <p id="onFirstLocalAudioFramePublished">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onFirstLocalAudioFramePublished(int elapsed) {
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'firstLocalAudioFramePublished', cb: (
          elapsed: number
          ) => void): this;</codeblock>
  </p>

  <!--onFirstLocalVideoFramePublished-->
  <p id="onFirstLocalVideoFramePublished">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onFirstLocalVideoFramePublished(int elapsed) {
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'firstLocalVideoFramePublished', cb: (
          elapsed: number
          ) => void): this;</codeblock>
  </p>

  <!--onFirstLocalVideoFrame-->
  <p id="onFirstLocalVideoFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onFirstLocalVideoFrame(int width, int height, int elapsed) {
        (void)width;
        (void)height;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'firstLocalVideoFrame',
          cb: (width: number, height: number, elapsed: number) => void
          ): this;</codeblock>
  </p>

  <!--onAudioPublishStateChanged-->
  <p id="onAudioPublishStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onAudioPublishStateChanged(const char* channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState) {
        (void)channel;
        (void)oldState;
        (void)newState;
        (void)elapseSinceLastState;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'audioPublishStateChanged', cb: (
          channel: string,
          oldState: STREAM_PUBLISH_STATE,
          newState: STREAM_PUBLISH_STATE,
          elapseSinceLastState: number
          ) => void): this;</codeblock>
  </p>
  
  <!--onVideoPublishStateChanged-->
  <p id="onVideoPublishStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onVideoPublishStateChanged(const char* channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState) {
        (void)channel;
        (void)oldState;
        (void)newState;
        (void)elapseSinceLastState;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'videoPublishStateChanged', cb: (
          channel: string,
          oldState: STREAM_PUBLISH_STATE,
          newState: STREAM_PUBLISH_STATE,
          elapseSinceLastState: number
          ) => void): this;</codeblock>
  </p>
  
  <!--onRemoteAudioStateChanged-->
  <p id="onRemoteAudioStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteAudioStateChanged(uid_t uid, REMOTE_AUDIO_STATE state, REMOTE_AUDIO_STATE_REASON reason, int elapsed) {
        (void)uid;
        (void)state;
        (void)reason;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'remoteAudioStateChanged', cb: (
          uid: number,
          state: REMOTE_AUDIO_STATE,
          reason: REMOTE_AUDIO_STATE_REASON,
          elapsed: number
          ) => void): this;</codeblock>
  </p>
     
  <!--onRemoteVideoStateChanged-->
  <p id="onRemoteVideoStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteVideoStateChanged(uid_t uid, REMOTE_VIDEO_STATE state, REMOTE_VIDEO_STATE_REASON reason, int elapsed) {
        (void)uid;
        (void)state;
        (void)reason;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'remoteVideoStateChanged',
          cb: (
          uid: number,
          state: REMOTE_VIDEO_STATE,
          reason: REMOTE_VIDEO_STATE_REASON,
          elapsed: number
          ) => void
          ): this;</codeblock>
  </p>
  
  <!--onFirstRemoteAudioFrame-->
  <p id="onFirstRemoteAudioFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onFirstRemoteAudioFrame(uid_t uid, int elapsed) {
        (void)uid;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: "firstRemoteAudioFrame",
          cb: (uid: number, elapsed: number) => void
          ): this;</codeblock>
  </p>

  <!--onFirstRemoteAudioDecoded-->
  <p id="onFirstRemoteAudioDecoded">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onFirstRemoteAudioDecoded(uid_t uid, int elapsed) {
        (void)uid;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'firstRemoteAudioDecoded',
          cb: (uid: number, elapsed: number) => void
          ): this;</codeblock>
  </p>

  <!--onFirstRemoteVideoFrame-->
  <p id="onFirstRemoteVideoFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onFirstRemoteVideoFrame(uid_t uid, int width, int height, int elapsed) {
        (void)uid;
        (void)width;
        (void)height;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: "firstRemoteVideoFrame",
          cb: (uid: number, width: number, height: number, elapsed: number) => void
          ): this;</codeblock>
  </p>
  
  <!--onFirstRemoteVideoDecoded-->
  <p id="onFirstRemoteVideoDecoded">
      <codeblock props="rust windows" outputclass="language-cpp">virtual void onFirstRemoteVideoDecoded(uid_t uid, int width, int height, int elapsed) {
        (void)uid;
        (void)width;
        (void)height;
        (void)elapsed;
    }     </codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'firstRemoteVideoDecoded',
          cb: (uid: number, width: number, height: number, elapsed: number) => void
          ): this;</codeblock>
  </p>

  <!--onAudioSubscribeStateChanged-->
  <p id="onAudioSubscribeStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onAudioSubscribeStateChanged(const char* channel, uid_t uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState) {
        (void)channel;
        (void)uid;
        (void)oldState;
        (void)newState;
        (void)elapseSinceLastState;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'audioSubscribeStateChanged', cb: (
          channel: string,
          uid: number,
          oldState: STREAM_SUBSCRIBE_STATE,
          newState: STREAM_SUBSCRIBE_STATE,
          elapseSinceLastState: number
          ) => void): this;</codeblock>
  </p>
  
  <!--onVideoSubscribeStateChanged-->
  <p id="onVideoSubscribeStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onVideoSubscribeStateChanged(const char* channel, uid_t uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState) {
        (void)channel;
        (void)uid;
        (void)oldState;
        (void)newState;
        (void)elapseSinceLastState;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'videoSubscribeStateChanged', cb: (
          channel: string,
          uid: number,
          oldState: STREAM_SUBSCRIBE_STATE,
          newState: STREAM_SUBSCRIBE_STATE,
          elapseSinceLastState: number
          ) => void): this;</codeblock>
  </p>

  <!--onUserMuteAudio-->
  <p id="onUserMuteAudio">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onUserMuteAudio(uid_t uid, bool muted) {
        (void)uid;
        (void)muted;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'userMuteAudio', cb: (uid: number, muted: boolean) => void): this;</codeblock>
  </p>
  
  <!--onUserMuteVideo-->
  <p id="onUserMuteVideo">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onUserMuteVideo(uid_t uid, bool muted) {
        (void)uid;
        (void)muted;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'userMuteVideo', cb: (uid: number, muted: boolean) => void): this;</codeblock>
  </p>
  
  <!--onUserEnableVideo-->
  <p id="onUserEnableVideo">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onUserEnableVideo(uid_t uid, bool enabled) {
        (void)uid;
        (void)enabled;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'userEnableVideo', cb: (uid: number, enabled: boolean) => void): this;</codeblock>
  </p>
  
  <!--onUserEnableLocalVideo-->
  <p id="onUserEnableLocalVideo">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onUserEnableLocalVideo(uid_t uid, bool enabled) {
        (void)uid;
        (void)enabled;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'userEnableLocalVideo',
          cb: (uid: number, enabled: boolean) => void
          ): this;</codeblock>
  </p>
  
  <!--onVideoSizeChanged-->
  <p id="onVideoSizeChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onVideoSizeChanged(uid_t uid, int width, int height, int rotation) {
        (void)uid;
        (void)width;
        (void)height;
        (void)rotation;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'videoSizeChanged',
          cb: (uid: number, width: number, height: number, rotation: number) => void
          ): this;</codeblock>
  </p>

  <!--onRtcStats-->
  <p id="onRtcStats">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRtcStats(const RtcStats&amp; stats) {
        (void)stats;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'rtcStats', cb: (stats: RtcStats) => void): this;</codeblock>
  </p>
  
  <!--onNetworkQuality-->
  <p id="onNetworkQuality">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onNetworkQuality(uid_t uid, int txQuality, int rxQuality) {
        (void)uid;
        (void)txQuality;
        (void)rxQuality;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'networkQuality',
          cb: (
          uid: number,
          txquality: QUALITY_TYPE,
          rxquality: QUALITY_TYPE
          ) => void
          ): this;</codeblock>
  </p>
  
  <!--onLocalAudioStats-->
  <p id="onLocalAudioStats">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onLocalAudioStats(const LocalAudioStats&amp; stats) {
        (void)stats;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'localAudioStats', cb: (stats: LocalAudioStats) => void): this;</codeblock>
  </p>
  
  <!--onLocalVideoStats-->
  <p id="onLocalVideoStats">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onLocalVideoStats(const LocalVideoStats&amp; stats) {
        (void)stats;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'localVideoStats', cb: (stats: LocalVideoStats) => void): this;</codeblock>
  </p>
  
  <!--onRemoteAudioStats-->
  <p id="onRemoteAudioStats">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteAudioStats(const RemoteAudioStats&amp; stats) {
        (void)stats;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'remoteAudioStats', cb: (stats: RemoteAudioStats) => void): this;</codeblock>
  </p>

  <!--onRemoteAudioTransportStats-->
  <p id="onRemoteAudioTransportStats">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteAudioTransportStats(
        uid_t uid, unsigned short delay, unsigned short lost,
        unsigned short rxKBitRate) {
        (void)uid;
        (void)delay;
        (void)lost;
        (void)rxKBitRate;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'remoteAudioTransportStats',
          cb: (stats: RemoteAudioTransportStats) => void
          ): this;</codeblock>
  </p>
  
  <!--onRemoteVideoStats-->
  <p id="onRemoteVideoStats">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteVideoStats(const RemoteVideoStats&amp; stats) {
        (void)stats;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'remoteVideoStats', cb: (stats: RemoteVideoStats) => void): this;</codeblock>
  </p>
  
  <!--onRemoteVideoTransportStats-->
  <p id="onRemoteVideoTransportStats">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteVideoTransportStats(
        uid_t uid, unsigned short delay, unsigned short lost,
        unsigned short rxKBitRate) {
        (void)uid;
        (void)delay;
        (void)lost;
        (void)rxKBitRate;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'remoteVideoTransportStats', cb: (stats: RemoteVideoTransportStats) => void): this;</codeblock>
  </p>
  
  <!--onAudioQuality-->
  <p id="onAudioQuality">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onAudioQuality(uid_t uid, int quality, unsigned short delay, unsigned short lost) {
        (void)uid;
        (void)quality;
        (void)delay;
        (void)lost;
    }</codeblock>            
                    </p>
                    
                    <!--onAudioMixingStateChanged-->
                    <p id="onAudioMixingStateChanged">                
                        <codeblock props="windows" outputclass="language-cpp">virtual void onAudioMixingStateChanged(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_ERROR_TYPE errorCode){
    }</codeblock>
                        <codeblock props="electron" outputclass="language-typescript">on(
                            evt: 'audioMixingStateChanged',
                            cb: (state: number, err: number) => void
                            ): this;</codeblock>
                    </p>

                    <!--onAudioMixingFinished-->
                    <p id="onAudioMixingFinished">                
                        <codeblock props="windows" outputclass="language-cpp">virtual void onAudioMixingFinished() {
    }</codeblock>
                        <codeblock props="electron" outputclass="language-typescript">on(evt: 'audioMixingFinished', cb: (soundId: number) => void): this;</codeblock>
                    </p>

                    <!--onAudioEffectFinished-->
                    <p id="onAudioEffectFinished">                
                        <codeblock props="windows" outputclass="language-cpp">virtual void onAudioEffectFinished(int soundId) {
    }</codeblock>
                        <codeblock props="electron" outputclass="language-typescript">on(evt: 'audioEffectFinished', cb: (soundId: number) => void): this;</codeblock>
                    </p>
                    
                    <!--onRemoteAudioMixingBegin-->
                    <p id="onRemoteAudioMixingBegin">                
                        <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteAudioMixingBegin() {
    }</codeblock>
                        <codeblock props="electron" outputclass="language-typescript">on(evt: 'remoteAudioMixingBegin', cb: () => void): this;</codeblock>
                    </p>

                    <!--onRemoteAudioMixingEnd-->
                    <p id="onRemoteAudioMixingEnd">                
                        <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteAudioMixingEnd() {
    }</codeblock>
                        <codeblock props="electron" outputclass="language-typescript">on(evt: 'remoteAudioMixingEnd', cb: () => void): this;</codeblock>
                    </p>

                    <!--IChannel_onChannelWarning-->
                    <p id="IChannel_onChannelWarning">                
                        <codeblock props="windows" outputclass="language-cpp">virtual void onChannelWarning(IChannel *rtcChannel, int warn, const char* msg) {
        (void)rtcChannel;
        (void)warn;
        (void)msg;
    }</codeblock>
                        <codeblock props="electron" outputclass="language-typescript">on(evt: 'channelWarning', cb: (warn: number, msg: string) => void): this;</codeblock>
  </p>

  <!--IChannel_onChannelError-->
  <p id="IChannel_onChannelError">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onChannelError(IChannel *rtcChannel, int err, const char* msg) {
        (void)rtcChannel;
        (void)err;
        (void)msg;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'channelError', cb: (err: number, msg: string) => void): this;</codeblock>
  </p>

  <!--IChannel_onJoinChannelSuccess-->
  <p id="IChannel_onJoinChannelSuccess">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onJoinChannelSuccess(IChannel *rtcChannel, uid_t uid, int elapsed) {
        (void)rtcChannel;
        (void)uid;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'joinChannelSuccess', cb: (uid: number, elapsed: number) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onRejoinChannelSuccess-->
  <p id="IChannel_onRejoinChannelSuccess">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRejoinChannelSuccess(IChannel *rtcChannel, uid_t uid, int elapsed) {
        (void)rtcChannel;
        (void)uid;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'rejoinChannelSuccess',
          cb: (uid: number, elapsed: number) => void
          ): this;</codeblock>
  </p>
  
  <!--IChannel_onLeaveChannel-->
  <p id="IChannel_onLeaveChannel">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onLeaveChannel(IChannel *rtcChannel, const RtcStats&amp; stats) {
        (void)rtcChannel;
        (void)stats;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'leaveChannel', cb: (stats: RtcStats) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onClientRoleChanged-->
  <p id="IChannel_onClientRoleChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onClientRoleChanged(IChannel *rtcChannel, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole) {
        (void)rtcChannel;
        (void)oldRole;
        (void)newRole;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'clientRoleChanged',
          cb: (oldRole: CLIENT_ROLE_TYPE, newRole: CLIENT_ROLE_TYPE) => void
          ): this;</codeblock>
  </p>
  
  <!--IChannel_onUserJoined-->
  <p id="IChannel_onUserJoined">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onUserJoined(IChannel *rtcChannel, uid_t uid, int elapsed) {
        (void)rtcChannel;
        (void)uid;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'userJoined', cb: (uid: number, elapsed: number) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onUserOffline-->
  <p id="IChannel_onUserOffline">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onUserOffline(IChannel *rtcChannel, uid_t uid, USER_OFFLINE_REASON_TYPE reason) {
        (void)rtcChannel;
        (void)uid;
        (void)reason;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'userOffline', cb: (uid: number, reason: number) => void): this;</codeblock>
  </p>

  <!--IChannel_onConnectionLost-->
  <p id="IChannel_onConnectionLost">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onConnectionLost(IChannel *rtcChannel) {
        (void)rtcChannel;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'connectionLost', cb: () => void): this;</codeblock>
  </p>
  
  <!--IChannel_onRequestToken-->
  <p id="IChannel_onRequestToken">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRequestToken(IChannel *rtcChannel) {
        (void)rtcChannel;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'requestToken', cb: () => void): this;</codeblock>
  </p>
  
  <!--IChannel_onTokenPrivilegeWillExpire-->
  <p id="IChannel_onTokenPrivilegeWillExpire">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onTokenPrivilegeWillExpire(IChannel *rtcChannel, const char* token) {
        (void)rtcChannel;
        (void)token;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'tokenPrivilegeWillExpire', cb: (token: string) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onRtcStats-->
  <p id="IChannel_onRtcStats">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRtcStats(IChannel *rtcChannel, const RtcStats&amp; stats) {
        (void)rtcChannel;
        (void)stats;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'rtcStats', cb: (stats: RtcStats) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onNetworkQuality-->
  <p id="IChannel_onNetworkQuality">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onNetworkQuality(IChannel *rtcChannel, uid_t uid, int txQuality, int rxQuality) {
        (void)rtcChannel;
        (void)uid;
        (void)txQuality;
        (void)rxQuality;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'networkQuality',
          cb: (
          uid: number,
          txquality: QUALITY_TYPE,
          rxquality: QUALITY_TYPE
          ) => void
          ): this;</codeblock>
  </p>
  
  <!--IChannel_onRemoteVideoStats-->
  <p id="IChannel_onRemoteVideoStats">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteVideoStats(IChannel *rtcChannel, const RemoteVideoStats&amp; stats) {
        (void)rtcChannel;
        (void)stats;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'remoteVideoStats', cb: (stats: RemoteVideoStats) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onRemoteAudioStats-->
  <p id="IChannel_onRemoteAudioStats">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteAudioStats(IChannel *rtcChannel, const RemoteAudioStats&amp; stats) {
        (void)rtcChannel;
        (void)stats;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'remoteAudioStats', cb: (stats: RemoteAudioStats) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onRemoteAudioStateChanged-->
  <p id="IChannel_onRemoteAudioStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteAudioStateChanged(IChannel *rtcChannel, uid_t uid, REMOTE_AUDIO_STATE state, REMOTE_AUDIO_STATE_REASON reason, int elapsed) {
        (void)rtcChannel;
        (void)uid;
        (void)state;
        (void)reason;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'remoteAudioStateChanged', cb: (
          uid: number,
          state: REMOTE_AUDIO_STATE,
          reason: REMOTE_AUDIO_STATE_REASON,
          elapsed: number
          ) => void): this;</codeblock>
  </p>

  <!--IChannel_onAudioPublishStateChanged-->
  <p id="IChannel_onAudioPublishStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onAudioPublishStateChanged(IChannel *rtcChannel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState) {
        (void)rtcChannel;
        (void)oldState;
        (void)newState;
        (void)elapseSinceLastState;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'audioPublishStateChanged', cb: (
          oldState: STREAM_PUBLISH_STATE,
          newState: STREAM_PUBLISH_STATE,
          elapseSinceLastState: number
          ) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onVideoPublishStateChanged-->
  <p id="IChannel_onVideoPublishStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onVideoPublishStateChanged(IChannel *rtcChannel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState) {
        (void)rtcChannel;
        (void)oldState;
        (void)newState;
        (void)elapseSinceLastState;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'videoPublishStateChanged', cb: (
          oldState: STREAM_PUBLISH_STATE,
          newState: STREAM_PUBLISH_STATE,
          elapseSinceLastState: number
          ) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onAudioSubscribeStateChanged-->
  <p id="IChannel_onAudioSubscribeStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onAudioSubscribeStateChanged(IChannel *rtcChannel, uid_t uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState) {
        (void)rtcChannel;
        (void)uid;
        (void)oldState;
        (void)newState;
        (void)elapseSinceLastState;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'audioSubscribeStateChanged', cb: (
          uid: number,
          oldState: STREAM_SUBSCRIBE_STATE,
          newState: STREAM_SUBSCRIBE_STATE,
          elapseSinceLastState: number
          ) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onVideoSubscribeStateChanged-->
  <p id="IChannel_onVideoSubscribeStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onVideoSubscribeStateChanged(IChannel *rtcChannel, uid_t uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState) {
        (void)rtcChannel;
        (void)uid;
        (void)oldState;
        (void)newState;
        (void)elapseSinceLastState;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'videoSubscribeStateChanged', cb: (
          uid: number,
          oldState: STREAM_SUBSCRIBE_STATE,
          newState: STREAM_SUBSCRIBE_STATE,
          elapseSinceLastState: number
          ) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onActiveSpeaker-->
  <p id="IChannel_onActiveSpeaker">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onActiveSpeaker(IChannel *rtcChannel, uid_t uid) {
        (void)rtcChannel;
        (void)uid;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'activeSpeaker', cb: (uid: number) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onVideoSizeChanged-->
  <p id="IChannel_onVideoSizeChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onVideoSizeChanged(IChannel *rtcChannel, uid_t uid, int width, int height, int rotation) {
        (void)rtcChannel;
        (void)uid;
        (void)width;
        (void)height;
        (void)rotation;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'videoSizeChanged',
          cb: (uid: number, width: number, height: number, rotation: number) => void
          ): this;</codeblock>
  </p>
  
  <!--IChannel_onRemoteVideoStateChanged-->
  <p id="IChannel_onRemoteVideoStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteVideoStateChanged(IChannel *rtcChannel, uid_t uid, REMOTE_VIDEO_STATE state, REMOTE_VIDEO_STATE_REASON reason, int elapsed) {
        (void)rtcChannel;
        (void)uid;
        (void)state;
        (void)reason;
        (void)elapsed;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'remoteVideoStateChanged',
          cb: (
          uid: number,
          state: REMOTE_VIDEO_STATE,
          reason: REMOTE_VIDEO_STATE_REASON,
          elapsed: number
          ) => void
          ): this;</codeblock>
  </p>
  
  <!--IChannel_onStreamMessage-->
  <p id="IChannel_onStreamMessage">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onStreamMessage(IChannel *rtcChannel, uid_t uid, int streamId, const char* data, size_t length) {
        (void)rtcChannel;
        (void)uid;
        (void)streamId;
        (void)data;
        (void)length;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'streamMessage',
          cb: (uid: number, streamId: number, data: string) => void
          ): this;</codeblock>
  </p>

  <!--IChannel_onStreamMessageError-->
  <p id="IChannel_onStreamMessageError">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onStreamMessageError(IChannel *rtcChannel, uid_t uid, int streamId, int code, int missed, int cached) {
        (void)rtcChannel;
        (void)uid;
        (void)streamId;
        (void)code;
        (void)missed;
        (void)cached;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'streamMessageError',
          cb: (
          uid: number,
          streamId: number,
          code: number,
          missed: number,
          cached: number
          ) => void
          ): this;</codeblock>
  </p>
  
  <!--IChannel_onChannelMediaRelayStateChanged-->
  <p id="IChannel_onChannelMediaRelayStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onChannelMediaRelayStateChanged(IChannel *rtcChannel, CHANNEL_MEDIA_RELAY_STATE state,CHANNEL_MEDIA_RELAY_ERROR code) {
        (void)rtcChannel;
        (void)state;
        (void)code;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'channelMediaRelayState', cb: (
          state: CHANNEL_MEDIA_RELAY_STATE,
          code: CHANNEL_MEDIA_RELAY_ERROR
          ) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onChannelMediaRelayEvent-->
  <p id="IChannel_onChannelMediaRelayEvent">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onChannelMediaRelayEvent(IChannel *rtcChannel, CHANNEL_MEDIA_RELAY_EVENT code) {
        (void)rtcChannel;
        (void)code;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'channelMediaRelayEvent', cb: (
          event: CHANNEL_MEDIA_RELAY_EVENT
          ) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onRtmpStreamingStateChanged-->
  <p id="IChannel_onRtmpStreamingStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRtmpStreamingStateChanged(IChannel *rtcChannel, const char *url, RTMP_STREAM_PUBLISH_STATE state, RTMP_STREAM_PUBLISH_ERROR errCode) {
        (void)rtcChannel;
        (void) url;
        (RTMP_STREAM_PUBLISH_STATE) state;
        (RTMP_STREAM_PUBLISH_ERROR) errCode;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'rtmpStreamingStateChanged', cb: (url: string, state: number, code: number) => void): this;</codeblock>
  </p>
  
  <!--IChannel_onRtmpStreamingEvent-->
  <p id="IChannel_onRtmpStreamingEvent">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRtmpStreamingEvent(IChannel *rtcChannel, const char* url, RTMP_STREAMING_EVENT eventCode) {
        (void) rtcChannel;
        (void) url;
        (RTMP_STREAMING_EVENT) eventCode;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript"></codeblock>
  </p>
  
  <!--IChannel_onTranscodingUpdated-->
  <p id="IChannel_onTranscodingUpdated">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onTranscodingUpdated(IChannel *rtcChannel) {
        (void)rtcChannel;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'transcodingUpdated', cb: () => void): this;</codeblock>
  </p>
  
  <!--IChannel_onStreamInjectedStatus-->
  <p id="IChannel_onStreamInjectedStatus">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onStreamInjectedStatus(IChannel *rtcChannel, const char* url, uid_t uid, int status) {
        (void)rtcChannel;
        (void)url;
        (void)uid;
        (void)status;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'streamInjectedStatus',
          cb: (url: string, uid: number, status: number) => void
          ): this;</codeblock>
  </p>
  
  <!--IChannel_onLocalPublishFallbackToAudioOnly-->
  <p id="IChannel_onLocalPublishFallbackToAudioOnly">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onLocalPublishFallbackToAudioOnly(IChannel *rtcChannel, bool isFallbackOrRecover) {
        (void)rtcChannel;
        (void)isFallbackOrRecover;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript"></codeblock>
  </p>

  <!--IChannel_onRemoteSubscribeFallbackToAudioOnly-->
  <p id="IChannel_onRemoteSubscribeFallbackToAudioOnly">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteSubscribeFallbackToAudioOnly(IChannel *rtcChannel, uid_t uid, bool isFallbackOrRecover) {
        (void)rtcChannel;
        (void)uid;
        (void)isFallbackOrRecover;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'remoteSubscribeFallbackToAudioOnly', cb: (
          uid: number,
          isFallbackOrRecover: boolean
          ) => void): this;</codeblock>
  </p>

  <!--IChannel_onConnectionStateChanged-->
  <p id="IChannel_onConnectionStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onConnectionStateChanged(IChannel *rtcChannel,
      CONNECTION_STATE_TYPE state,
      CONNECTION_CHANGED_REASON_TYPE reason) {
        (void)rtcChannel;
        (void)state;
        (void)reason;
    }
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'connectionStateChanged', cb: (
          state: CONNECTION_STATE_TYPE,
          reason: CONNECTION_CHANGED_REASON_TYPE
          ) => void): this;</codeblock>
  </p>

  <!--onRtmpStreamingStateChanged-->
  <p id="onRtmpStreamingStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRtmpStreamingStateChanged(const char *url, RTMP_STREAM_PUBLISH_STATE state, RTMP_STREAM_PUBLISH_ERROR errCode) {
        (void) url;
        (void) state;
        (void) errCode;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'rtmpStreamingStateChanged', cb: (url: string, state: number, code: number) => void): this;</codeblock>
  </p>

  <!--onRtmpStreamingEvent-->
  <p id="onRtmpStreamingEvent">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRtmpStreamingEvent(const char* url, RTMP_STREAMING_EVENT eventCode) {
      (void) url;
      (void) eventCode;
  }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'rtmpStreamingEvent', cb: (
          url: string,
          eventCode: RTMP_STREAMING_EVENT
          ) => void): this;</codeblock>
  </p>

  <!--onTranscodingUpdated-->
  <p id="onTranscodingUpdated">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onTranscodingUpdated() {
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'transcodingUpdated', cb: () => void): this;</codeblock>
  </p>

  <!--onStreamPublished-->
  <p id="onStreamPublished">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onStreamPublished(const char *url, int error) {
        (void)url;
        (void)error;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">n(evt: 'streamPublished', cb: (url: string, error: number) => void): this;</codeblock>
  </p>
  
  <!--onStreamUnpublished-->
  <p id="onStreamUnpublished">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onStreamUnpublished(const char *url) {
        (void)url;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'streamUnpublished', cb: (url: string) => void): this;</codeblock>
  </p>
  
  <!--onChannelMediaRelayStateChanged-->
  <p id="onChannelMediaRelayStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onChannelMediaRelayStateChanged(CHANNEL_MEDIA_RELAY_STATE state,CHANNEL_MEDIA_RELAY_ERROR code) {
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'channelMediaRelayState', cb: (
          state: CHANNEL_MEDIA_RELAY_STATE,
          code: CHANNEL_MEDIA_RELAY_ERROR
          ) => void): this;</codeblock>
  </p>

  <!--onChannelMediaRelayEvent-->
  <p id="onChannelMediaRelayEvent">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onChannelMediaRelayEvent(CHANNEL_MEDIA_RELAY_EVENT code) {
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'channelMediaRelayEvent', cb: (
          event: CHANNEL_MEDIA_RELAY_EVENT
          ) => void): this;</codeblock>
  </p>
  
  <!--onAudioVolumeIndication-->
  <p id="onAudioVolumeIndication">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onAudioVolumeIndication(const AudioVolumeInfo* speakers, unsigned int speakerNumber, int totalVolume) {
        (void)speakers;
        (void)speakerNumber;
        (void)totalVolume;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'audioVolumeIndication',
          cb: (
          speakers: {
          uid: number;
          volume: number;
          vad: number;
          }[],
          speakerNumber: number,
          totalVolume: number
          ) => void
          ): this;</codeblock>
  </p>
  
  <!--onActiveSpeaker-->
  <p id="onActiveSpeaker">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onActiveSpeaker(uid_t uid) {
        (void)uid;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'activeSpeaker', cb: (uid: number) => void): this;</codeblock>
  </p>
  
  <!--onFacePositionChanged-->
  <p id="onFacePositionChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onFacePositionChanged(int imageWidth, int imageHeight, Rectangle* vecRectangle, int* vecDistance, int numFaces){
       (void)imageWidth;
       (void)imageHeight;
       (void)vecRectangle;
       (void)vecDistance;
        (void)numFaces;
    }
#endif</codeblock>   
  </p>

  <!--onAudioRouteChanged-->
  <p id="onAudioRouteChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onAudioRouteChanged(AUDIO_ROUTE_TYPE routing) {
        (void)routing;
    }</codeblock>   
  </p>
  
  <!--onLocalPublishFallbackToAudioOnly-->
  <p id="onLocalPublishFallbackToAudioOnly">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onLocalPublishFallbackToAudioOnly(bool isFallbackOrRecover) {
        (void)isFallbackOrRecover;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'localPublishFallbackToAudioOnly', cb: (isFallbackOrRecover: boolean) => void): this;</codeblock>
  </p>

  <!--onRemoteSubscribeFallbackToAudioOnly-->
  <p id="onRemoteSubscribeFallbackToAudioOnly">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onRemoteSubscribeFallbackToAudioOnly(uid_t uid, bool isFallbackOrRecover) {
        (void)uid;
        (void)isFallbackOrRecover;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'remoteSubscribeFallbackToAudioOnly', cb: (
          uid: number,
          isFallbackOrRecover: boolean
          ) => void): this;</codeblock>
  </p>

  <!--onLastmileQuality-->
  <p id="onLastmileQuality">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onLastmileQuality(int quality) {
        (void)quality;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'lastmileQuality', cb: (quality: QUALITY_TYPE) => void): this;</codeblock>
  </p>

  <!--onLastmileProbeResult-->
  <p id="onLastmileProbeResult">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onLastmileProbeResult(const LastmileProbeResult&amp; result) {
        (void)result;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'lastmileProbeResult',
          cb: (result: LastmileProbeResult) => void
          ): this;</codeblock>
  </p>
  
   <!--onInitialize-->
   <p id="onInitialize">
       <codeblock props="windows" outputclass="language-cpp">virtual bool onInitialize(IVideoFrameConsumer *consumer) = 0;</codeblock>
   </p>
  
  <!-- onDispose -->
  <p id="onDispose">
      <codeblock props="windows" outputclass="language-cpp">virtual void onDispose() = 0;</codeblock>
  </p>
  
  <!-- onStart -->
  <p id="onStart">
      <codeblock props="windows" outputclass="language-cpp">virtual bool onStart() = 0;</codeblock>
  </p>
  
  <!-- onStop -->
  <p id="onStop">
      <codeblock props="windows" outputclass="language-cpp">virtual void onStop() = 0;</codeblock>
  </p>
  
  <!-- getBufferType -->
  <p id="getBufferType">
      <codeblock props="windows" outputclass="language-cpp">virtual agora::media::ExternalVideoFrame::VIDEO_PIXEL_FORMAT getBufferType() = 0;</codeblock>
  </p>
  
  <!-- getVideoCaptureType -->
  <p id="getVideoCaptureType">
      <codeblock props="windows" outputclass="language-cpp">virtual VIDEO_CAPTURE_TYPE getVideoCaptureType() = 0;</codeblock>
  </p>
  
  <!-- getVideoContentHint -->
  <p id="getVideoContentHint">
      <codeblock props="windows" outputclass="language-cpp">virtual VideoContentHint getVideoContentHint() = 0;</codeblock>
  </p>
  
  <!--onRecordAudioFrame-->
  <p id="onRecordAudioFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onRecordAudioFrame(AudioFrame&amp; audioFrame) = 0;</codeblock>   
  </p>

  <!--onPlaybackAudioFrame-->
  <p id="onPlaybackAudioFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onPlaybackAudioFrame(AudioFrame&amp; audioFrame) = 0;</codeblock>   
  </p>
    
  <!--onPlaybackAudioFrameBeforeMixing-->
  <p id="onPlaybackAudioFrameBeforeMixing">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onPlaybackAudioFrameBeforeMixing(unsigned int uid,
      AudioFrame&amp; audioFrame) = 0;</codeblock>   
  </p>
  
  <!--onMixedAudioFrame-->
  <p id="onMixedAudioFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onMixedAudioFrame(AudioFrame&amp; audioFrame) = 0;</codeblock>    
  </p>
  
  <!--IAudioFrameObserver_isMultipleChannelFrameWanted-->  
  <p id="IAudioFrameObserver_isMultipleChannelFrameWanted">
       <codeblock props="windows" outputclass="language-cpp">virtual bool isMultipleChannelFrameWanted() { return false; }</codeblock>
   </p>
  
  <!--onPlaybackAudioFrameBeforeMixingEx-->
  <p id="onPlaybackAudioFrameBeforeMixingEx">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onPlaybackAudioFrameBeforeMixingEx(const char *channelId,
    unsigned int uid, AudioFrame&amp; audioFrame) { return true; }</codeblock>   
  </p>
  
  <!--IVideoFrameObserver_isMultipleChannelFrameWanted-->
  <p id="IVideoFrameObserver_isMultipleChannelFrameWanted">
      <codeblock props="windows" outputclass="language-cpp">virtual bool isMultipleChannelFrameWanted() { return false; }</codeblock>
  </p>
  <!--getObservedFramePosition-->
  <p id="getObservedFramePosition">       
      <codeblock props="windows" outputclass="language-cpp">virtual uint32_t getObservedFramePosition() { return static_cast&lt;uint32_t&gt;(POSITION_POST_CAPTURER | POSITION_PRE_RENDERER); }</codeblock>   
  </p>

  <!--onCaptureVideoFrame-->
  <p id="onCaptureVideoFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onCaptureVideoFrame(VideoFrame&amp; videoFrame) = 0;</codeblock>   
  </p>

  <!--onPreEncodeVideoFrame-->
  <p id="onPreEncodeVideoFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onPreEncodeVideoFrame(VideoFrame&amp; videoFrame) { return true; }</codeblock>   
  </p>

  <!--getSmoothRenderingEnabled-->
  <p id="getSmoothRenderingEnabled">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool getSmoothRenderingEnabled(){ return false; }</codeblock>   
  </p>

  <!--onRenderVideoFrame-->
  <p id="onRenderVideoFrame">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onRenderVideoFrame(unsigned int uid, VideoFrame&amp; videoFrame) = 0;</codeblock>   
  </p>
  
  <!--onRenderVideoFrameEx-->
  <p id="onRenderVideoFrameEx">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onRenderVideoFrameEx(const char *channelId, unsigned int uid, VideoFrame&amp; videoFrame) { return true; }</codeblock>   
  </p>
  
  <!--getVideoFormatPreference-->
  <p id="getVideoFormatPreference">       
      <codeblock props="windows" outputclass="language-cpp">virtual VIDEO_FRAME_TYPE getVideoFormatPreference() { return FRAME_TYPE_YUV420; }</codeblock>   
  </p>

  <!--getRotationApplied-->
  <p id="getRotationApplied">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool getRotationApplied() { return false; }</codeblock>   
  </p>
  
  <!--getMirrorApplied-->
  <p id="getMirrorApplied">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool getMirrorApplied() { return false; }</codeblock>   
  </p>
  
  <!--getMaxMetadataSize-->
  <p id="getMaxMetadataSize">       
      <codeblock props="windows" outputclass="language-cpp">virtual int getMaxMetadataSize() = 0;</codeblock>   
  </p>

  <!--onReadyToSendMetadata-->
  <p id="onReadyToSendMetadata">       
      <codeblock props="windows" outputclass="language-cpp">virtual bool onReadyToSendMetadata(Metadata &amp;metadata) = 0;</codeblock>   
  </p>
  
  <!--onMetadataReceived-->
  <p id="onMetadataReceived">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onMetadataReceived(const Metadata &amp;metadata) = 0;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'receiveMetadata', cb: (
          metadata: Metadata
          ) => void): this;</codeblock>
  </p>
           
  <!-- sendMetadataSuccess -->
  <p id="sendMetadataSuccess">
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'sendMetadataSuccess', cb: (
          metadata: Metadata
          ) => void): this;</codeblock>
  </p>
  
  <!--onStreamInjectedStatus-->
  <p id="onStreamInjectedStatus">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onStreamInjectedStatus(const char* url, uid_t uid, int status) {
        (void)url;
        (void)uid;
        (void)status;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'streamInjectStatus',
          cb: (url: string, uid: number, status: number) => void
          ): this;</codeblock>
  </p>

  <!--onCameraFocusAreaChanged-->
  <p id="onCameraFocusAreaChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onCameraFocusAreaChanged(int x, int y, int width, int height) {
        (void)x;
        (void)y;
        (void)width;
        (void)height;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'cameraFocusAreaChanged',
          cb: (x: number, y: number, width: number, height: number) => void
          ): this;</codeblock>
  </p>

  <!--onCameraExposureAreaChanged-->
  <p id="onCameraExposureAreaChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onCameraExposureAreaChanged(int x, int y, int width, int height) {
        (void)x;
        (void)y;
        (void)width;
        (void)height;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'cameraExposureAreaChanged',
          cb: (x: number, y: number, width: number, height: number) => void
          ): this;</codeblock>
  </p>
  
  <!--onCameraReady-->
  <p id="onCameraReady">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onCameraReady() {}</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'cameraReady', cb: () => void): this;</codeblock>
  </p>

  <!--onAudioDeviceStateChanged-->
  <p id="onAudioDeviceStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onAudioDeviceStateChanged(const char* deviceId, int deviceType, int deviceState) {
        (void)deviceId;
        (void)deviceType;
        (void)deviceState;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'audioDeviceStateChanged',
          cb: (deviceId: string, deviceType: number, deviceState: number) => void
          ): this;</codeblock>
  </p>

  <!--onAudioDeviceVolumeChanged-->
  <p id="onAudioDeviceVolumeChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onAudioDeviceVolumeChanged(MEDIA_DEVICE_TYPE deviceType, int volume, bool muted) {
        (void)deviceType;
        (void)volume;
        (void)muted;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'audioDeviceVolumeChanged',
          cb: (deviceType: MEDIA_DEVICE_TYPE, volume: number, muted: boolean) => void
          ): this;</codeblock>
  </p>

  <!--onVideoDeviceStateChanged-->
  <p id="onVideoDeviceStateChanged">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onVideoDeviceStateChanged(const char* deviceId, int deviceType, int deviceState) {
        (void)deviceId;
        (void)deviceType;
        (void)deviceState;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'videoDeviceStateChanged',
          cb: (deviceId: string, deviceType: number, deviceState: number) => void
          ): this;</codeblock>
  </p>
  
  <!-- stateChanged -->
  <p id="stateChanged">
      <codeblock props="mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit* _Nonnull)engine
 device:(NSString* _Nonnull)deviceId
 type:(AgoraMediaDeviceType)deviceType
 stateChanged:(NSInteger)state;</codeblock>
  </p>

  <!--onStreamMessage-->
  <p id="onStreamMessage">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onStreamMessage(uid_t uid, int streamId, const char* data, size_t length) {
        (void)uid;
        (void)streamId;
        (void)data;
        (void)length;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'streamMessage',
          cb: (uid: number, streamId: number, msg: string, len: number) => void
          ): this;</codeblock>
  </p>

  <!--onStreamMessageError-->
  <p id="onStreamMessageError">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onStreamMessageError(uid_t uid, int streamId, int code, int missed, int cached) {
        (void)uid;
        (void)streamId;
        (void)code;
        (void)missed;
        (void)cached;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(
          evt: 'streamMessageError',
          cb: (
          uid: number,
          streamId: number,
          code: number,
          missed: number,
          cached: number
          ) => void
          ): this;</codeblock>
  </p>
  <!--onUploadLogResult-->
  <p id="onUploadLogResult">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onUploadLogResult(const char* requestId, bool success, UPLOAD_ERROR_REASON reason) {
 (void)requestId;
 (void)success;
 (void)reason;
 }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'uploadLogResult', cb: (
          requestId: string,
          success: boolean,
          reason: number
          ) => void): this;</codeblock>
  </p>
  
  <!--onWarning-->
  <p id="onWarning">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onWarning(int warn, const char* msg) {
        (void)warn;
        (void)msg;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'warning', cb: (warn: number, msg: string) => void): this;</codeblock>
  </p>
  
  <!--onError-->
  <p id="onError">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onError(int err, const char* msg) {
        (void)err;
        (void)msg;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'error', cb: (err: number, msg: string) => void): this;</codeblock>
  </p>

  <!--onApiCallExecuted-->
  <p id="onApiCallExecuted">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onApiCallExecuted(int err, const char* api, const char* result) {
        (void)err;
        (void)api;
        (void)result;
    }</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'apiCallExecuted', cb: (api: string, err: number) => void): this;</codeblock>
  </p>
  
  <!--onMediaEngineLoadSuccess-->
  <p id="onMediaEngineLoadSuccess">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onMediaEngineLoadSuccess() {}</codeblock>
  </p>
  
  <!--onMediaEngineStartCallSuccess-->
  <p id="onMediaEngineStartCallSuccess">       
      <codeblock props="windows" outputclass="language-cpp">virtual void onMediaEngineStartCallSuccess() {}</codeblock>
      <codeblock props="electron" outputclass="language-typescript">on(evt: 'mediaEngineStartCallSuccess', cb: () => void): this;</codeblock>
  </p>
           
   <!-- videoSourceJoinedSuccess -->
   <p id="videoSourceJoinedSuccess">
       <codeblock props="electron" outputclass="language-typescript">on(evt: 'videoSourceJoinedSuccess', cb: (uid: number) => void): this;</codeblock>
   </p>
           
   <!-- videoSourceRequestNewToken -->
   <p id="videoSourceRequestNewToken">
       <codeblock props="electron" outputclass="language-typescript">on(evt: 'videoSourceRequestNewToken', cb: () => void): this;</codeblock>
   </p>
           
   <!-- videoSourceLeaveChannel -->
   <p id="videoSourceLeaveChannel">
       <codeblock props="electron" outputclass="language-typescript">on(evt: 'videoSourceLeaveChannel', cb: () => void): this;</codeblock>
   </p>
   
   <!-- videoSourceLocalAudioStats -->
   <p id="videoSourceLocalAudioStats">
       <codeblock props="electron" outputclass="language-typescript">on(evt: 'videoSourceLocalAudioStats', cb: (stats: LocalAudioStats) => void): this;</codeblock>
   </p>
           
   <!-- videoSourceLocalVideoStats -->
   <p id="videoSourceLocalVideoStats">
       <codeblock props="electron" outputclass="language-typescript">on(evt: 'videoSourceLocalVideoStats', cb: (stats: LocalVideoStats) => void): this;</codeblock>
   </p>
           
   <!-- videoSourceVideoSizeChanged -->
   <p id="videoSourceVideoSizeChanged">
       <codeblock>on(evt: 'videoSourceVideoSizeChanged', cb: (uid: number, width: number, height: number, rotation: number) => void): this;</codeblock>
   </p>
  
       </section>
   

       <section>     
  <title>Classes</title>
  <!-- AudioFrame -->
  <p id="AudioFrame">
      <codeblock props="windows" outputclass="language-cpp">struct AudioFrame {
  AUDIO_FRAME_TYPE type;
  int samples;
  int bytesPerSample;
  int channels;
  int samplesPerSec;
  void* buffer;
  int64_t renderTimeMs;
  int avsync_type;
};</codeblock>
  </p>
  <!--AudioVolumeInfo-->  
  <p id="AudioVolumeInfo">       
      <codeblock props="windows" outputclass="language-cpp">struct AudioVolumeInfo
{
    uid_t uid;
    unsigned int volume; 
    unsigned int vad;
    const char * channelId;
};  </codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface AudioVolumeInfo
          {
          uid: number,
          volume: number
          vad: number
          channelId: string
          }</codeblock>
  </p>  

  <!--BeautyOptions-->  
  <p id="BeautyOptions">       
      <codeblock props="windows" outputclass="language-cpp">struct BeautyOptions {
    enum LIGHTENING_CONTRAST_LEVEL
    {
        LIGHTENING_CONTRAST_LOW = 0,
        LIGHTENING_CONTRAST_NORMAL,
        LIGHTENING_CONTRAST_HIGH
    };

LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel;
float lighteningLevel;
float smoothnessLevel;
float rednessLevel;

BeautyOptions(LIGHTENING_CONTRAST_LEVEL contrastLevel, float lightening, float smoothness, float redness)
    : lighteningLevel(lightening),
    smoothnessLevel(smoothness),
    rednessLevel(redness),
    lighteningContrastLevel(contrastLevel) {}

BeautyOptions()
    : lighteningLevel(0),
    smoothnessLevel(0),
    rednessLevel(0),
    lighteningContrastLevel(LIGHTENING_CONTRAST_NORMAL) {}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface BeautyOptions {
          lighteningContrastLevel: LIGHTENING_CONTRAST_LEVEL;
          lighteningLevel: number;
          smoothnessLevel: number;
          rednessLevel: number;
          }</codeblock>
  </p>   

  <!--CameraCapturerConfiguration-->  
  <p id="CameraCapturerConfiguration">       
      <codeblock props="windows" outputclass="language-cpp">struct CameraCapturerConfiguration{
     CAPTURER_OUTPUT_PREFERENCE preference;
     int captureWidth;
     int captureHeight;
     #if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
     CAMERA_DIRECTION cameraDirection;
     #endif

     CameraCapturerConfiguration()
        :preference(CAPTURER_OUTPUT_PREFERENCE_AUTO)
        ,captureWidth(640)
        ,captureHeight(480)
        {}

    CameraCapturerConfiguration(int width, int height)
        :preference(CAPTURER_OUTPUT_PREFERENCE_MANUAL)
        ,captureWidth(width)
        ,captureHeight(height)
        {}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface CameraCapturerConfiguration {
          preference: CAPTURER_OUTPUT_PREFERENCE;
          }</codeblock>
  </p>  


  <!--ChannelMediaInfo-->  
  <p id="ChannelMediaInfo">       
      <codeblock props="windows" outputclass="language-cpp">struct ChannelMediaInfo {
	const char* channelName;
	const char* token;
	uid_t uid;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface ChannelMediaInfo {
          channelName: string;
          token: string;
          uid: number;
          }</codeblock>
  </p>  
  <!--ChannelMediaOptions-->  
  <p id="ChannelMediaOptions">       
      <codeblock props="windows" outputclass="language-cpp">struct ChannelMediaOptions {
    bool autoSubscribeAudio;
    bool autoSubscribeVideo;
    ChannelMediaOptions()
    : autoSubscribeAudio(true)
    , autoSubscribeVideo(true)
    {}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface ChannelMediaOptions {
          autoSubscribeAudio: boolean;
          autoSubscribeVideo: boolean;
          }</codeblock>
  </p>    
  <!--ChannelMediaRelayConfiguration-->  
  <p id="ChannelMediaRelayConfiguration">       
      <codeblock props="windows" outputclass="language-cpp">struct ChannelMediaRelayConfiguration {
	ChannelMediaInfo *srcInfo;
	ChannelMediaInfo *destInfos;
	int destCount;

	ChannelMediaRelayConfiguration()
			: srcInfo(nullptr)
			, destInfos(nullptr)
			, destCount(0)
	{}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface ChannelMediaRelayConfiguration {
          srcInfo: ChannelMediaInfo;
          destInfos: [ChannelMediaInfo];
          }</codeblock>
  </p>    
  <!--ClientRoleOptions-->  
  <p id="ClientRoleOptions">       
      <codeblock props="windows" outputclass="language-cpp">struct ClientRoleOptions
{
    AUDIENCE_LATENCY_LEVEL_TYPE audienceLatencyLevel;
    ClientRoleOptions()
        : audienceLatencyLevel(AUDIENCE_LATENCY_LEVEL_ULTRA_LOW_LATENCY) {}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface ClientRoleOptions {
          audienceLatencyLevel: AUDIENCE_LATENCY_LEVEL_TYPE;
          }</codeblock>
  </p>  
  <!--DataStreamConfig-->  
  <p id="DataStreamConfig">       
      <codeblock props="windows" outputclass="language-cpp">struct DataStreamConfig {
    bool syncWithAudio;
    bool ordered;
};</codeblock>   
  </p>    
  <!--EncryptionConfig-->  
  <p id="EncryptionConfig">       
      <codeblock props="windows" outputclass="language-cpp">struct EncryptionConfig{
    ENCRYPTION_MODE encryptionMode;
    const char* encryptionKey;

    EncryptionConfig() {
        encryptionMode = AES_128_XTS;
        encryptionKey = nullptr;
    }
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface EncryptionConfig {
          encryptionMode: ENCRYPTION_MODE;
          encryptionKey: string;
          }</codeblock>
  </p>    
  <!--InjectStreamConfig-->  
  <p id="InjectStreamConfig">       
      <codeblock props="windows" outputclass="language-cpp">struct InjectStreamConfig {
    int width;
    int height;
    int videoGop;
    int videoFramerate;
    int videoBitrate;
    AUDIO_SAMPLE_RATE_TYPE audioSampleRate;
    int audioBitrate;
    int audioChannels;

    InjectStreamConfig()
        : width(0)
        , height(0)
        , videoGop(30)
        , videoFramerate(15)
        , videoBitrate(400)
        , audioSampleRate(AUDIO_SAMPLE_RATE_48000)
        , audioBitrate(48)
        , audioChannels(1)
    {}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface InjectStreamConfig {
          width: number;
          height: number;
          videoBitrate: number;
          videoFramerate: number;
          videoGop: number;
          audioSampleRate: AUDIO_SAMPLE_RATE_TYPE;
          audioBitrate: number;
          audioChannels: number;
          }</codeblock>
  </p>   
  <!--LastmileProbeConfig-->  
  <p id="LastmileProbeConfig">       
      <codeblock props="windows" outputclass="language-cpp">struct LastmileProbeConfig {
    bool probeUplink;
    bool probeDownlink;
    unsigned int expectedUplinkBitrate;
    unsigned int expectedDownlinkBitrate;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface LastmileProbeConfig {
          probeUplink: boolean;
          probeDownlink: boolean;
          expectedUplinkBitrate: number;
          expectedDownlinkBitrate: number;
          }</codeblock>
  </p>
  <!--LastmileProbeOneWayResult-->  
  <p id="LastmileProbeOneWayResult">       
      <codeblock props="windows" outputclass="language-cpp">struct LastmileProbeOneWayResult {
    unsigned int packetLossRate;
    unsigned int jitter;
    unsigned int availableBandwidth;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface LastmileProbeOneWayResult {
          packetLossRate: number;
          jitter: number;
          availableBandwidth: number;
          }</codeblock>
  </p>   
  <!--LastmileProbeResult-->  
  <p id="LastmileProbeResult">       
      <codeblock props="windows" outputclass="language-cpp">struct LastmileProbeResult{
    LASTMILE_PROBE_RESULT_STATE state;
    LastmileProbeOneWayResult uplinkReport;
    LastmileProbeOneWayResult downlinkReport;
    unsigned int rtt;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface LastmileProbeResult {
          state: LASTMILE_PROBE_RESULT_STATE;
          uplinkReport: LastmileProbeOneWayResult;
          downlinkReport: LastmileProbeOneWayResult;
          rtt: number;
          }</codeblock>
  </p>     
  <!--LiveStreamAdvancedFeature-->  
  <p id="LiveStreamAdvancedFeature">       
      <codeblock props="windows" outputclass="language-cpp">typedef struct LiveStreamAdvancedFeature {
    LiveStreamAdvancedFeature() : featureName(NULL) , opened(false) {
    }
    const char* LBHQ = "lbhq";
    const char* VEO = "veo";
    const char* featureName;

    bool opened;
} LiveStreamAdvancedFeature;</codeblock>   
  </p>     
      <!--LiveTranscoding-->
      <p id="LiveTranscoding">
     <codeblock props="windows" outputclass="language-cpp">typedef struct LiveTranscoding {
    int width;
    int height;
    int videoBitrate;
    int videoFramerate;

    bool lowLatency;

    int videoGop;
    VIDEO_CODEC_PROFILE_TYPE videoCodecProfile;
    unsigned int backgroundColor;
    unsigned int userCount;
    TranscodingUser *transcodingUsers;
    const char *transcodingExtraInfo;
    RtcImage* watermark;

    AUDIO_SAMPLE_RATE_TYPE audioSampleRate;
    int audioBitrate;
    int audioChannels;

    LiveTranscoding()
    : width(360)
    , height(640)
    , videoBitrate(400)
    , videoFramerate(15)
    , lowLatency(false)
    , backgroundColor(0x000000)
    , videoGop(30)
    , videoCodecProfile(VIDEO_CODEC_PROFILE_HIGH)
    , userCount(0)
    , transcodingUsers(nullptr)
    , transcodingExtraInfo(nullptr)
    , watermark(nullptr)
    , audioSampleRate(AUDIO_SAMPLE_RATE_48000)
    , audioBitrate(48)
    , audioChannels(1)
    {}
 } LiveTranscoding;</codeblock>
     <codeblock props="rust" outputclass="language-rust">pub struct LiveTranscoding {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub videoBitrate: ::std::os::raw::c_int,
    pub videoFramerate: ::std::os::raw::c_int,
    pub lowLatency: BOOL,
    pub videoGop: ::std::os::raw::c_int,
    pub videoCodecProfile: VIDEO_CODEC_PROFILE_TYPE,
    pub backgroundColor: ::std::os::raw::c_uint,
    pub userCount: ::std::os::raw::c_uint,
    pub transcodingUsers: *mut TranscodingUser,
    pub transcodingExtraInfo: *const ::std::os::raw::c_char,
    pub metadata: *const ::std::os::raw::c_char,
    pub watermark: *mut RtcImage,
    pub backgroundImage: *mut RtcImage,
    pub audioSampleRate: AUDIO_SAMPLE_RATE_TYPE,
    pub audioBitrate: ::std::os::raw::c_int,
    pub audioChannels: ::std::os::raw::c_int,
    pub audioCodecProfile: AUDIO_CODEC_PROFILE_TYPE,
}</codeblock>
          <codeblock props="electron" outputclass="language-typescript">export interface LiveTranscoding {
              width: number;
              height: number;
              videoBitrate: number;
              videoFrameRate: number;
              lowLatency: boolean;
              videoGop: number;
              videoCodecProfile: VIDEO_CODEC_PROFILE_TYPE;
              videoCodecType: VIDEO_CODEC_TYPE_FOR_STREAM;
              backgroundColor: number;
              userCount: number;
              audioSampleRate: number;
              audioChannels: number;
              audioBitrate: number;
              transcodingExtraInfo: string;
              watermark: RtcImage;
              background: RtcImage;
              transcodingUsers: Array&lt;TranscodingUser&gt;
              }</codeblock>
      </p>
  
  <!--LocalAudioStats-->  
  <p id="LocalAudioStats">       
      <codeblock props="windows" outputclass="language-cpp">struct LocalAudioStats
{
    int numChannels;
    int sentSampleRate;
    int sentBitrate;
    unsigned short txPacketLossRate;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface LocalAudioStats {
          numChannels: number;
          sentSampleRate: number;
          sentBitrate: number;
          txPacketLossRate: number;
          }</codeblock>
  </p>     

  <!--LocalVideoStats-->  
  <p id="LocalVideoStats">       
      <codeblock props="windows" outputclass="language-cpp">struct LocalVideoStats
{
    int sentBitrate;
    int sentFrameRate;
    int encoderOutputFrameRate;
    int rendererOutputFrameRate;
    int targetBitrate;
    int targetFrameRate;
    QUALITY_ADAPT_INDICATION qualityAdaptIndication;
    int encodedBitrate;
    int encodedFrameWidth;
    int encodedFrameHeight;
    int encodedFrameCount;
    VIDEO_CODEC_TYPE codecType;
    unsigned short txPacketLossRate;
    int captureFrameRate;
    CAPTURE_BRIGHTNESS_LEVEL_TYPE captureBrightnessLevel;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface LocalVideoStats {
          sentBitrate: number;
          sentFrameRate: number;
          encoderOutputFrameRate: number;
          rendererOutputFrameRate: number;
          targetBitrate: number;
          targetFrameRate: number;
          qualityAdaptIndication: QUALITY_ADAPT_INDICATION;
          encodedBitrate: number;
          encodedFrameWidth: number;
          encodedFrameHeight: number;
          encodedFrameCount: number;
          codecType: VIDEO_CODEC_TYPE;
          txPacketLossRate: number;
          captureFrameRate: number;   
          captureBrightnessLevel: CAPTURE_BRIGHTNESS_LEVEL_TYPE;
          }</codeblock>
  </p>   

  <!--LogConfig-->  
  <p id="LogConfig">       
      <codeblock props="windows" outputclass="language-cpp">struct LogConfig
{
    const char* filePath;
    int fileSize;
    LOG_LEVEL level;
    LogConfig()
    :filePath(NULL)
    ,fileSize(-1)
    ,level(LOG_LEVEL::LOG_LEVEL_INFO)
    {}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface LogConfig {
          filePath: string,
          fileSize: number,
          level: LOG_LEVEL
          }</codeblock>
  </p>   

<!-- Metadata -->
  <p id="Metadata">
      <codeblock props="windows" outputclass="language-cpp">struct Metadata
{
    unsigned int uid;
    unsigned int size;
    unsigned char *buffer;
    long long timeStampMs;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface Metadata {
          uid: number;
          size: number;
          buffer: string;
          timeStampMs: number;
          }</codeblock>
  </p>
  
  <!--Packet--> 
  <p id="Packet">
      <codeblock props="windows" outputclass="language-cpp">struct Packet
	{
		const unsigned char* buffer;
		unsigned int size;
	};</codeblock>
  </p>
  
  <!--Rect-->  
  <p id="Rect">       
      <codeblock props="windows" outputclass="language-cpp">typedef struct Rect {
    int top;
    int left;
    int bottom;
    int right;

    Rect(): top(0), left(0), bottom(0), right(0) {}
    Rect(int t, int l, int b, int r): top(t), left(l), bottom(b), right(r) {}
} Rect;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface Rect {
          top: number;
          left: number;
          bottom: number;
          right: number;
          }</codeblock>
  </p>   

  <!--Rectangle-->  
  <p id="Rectangle">       
      <codeblock props="windows" outputclass="language-cpp">struct Rectangle
{
    int x;
    int y;
    int width;
    int height;

    Rectangle(): x(0), y(0), width(0), height(0) {}
    Rectangle(int xx, int yy, int ww, int hh): x(xx), y(yy), width(ww), height(hh) {}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface Rectangle {
          x: number;
          y: number;
          width: number;
          height: number;
          }</codeblock>
  </p>   

  <!--RemoteAudioStats-->  
  <p id="RemoteAudioStats">       
      <codeblock props="windows" outputclass="language-cpp">struct RemoteAudioStats
{
    uid_t uid;
    int quality;
    int networkTransportDelay;
    int jitterBufferDelay;
    int audioLossRate;
    int numChannels;
    int receivedSampleRate;
    int receivedBitrate;
    int totalFrozenTime;
    int frozenRate;
    int totalActiveTime;
    int publishDuration;
    int qoeQuality;
    int qualityChangedReason;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface RemoteAudioStats {
          uid: number;
          quality: number;
          networkTransportDelay: number;
          jitterBufferDelay: number;
          audioLossRate: number;
          numChannels: number;
          receivedSampleRate: number;
          receivedBitrate: number;
          totalFrozenTime: number;
          frozenRate: number;
          totalActiveTime: number;
          publishDuration: number;
          }</codeblock>
  </p>   

  <!--RemoteVideoStats-->  
  <p id="RemoteVideoStats">       
      <codeblock props="windows" outputclass="language-cpp">struct RemoteVideoStats
{
    uid_t uid;
    int delay;
	int width;
	int height;
	int receivedBitrate;
    int decoderOutputFrameRate;
    int rendererOutputFrameRate;
    int packetLossRate;
    REMOTE_VIDEO_STREAM_TYPE rxStreamType;
    int totalFrozenTime;
    int frozenRate;
    int totalActiveTime;
    int publishDuration;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface RemoteVideoStats {
          uid: number;
          delay: number;
          width: number;
          height: number;
          receivedBitrate: number;
          decoderOutputFrameRate: number;
          rendererOutputFrameRate: number;
          rxStreamType: REMOTE_VIDEO_STREAM_TYPE;
          totalFrozenTime: number;
          frozenRate: number;
          packetLossRate: number;
          totalActiveTime: number;
          publishDuration: number;
          }</codeblock>
  </p>     
  
  <!--RtcEngineConfig-->  
  <p id="RtcEngineConfig">       
      <codeblock props="windows" outputclass="language-cpp">struct RtcEngineContext
{
    IRtcEngineEventHandler* eventHandler;
    const char* appId;
    void* context;
    unsigned int areaCode;
    LogConfig logConfig;
    RtcEngineContext()
    :eventHandler(NULL)
    ,appId(NULL)
    ,context(NULL)
    ,areaCode(rtc::AREA_CODE_GLOB)
    {}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface RtcEngineContext {
          appId: string,
          areaCode: AREA_CODE,
          logConfig: LogConfig
          }</codeblock>
  </p>   
  
  <!--RtcImage-->  
  <p id="RtcImage">       
      <codeblock props="windows" outputclass="language-cpp">typedef struct RtcImage {
    RtcImage() :
       url(NULL),
       x(0),
       y(0),
       width(0),
       height(0)
    {}

    const char* url;
    int x;
    int y;
    int width;
    int height;
} RtcImage;</codeblock>
      <codeblock props="rust" outputclass="language-rust">pub struct RtcImage {
    pub url: *const ::std::os::raw::c_char,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface RtcImage {
          x: number,
          y: number,
          width: number,
          height: number,
          url: string
          }</codeblock>      
  </p>   


  <!--RtcStats-->  
  <p id="RtcStats">       
      <codeblock props="windows" outputclass="language-cpp">struct RtcStats
{
    unsigned int duration;
    unsigned int txBytes;
    unsigned int rxBytes;
    unsigned int txAudioBytes;
    unsigned int txVideoBytes;
    unsigned int rxAudioBytes;
    unsigned int rxVideoBytes;
    unsigned short txKBitRate;
    unsigned short rxKBitRate;
    unsigned short rxAudioKBitRate;
    unsigned short txAudioKBitRate;
    unsigned short rxVideoKBitRate;
    unsigned short txVideoKBitRate;
    unsigned short lastmileDelay;
    unsigned short txPacketLossRate;
    unsigned short rxPacketLossRate;

    unsigned int userCount;
    double cpuAppUsage;
    double cpuTotalUsage;
    int gatewayRtt;
    double memoryAppUsageRatio;
    double memoryTotalUsageRatio;
    int memoryAppUsageInKbytes;
    RtcStats()
    : duration(0)
    , txBytes(0)
    , rxBytes(0)
    , txAudioBytes(0)
    , txVideoBytes(0)
    , rxAudioBytes(0)
    , rxVideoBytes(0)
    , txKBitRate(0)
    , rxKBitRate(0)
    , rxAudioKBitRate(0)
    , txAudioKBitRate(0)
    , rxVideoKBitRate(0)
    , txVideoKBitRate(0)
    , lastmileDelay(0)
    , txPacketLossRate(0)
    , rxPacketLossRate(0)
    , userCount(0)
    , cpuAppUsage(0)
    , cpuTotalUsage(0)
    , gatewayRtt(0)
    , memoryAppUsageRatio(0)
    , memoryTotalUsageRatio(0)
    , memoryAppUsageInKbytes(0) {}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface RtcStats {
          duration: number;
          txBytes: number;
          rxBytes: number;
          txKBitRate: number;
          rxKBitRate: number;
          rxAudioKBitRate: number;
          txAudioKBitRate: number;
          rxVideoKBitRate: number;
          txVideoKBitRate: number;
          rxAudioKBytes: number;
          txAudioKBytes: number;
          rxVideoKBytes: number;
          txVideoKBytes: number;
          lastmileDelay: number;
          txPacketLossRate: number;
          rxPacketLossRate: number;
          userCount: number;
          cpuAppUsage: number;
          cpuTotalUsage: number;
          gatewayRtt: number;
          memoryAppUsageRatio: number;
          memoryTotalUsageRatio: number;
          memoryAppUsageInKbytes: number;
          }</codeblock>
  </p>   
  
  <!--ScreenCaptureParameters-->  
  <p id="ScreenCaptureParameters">       
      <codeblock props="windows" outputclass="language-cpp">struct ScreenCaptureParameters
{
    VideoDimensions dimensions;
    int frameRate;
    int bitrate;
    bool captureMouseCursor;
    bool windowFocus;
    view_t* excludeWindowList;
    int excludeWindowCount;

    ScreenCaptureParameters() : dimensions(1920, 1080), frameRate(5), bitrate(STANDARD_BITRATE), captureMouseCursor(true), windowFocus(false), excludeWindowList(NULL), excludeWindowCount(0) {}
    ScreenCaptureParameters(const VideoDimensions&amp; d, int f, int b, bool c, bool focus, view_t *ex = NULL, int cnt = 0) : dimensions(d), frameRate(f), bitrate(b), captureMouseCursor(c), windowFocus(focus), excludeWindowList(ex), excludeWindowCount(cnt) {}
    ScreenCaptureParameters(int width, int height, int f, int b, bool c, bool focus, view_t *ex = NULL, int cnt = 0) : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(c), windowFocus(focus), excludeWindowList(ex), excludeWindowCount(cnt) {}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface ScreenCaptureParameters {
          width: number;
          height: number;
          frameRate: number;
          bitrate: number;
          captureMouseCursor: boolean;
          windowFocus: boolean;
          excludeWindowList: Array&lt;number&gt;;
          excludeWindowCount: number;
          }</codeblock>
  </p>    

  <!-- TranscodingUser -->
  <p id="TranscodingUser">
      <codeblock props="windows" outputclass="language-cpp">typedef struct TranscodingUser {
    uid_t uid;
    int x;
    int y;
    int width;
    int height;
    int zOrder;
    double alpha;
    int audioChannel;
    TranscodingUser()
        : uid(0)
        , x(0)
        , y(0)
        , width(0)
        , height(0)
        , zOrder(0)
        , alpha(1.0)
        , audioChannel(0)
    {}
} TranscodingUser;</codeblock>   
      <codeblock props="rust" outputclass="language-rust">pub struct TranscodingUser {
    pub uid: uid_t,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub zOrder: ::std::os::raw::c_int,
    pub alpha: f64,
    pub audioChannel: ::std::os::raw::c_int,
}</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface TranscodingUser {
          uid: number;
          x: number;
          y: number;
          width: number;
          height: number;
          zOrder: number;
          alpha: number;
          audioChannel: number;
          }</codeblock>
  </p>
  
  <!--UserInfo-->  
  <p id="UserInfo">       
      <codeblock props="windows" outputclass="language-cpp">struct UserInfo {
  uid_t uid;
  char userAccount[MAX_USER_ACCOUNT_LENGTH];
  UserInfo()
      : uid(0) {
    userAccount[0] = '\0';
  }
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface UserInfo {
          uid: number;
          userAccount: string;
          }</codeblock>
  </p>   
  
  
      <!-- VideoCanvas -->
      <p id="VideoCanvas">
 <codeblock outputclass="language-cpp" props="windows">struct VideoCanvas {
    view_t view;
    int renderMode;
    char channelId[MAX_CHANNEL_ID_LENGTH];
    uid_t uid;
    void *priv;
    VIDEO_MIRROR_MODE_TYPE mirrorMode;
     
    VideoCanvas()
    : view(NULL)
    , renderMode(RENDER_MODE_HIDDEN)
    , uid(0)
    , priv(NULL)
    , mirrorMode(VIDEO_MIRROR_MODE_AUTO)
    {
    channelId[0] = '\0';
    }
    VideoCanvas(view_t v, int m, uid_t u)
    : view(v)
    , renderMode(m)
    , uid(u)
    , priv(NULL)
    , mirrorMode(VIDEO_MIRROR_MODE_AUTO)
    {
    channelId[0] = '\0';
    }
    VideoCanvas(view_t v, int m, const char *ch, uid_t u)
    : view(v)
    , renderMode(m)
    , uid(u)
    , priv(NULL)
    , mirrorMode(VIDEO_MIRROR_MODE_AUTO)
    {
    strncpy(channelId, ch, MAX_CHANNEL_ID_LENGTH);
    channelId[MAX_CHANNEL_ID_LENGTH - 1] = '\0';
    }
    VideoCanvas(view_t v, int rm, uid_t u, VIDEO_MIRROR_MODE_TYPE mm)
    : view(v)
    , renderMode(rm)
    , uid(u)
    , priv(NULL)
    , mirrorMode(mm)
    {
    channelId[0] = '\0';
    }
    VideoCanvas(view_t v, int rm, const char *ch, uid_t u, VIDEO_MIRROR_MODE_TYPE mm)
    : view(v)
    , renderMode(rm)
    , uid(u)
    , priv(NULL)
    , mirrorMode(mm)
    {
    strncpy(channelId, ch, MAX_CHANNEL_ID_LENGTH);
    channelId[MAX_CHANNEL_ID_LENGTH - 1] = '\0';
    }
}</codeblock>
     <codeblock props="rust" outputclass="language-rust">pub struct VideoCanvas {
    pub view: view_t,
    pub renderMode: ::std::os::raw::c_int,
    pub channelId: [::std::os::raw::c_char; 65usize],
    pub uid: uid_t,
    pub priv_: *mut ::std::os::raw::c_void,
    pub mirrorMode: VIDEO_MIRROR_MODE_TYPE,
}</codeblock>
      </p>
     
      <!--VideoDimensions-->
      <p id="VideoDimensions">
     <codeblock props="windows" outputclass="language-cpp">struct VideoDimensions {
    int width;
    int height;
    VideoDimensions()
        : width(640), height(480)
    {}
    VideoDimensions(int w, int h)
        : width(w), height(h)
    {}
};</codeblock>
       <codeblock props="rust" outputclass="language-rust">pub struct VideoDimensions {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}</codeblock>
          <codeblock props="electron" outputclass="language-typescript">export interface VideoDimensions {
              width: number,
              height: number
              }</codeblock>
      </p>
  
  <!-- VideoEncoderConfiguration -->
  <p id="VideoEncoderConfiguration">
       <codeblock outputclass="language-cpp" props="windows">struct VideoEncoderConfiguration {
    VideoDimensions dimensions;
    FRAME_RATE frameRate;
    int minFrameRate;
    int bitrate;
    int minBitrate;
    ORIENTATION_MODE orientationMode;
    DEGRADATION_PREFERENCE degradationPreference;
    VIDEO_MIRROR_MODE_TYPE mirrorMode;
    
    VideoEncoderConfiguration(
        const VideoDimensions&amp;amp; d, FRAME_RATE f,
        int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mr = VIDEO_MIRROR_MODE_AUTO)
        : dimensions(d), frameRate(f), minFrameRate(-1), bitrate(b),
        minBitrate(DEFAULT_MIN_BITRATE), orientationMode(m),
        degradationPreference(MAINTAIN_QUALITY), mirrorMode(mr)
    {}
    VideoEncoderConfiguration(
        int width, int height, FRAME_RATE f,
        int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mr = VIDEO_MIRROR_MODE_AUTO)
        : dimensions(width, height), frameRate(f),
        minFrameRate(-1), bitrate(b),
        minBitrate(DEFAULT_MIN_BITRATE), orientationMode(m),
        degradationPreference(MAINTAIN_QUALITY), mirrorMode(mr)
    {}
    VideoEncoderConfiguration()
        : dimensions(640, 480)
        , frameRate(FRAME_RATE_FPS_15)
        , minFrameRate(-1)
        , bitrate(STANDARD_BITRATE)
        , minBitrate(DEFAULT_MIN_BITRATE)
        , orientationMode(ORIENTATION_MODE_ADAPTIVE)
        , degradationPreference(MAINTAIN_QUALITY)
        , mirrorMode(VIDEO_MIRROR_MODE_AUTO)
    {}
};</codeblock>
       <codeblock props="rust" outputclass="language-rust">pub struct VideoEncoderConfiguration {
    pub dimensions: VideoDimensions,
    pub frameRate: FRAME_RATE,
    pub minFrameRate: ::std::os::raw::c_int,
    pub bitrate: ::std::os::raw::c_int,
    pub minBitrate: ::std::os::raw::c_int,
    pub orientationMode: ORIENTATION_MODE,
    pub degradationPreference: DEGRADATION_PREFERENCE,
    pub mirrorMode: VIDEO_MIRROR_MODE_TYPE,
}</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface VideoEncoderConfiguration {
          dimensions: VideoDimensions;
          frameRate: FRAME_RATE;
          minFrameRate: number;
          bitrate: number;
          minBitrate: number;
          orientationMode: ORIENTATION_MODE;
          degradationPreference: DEGRADATION_PREFERENCE;
          mirrorMode: VIDEO_MIRROR_MODE_TYPE;
          }</codeblock>
   </p>
   <!--VideoFrame-->
   <p id="VideoFrame">
       <codeblock props="windows" outputclass="language-cpp">struct VideoFrame {
  VIDEO_FRAME_TYPE type;
  int width;
  int height;
  int yStride;
  int uStride;
  int vStride;
  void* yBuffer;
  void* uBuffer;
  void* vBuffer;
  int rotation;
  int64_t renderTimeMs;
  int avsync_type;
};</codeblock>
   </p>

  <!--WatermarkOptions-->  
  <p id="WatermarkOptions">       
      <codeblock props="windows" outputclass="language-cpp">typedef struct WatermarkOptions {
    bool visibleInPreview;
    Rectangle positionInLandscapeMode;
    Rectangle positionInPortraitMode;

    WatermarkOptions()
        : visibleInPreview(true)
        , positionInLandscapeMode(0, 0, 0, 0)
        , positionInPortraitMode(0, 0, 0, 0)
    {}
} WatermarkOptions;</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export interface WatermarkOptions {
          visibleInPreview: boolean,
          positionInPortraitMode: Rectangle,
          positionInLandscapeMode: Rectangle
          }</codeblock>
  </p>   
  
  <!--ExternalVideoFrame-->  
  <p id="ExternalVideoFrame">       
      <codeblock props="windows" outputclass="language-cpp">struct ExternalVideoFrame
{
    enum VIDEO_BUFFER_TYPE
    {
        VIDEO_BUFFER_RAW_DATA = 1,
    };
    enum VIDEO_PIXEL_FORMAT
    {
        VIDEO_PIXEL_UNKNOWN = 0,
        VIDEO_PIXEL_I420 = 1,
        VIDEO_PIXEL_BGRA = 2,
        VIDEO_PIXEL_NV21 = 3,
        VIDEO_PIXEL_RGBA = 4,
        VIDEO_PIXEL_IMC2 = 5,
        VIDEO_PIXEL_ARGB = 7,
        VIDEO_PIXEL_NV12 = 8,
        VIDEO_PIXEL_I422 = 16,
    };

    VIDEO_BUFFER_TYPE type;
    VIDEO_PIXEL_FORMAT format;
    void* buffer;
    int stride;
    int height;
    int cropLeft;
    int cropTop;
    int cropRight;
    int cropBottom;
    int rotation;
    long long timestamp;
};</codeblock>   
  </p>
  
  <!-- RendererOptions -->
  <p id="RendererOptions">
      <codeblock props="electron" outputclass="language-typescript">export interface RendererOptions {
          append: boolean
          }</codeblock>
  </p>
           
  <!-- Device -->
  <p id="Device">
      <codeblock props="electron" outputclass="language-typescript">export interface Device {
          deviceId: string
          deviceName: string
          }</codeblock>
  </p>
  

       </section>

        </body>
</topic>
