<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaplayer_openwithagoracdnsrc">
    <title> <ph keyref="openWithAgoraCDNSrc" /> </title>
    <shortdesc id="short"><ph id="shortdesc">Opens a media resource and requests all the CDN routes of the media resources through the self-developed scheduling center.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="openWithAgoraCDNSrc" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int openWithAgoraCDNSrc(String src, long startPos);
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)openWithAgoraCDNSrc:(NSString *)src startPos:(NSInteger)startPos;
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int openWithAgoraCDNSrc(const char* src, int64_t startPos) = 0;
</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract openWithAgoraCDNSrc(src: string, startPos: number): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int OpenWithAgoraCDNSrc(string src, Int64 startPos);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract openWithAgoraCDNSrc(src: string, startPos: number): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; openWithAgoraCDNSrc(
      {required String src, required int startPos});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <note type="attention" conkeyref="open/note" />
            <p>After you call this method, Agora opens the media resources and tries to obtain all the CDN routes for playing the media resource. By default, Agora uses the first CDN route for playing, and you can call <xref keyref="switchAgoraCDNLineByIndex" /> to switch routes.</p>
            <p id="auth">If you want to ensure the security of the connection and media files, <xref keyref="ticket-link" /> to determine the <parmname>sign</parmname> and the <parmname>ts</parmname> fields for authentication. Once the fields are determined, use them as the <codeph>query parameter</codeph> of the URL to update the URL of the media resource. For example:<ul>
            <li>The URL of the media file to be opened: <codeph>rtmp://$domain/$appName/$streamName</codeph></li>
            <li>The URL updated by the authentication of the media file to be opened: <codeph>rtmp://$domain/$appName/$streamName?ts=$ts&amp;sign=$sign</codeph></li>
            </ul>
            <note>
            <p>Authentication information:<ul>
            <li><parmname>sign</parmname>: An encrypted string calculated according to the MD5 algorithm based on <codeph>authKey</codeph>, <codeph>appName</codeph>, <codeph>streamName</codeph>, and <codeph>ts</codeph>. You need to <xref keyref="ticket-link" /> for your <codeph>authKey</codeph>.</li>
            <li><parmname>ts</parmname>: The timestamp when the authentication information expires. You can set the validity period of the authentication information according to your scenarios. For example, <codeph>24h</codeph> or <codeph>1h30m20s</codeph>.</li>
            </ul></p>
            </note></p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>src</pt>
                <pd>The URL of the media resource.</pd>
            </plentry>
            <plentry>
                <pt>startPos</pt>
                <pd>The starting position (ms) for playback. The default value is 0. This value can be empty if the media resource to be played is live streams.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown; and you need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul>
            <li props="native unreal bp unity rn electron cs">0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>