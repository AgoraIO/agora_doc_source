<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_enablecontentinspect">
    <title><ph keyref="enableContentInspect" /></title>
    <shortdesc id="short"><ph id="shortdesc"><ph>Enables or disables video screenshot and upload. </ph><ph props="hide">Enables or disables video content moderation.</ph></ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="enableContentInspect" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int enableContentInspect(boolean enabled, ContentInspectConfig config);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)enableContentInspect:(BOOL)enabled config:(AgoraContentInspectConfig* _Nonnull)config;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int enableContentInspect(bool enabled, const media::ContentInspectConfig &amp;config) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract enableContentInspect(
    enabled: boolean,
    config: ContentInspectConfig
  ): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int EnableContentInspect(bool enabled, ContentInspectConfig config);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract enableContentInspect(
    enabled: boolean,
    config: ContentInspectConfig
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; enableContentInspect(
      {required bool enabled, required ContentInspectConfig config});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>When video screenshot and upload function is enabled, the SDK takes screenshots and upload videos sent by local users based on the type and frequency of the module you set in <xref keyref="ContentInspectConfig" />. After video screenshot and upload, the Agora server sends the callback notification to your app server in HTTPS requests and sends all screenshots to the third-party cloud storage service.</p>
            <p props="hide">When video content moderation is enabled, the SDK takes screenshots, reviews the content, and uploads videos sent by local users based on the type and frequency of the content moderation module you set in <xref keyref="ContentInspectConfig" />. After content moderation, the Agora content moderation server sends the results to your app server in HTTPS requests and sends all screenshots to the third-party cloud storage service.</p>
            <note>
            <ul>
            <li><ph>Before calling this method, ensure that the video screenshot upload service has been activated. </ph><ph props="hide">Before calling this method, ensure that Video content moderation service has been activated. See <xref keyref="enable-content-inspect" />.</ph><xref keyref="ticket-link" /><xref keyref="ticket-link" /></li>
            <li>This method relies on the video screenshot and upload dynamic library <codeph><ph keyref="moderation" /></codeph>. If the dynamic library is deleted, the function cannot be enabled normally.</li>
            </ul></note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>enabled</pt>
                <pd>Whether to enable <ph>video screenshot and upload</ph><ph props="hide">video content moderation</ph>:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: <ph>Enables video screenshot and upload</ph>. <ph props="hide">Enables video content moderation.</ph></li>
                    <li><codeph><ph keyref="false" /></codeph>: <ph>Disables video screenshot and upload</ph>. <ph props="hide">Disables video content moderation.</ph></li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>config</pt>
                <pd><ph>Configuration of video screenshot and upload. </ph><ph props="hide">Configuration of video content moderation. </ph><ph>See <xref keyref="ContentInspectConfig" />.</ph></pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title" /></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException" /> exception is thrown; you need to catch the exception and handle it accordingly.</p>
            <ul>
            <li props="native unity rn electron">0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul></section>
    </refbody>
</reference>