<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_onrendervideoframe">
    <title><ph keyref="onRenderVideoFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs each time the SDK receives a video frame sent by the remote user.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onRenderVideoFrame"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">boolean onRenderVideoFrame(String channelId, int uid, VideoFrame videoFrame);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)onRenderVideoFrame:(AgoraOutputVideoFrame * _Nonnull)videoFrame
    uid:(NSUInteger)uid
    channelId:(NSString * _Nonnull)channelId;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual bool onRenderVideoFrame(const char* channelId, rtc::uid_t remoteUid, VideoFrame&amp; videoFrame) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">  onRenderVideoFrame?(
    channelId: string,
    remoteUid: number,
    videoFrame: VideoFrame
  ): boolean;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public virtual bool OnRenderVideoFrame(string channelId, uint uid, VideoFrame videoFrame)
        {
            return true;
        }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">  onRenderVideoFrame?(
    channelId: string,
    remoteUid: number,
    videoFrame: VideoFrame
  ): boolean;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(String channelId, int remoteUid, VideoFrame videoFrame)?
      onRenderVideoFrame;</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <p>After you successfully register the video frame observer, the SDK triggers this callback each time it receives a video frame. In this callback, you can get the video data before encoding. You can then process the data according to your particular scenarios.</p>
            <note type="attention" props="native electron rn flutter">
            <ul>
            <li>If the video data type you get is RGBA, Agora does not support processing the data of the alpha channel.</li>
            <li>This function only applies to the scenarios where the video processing mode is <apiname keyref="PROCESS_MODE_READ_ONLY"/>.</li>
            <li props="flutter">Due to the limitations of Flutter, this callback does not support sending processed video data back to the SDK.</li>
            </ul></note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt props="android ios mac unity">uid</pt>
                <pt props="cpp rn electron flutter">remoteUid</pt>
                <pd>The user ID of the remote user who sends the current video frame.</pd>
            </plentry>
            <plentry conkeyref="onCaptureVideoFrame/videoframe">
                <pt/>
                <pd/>
            </plentry>
            <plentry>
                <pt>channelId</pt>
                <pd>The channel ID.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native electron unity rn">
            <title>Returns</title>
            <p conkeyref="onCaptureVideoFrame/return"/>
        </section>
    </refbody>
</reference>
