<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaplayer_openwithmediasource">
    <title><ph keyref="openWithMediaSource"/></title>
    <shortdesc id="short"><ph id="shortdesc">Opens a media file and configures the playback scenarios.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="openWithMediaSource"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int openWithMediaSource(MediaPlayerSource source);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)openWithMediaSource:(AgoraMediaSource *)source;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int openWithMediaSource(const media::base::MediaSource &amp;source) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/></p></section>
        <section id="detailed_desc">
            <p>This method supports opening media files of different sources, including a custom media source, and allows you to configure the playback scenarios.</p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>source</pt>
                <pd>Media resources, see <xref keyref="MediaSource"/>.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title>Returns</title>
            <ul>
            <li>0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul></section>
    </refbody>
</reference>
