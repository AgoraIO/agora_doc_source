<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_joinchannelwithuseraccount">
    <title><ph keyref="joinChannelWithUserAccount1" /></title>
    <shortdesc id="short"><ph id="shortdesc">Joins a channel with a User Account and Token.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="joinChannelWithUserAccount1" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int joinChannelWithUserAccount(
                    String token, String channelName, String userAccount);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)joinChannelByToken:(NSString * _Nullable)token
                channelId:(NSString * _Nonnull)channelId
              userAccount:(NSString * _Nonnull)userAccount
              joinSuccess:(void(^ _Nullable)(NSString * _Nonnull channel, NSUInteger uid, NSInteger elapsed))joinSuccessBlock;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int joinChannelWithUserAccount(const char* token,
    const char* channelId,
    const char* userAccount) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract joinChannelWithUserAccount(
    token: string,
    channelId: string,
    userAccount: string,
    options?: ChannelMediaOptions
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int JoinChannelWithUserAccount(string token, string channelId, string userAccount);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract joinChannelWithUserAccount(
    token: string,
    channelId: string,
    userAccount: string,
    options?: ChannelMediaOptions
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> joinChannelWithUserAccount(
      {required String token,
      required String channelId,
      required String userAccount,
      ChannelMediaOptions? options});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>This method allows a user to join the channel with the user account and a token. After the user successfully joins the channel, the SDK triggers the following callbacks:<ul>
            <li>The local client: <xref keyref="onLocalUserRegistered" />, <xref keyref="onJoinChannelSuccess" /> and <xref keyref="onConnectionStateChanged" /> callbacks.</li>
            <li>The remote client: <xref keyref="onUserJoined" /> and <xref keyref="onUserInfoUpdated" /> callbacks, if the user joining the channel is in the communication profile or is a host in the live streaming profile.</li>
            </ul></p>
            <p>Once a user joins the channel, the user subscribes to the audio and video streams of all the other users in the channel by default, giving rise to usage and billing calculation. To stop subscribing to a specified stream or all remote streams, call the corresponding <apiname>mute</apiname> methods.</p>
            <note type="attention" id="note"><ul><li>To ensure smooth communication, use the same parameter type to identify the user. For example, if a user joins the channel with a user ID, then ensure all the other users use the user ID too. The same applies to the user account. If a user joins the channel with the Agora Web SDK, ensure that the ID of the user is set to the same parameter type.</li>
            <li>If you choose the Testing Mode (using an App ID for authentication) for your project and call this method to join a channel, you will automatically exit the channel after 24 hours.</li></ul></note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="joinChannel2/token">
                <pt />
                <pd />
            </plentry>
            <plentry>
                <pt props="android">channelName</pt>
                <pt props="cpp unreal bp ios mac unity rn electron flutter cs">channelId</pt>
                <pd>
                    <p conkeyref="joinChannel2/channelID_desc" />
                </pd>
            </plentry>
            <plentry conkeyref="joinChannelWithUserAccount2/userAccount">
                <pt />
                <pd />
            </plentry>
            <plentry conkeyref="joinChannel2/joinsuccessblock" props="ios mac">
                <pt />
                <pd />
            </plentry>
            </parml>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp unity rn electron cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph><ul>
                <li>-2: The parameter is invalid.</li>
                <li>-3: The initialization of the SDK fails. You can try to initialize the SDK again.</li>
                <li>-5: The request is rejected.</li>
                <li>-17: The request to join the channel is rejected. Since the SDK only supports users to join one <xref keyref="IRtcEngine" /> channel at a time; this error code will be returned when the user who has joined the <xref keyref="IRtcEngine" /> channel calls the join channel method in the <xref keyref="IRtcEngine" /> class again with a valid channel name.</li>
                </ul></li>
            </ul> </section>
    </refbody>
</reference>
