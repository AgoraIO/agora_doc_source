<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setremotesubscribefallbackoption">
     <title> <ph keyref="setRemoteSubscribeFallbackOption" /> </title>
     <shortdesc id="short"><ph id="shortdesc">Sets the fallback option for the subscribed video stream based on the network conditions.</ph></shortdesc>
     <prolog>
          <metadata>
               <keywords>
                    <indexterm keyref="setRemoteSubscribeFallbackOption" />
               </keywords>
          </metadata>
     </prolog>
     <refbody>
          <section id="prototype">
               <p outputclass="codeblock">
               <codeblock props="android" outputclass="language-java">public abstract int setRemoteSubscribeFallbackOption(int option);</codeblock>
               <codeblock props="ios mac" outputclass="language-objectivec">- (int)setRemoteSubscribeFallbackOption:(AgoraStreamFallbackOptions)option;</codeblock>
               <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setRemoteSubscribeFallbackOption(STREAM_FALLBACK_OPTIONS option) = 0;</codeblock>
               <codeblock props="electron" outputclass="language-typescript">abstract setRemoteSubscribeFallbackOption(
    option: StreamFallbackOptions
  ): number;</codeblock>
               <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetRemoteSubscribeFallbackOption(STREAM_FALLBACK_OPTIONS option);</codeblock>
               <codeblock props="rn" outputclass="language-typescript">abstract setRemoteSubscribeFallbackOption(
    option: StreamFallbackOptions
  ): number;</codeblock>
               <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setRemoteSubscribeFallbackOption(StreamFallbackOptions option);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
          </section>
          <section id="detailed_desc">
            <title>Details</title>
               <p>An unstable network affects the audio and video quality in a video call or interactive live video streaming. If <parmname>option</parmname> is set as <apiname keyref="STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW"/> or <apiname keyref="STREAM_FALLBACK_OPTION_AUDIO_ONLY"/>, the SDK automatically switches the video from a high-quality stream to a low-quality stream or disables the video when the downlink network conditions cannot support both audio and video to guarantee the quality of the audio. Meanwhile, the SDK continuously monitors network quality and resumes subscribing to audio and video streams when the network quality improves.</p>
               <p>When the subscribed video stream falls back to an audio-only stream, or recovers from an audio-only stream to an audio-video stream, the SDK triggers the <xref keyref="onRemoteSubscribeFallbackToAudioOnly"/> callback.</p>
               <note type="attention">Ensure that you call this method before joining a channel.</note> </section>
          <section id="parameters">
               <title>Parameters</title>
               <parml>
               <plentry>
                    <pt>option</pt>
                    <pd><ph>Fallback options for the subscribed stream. </ph><ph props="ios mac cpp unreal bp electron unity flutter rn cs">See <xref keyref="STREAM_FALLBACK_OPTIONS" />.</ph><ul props="android">
                         <li><ph keyref="STREAM_FALLBACK_OPTION_DISABLED" />(0): No fallback processing is performed on audio and video streams, and the quality of the audio and video streams cannot be guaranteed.</li>
                         <li><ph keyref="STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW" />(1): (Default) Under poor downlink network conditions, the remote video stream, to which you subscribe, falls back to the low-quality (low resolution and low bitrate) video stream.</li>
                         <li><ph keyref="STREAM_FALLBACK_OPTION_AUDIO_ONLY" />(2): When the network conditions are poor, try to receive the low-quality video stream first. If the video cannot be displayed due to extremely poor network environment, then fall back to receiving audio-only stream.</li>
                         </ul></pd>
               </plentry>
               </parml> </section>
          <section id="return_values">
               <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
               <ul props="native unreal bp electron unity rn cs">
               <li>0: Success.</li>
               <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
               </ul> </section>
     </refbody>
</reference>