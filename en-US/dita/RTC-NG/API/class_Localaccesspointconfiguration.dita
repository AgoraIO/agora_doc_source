<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_Localaccesspointconfiguration">
    <title><ph keyref="LocalAccessPointConfiguration" /></title>
    <shortdesc id="short">Local Access Point configuration.<ph id="shortdesc" /></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class LocalAccessPointConfiguration {
  public ArrayList&lt;String&gt; ipList = null;
  public ArrayList&lt;String&gt; domainList = null;
  public String verifyDomainName = null;
  public int mode = Constants.LOCAL_RPOXY_CONNECTIVITY_FIRST;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">NS_SWIFT_NAME(AgoraLocalAccessPointConfiguration) __attribute__((visibility("default"))) @interface AgoraLocalAccessPointConfiguration : NSObject
@property(copy, nonatomic) NSArray* _Nullable ipList NS_SWIFT_NAME(ipList);
@property(copy, nonatomic) NSArray* _Nullable domainList NS_SWIFT_NAME(domainList);
@property(copy, nonatomic) NSString* _Nullable verifyDomainName NS_SWIFT_NAME(verifyDomainName);
@property(assign, nonatomic) AgoraLocalProxyMode mode NS_SWIFT_NAME(mode);
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct LocalAccessPointConfiguration {
  const char** ipList;
  int ipListSize;
  const char** domainList;
  int domainListSize;
  const char* verifyDomainName;
  LOCAL_PROXY_MODE mode;
  LocalAccessPointConfiguration() : ipList(NULL), ipListSize(0), domainList(NULL), domainListSize(0), verifyDomainName(NULL), mode(ConnectivityFirst) {}
};</codeblock>
            <codeblock props="cs" outputclass="language-csharp" />
            <codeblock props="electron" outputclass="language-typescript">export class LocalAccessPointConfiguration {
  
  ipList?: string[];
  
  ipListSize?: number;
  
  domainList?: string[];
  
  domainListSize?: number;
  
  verifyDomainName?: string;
  
  mode?: LocalProxyMode;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class LocalAccessPointConfiguration
    {
        public string[] ipList { set; get; }
        public int ipListSize { set; get; }
        public string[] domainList { set; get; }
        public int domainListSize { set; get; }
        public string verifyDomainName { set; get; }
        public LOCAL_PROXY_MODE mode { set; get; }

        public LocalAccessPointConfiguration()
        {
            ipList = new string[0];
            ipListSize = 0;
            domainList = new string[0];
            domainListSize = 0;
            verifyDomainName = "";
            mode = LOCAL_PROXY_MODE.kConnectivityFirst;
        }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class LocalAccessPointConfiguration {
  
  ipList?: string[];
  
  ipListSize?: number;
  
  domainList?: string[];
  
  domainListSize?: number;
  
  verifyDomainName?: string;
  
  mode?: LocalProxyMode;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart" /> </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>ipList</pt>
                <pd>List of inbound IP addresses for the Local Access Point. ipList and domainList must be filled in at least one.</pd>
            </plentry>
            <plentry props="cpp">
                <pt>ipListSize</pt>
                <pd>The number of inbound IP addresses of the Local Access Point. The value of this parameter must be the same as the number of IP addresses you entered.</pd>
            </plentry>
            <plentry>
                <pt>domainList</pt>
                <pd>List of domain names for Local Access Point. The SDK will resolve the IP address of the Local Access Point based on the domain name you entered. The timeout period for domain name resolution is 10 seconds. ipList and domainList must be filled in at least one. If you specify an IP address and a domain name at the same time, the SDK will combine the IP address parsed from the domain name and the IP address you specify, remove duplicates, and then connect to a random IP to achieve load balancing.</pd>
            </plentry>
            <plentry props="cpp">
                <pt>domainListSize</pt>
                <pd>The number of Local Access Point domain names. The value of this parameter must be the same as the number of domain names you entered.</pd>
            </plentry>
            <plentry>
                <pt>verifyDomainName</pt>
                <pd>Intranet certificate verification domain name. If the passed value is empty, the domain name <codeph>secure-edge.local</codeph> will be verified with the SDK's default certificate.</pd>
            </plentry>
            <plentry>
                <pt>mode</pt>
                <pd>
                    <p props="ios mac cpp">connection mode. See <xref keyref="LOCAL_PROXY_MODE" />.</p>
                    <p props="android">Connection mode:<ul>
                    <li><ph keyref="ConnectivityFirst" />(0): The SDK will first try to connect to the specified Agora private media server; if it cannot connect to the specified Agora private media server, it will connect to the Agora SD-RTNâ„¢.</li>
                    <li><ph keyref="LocalOnly" />(1): The SDK only tries to connect to the specified Agora private media server.</li>
                    </ul></p>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>