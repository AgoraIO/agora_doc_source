<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_Localaccesspointconfiguration">
    <title><ph keyref="LocalAccessPointConfiguration"/></title>
    <shortdesc id="short"><ph id="shortdesc">The configurations of the Local Access Point.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class LocalAccessPointConfiguration {
  public static class LogUploadServerInfo {
    public String serverDomain = null;
    public String serverPath = null;
    public int serverPort = 0;
    public boolean serverHttps = true;
    public LogUploadServerInfo() {
      serverDomain = null;
      serverPath = null;
      serverPort = 0;
      serverHttps = true;
    }

    public LogUploadServerInfo(String domain, String path, int port, boolean https) {
      serverDomain = domain;
      serverPath = path;
      serverPort = port;
      serverHttps = https;
    }

    @CalledByNative("LogUploadServerInfo")
    public String getServerDomain() {
      return serverDomain;
    }

    @CalledByNative("LogUploadServerInfo")
    public String getServerPath() {
      return serverPath;
    }

    @CalledByNative("LogUploadServerInfo")
    public int getServerPort() {
      return serverPort;
    }

    @CalledByNative("LogUploadServerInfo")
    public boolean getServerHttps() {
      return serverHttps;
    }
  };

  public static class AdvancedConfigInfo {
    public LogUploadServerInfo logUploadServer = null;

    public AdvancedConfigInfo() {
      logUploadServer = new LogUploadServerInfo();
    }

    @CalledByNative("AdvancedConfigInfo")
    public LogUploadServerInfo getLogUploadServerInfo() {
      return logUploadServer;
    }
  };
  public ArrayList&lt;String> ipList = null;
  public ArrayList&lt;String> domainList = null;
  public String verifyDomainName = null;
  public int mode = Constants.LOCAL_RPOXY_CONNECTIVITY_FIRST;
  public AdvancedConfigInfo advancedConfig = null;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">NS_SWIFT_NAME(AgoraLocalAccessPointConfiguration) __attribute__((visibility("default"))) @interface AgoraLocalAccessPointConfiguration : NSObject
@property(copy, nonatomic) NSArray* _Nullable ipList NS_SWIFT_NAME(ipList);
@property(copy, nonatomic) NSArray* _Nullable domainList NS_SWIFT_NAME(domainList);
@property(copy, nonatomic) NSString* _Nullable verifyDomainName NS_SWIFT_NAME(verifyDomainName);
@property(assign, nonatomic) AgoraLocalProxyMode mode NS_SWIFT_NAME(mode);
@property(strong, nonatomic) AdvancedConfigInfo* _Nullable advancedConfig NS_SWIFT_NAME(advancedConfig);
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct LocalAccessPointConfiguration {
  const char** ipList;
  int ipListSize;
  const char** domainList;
  int domainListSize;
  const char* verifyDomainName;
  LOCAL_PROXY_MODE mode;
  AdvancedConfigInfo advancedConfig;
  LocalAccessPointConfiguration() : ipList(NULL), ipListSize(0), domainList(NULL), domainListSize(0), verifyDomainName(NULL), mode(ConnectivityFirst) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FLocalAccessPointConfiguration
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LocalAccessPointConfiguration&quot;)
	TArray&lt;FString&gt; ipList;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LocalAccessPointConfiguration&quot;)
	int ipListSize = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LocalAccessPointConfiguration&quot;)
	TArray&lt;FString&gt; domainList;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LocalAccessPointConfiguration&quot;)
	int domainListSize = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LocalAccessPointConfiguration&quot;)
	FString verifyDomainName = &quot;&quot;;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LocalAccessPointConfiguration&quot;)
	ELOCAL_PROXY_MODE mode = ELOCAL_PROXY_MODE::ConnectivityFirst;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LocalAccessPointConfiguration&quot;)
	FAdvancedConfigInfo advancedConfig;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|LocalAccessPointConfiguration&quot;)
	bool disableAut = false;
	FLocalAccessPointConfiguration(){}
	FLocalAccessPointConfiguration(const agora::rtc::LocalAccessPointConfiguration &amp; AgoraData){
		
		for(int i = 0; i&lt; AgoraData.ipListSize; i++){
			ipList.Add(UTF8_TO_TCHAR(AgoraData.ipList[i]));
		}
		ipListSize = AgoraData.ipListSize;
		for (int i = 0; i &lt; AgoraData.domainListSize; i++) {
			domainList.Add(UTF8_TO_TCHAR(AgoraData.domainList[i]));
		}
		domainListSize = AgoraData.domainListSize;
		verifyDomainName = UTF8_TO_TCHAR(AgoraData.verifyDomainName);
		mode = static_cast&lt;ELOCAL_PROXY_MODE&gt;(AgoraData.mode);
		advancedConfig = FAdvancedConfigInfo(AgoraData.advancedConfig);
		disableAut = AgoraData.disableAut;
	}
	agora::rtc::LocalAccessPointConfiguration CreateAgoraData() const {
		
		agora::rtc::LocalAccessPointConfiguration AgoraData;
		SET_UABT_TARRARY_FSTRING_TO_CONST_AGORA_ARRAY___MEMALLOC(AgoraData.ipList, ipListSize, this-&gt;ipList)
		AgoraData.ipListSize = ipListSize;
		SET_UABT_TARRARY_FSTRING_TO_CONST_AGORA_ARRAY___MEMALLOC(AgoraData.domainList, domainListSize, this-&gt;domainList)
			AgoraData.domainListSize = domainListSize;
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.verifyDomainName, this-&gt;verifyDomainName)
			AgoraData.mode = static_cast&lt;agora::rtc::LOCAL_PROXY_MODE&gt;(mode);
		AgoraData.advancedConfig = advancedConfig.CreateAgoraData();
		AgoraData.disableAut = disableAut;
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::LocalAccessPointConfiguration &amp; AgoraData) const {
		SET_UABT_TARRARY_FSTRING_TO_AGORA_ARRAY___MEMFREE(AgoraData.ipList, ipListSize)
		SET_UABT_TARRARY_FSTRING_TO_AGORA_ARRAY___MEMFREE(AgoraData.domainList, domainListSize)
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.verifyDomainName)
		advancedConfig.FreeAgoraData(AgoraData.advancedConfig);
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class LocalAccessPointConfiguration {
  
  ipList?: string[];
  
  ipListSize?: number;
  
  domainList?: string[];
  
  domainListSize?: number;
  
  verifyDomainName?: string;
  
  mode?: LocalProxyMode;

  advancedConfig?: AdvancedConfigInfo;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class LocalAccessPointConfiguration
    {
        public string[] ipList { set; get; }
        public int ipListSize { set; get; }
        public string[] domainList { set; get; }
        public int domainListSize { set; get; }
        public string verifyDomainName { set; get; }
        public LOCAL_PROXY_MODE mode { set; get; }
        public AdvancedConfigInfo advancedConfig { set; get; }

        public LocalAccessPointConfiguration()
        {
            ipList = new string[0];
            ipListSize = 0;
            domainList = new string[0];
            domainListSize = 0;
            verifyDomainName = "";
            mode = LOCAL_PROXY_MODE.kConnectivityFirst;
            advancedConfig = new AdvancedConfigInfo();
        }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class LocalAccessPointConfiguration {
  
  ipList?: string[];
  
  ipListSize?: number;
  
  domainList?: string[];
  
  domainListSize?: number;
  
  verifyDomainName?: string;
  
  mode?: LocalProxyMode;

  advancedConfig?: AdvancedConfigInfo;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class LocalAccessPointConfiguration {
  const LocalAccessPointConfiguration(
      {this.ipList,
      this.ipListSize,
      this.domainList,
      this.domainListSize,
      this.verifyDomainName,
      this.mode,
      this.advancedConfig});

  @JsonKey(name: 'ipList')
  final List&lt;String>? ipList;

  @JsonKey(name: 'ipListSize')
  final int? ipListSize;

  @JsonKey(name: 'domainList')
  final List&lt;String>? domainList;

  @JsonKey(name: 'domainListSize')
  final int? domainListSize;

  @JsonKey(name: 'verifyDomainName')
  final String? verifyDomainName;

  @JsonKey(name: 'mode')
  final LocalProxyMode? mode;

  @JsonKey(name: 'advancedConfig')
  final AdvancedConfigInfo? advancedConfig;

  factory LocalAccessPointConfiguration.fromJson(Map&lt;String, dynamic> json) =>
      _$LocalAccessPointConfigurationFromJson(json);

  Map&lt;String, dynamic> toJson() => _$LocalAccessPointConfigurationToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>ipList</pt>
                <pd>The list of IP addresses for the Local Access Point. ipList and domainList must be filled in at least one.</pd>
            </plentry>
            <plentry props="cpp unreal bp electron unity rn flutter cs">
                <pt>ipListSize</pt>
                <pd>The number of IP addresses of the Local Access Point. This value must be the same as the number of IP addresses that you specify for the ipList parameter.</pd>
            </plentry>
            <plentry>
                <pt>domainList</pt>
                <pd>The list of domain names for the Local Access Point. The SDK will parse the IP addresses according to the provided domain names. The parse times out after 10 seconds. ipList and domainList must be filled in at least one. If you specify an IP address and a domain name at the same time, the SDK will combine the IP address parsed from the domain name and the IP address you specify, remove duplicates, and then connect to a random IP to achieve load balancing.</pd>
            </plentry>
            <plentry props="cpp unreal bp electron unity rn flutter cs">
                <pt>domainListSize</pt>
                <pd>The number of domain names for Local Access Point. This value must be the same as the number of domain names that you specifyfor the domainList parameter.</pd>
            </plentry>
            <plentry>
                <pt>verifyDomainName</pt>
                <pd>The domain name used for Intranet certificate verification. If you pass an empty value, the SDK uses the default domain name <codeph>secure-edge.local</codeph> for certificate verification.</pd>
            </plentry>
            <plentry>
                <pt>mode</pt>
                <pd>
                    <p props="ios mac cpp unreal bp electron unity rn flutter cs">The connection mode. See <xref keyref="LOCAL_PROXY_MODE"/>.</p>
                    <p props="android hmos">Select one of the following connection modes:<ul>
                    <li><ph keyref="ConnectivityFirst"/>(0): The SDK firstly tries to connect to the specified Agora private media server; if the connection attempt fails, it will connect to the Agora SD-RTN™ instead.</li>
                    <li><ph keyref="LocalOnly"/>(1) The SDK only tries to connect to the specified Agora private media server.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>advancedConfig</pt>
                <pd>The advanced options for the Local Access Point. See <xref keyref="AdvancedConfigInfo"/>.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
