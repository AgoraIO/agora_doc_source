<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaplayer_selectmultiaudiotrack">
    <title><ph keyref="selectMultiAudioTrack"/></title>
    <shortdesc id="short"><ph id="shortdesc">Selects the audio tracks that you want to play on your local device and publish to the channel respectively.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="selectMultiAudioTrack"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int selectMultiAudioTrack(int playoutTrackIndex, int publishTrackIndex);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)selectMultiAudioTrack:(NSInteger)playoutTrackIndex publishTrackIndex:(NSInteger)publishTrackIndex NS_SWIFT_NAME(selectMultiAudioTrack(_:publishTrackIndex:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int selectMultiAudioTrack(int playoutTrackIndex, int publishTrackIndex) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript">abstract selectMultiAudioTrack(
    playoutTrackIndex: number,
    publishTrackIndex: number
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SelectMultiAudioTrack(int playoutTrackIndex, int publishTrackIndex);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract selectMultiAudioTrack(
    playoutTrackIndex: number,
    publishTrackIndex: number
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> selectMultiAudioTrack(
    {required int playoutTrackIndex, required int publishTrackIndex});</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.3.0</dd>
            </dlentry>
            </dl>
            <p>You can call this method to determine the audio track to be played on your local device and published to the channel.</p>
            <p>Before calling this method, you need to open the media file with the <xref keyref="openWithMediaSource"/> method and set <parmname>enableMultiAudioTrack</parmname> in <xref keyref="MediaSource"/> as <codeph><ph keyref="true"/></codeph>.</p>
        </section>
        <section id="scenario">
            <title>Applicable scenarios</title>
            <p>For example, in KTV scenarios, the host can choose to play the original sound locally and publish the accompaniment track to the channel.</p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>playoutTrackIndex</pt>
                <pd>The index of audio tracks for local playback. You can obtain the index through <xref keyref="getStreamInfo"/>.</pd>
            </plentry>
            <plentry>
                <pt>publishTrackIndex</pt>
                <pd>The index of audio tracks to be published in the channel. You can obtain the index through <xref keyref="getStreamInfo"/>.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul>
                <li props="native electron unity rn">0: Success.</li>
                <li>&lt; 0: Failure.</li>
                </ul> </section>
        </refbody>
</reference>
