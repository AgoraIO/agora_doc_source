<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencaptureparameters">
    <title><ph keyref="ScreenCaptureParameters" /></title>
    <shortdesc id="short"><ph id="shortdesc">Screen sharing configurations.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraScreenCaptureParameters: NSObject
@property (assign, nonatomic) CGSize dimensions;
@property (assign, nonatomic) NSInteger frameRate;
@property (assign, nonatomic) NSInteger bitrate;
@property(assign, nonatomic) BOOL captureMouseCursor;
@property(assign, nonatomic) BOOL windowFocus;
@property(copy, nonatomic) NSArray* _Nullable excludeWindowList;
@property(assign, nonatomic) BOOL highLighted;
@property(strong, nonatomic) COLOR_CLASS* _Nullable highLightColor;
@property(assign, nonatomic) NSUInteger highLightWidth;
@end
</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct ScreenCaptureParameters {
    VideoDimensions dimensions;
    int frameRate;
    int bitrate;
    bool captureMouseCursor;
    bool windowFocus;
    view_t *excludeWindowList;
    int excludeWindowCount;
    int highLightWidth;
    unsigned int highLightColor;
    bool enableHighLight;

  ScreenCaptureParameters()
    : dimensions(1920, 1080), frameRate(5), bitrate(STANDARD_BITRATE), captureMouseCursor(true), windowFocus(false), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0), highLightWidth(0), highLightColor(0), enableHighLight(false)  {}
  ScreenCaptureParameters(const VideoDimensions&amp; d, int f, int b)
    : dimensions(d), frameRate(f), bitrate(b), captureMouseCursor(true), windowFocus(false), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0), highLightWidth(0), highLightColor(0), enableHighLight(false) {}
  ScreenCaptureParameters(int width, int height, int f, int b)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(true), windowFocus(false), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0), highLightWidth(0), highLightColor(0), enableHighLight(false){}
  ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(cur), windowFocus(fcs), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0), highLightWidth(0), highLightColor(0), enableHighLight(false) {}
  ScreenCaptureParameters(int width, int height, int f, int b, view_t *ex, int cnt)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(true), windowFocus(false), excludeWindowList(ex), excludeWindowCount(cnt), highLightWidth(0), highLightColor(0), enableHighLight(false) {}
  ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs, view_t *ex, int cnt)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(cur), windowFocus(fcs), excludeWindowList(ex), excludeWindowCount(cnt), highLightWidth(0), highLightColor(0), enableHighLight(false) {}
};
</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ScreenCaptureParameters {
  dimensions?: VideoDimensions;
  frameRate?: number;
  bitrate?: number;
  captureMouseCursor?: boolean;
  windowFocus?: boolean;
  excludeWindowList?: any[];
  excludeWindowCount?: number;
  highLightWidth?: number;
  highLightColor?: number;
  enableHighLight?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ScreenCaptureParameters
    {
        public ScreenCaptureParameters()
        {
            dimensions = new VideoDimensions(1920, 1080);
            frameRate = 5;
            bitrate = (int)BITRATE.STANDARD_BITRATE;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
            highLightWidth = 0;
            highLightColor = 0;
            enableHighLight = false;
        }

        public ScreenCaptureParameters(ref VideoDimensions d, int f, int b)
        {
            dimensions = new VideoDimensions(d.width, d.height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
            highLightWidth = 0;
            highLightColor = 0;
            enableHighLight = false;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
            highLightWidth = 0;
            highLightColor = 0;
            enableHighLight = false;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = cur;
            windowFocus = fcs;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
            highLightWidth = 0;
            highLightColor = 0;
            enableHighLight = false;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b, view_t[] ex, int cnt)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = ex;
            excludeWindowCount = cnt;
            highLightWidth = 0;
            highLightColor = 0;
            enableHighLight = false;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs, view_t[] ex, int cnt)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = cur;
            windowFocus = fcs;
            excludeWindowList = ex;
            excludeWindowCount = cnt;
            highLightWidth = 0;
            highLightColor = 0;
            enableHighLight = false;
        }

        public VideoDimensions dimensions { set; get; }
        public int frameRate { set; get; }
        public int bitrate { set; get; }
        public bool captureMouseCursor { set; get; }
        public bool windowFocus { set; get; }
        public view_t[] excludeWindowList { set; get; }
        public int excludeWindowCount { set; get; }
        public int highLightWidth { set; get; }
        public uint highLightColor { set; get; }
        public bool enableHighLight { set; get; }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ScreenCaptureParameters {

  dimensions?: VideoDimensions;

  frameRate?: number;

  bitrate?: number;

  captureMouseCursor?: boolean;

  windowFocus?: boolean;

  excludeWindowList?: any[];

  excludeWindowCount?: number;

  highLightWidth?: number;

  highLightColor?: number;

  enableHighLight?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class ScreenCaptureParameters {
  /// @nodoc
  const ScreenCaptureParameters(
      {this.dimensions,
      this.frameRate,
      this.bitrate,
      this.captureMouseCursor,
      this.windowFocus,
      this.excludeWindowList,
      this.excludeWindowCount,
      this.highLightWidth,
      this.highLightColor,
      this.enableHighLight});

  @JsonKey(name: 'dimensions')
  final VideoDimensions? dimensions;

  @JsonKey(name: 'frameRate')
  final int? frameRate;

  @JsonKey(name: 'bitrate')
  final int? bitrate;

  @JsonKey(name: 'captureMouseCursor')
  final bool? captureMouseCursor;

  @JsonKey(name: 'windowFocus')
  final bool? windowFocus;

  @JsonKey(name: 'excludeWindowList')
  final List&lt;int&gt;? excludeWindowList;

  @JsonKey(name: 'excludeWindowCount')
  final int? excludeWindowCount;

  @JsonKey(name: 'highLightWidth')
  final int? highLightWidth;

  @JsonKey(name: 'highLightColor')
  final int? highLightColor;

  @JsonKey(name: 'enableHighLight')
  final bool? enableHighLight;

  factory ScreenCaptureParameters.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$ScreenCaptureParametersFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$ScreenCaptureParametersToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <note type="note" props="mac cpp unity cs">The video profiles of the shared screen stream are only set by <xref keyref="ScreenCaptureParameters" />, independent of <xref keyref="setVideoEncoderConfiguration" />.</note>
            <parml>
            <plentry>
                <pt>dimensions</pt>
                <pd>
                    <p><ph>The video encoding resolution of the shared screen stream. </ph>See <xref keyref="VideoDimensions" />. The default value is 1920 × 1080, that is, 2,073,600 pixels. Agora uses the value of this parameter to calculate the charges.</p>
                    <p>If the screen dimensions are different from the value of this parameter, Agora applies the following strategies for encoding. Suppose <parmname props="mac cpp unity flutter cs">dimensions</parmname> is set to 1920 × 1080:<ul>
                    <li>If the value of the screen dimensions is lower than that of <parmname>dimensions</parmname>, for example, 1000 × 1000 pixels, the SDK uses the screen dimensions, that is, 1000 × 1000 pixels, for encoding.</li>
                    <li>If the value of the screen dimensions is higher than that of <parmname>dimensions</parmname>, for example, 2000 × 1500, the SDK uses the maximum value under <parmname props="mac cpp unity flutter cs">dimensions</parmname> with the aspect ratio of the screen dimension (4:3) for encoding, that is, 1440 × 1080.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>frameRate</pt>
                <pd><ph props="flutter rn">The frame rate of the shared region. </ph><ph props="mac">The video encoding resolution of the shared screen stream. </ph><ph props="unity cpp electron">On Windows and macOS, this represents the video encoding frame rate (fps) of the shared screen stream. </ph><ph>The frame rate (fps) of the shared region. The default value is 5.  Agora does not recommend setting this to a value greater than 15.</ph></pd>
            </plentry>
            <plentry>
                <pt>bitrate</pt>
                <pd><ph props="unity flutter rn cs">The bitrate of the shared region. </ph><ph props="mac">The video encoding bitrate of the shared screen stream. </ph><ph props="unity cpp electron">On Windows and macOS, this represents the video encoding bitrate of the shared screen stream. </ph><ph>The bitrate (Kbps) of the shared region. The default value is 0 (the SDK works out a bitrate according to the dimensions of the current screen).</ph></pd>
            </plentry>
            <plentry props="mac cpp unity electron rn flutter cs">
                <pt>captureMouseCursor</pt>
                <pd>
                    <p>Whether to capture the mouse in screen sharing:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: (Default) Capture the mouse.</li>
                    <li><codeph><ph keyref="false" /></codeph>: Do not capture the mouse.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry props="mac cpp unity electron rn flutter cs">
                <pt>windowFocus</pt>
                <pd>
                    <p>Whether to bring the window to the front when calling the <xref keyref="startScreenCaptureByWindowId" /> method to share it:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: Bring the window to the front.</li>
                    <li><codeph><ph keyref="false" /></codeph>: (Default) Do not bring the window to the front.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry props="mac cpp unity electron rn flutter cs">
                <pt>excludeWindowList</pt>
                <pd>The ID list of the windows to be blocked. When calling <xref keyref="startScreenCaptureByDisplayId" /> to start screen sharing, you can use this parameter to block a specified window. When calling <xref keyref="updateScreenCaptureParameters" /> to update screen sharing configurations, you can use this parameter to dynamically block a specified window.</pd>
            </plentry>
            <plentry props="mac cpp electron unity rn flutter cs">
                <pt props="mac">highLighted</pt>
                <pt props="cpp electron unity cs flutter">enableHighLight</pt>
                <pd><ph props="cpp unity flutter">(For macOS and Windows only) </ph><ph>Whether to place a border around the shared window or screen:</ph><ul>
                    <li><codeph><ph keyref="true" /></codeph>: Place a border.</li>
                    <li><codeph><ph keyref="false" /></codeph>: (Default) Do not place a border.</li>
                    </ul>
                    <note>When you share a part of a window or screen, the SDK places a border around the entire window or screen if you set this parameter to <codeph><ph keyref="true" /></codeph>.</note></pd>
            </plentry>
            <plentry props="mac cpp electron unity flutter cs">
                <pt>highLightColor</pt>
                <pd><ph props="cpp unity flutter">(For macOS and Windows only)</ph><ul>
                <li props="cpp unity electron flutter cs">On Windows platforms, the color of the border in ARGB format. The default value is 0xFF8CBF26.</li>
                <li props="cpp mac unity electron flutter">On macOS, <codeph>COLOR_CLASS</codeph> refers to <codeph>NSColor</codeph>.</li></ul></pd>
            </plentry>
            <plentry props="mac cpp electron unity flutter cs">
                <pt>highLightWidth</pt>
                <pd><ph props="cpp unity flutter">(For macOS and Windows only) </ph><ph>The width (px) of the border. The default value is 5, and the value range is (0, 50].</ph><note>This parameter only takes effect when <parmname>highLighted</parmname> is set to <codeph><ph keyref="true" /></codeph>.</note></pd>
            </plentry>
            <plentry props="cpp unity electron rn flutter cs">
                <pt>excludeWindowCount</pt>
                <pd>The number of windows to be excluded.<note>On the Windows platform, the maximum value of this parameter is 24; if this value is exceeded, excluding the window fails.</note>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>