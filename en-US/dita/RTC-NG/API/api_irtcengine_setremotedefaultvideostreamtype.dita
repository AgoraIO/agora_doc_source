<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setremotedefaultvideostreamtype">
    <title><ph keyref="setRemoteDefaultVideoStreamType" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the default stream type of subscrption for remote video streams.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setRemoteDefaultVideoStreamType" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setRemoteDefaultVideoStreamType(int streamType);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setRemoteDefaultVideoStreamType:(AgoraVideoStreamType)streamType;</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int setRemoteDefaultVideoStreamType(VIDEO_STREAM_TYPE streamType) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setRemoteDefaultVideoStreamType(streamType: VideoStreamType): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetRemoteDefaultVideoStreamType(VIDEO_STREAM_TYPE streamType);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setRemoteDefaultVideoStreamType(streamType: VideoStreamType): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setRemoteDefaultVideoStreamType(VideoStreamType streamType);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p id="desc1">Under limited network conditions, if the publisher has not disabled the dual-stream mode using <codeph><xref keyref="enableDualStreamMode3" /> (<ph keyref="false" />)</codeph>, the receiver can choose to receive either the high-quality video stream or the low-quality video stream. The high-quality video stream has a higher resolution and bitrate, and the low-quality video stream has a lower resolution and bitrate.</p>
            <p id="desc2">By default, users receive the high-quality video stream. Call this method if you want to switch to the low-quality video stream. This method allows the app to adjust the corresponding video stream type based on the size of the video window to reduce the bandwidth and resources. The aspect ratio of the low-quality video stream is the same as the high-quality video stream. Once the resolution of the high-quality video stream is set, the system automatically sets the resolution, frame rate, and bitrate of the low-quality video stream.</p>
            <p conkeyref="setRemoteVideoStreamType/desc4" />
            <note type="attention">
            <ul>
            <li>Call this method before joining a channel. The SDK does not support changing the default subscribed video stream type after joining a channel.</li>
            <li>If you call both this method and <xref keyref="setRemoteVideoStreamType" />, the SDK applies the settings in the <apiname keyref="setRemoteVideoStreamType" /> method.</li>
            </ul></note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>streamType</pt>
                <pd id="defaultstreamtype">
                    <p props="ios mac cpp unreal bp electron unity flutter rn cs">The default video-stream type. See <xref keyref="VIDEO_STREAM_TYPE" />.</p>
                    <p props="android">The default video-stream type:<ul>
                    <li><ph keyref="VIDEO_STREAM_HIGH" />(0): High-quality stream, that is, a high-resolution and high-bitrate video stream.</li>
                    <li><ph keyref="VIDEO_STREAM_LOW" />(1): Low-quality stream, that is, a low-resolution and low-bitrate video stream.</li>
                    </ul> </p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title" /></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException" /> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul>
            <li props="native unreal bp electron unity rn cs">0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul> </section>
    </refbody>
</reference>