<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_rte_getfrombridge">
    <title><ph keyref="GetFromBridge"/></title>
    <shortdesc id="short"><ph id="shortdesc">Bridges an RTE object from <ph keyref="IRtcEngine"/>.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="GetFromBridge"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static synchronized Rte getFromBridge() throws RteException {
    long handle = nativeGetFromBridge();
    return new Rte(handle);
  }</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">+ (instancetype _Nonnull)getFromBridge:(AgoraRteError * _Nullable)error;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">static Rte GetFromBridge(Error* err = nullptr);</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.5.0</dd>
            </dlentry>
            </dl>
            <p>The RTE object created by calling this method does not need to be initialized again using <xref keyref="InitMediaEngine"/>. If you have not created and initialized the RTC engine before, you can first call <xref keyref="Rte"/> to create an RTE object, and then call <xref keyref="InitMediaEngine"/> to initialize it.</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>Call timing</title>
            <p>Before calling this method, ensure that you have initialized the RTC engine using <xref keyref="initialize"/>.</p>
        </section>
        <section id="restriction" deliveryTarget="details">
            <title>Restrictions</title>
            <p>None.</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title><ph props="apple cpp">Parameters</ph></title>
            <parml props="apple cpp">
                <plentry>
                    <pt props="cpp">err</pt>
                    <pt props="apple">error</pt>
                    <pd>Pointer to the <xref keyref="Error"/> object, which receives state and error codes.</pd>
                </plentry>
            </parml>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly.</p>
            <p props="cpp apple unreal bp electron unity rn cs">An RTE object.</p></section>
        <section id="exception" props="android" conkeyref="SetAppId/exception"/>
        </refbody>
</reference>
