<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_playerobserver_onstatechanged">
    <title><ph keyref="onStateChanged"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs when the player state changes.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onStateChanged"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onStateChanged(int old_state, int new_state, Error error){}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)onStateChanged:(AgoraRtePlayerState)oldState newState:(AgoraRtePlayerState)newState error:(AgoraRteError * _Nullable)error;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual void onStateChanged(PlayerState old_state, PlayerState new_state,
                    rte::Error *err) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.5.0</dd>
            </dlentry>
            </dl>
            <p>To monitor player events, you need to call <xref keyref="RegisterObserver_Player"/> to register a player observer object.</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>Trigger timing</title>
            <p>When the player state changes, the SDK triggers this callback the report the previous and current states.</p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>Restrictions</title>
            <p>None.</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt props="android cpp">old_state</pt>
                <pt props="apple">oldState</pt>
                <pd>The previous player state. See <xref keyref="RtePlayerState"/>.</pd>
            </plentry>
            <plentry>
                <pt props="android cpp">new_state</pt>
                <pt props="apple">newState</pt>
                <pd>The current player state. See <xref keyref="RtePlayerState"/>. If the current state is <apiname keyref="kRtePlayerStateFailed"/>, you can get the detailed error information from the <parmname props="cpp">err</parmname><parmname props="android apple">error</parmname> parameter.</pd>
            </plentry>
            <plentry>
                <pt props="android apple">error</pt>
                <pt props="cpp">err</pt>
                <pd>The state or error information: <xref keyref="Error"/>.</pd>
            </plentry>
            </parml> </section>
        </refbody>
</reference>
