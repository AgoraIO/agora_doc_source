<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_getobservedframeposition">
    <title><ph keyref="getObservedFramePosition"/></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the frame position for the video observer.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="getObservedFramePosition"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int getObservedFramePosition();</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (unsigned int)getObservedFramePosition;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual uint32_t getObservedFramePosition() {
                return base::POSITION_POST_CAPTURER | base::POSITION_PRE_RENDERER;
                }</codeblock>
         <codeblock props="bp" outputclass="language-cpp">DECLARE_DYNAMIC_MULTICAST_DELEGATE(FGetObservedFramePosition);</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual VIDEO_OBSERVER_POSITION GetObservedFramePosition()
        {
            return VIDEO_OBSERVER_POSITION.POSITION_POST_CAPTURER | VIDEO_OBSERVER_POSITION.POSITION_PRE_RENDERER;
        }</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
           <codeblock props="flutter" outputclass="language-dart"/> 
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>After successfully registering the video data observer, the SDK uses this callback to determine whether to trigger <xref keyref="onCaptureVideoFrame"/>, <xref keyref="onRenderVideoFrame"/> and <xref keyref="onPreEncodeVideoFrame"/> callback at each specific video frame processing position, so that you can observe the locally collected video data, the video data sent by the remote end, and the video data before encoding. You can set one or more positions you need to observe by modifying the return value according to your scenario:</p>
            <p>
            <ul>
            <li><apiname keyref="POSITION_POST_CAPTURER"/>(1 &lt;&lt; 0): The position after capturing the video data, which corresponds to the <apiname keyref="onCaptureVideoFrame"/> callback.</li>
            <li><apiname keyref="POSITION_PRE_RENDERER"/>(1 &lt;&lt; 1): The position of the received remote video data before rendering, which corresponds to the <apiname keyref="onRenderVideoFrame"/> callback.</li>
            <li><apiname keyref="POSITION_PRE_ENCODER"/>(1 &lt;&lt; 2): The position before encoding the video data, which corresponds to the <apiname keyref="onPreEncodeVideoFrame"/> callback.</li>
            </ul></p>
            <note type="attention">
            <ul>
            <li>Use '|' (the OR operator) to observe multiple frame positions.</li>
            <li>This callback observes <apiname keyref="POSITION_POST_CAPTURER"/>(1 &lt;&lt; 0) and <apiname keyref="POSITION_PRE_RENDERER"/>(1 &lt;&lt; 1) by default.</li>
            <li>To conserve system resources, you can reduce the number of frame positions that you want to observe.</li>
            <li props="native unreal bp">When the video processing mode is <apiname keyref="PROCESS_MODE_READ_WRITE"/> and the observation position is set to <apiname keyref="POSITION_PRE_ENCODER"/> | <apiname keyref="POSITION_POST_CAPTURER"/>, the <xref keyref="getMirrorApplied"/> does not take effect; you need to modify the video processing mode or the position of the observer.</li>
            </ul> </note> </section>
        <section id="return_values">
            <title>Returns</title>
            <p props="cpp unreal ios mac unity cs">A bit mask that controls the frame position of the video observer. See <xref keyref="VIDEO_MODULE_POSITION"/>.</p>
            <p props="android bp">A bit mask that controls the frame position of the video observer.<ul>
            <li><apiname keyref="POSITION_POST_CAPTURER"/>(1 &lt;&lt; 0): The position after capturing the video data, which corresponds to the <apiname keyref="onCaptureVideoFrame"/> callback.</li>
            <li><apiname keyref="POSITION_PRE_RENDERER"/>(1 &lt;&lt; 1): The position of the received remote video data before rendering, which corresponds to the <apiname keyref="onRenderVideoFrame"/> callback.</li>
            <li><apiname keyref="POSITION_PRE_ENCODER"/>(1 &lt;&lt; 2): The position before encoding the video data, which corresponds to the <apiname keyref="onPreEncodeVideoFrame"/> callback.</li>
            </ul> </p>
        </section>
    </refbody>
</reference>
