<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_complain">
    <title><ph keyref="complain"/></title>
    <shortdesc id="short"><ph id="shortdesc">Allows a user to complain about the call quality after a call ends.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="complain"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int complain(String callId, String description);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)complain:(NSString * _Nonnull)callId
    description:(NSString * _Nullable)description;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int complain(const char* callId, const char* description) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int Complain(const FString&amp; callId, const FString&amp; description);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract complain(callId: string, description: string): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int Complain(string callId, string description);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract complain(callId: string, description: string): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; complain({required String callId, required String description});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>This method allows users to complain about the quality of the call. Call this method after the user leaves the channel.</p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>callId</pt>
                <pd>The current call ID. You can get the call ID by calling <xref keyref="getCallId"/>.</pd>
            </plentry>
            <plentry>
                <pt>description</pt>
                <pd><ph props="native unreal bp unity cs">(Optional) </ph><ph>A description of the call. The string length should be less than 800 bytes.</ph></pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph><ul>
                <li>-1: A general error occurs (no specified reason).</li>
                <li>-2: The parameter is invalid.</li>
                <li>-7: The method is called before <xref keyref="IRtcEngine"/> is initialized.</li></ul></li>
            </ul> </section>
    </refbody>
</reference>
