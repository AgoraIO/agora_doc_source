<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onrhythmplayerstatechanged">
    <title><ph keyref="onRhythmPlayerStateChanged"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs when the state of virtual metronome changes.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onRhythmPlayerStateChanged"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onRhythmPlayerStateChanged(int state, int errorCode) {}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine didRhythmPlayerStateChanged:(AgoraRhythmPlayerState)state
        errorCode:(AgoraRhythmPlayerError)errorCode NS_SWIFT_NAME(rtcEngine(_:didRhythmPlayerStateChanged:errorCode:));</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual void onRhythmPlayerStateChanged(RHYTHM_PLAYER_STATE_TYPE state, RHYTHM_PLAYER_ERROR_TYPE errorCode) {
  (void)state;
  (void)errorCode;
}</codeblock>
            <codeblock props="cs" outputclass="language-csharp"/>
            <codeblock props="electron" outputclass="language-typescript">onRhythmPlayerStateChanged?(
    state: RhythmPlayerStateType,
    errorCode: RhythmPlayerErrorType
  ): void;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public virtual void OnRhythmPlayerStateChanged(RHYTHM_PLAYER_STATE_TYPE state, RHYTHM_PLAYER_ERROR_TYPE errorCode) { }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">onRhythmPlayerStateChanged?(
    state: RhythmPlayerStateType,
    errorCode: RhythmPlayerErrorType
  ): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(
          RhythmPlayerStateType state, RhythmPlayerErrorType errorCode)?
      onRhythmPlayerStateChanged;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>When the state of the virtual metronome changes, the SDK triggers this callback to report the current state of the virtual metronome. This callback indicates the state of the local audio stream and enables you to troubleshoot issues when audio exceptions occur.</p>
            <note type="attention" props="cpp unity flutter">This callback is for Android and iOS only.</note> </section>
        <section id="parameters">
            <title><ph keyref="callback-section-title"/></title>
            <parml>
            <plentry props="ios mac cpp framework">
                <pt>state</pt>
                <pd>For the current virtual metronome status, see <xref keyref="RHYTHM_PLAYER_STATE_TYPE"/>.</pd>
            </plentry>
            <plentry props="android">
                <pt>state</pt>
                <pd>The current virtual metronome state.<ul>
                    <li><ph keyref="RHYTHM_PLAYER_STATE_IDLE"/>(810): The virtual metronome is not enabled or is already disabled.</li>
                    <li><ph keyref="RHYTHM_PLAYER_STATE_OPENING"/>(811): Opening the beat files.</li>
                    <li><ph keyref="RHYTHM_PLAYER_STATE_DECODING"/>(812): Decoding the beat files.</li>
                    <li><ph keyref="RHYTHM_PLAYER_STATE_PLAYING"/>(813): The beat files are playing.</li>
                    <li><ph keyref="RHYTHM_PLAYER_STATE_FAILED"/>(814): Failed to start virtual metronome. You can use the reported <parmname>errorCode</parmname> to troubleshoot the cause of the error, or you can try to start the virtual metronome again.</li>
                    </ul></pd>
            </plentry>
            <plentry props="ios mac cpp framework">
                <pt>errorCode</pt>
                <pd>For the error codes and error messages related to virtual metronome errors, see <xref keyref="RHYTHM_PLAYER_ERROR_TYPE"/>.</pd>
            </plentry>
            <plentry props="android">
                <pt>errorCode</pt>
                <pd>Error codes and error messages for virtual metronome errors.<ul>
                    <li><ph keyref="RHYTHM_PLAYER_ERROR_OK"/>(0): The beat files are played normally without errors.</li>
                    <li><ph keyref="RHYTHM_PLAYER_ERROR_FAILED"/>(1): General error with no clear cause.</li>
                    <li><ph keyref="RHYTHM_PLAYER_ERROR_CAN_NOT_OPEN"/>(801): There is an error when opening the beat files.</li>
                    <li><ph keyref="RHYTHM_PLAYER_ERROR_CAN_NOT_PLAY"/>(802): There is an error when playing beat files.</li>
                    <li><ph keyref="RHYTHM_PLAYER_ERROR_FILE_OVER_DURATION_LIMIT"/>(803): The duration of the beat audio file exceeds the limit. The maximum duration is 1.2 seconds.</li>
                    </ul></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
