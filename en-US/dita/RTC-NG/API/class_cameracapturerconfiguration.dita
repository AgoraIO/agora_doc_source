<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_cameracapturerconfiguration">
  <title> <ph keyref="CameraCapturerConfiguration" /> </title>
  <shortdesc id="short"><ph id="shortdesc">The camera capturer preference.</ph></shortdesc>
  <refbody>
    <section id="prototype">
      <p outputclass="codeblock">
      <codeblock props="android" outputclass="language-java">public class CameraCapturerConfiguration {
    public enum CAMERA_DIRECTION {
        CAMERA_REAR(0),
        CAMERA_FRONT(1);

    private int value;

    private CAMERA_DIRECTION(int v) {
      value = v;
    }

    public int getValue() {
      return this.value;
    }
  }

    public CAMERA_DIRECTION cameraDirection;

  static public class CaptureFormat {
        public int width;
        public int height;
        public int fps;

    public CaptureFormat(int width, int height, int fps) {
      this.width = width;
      this.height = height;
      this.fps = fps;
    }

    public CaptureFormat() {
      this.width = 640;
      this.height = 480;
      this.fps = 15;
    }

    @CalledByNative("CaptureFormat")
    public int getHeight() {
      return height;
    }

    @CalledByNative("CaptureFormat")
    public int getWidth() {
      return width;
    }

    @CalledByNative("CaptureFormat")
    public int getFps() {
      return fps;
    }

    @Override
    public String toString() {
      return "CaptureFormat{"
          + "width=" + width + ", height=" + height + ", fps=" + fps + '}';
    }
  }

  public CaptureFormat captureFormat;

    public boolean followEncodeDimensionRatio;

    public CameraCapturerConfiguration(CAMERA_DIRECTION cameraDirection) {
    this.cameraDirection = cameraDirection;
    this.captureFormat = new CaptureFormat();
    this.followEncodeDimensionRatio = true;
  }

    public CameraCapturerConfiguration(CaptureFormat captureFormat) {
    this.captureFormat = captureFormat;
    this.cameraDirection = CAMERA_DIRECTION.CAMERA_FRONT;
    this.followEncodeDimensionRatio = true;
  }

    public CameraCapturerConfiguration(
      CAMERA_DIRECTION cameraDirection, CaptureFormat captureFormat) {
    this.cameraDirection = cameraDirection;
    this.captureFormat = captureFormat;
    this.followEncodeDimensionRatio = true;
  }

  @CalledByNative
  public int getCameraDirection() {
    return cameraDirection.value;
  }

  @CalledByNative
  public CaptureFormat getCaptureFormat() {
    return captureFormat;
  }

  @CalledByNative
  public boolean isFollowEncodeDimensionRatio() {
    return followEncodeDimensionRatio;
  }

  @Override
  public String toString() {
    return "CameraCapturerConfiguration{"
        + "cameraDirection=" + cameraDirection + ", captureDimensions=" + captureFormat
        + ", followEncodeDimensionRatio=" + followEncodeDimensionRatio + '}';
  }
}</codeblock>
      <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraCameraCapturerConfiguration: NSObject
#if TARGET_OS_IOS
@property (assign, nonatomic) AgoraCameraDirection cameraDirection;
#endif
#elif TARGET_OS_MAC
@property (copy, nonatomic) NSString * _Nullable deviceId;
@property(assign, nonatomic) CGSize dimensions;
@property(assign, nonatomic) int frameRate;
@property(assign, nonatomic) BOOL followEncodeDimensionRatio;
@end</codeblock>
      <codeblock props="cpp unreal bp" outputclass="language-cpp">struct CameraCapturerConfiguration {
  #if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
    CAMERA_DIRECTION cameraDirection;
#else
    char deviceId[MAX_DEVICE_ID_LENGTH];
#endif
    VideoFormat format;
  bool followEncodeDimensionRatio;
  CameraCapturerConfiguration() : followEncodeDimensionRatio(true) {
#if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
  cameraDirection = CAMERA_REAR;
#else
  memset(deviceId, 0, sizeof(deviceId));
#endif
  }
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export class CameraCapturerConfiguration {
  
  cameraDirection?: CameraDirection;
  
  deviceId?: string;
  
  format?: VideoFormat;

  followEncodeDimensionRatio?: boolean;

}</codeblock>
      <codeblock props="unity cs" outputclass="language-csharp">public class CameraCapturerConfiguration
    {
        public CameraCapturerConfiguration()
        {
            deviceId = "";
            cameraDirection = CAMERA_DIRECTION.CAMERA_FRONT;
            format = new VideoFormat();
            this.followEncodeDimensionRatio = true;
        }

        public CameraCapturerConfiguration(string deviceId, VideoFormat format,
            CAMERA_DIRECTION cameraDirection, bool followEncodeDimensionRatio)
        {
            this.deviceId = deviceId;
            this.format = format;
            this.cameraDirection = cameraDirection;
            this.followEncodeDimensionRatio = followEncodeDimensionRatio;
        }

        public string deviceId { set; get; }
        public VideoFormat format { set; get; }
        public bool followEncodeDimensionRatio { set; get; }
        public CAMERA_DIRECTION cameraDirection { set; get; }
    }</codeblock>
      <codeblock props="rn" outputclass="language-typescript">export class CameraCapturerConfiguration {
  
  cameraDirection?: CameraDirection;
  
  deviceId?: string;
  
  format?: VideoFormat;

  followEncodeDimensionRatio?: boolean;

}</codeblock>
      <codeblock props="flutter" outputclass="language-dart">class CameraCapturerConfiguration {
  const CameraCapturerConfiguration(
      {this.cameraDirection,
      this.deviceId,
      this.format,
      this.followEncodeDimensionRatio});

  @JsonKey(name: 'cameraDirection')
  final CameraDirection? cameraDirection;

  @JsonKey(name: 'deviceId')
  final String? deviceId;

  @JsonKey(name: 'format')
  final VideoFormat? format;

  @JsonKey(name: 'followEncodeDimensionRatio')
  final bool? followEncodeDimensionRatio;

  factory CameraCapturerConfiguration.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$CameraCapturerConfigurationFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$CameraCapturerConfigurationToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp" /></p>
    </section>
    <section id="parameters">
      <title> <text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" />
      </title>
      <parml>
      <plentry props="android ios cpp unreal bp unity rn flutter cs">
        <pt>cameraDirection</pt>
        <pd>
          <note type="attention" props="cpp unreal bp unity rn flutter">This parameter applies to Android and iOS only.</note><ph>The camera direction. </ph><ph props="ios cpp unreal bp unity android rn flutter cs">See <xref keyref="CAMERA_DIRECTION" />.</ph></pd>
      </plentry>
      <plentry props="cpp unreal bp android unity electron rn flutter cs">
        <pt props="cpp unreal bp unity electron rn flutter cs">format</pt>
        <pt props="android">captureFormat</pt>
        <pd>The format of the video frame. See <xref keyref="VideoFormat" />.</pd>
      </plentry>
      <plentry props="cpp unreal bp apple unity electron flutter cs">
        <pt>deviceId</pt>
        <pd>
          <note type="attention" props="cpp unreal bp unity electron flutter">This method applies to Windows only.</note>
          <note type="attention" props="apple">This method applies to macOS only.</note><ph>The ID of the camera. </ph><ph props="cpp unreal bp electron flutter">The maximum length is <xref keyref="MAX_DEVICE_ID_LENGTH_TYPE" />.</ph></pd>
      </plentry>
      <plentry>
        <pt>followEncodeDimensionRatio</pt>
        <pd>Whether to follow the video aspect ratio set in <xref keyref="setVideoEncoderConfiguration" />:<ul>
          <li><codeph><ph keyref="true" /></codeph>: (Default) Follow the set video aspect ratio. The SDK crops the captured video according to the set video aspect ratio and synchronously changes the local preview screen and the video frame in <xref keyref="onCaptureVideoFrame" /> and <xref keyref="onPreEncodeVideoFrame" />.</li>
          <li><codeph><ph keyref="false" /></codeph>: Do not follow the system default audio playback device. The SDK does not change the aspect ratio of the captured video frame.</li>
          </ul></pd>
      </plentry>
      </parml> </section>
  </refbody>
</reference>