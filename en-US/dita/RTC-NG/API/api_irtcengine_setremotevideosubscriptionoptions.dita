<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setremotevideosubscriptionoptions">
    <title><ph keyref="setRemoteVideoSubscriptionOptions"/></title>
    <shortdesc id="short"><ph id="shortdesc">Options for subscribing to remote video streams.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setRemoteVideoSubscriptionOptions"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setRemoteVideoSubscriptionOptions(int uid, VideoSubscriptionOptions options);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setRemoteVideoSubscriptionOptions:(NSUInteger)uid
                                 options:(AgoraVideoSubscriptionOptions* _Nonnull)options NS_SWIFT_NAME(setRemoteVideoSubscriptionOptions(_:options:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setRemoteVideoSubscriptionOptions(uid_t uid, const VideoSubscriptionOptions &amp;options) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetRemoteVideoSubscriptionOptions(int64 uid, const FVideoSubscriptionOptions&amp; options);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setRemoteVideoSubscriptionOptions(
    uid: number,
    options: VideoSubscriptionOptions
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp"> public abstract int SetRemoteVideoSubscriptionOptions(uint uid, VideoSubscriptionOptions options);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setRemoteVideoSubscriptionOptions(
    uid: number,
    options: VideoSubscriptionOptions
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> setRemoteVideoSubscriptionOptions(
      {required int uid, required VideoSubscriptionOptions options});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>When a remote user has enabled dual-stream mode, you can call this method to choose the option for subscribing to the video streams sent by the remote user.</p>
            <p>
            <ul>
            <li>If you only register one <xref keyref="IVideoFrameObserver"/> object, the SDK subscribes to the raw video data and encoded video data by default (the effect is equivalent to setting <parmname>encodedFrameOnly</parmname> to <codeph><ph keyref="false"/></codeph>).</li>
            <li>If you only register one <xref keyref="IVideoEncodedFrameObserver"/> object, the SDK only subscribes to the encoded video data by default (the effect is equivalent to setting <parmname>encodedFrameOnly</parmname> to <codeph><ph keyref="true"/></codeph>).</li>
            <li>If you register one <apiname keyref="IVideoFrameObserver"/> object and one <apiname keyref="IVideoEncodedFrameObserver"/> object successively, the SDK subscribes to the encoded video data by default (the effect is equivalent to setting <parmname>encodedFrameOnly</parmname> to <codeph><ph keyref="false"/></codeph>).</li>
            <li>If you call this method first with the <parmname>options</parmname> parameter set, and then register one <apiname keyref="IVideoFrameObserver"/> or <apiname keyref="IVideoEncodedFrameObserver"/> object, you need to call this method again and set the <parmname>options</parmname> parameter as described in the above two items to get the desired results.</li>
            </ul> </p>
            <note>Agora recommends the following steps:<ol>
            <li>Set <parmname>autoSubscribeVideo</parmname> to <codeph><ph keyref="false"/></codeph> when calling <xref keyref="joinChannel2"/> to join a channel.</li>
            <li>Call this method after receiving the <xref keyref="onUserJoined"/> callback to set the subscription options for the specified remote user's video stream.</li>
            <li>Call the <xref keyref="muteRemoteVideoStream"/> method to resume subscribing to the video stream of the specified remote user. If you set <parmname>encodedFrameOnly</parmname> to <codeph><ph keyref="true"/></codeph> in the previous step, the SDK triggers the <xref keyref="onEncodedVideoFrameReceived"/> callback locally to report the received encoded video frame information.</li>
            </ol> </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry id="uid">
                <pt>uid</pt>
                <pd>The user ID of the remote user.</pd>
            </plentry>
            <plentry id="op">
                <pt>options</pt>
                <pd>The video subscription options. See <xref keyref="VideoSubscriptionOptions"/>.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
