<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setremotevideosubscriptionoptions">
    <title><ph keyref="setRemoteVideoSubscriptionOptions"/></title>
    <shortdesc id="short"><ph id="shortdesc">Options for subscribing to remote video streams.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setRemoteVideoSubscriptionOptions"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setRemoteVideoSubscriptionOptions(int uid, VideoSubscriptionOptions options);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setRemoteVideoSubscriptionOptions:(NSUInteger)uid
                                 options:(AgoraVideoSubscriptionOptions* _Nonnull)options NS_SWIFT_NAME(setRemoteVideoSubscriptionOptions(_:options:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setRemoteVideoSubscriptionOptions(uid_t uid, const VideoSubscriptionOptions &amp;options) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int SetRemoteVideoSubscriptionOptions(int64 uid, const FVideoSubscriptionOptions&amp; options);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setRemoteVideoSubscriptionOptions(
    uid: number,
    options: VideoSubscriptionOptions
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp"> public abstract int SetRemoteVideoSubscriptionOptions(uint uid, VideoSubscriptionOptions options);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setRemoteVideoSubscriptionOptions(
    uid: number,
    options: VideoSubscriptionOptions
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> setRemoteVideoSubscriptionOptions(
      {required int uid, required VideoSubscriptionOptions options});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>When a remote user has enabled dual-stream mode, you can call this method to choose the option for subscribing to the video streams sent by the remote user. The default subscription behavior of the SDK for remote video streams depends on the type of registered video observer:<ul>
                <li>If the <xref keyref="IVideoFrameObserver"/> observer is registered, the default is to subscribe to both raw data and encoded data.</li>
                <li>If the <xref keyref="IVideoEncodedFrameObserver"/> observer is registered, the default is to subscribe only to the encoded data.</li>
                <li>If both types of observers are registered, the default behavior follows the last registered video observer. For example, if the last registered observer is the <apiname keyref="IVideoFrameObserver"/> observer, the default is to subscribe to both raw data and encoded data.</li>
            </ul>If you want to modify the default behavior, or set different subscription options for different <codeph>uids</codeph>, you can call this method to set it. </p>
            <p props="android cpp apple">For detailed implementation steps, please refer to <xref keyref="video-processing"/>.</p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry id="uid">
                <pt>uid</pt>
                <pd>The user ID of the remote user.</pd>
            </plentry>
            <plentry id="op">
                <pt>options</pt>
                <pd>The video subscription options. See <xref keyref="VideoSubscriptionOptions"/>.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
