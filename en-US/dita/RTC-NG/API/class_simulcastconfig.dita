<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_simulcastconfig">
    <title><ph keyref="SimulcastConfig"/></title>
    <shortdesc id="short"><ph id="shortdesc">Configures video streams with multiple quality layers.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class SimulcastConfig {
  final public StreamLayerConfig[] configs = new StreamLayerConfig[StreamLayerIndex.STREAM_LAYER_COUNT_MAX.getValue()];
  public boolean publishFallbackEnable;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraSimulcastConfig: NSObject
@property (copy, nonatomic, readonly) NSArray&lt;AgoraStreamLayerConfig*&gt;* _Nonnull configs;
@property (assign, nonatomic) BOOL publishFallbackEnable;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct SimulcastConfig {
  struct StreamLayerConfig {
    VideoDimensions dimensions;
    int framerate;
    bool enable;
    StreamLayerConfig() : dimensions(0, 0), framerate(0), enable(false) {}
  };
  StreamLayerConfig configs[STREAM_LAYER_COUNT_MAX];
  bool publish_fallback_enable;
  SimulcastConfig(): publish_fallback_enable(false) {}
};</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since:</dt>
                <dd>v.4.6.0.</dd>
                </dlentry>
            </dl>
            <p></p>
            </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="native">
                <pt>configs</pt>
                <pd>分层推流配置项，详见 <xref keyref="StreamLayerConfig"/>。</pd>
            </plentry>
            <plentry props="native">
                <pt props="android apple">publishFallbackEnable</pt>
                <pt props="cpp">publish_fallback_enable</pt>
                <pd props="android">Whether to enable fallback publishing:<ul>
                        <li><codeph><ph keyref="true"/></codeph>: Enable fallback publishing. When the device performance or network is poor at the publishing end, the SDK will dynamically disable multiple video streams of different quality levels, from layer1 to layer6. At least the video streams of the highest and lowest quality are retained to maintain basic video continuity.</li>
                        <li><codeph><ph keyref="false"/></codeph>: (Default) Disable fallback publishing.</li>
                        </ul>
                    </pd>
                <pd props="apple">Whether to enable fallback publishing:<ul>
                        <li><codeph><ph keyref="true"/></codeph>: Enable fallback publishing. When the device performance or network is poor at the publishing end, the SDK will dynamically disable multiple video streams of different quality levels, from layer1 to layer6. At least the video streams of the highest and lowest quality are retained to maintain basic video continuity.</li>
                        <li><codeph><ph keyref="false"/></codeph>: (Default) Disable fallback publishing.</li>
                        </ul>
                    </pd>
                <pd props="cpp">Whether to enable fallback publishing:<ul>
                        <li><codeph><ph keyref="true"/></codeph>: Enable fallback publishing. When the device performance or network is poor at the publishing end, the SDK will dynamically disable multiple video streams of different quality levels, from layer1 to layer6. At least the video streams of the highest and lowest quality are retained to maintain basic video continuity.</li>
                        <li><codeph><ph keyref="false"/></codeph>: (Default) Disable fallback publishing.</li>
                        </ul>
                    </pd>
            </plentry>
            </parml> </section>
            </refbody>
</reference>
