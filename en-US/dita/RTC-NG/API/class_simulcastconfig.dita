<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_simulcastconfig">
    <title><ph keyref="SimulcastConfig"/></title>
    <shortdesc id="short"><ph id="shortdesc">Configure multi-layer video stream.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class SimulcastConfig {
final public StreamLayerConfig[] configs = new StreamLayerConfig[StreamLayerIndex.STREAM_LAYER_COUNT_MAX.getValue()];
public boolean publishFallbackEnable;
public SimulcastConfig() {
for (int i = 0; i &amp;lt; StreamLayerIndex.STREAM_LAYER_COUNT_MAX.getValue(); i++) {
configs[i] = new StreamLayerConfig();
}
this.publishFallbackEnable = false;
}
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraSimulcastConfig: NSObject
@property (copy, nonatomic, readonly) NSArray&amp;lt;AgoraStreamLayerConfig*&amp;gt;* _Nonnull configs;
@property (assign, nonatomic) BOOL publishFallbackEnable;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct SimulcastConfig {
  StreamLayerConfig configs[STREAM_LAYER_COUNT_MAX];
  bool publish_fallback_enable;
  SimulcastConfig(): publish_fallback_enable(false) {}
};</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since:</dt>
                <dd>Added since v4.6.0.</dd>
                </dlentry>
            </dl>
            <p>Used to configure multi-layer video stream, supporting dynamic disabling of certain video streams under poor network conditions or limited device performance to ensure the continuity of the main stream and the lowest resolution low-quality video stream.</p>
            </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="android cpp ios">
                <pt props="android">publishFallbackEnable</pt>
                <pt props="ios">publishFallbackEnable</pt>
                <pt props="cpp">publish_fallback_enable</pt>
                <pd props="android">Whether to enable multi-layer video stream fallback.
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>: Enabled. When the publishing client's performance or network condition is poor, the system dynamically disables multiple video streams in the order from <ph keyref="kRteAbrSubscriptionLayer1"/> to <ph keyref="kRteAbrSubscriptionLayer6"/>.</li>
                        <li><codeph><ph keyref="false"/></codeph>: (Default) Disabled. The system ensures that the main stream and the lowest-resolution auxiliary stream are retained even under poor network conditions or limited device performance, to guarantee basic video continuity.</li>
                        </ul>
                    </pd>
                <pd props="ios">Enable layered streaming fallback:
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>: Enables layered streaming fallback. When the performance or network condition of the publishing end is poor, the system dynamically disables multiple video streams in the order from layer1 to layer6.</li>
                        <li><codeph><ph keyref="false"/></codeph>: (Default) Disables layered streaming fallback.</li>
                        </ul>
                    </pd>
                <pd props="cpp">Whether to enable multi-layer video stream fallback.
                    <ul>
                        <li><codeph><ph keyref="true"/></codeph>: Enables multi-layer video stream fallback. When the publishing client's performance or network condition is poor, the system dynamically disables multiple video streams in the order from layer1 to layer6, retaining only the main stream and the lowest-resolution auxiliary stream to maintain basic video continuity.</li>
                        <li><codeph><ph keyref="false"/></codeph>: (Default) Disables multi-layer video stream fallback.</li>
                        </ul>
                    </pd>
            </plentry>
            </parml> </section>
            </refbody>
</reference>
