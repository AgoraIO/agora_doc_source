<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_simulcastconfig">
    <title><ph keyref="SimulcastConfig"/></title>
    <shortdesc id="short"><ph id="shortdesc">Configures multi-quality video stream layers.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class SimulcastConfig {
  final public StreamLayerConfig[] configs = new StreamLayerConfig[StreamLayerIndex.STREAM_LAYER_COUNT_MAX.getValue()];
  public boolean publishFallbackEnable;
  public boolean publishOnDemand;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility(&amp;quot;default&amp;quot;))) @interface AgoraSimulcastConfig: NSObject
@property (copy, nonatomic, readonly) NSArray&amp;lt;AgoraStreamLayerConfig*&amp;gt;* _Nonnull configs;
@property (assign, nonatomic) BOOL publishFallbackEnable;
@property (assign, nonatomic) BOOL publishOnDemand;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct SimulcastConfig {
  struct StreamLayerConfig {
    VideoDimensions dimensions;
    int framerate;
    bool enable;
    StreamLayerConfig() : dimensions(0, 0), framerate(0), enable(false) {}
  };
  StreamLayerConfig configs[STREAM_LAYER_COUNT_MAX];
  bool publish_fallback_enable;
  bool publish_on_demand;
  SimulcastConfig(): publish_fallback_enable(false), publish_on_demand(true) {}
};</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since:</dt>
                <dd>Available since v4.6.0.</dd>
                </dlentry>
            </dl>
            <p></p>
            </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="cpp">
                <pt props="cpp">enable</pt>
                <pd props="cpp">Specifies whether to enable the video stream of the corresponding layer. The default value is <codeph>false</codeph>.
                    <ul>
                        <li><codeph>true</codeph>: Enables the video stream of the corresponding layer.</li>
                        <li><codeph>false</codeph>: (Default) Disables the video stream of the corresponding layer.</li>
                        </ul>
                    </pd>
            </plentry>
            <plentry props="native">
                <pt props="android apple">publishFallbackEnable</pt>
                <pt props="cpp">publish_fallback_enable</pt>
                <pd props="android">Specifies whether to enable simulcast fallback.
                    <ul>
                        <li><codeph>true</codeph>: Enables simulcast fallback. When the publishing device experiences limited performance or poor network conditions, multiple video streams of different quality levels may be dynamically disabled in the order of layer1 → layer6. The system ensures that at least the main stream and the lowest-resolution auxiliary stream are retained to maintain basic video continuity.</li>
                        <li><codeph>false</codeph>: (Default) Disables simulcast fallback.</li>
                        </ul>
                    </pd>
                <pd props="apple">Specifies whether to enable simulcast fallback:
                    <ul>
                        <li><codeph>YES</codeph>: Enables simulcast fallback. When the publishing device experiences limited performance or poor network conditions, the system dynamically disables multiple video streams of different quality levels in the order of layer1 to layer6. The system retains the main stream and the lowest-resolution auxiliary stream to maintain basic video continuity.</li>
                        <li><codeph>NO</codeph>: (Default) Disables simulcast fallback.</li>
                        </ul>
                    </pd>
                <pd props="cpp">Specifies whether to enable simulcast fallback.
                    <ul>
                        <li><codeph>true</codeph>: Enables simulcast fallback. When the publishing device experiences limited performance or poor network conditions, the system dynamically disables multiple video streams in the order of layer1 → layer6. The system retains the main stream and the lowest-resolution auxiliary stream to maintain basic video continuity.</li>
                        <li><codeph>false</codeph>: (Default) Disables simulcast fallback.</li>
                        </ul>
                    </pd>
            </plentry>
            <plentry props="native">
                <pt props="android apple">publishOnDemand</pt>
                <pt props="cpp">publish_on_demand</pt>
                <pd props="android cpp">Specifies whether to enable on-demand publishing.
                    <ul>
                        <li><codeph>true</codeph>: (Default) Enables on-demand publishing. A simulcast layer is only published when it is requested by a subscriber.</li>
                        <li><codeph>false</codeph>: Disables on-demand publishing. All enabled simulcast layers are published regardless of whether they are requested.</li>
                        </ul>
                    </pd>
                <pd props="apple">Specifies whether to enable on-demand publishing:
                    <ul>
                        <li><codeph>YES</codeph>: (Default) Enables on-demand publishing. A simulcast layer is only published when it is requested by a subscriber.</li>
                        <li><codeph>NO</codeph>: Disables on-demand publishing. All enabled simulcast layers are published regardless of whether they are requested.</li>
                        </ul>
                    </pd>
            </plentry>
            </parml> </section>
            </refbody>
</reference>
