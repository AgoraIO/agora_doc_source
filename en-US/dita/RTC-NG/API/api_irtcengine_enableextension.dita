<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_enableextension">
    <title><ph keyref="enableExtension" /></title>
    <shortdesc id="short"><ph id="shortdesc">Enables or disables extensions.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="enableExtension" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int enableExtension(
      String provider, String extension, boolean enable, Constants.MediaSourceType sourceType);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract enableExtension(provider:string,extension:string,enable:boolean,extensionInfo:ExtensionInfo):number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)enableExtensionWithVendor:(NSString * __nonnull)provider
                       extension:(NSString * __nonnull)extension
                         enabled:(BOOL)enabled
                      sourceType:(AgoraMediaSourceType)sourceType NS_SWIFT_NAME(enableExtension(withVendor:extension:enabled:sourceType:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int enableExtension(const char* provider, const char* extension, bool enable=true, agora::media::MEDIA_SOURCE_TYPE type = agora::media::UNKNOWN_MEDIA_SOURCE) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int EnableExtension(FString provider, FString extension, bool enable = true, EMEDIA_SOURCE_TYPE type = EMEDIA_SOURCE_TYPE::UNKNOWN_MEDIA_SOURCE);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract enableExtension(
    provider: string,
    extension: string,
    enable?: boolean,
    type?: MediaSourceType
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int EnableExtension(string provider, string extension, bool enable = true, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract enableExtension(
    provider: string,
    extension: string,
    enable?: boolean,
    type?: MediaSourceType
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; enableExtension(
    {required String provider,
    required String extension,
    bool enable = true,
    MediaSourceType type = MediaSourceType.unknownMediaSource});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p/>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>Call timing</title>
            <p>Agora recommends that you call this method after joining a channel.</p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>Restrictions</title>
            <ul>
            <li>If you want to enable multiple extensions, you need to call this method multiple times.</li>
            <li>After a successful call of this method, you cannot load other extensions.</li>
            </ul>
        </section>
        <section id="related" deliveryTarget="details">
            <title>Related callbacks</title>
            <p>When this method is successfully called within the channel, it triggers <xref keyref="onExtensionStartedWithContext"/> or <xref keyref="onExtensionStoppedWithContext"/>.</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="setExtensionProperty/vendor">
                <pt />
                <pd />
            </plentry>
            <plentry conkeyref="setExtensionProperty/extension">
                <pt />
                <pd />
            </plentry>
            <plentry id="enable">
                <pt props="android cpp unreal bp unity rn electron flutter cs">enable</pt>
                <pt props="ios mac">enabled</pt>
                <pd>
                    <p>Whether to enable the extension:<ul id="ul_c3b_d22_3qb">
                    <li><codeph><ph keyref="true" /></codeph>: Enable the extension.</li>
                    <li><codeph><ph keyref="false" /></codeph>: Disable the extension.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry id="source">
                <pt props="cpp apple unreal bp unity rn electron flutter cs">type</pt>
                <pt props="android hmos">sourceType</pt>
                <pd>Source type of the extension. See <xref keyref="MEDIA_SOURCE_TYPE" />. </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp unity rn electron cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph><ul>
                <li>-3: The extension library is not loaded. Agora recommends that you check the storage location or the name of the dynamic library.</li>
                </ul>
            </li>
            </ul> </section>
    </refbody>
</reference>