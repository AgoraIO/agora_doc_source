<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_enableextension">
    <title><ph keyref="enableExtension" /></title>
    <shortdesc id="short"><ph id="shortdesc">Enables or disables extensions.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="enableExtension" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int enableExtension(String provider, String extension, boolean enable);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)enableExtensionWithVendor:(NSString * __nonnull)provider extension:(NSString * __nonnull)extension enabled:(BOOL)enabled;
                </codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int enableExtension(
                    const char* provider, const char* extension, bool enable=true, agora::media::MEDIA_SOURCE_TYPE type = agora::media::UNKNOWN_MEDIA_SOURCE) = 0;
                </codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract enableExtension(
    provider: string,
    extension: string,
    enable?: boolean,
    type?: MediaSourceType
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int EnableExtension(string provider, string extension, bool enable = true, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract enableExtension(
    provider: string,
    extension: string,
    enable?: boolean,
    type?: MediaSourceType
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; enableExtension(
    {required String provider,
    required String extension,
    bool enable = true,
    MediaSourceType type = MediaSourceType.unknownMediaSource});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>To call this method, call it immediately after initializing the <xref keyref="IRtcEngine" /> object.</p>
            <note>
                <ul>
            <li>If you want to enable multiple extensions, you need to call this method multiple times.</li>
            <li>The data processing order of different extensions in the SDK is determined by the order in which the extensions are enabled. That is, the extension that is enabled first will process the data first.</li>
            </ul> </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="setExtensionProperty/vendor">
                <pt />
                <pd />
            </plentry>
            <plentry conkeyref="setExtensionProperty/extension">
                <pt />
                <pd />
            </plentry>
            <plentry id="enable">
                <pt props="android cpp unreal bp unity rn electron flutter cs">enable</pt>
                <pt props="ios mac">enabled</pt>
                <pd>
                    <p>Whether to enable the extension:<ul id="ul_c3b_d22_3qb">
                    <li><codeph><ph keyref="true" /></codeph>: Enable the extension.</li>
                    <li><codeph><ph keyref="false" /></codeph>: Disable the extension.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry id="source" props="cpp unreal bp unity rn electron flutter cs">
                    <pt>type</pt>
                    <pd>Type of media source. See <xref keyref="MEDIA_SOURCE_TYPE" />.<note type="attention">In this method, this parameter supports only the following two settings:<ul>
                        <li>The default value is <apiname keyref="UNKNOWN_MEDIA_SOURCE" />.</li>
                        <li>If you want to use the second camera to capture video, set this parameter to <apiname keyref="SECONDARY_CAMERA_SOURCE" />.</li>
                        </ul></note></pd>
                </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title" /></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException" /> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul>
            <li props="native unreal bp unity rn electron cs">0: Success.</li>
            <li>&lt; 0: Failure.<ul>
                <li>-3: The extension library is not loaded. Agora recommends that you check the storage location or the name of the dynamic library.</li>
                </ul>
            </li>
            </ul> </section>
    </refbody>
</reference>