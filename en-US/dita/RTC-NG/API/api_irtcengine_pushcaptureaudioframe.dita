<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_pushcaptureaudioframe">
    <title><ph keyref="pushCaptureAudioFrame1" /></title>
    <shortdesc id="short"><ph id="shortdesc">Pushes external audio frames. The frames will not be processed by the echo cancellation module of the SDK.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="pushCaptureAudioFrame1" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int pushCaptureAudioFrame(byte[] data, int lengthInByte);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)pushCaptureAudioFrame:(AgoraAudioFrame* _Nonnull)audioFrame;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int pushCaptureAudioFrame(IAudioFrameObserver::AudioFrame* frame) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract pushCaptureAudioFrame(frame: AudioFrame): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp" />
            <codeblock props="rn" outputclass="language-typescript">abstract pushCaptureAudioFrame(frame: AudioFrame): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; pushCaptureAudioFrame(AudioFrame frame);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>The local user can call <apiname keyref="pushCaptureAudioFrame1" /> to publish local audio streams. Note that the audio streams will not be processed by the echo cancellation module of the SDK. To ensure the local user will not hear an echo, the remote users need to call <xref keyref="pullAudioFrame" /> and <xref keyref="pushReverseAudioFrame1" /> in sequence to send the audio streams captured together with the streams received to the echo cancellation module.</p>
            <note type="attention">Call this method after calling <xref keyref="enableEchoCancellationExternal" /> and <xref keyref="joinChannel2" />.</note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry props="cpp unreal bp ios mac" conkeyref="pushReverseAudioFrame1/frame">
                <pt />
                <pd />
            </plentry>
            <plentry props="android" conkeyref="pushReverseAudioFrame1/data">
                <pt />
                <pd />
            </plentry>
            <plentry props="android" conkeyref="pullAudioFrame/length">
                <pt />
                <pd />
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown; and you need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul>
            <li props="native unreal bp unity rn electron cs">0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>