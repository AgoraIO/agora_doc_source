<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_transcodingvideostream">
    <title><ph keyref="TranscodingVideoStream" /></title>
    <shortdesc id="short"><ph id="shortdesc">The video streams for local video mixing.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static class TranscodingVideoStream {
  public Constants.VideoSourceType sourceType;
  public int remoteUserUid;
  public String imageUrl;
  public int mediaPlayerId;
  public int x;
  public int y;
  public int width;
  public int height;
  public int zOrder;
  public double alpha;
  public boolean mirror;
  public TranscodingVideoStream() {
    this.sourceType = Constants.VideoSourceType.VIDEO_SOURCE_CAMERA_PRIMARY;
    this.remoteUserUid = 0;
    this.imageUrl = null;
    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
    this.zOrder = 0;
    this.alpha = 1.0;
    this.mirror = false;
  }
};</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraTranscodingVideoStream: NSObject
@property (assign, nonatomic) AgoraVideoSourceType sourceType;
@property (assign, nonatomic) NSUInteger remoteUserUid;
@property (copy, nonatomic) NSString * _Nullable imageUrl;
@property(assign, nonatomic) NSUInteger mediaPlayerId;
@property (assign, nonatomic) CGRect rect;
@property (assign, nonatomic) NSInteger zOrder;
@property(assign, nonatomic) double alpha;
@property(assign, nonatomic) BOOL mirror;
@end</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">struct TranscodingVideoStream {
  VIDEO_SOURCE_TYPE sourceType;
  uid_t remoteUserUid;
  const char* imageUrl;
  int mediaPlayerId;
  int x;
  int y;
  int width;
  int height;
  int zOrder;
  double alpha;
  bool mirror;
  TranscodingVideoStream()
    : sourceType(VIDEO_SOURCE_CAMERA_PRIMARY),
      remoteUserUid(0),
      imageUrl(NULL),
      x(0),
      y(0),
      width(0),
      height(0),
      zOrder(0),
      alpha(1.0),
      mirror(false) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class TranscodingVideoStream {

  sourceType?: VideoSourceType;

  remoteUserUid?: number;

  imageUrl?: string;

  mediaPlayerId?: number;

  x?: number;

  y?: number;

  width?: number;

  height?: number;

  zOrder?: number;

  alpha?: number;

  mirror?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">
    public class TranscodingVideoStream
    {
        public VIDEO_SOURCE_TYPE sourceType;
        public uint remoteUserUid;
        public string imageUrl;
        public int mediaPlayerId;
        public int x;
        public int y;
        public int width;
        public int height;
        public int zOrder;
        public double alpha;
        public bool mirror;
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class TranscodingVideoStream {

  sourceType?: VideoSourceType;

  remoteUserUid?: number;

  imageUrl?: string;

  mediaPlayerId?: number;

  x?: number;

  y?: number;

  width?: number;

  height?: number;

  zOrder?: number;

  alpha?: number;

  mirror?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class TranscodingVideoStream {
  const TranscodingVideoStream(
      {this.sourceType,
      this.remoteUserUid,
      this.imageUrl,
      this.mediaPlayerId,
      this.x,
      this.y,
      this.width,
      this.height,
      this.zOrder,
      this.alpha,
      this.mirror});

  @JsonKey(name: 'sourceType')
  final VideoSourceType? sourceType;

  @JsonKey(name: 'remoteUserUid')
  final int? remoteUserUid;

  @JsonKey(name: 'imageUrl')
  final String? imageUrl;

  @JsonKey(name: 'mediaPlayerId')
  final int? mediaPlayerId;

  @JsonKey(name: 'x')
  final int? x;

  @JsonKey(name: 'y')
  final int? y;

  @JsonKey(name: 'width')
  final int? width;

  @JsonKey(name: 'height')
  final int? height;

  @JsonKey(name: 'zOrder')
  final int? zOrder;

  @JsonKey(name: 'alpha')
  final double? alpha;

  @JsonKey(name: 'mirror')
  final bool? mirror;

  factory TranscodingVideoStream.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$TranscodingVideoStreamFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$TranscodingVideoStreamToJson(this);
}</codeblock> </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>sourceType</pt>
                <pd>The video source type for local video mixing. See <xref keyref="VIDEO_SOURCE_TYPE" />.</pd>
            </plentry>
            <plentry>
                <pt>remoteUserUid</pt>
                <pd>
                    <p>The user ID of the remote user.</p>
                    <note type="attention">Use this parameter only when the source type is <apiname keyref="VIDEO_SOURCE_REMOTE" /> for local video mixing.</note></pd>
            </plentry>
            <plentry>
                <pt>imageUrl</pt>
                <pd>
                    <p>The URL of the image.<note type="attention">Use this parameter only when the source type is the image for local video mixing.</note></p>
                </pd>
            </plentry>
            <plentry>
                <pt>mediaPlayerId</pt>
                <pd>(Optional) Media player ID. Use the parameter only when you set <parmname>sourceType</parmname> to <apiname keyref="VIDEO_SOURCE_MEDIA_PLAYER" />.</pd>
            </plentry>
            <plentry props="cpp unreal bp android unity cs electron rn flutter">
                <pt>x</pt>
                <pd>The relative lateral displacement of the top left corner of the video for local video mixing to the origin (the top left corner of the canvas).</pd>
            </plentry>
            <plentry props="cpp unreal bp android unity cs electron rn flutter">
                <pt>y</pt>
                <pd>The relative longitudinal displacement of the top left corner of the captured video to the origin (the top left corner of the canvas).</pd>
            </plentry>
            <plentry props="cpp unreal bp android unity cs electron rn flutter">
                <pt>width</pt>
                <pd>The width (px) of the video for local video mixing on the canvas.</pd>
            </plentry>
            <plentry props="cpp unreal bp android unity cs electron rn flutter">
                <pt>height</pt>
                <pd>The height (px) of the video for local video mixing on the canvas.</pd>
            </plentry>
            <plentry props="ios mac">
                <pt>rect</pt>
                <pd>The relative position and size of the video for local video mixing to the origin (the top left corner of the canvas). The data type is CGRect.</pd>
            </plentry>
            <plentry>
                <pt>zOrder</pt>
                <pd>The number of the layer to which the video for the local video mixing belongs. The value range is [0, 100].<ul>
                    <li>0: (Default) The layer is at the bottom.</li>
                    <li>100: The layer is at the top.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>alpha</pt>
                <pd>The transparency of the video for local video mixing. The value range is [0.0, 1.0]. 0.0 indicates that the video is completely transparent, and 1.0 indicates that it is opaque.</pd>
            </plentry>
            <plentry>
                <pt>mirror</pt>
                <pd>Whether to mirror the video for the local video mixing.<ul>
                    <li><codeph><ph keyref="true" /></codeph>: Mirror the video for the local video mixing.</li>
                    <li><codeph><ph keyref="false" /></codeph>: (Default) Do not mirror the video for the local video mixing.</li>
                    </ul>
                    <note type="attention">This parameter only takes effect on video source types that are cameras.</note></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>