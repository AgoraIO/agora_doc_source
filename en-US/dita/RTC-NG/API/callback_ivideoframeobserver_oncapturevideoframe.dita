<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_oncapturevideoframe">
    <title><ph keyref="onCaptureVideoFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs each time the SDK receives a video frame captured by the local camera.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onCaptureVideoFrame"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">boolean onCaptureVideoFrame(VideoFrame videoFrame);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)onCaptureVideoFrame:(AgoraOutputVideoFrame * _Nonnull)videoFrame;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual bool onCaptureVideoFrame(VideoFrame&amp; videoFrame) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity" outputclass="language-csharp">public virtual bool OnCaptureVideoFrame(VideoFrame videoFrame, VideoFrameBufferConfig config)
        {
            return true;
        }</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc">
            <p>After you successfully register the video frame observer, the SDK triggers this callback each time it receives a video frame. In this callback, you can get the video data captured by the local camera. You can then pre-process the data according to your scenarios.</p>
            <p>After pre-processing, you can send the processed video data back to the SDK by this callback.</p>
            <note type="attention" id="note">The video data that this callback gets has not been pre-processed, without the watermark, the cropped content, the rotation, and the image enhancement.</note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry id="videoframe">
                <pt>videoFrame</pt>
                <pd><ph>The video frame. </ph><ph props="cpp ios mac unity">See <xref keyref="VideoFrame"/>.</ph></pd>
            </plentry>
                <plentry props="unity" id="config">
                    <pt>config</pt>
                    <pd>The configuration of the video frame, see <xref keyref="VideoFrameBufferConfig"/>.</pd>
                </plentry>
            </parml> </section>
        <section id="return_values">
            <title>Returns</title>
            <p id="return">
            <ul>
            <li>When the video processing mode is <apiname keyref="PROCESS_MODE_READ_ONLY"/>:<ul>
                <li><codeph><ph keyref="true"/></codeph>:The SDK ignores this return value.</li>
                <li><codeph><ph keyref="false"/></codeph>:The SDK ignores this return value.</li>
                </ul></li>
            <li>When the video processing mode is <apiname keyref="PROCESS_MODE_READ_WRITE"/>:<ul>
                <li><codeph><ph keyref="true"/></codeph>: Sets the SDK to receive the video frame.</li>
                <li><codeph><ph keyref="false"/></codeph>: Sets the SDK to discard the video frame.</li>
                </ul></li>
            </ul></p>
        </section>
    </refbody>
</reference>
