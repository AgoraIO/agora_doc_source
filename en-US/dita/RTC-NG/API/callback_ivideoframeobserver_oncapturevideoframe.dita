<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_oncapturevideoframe">
    <title><ph keyref="onCaptureVideoFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs each time the SDK receives a video frame captured by local devices.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onCaptureVideoFrame"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">boolean onCaptureVideoFrame(int sourceType, VideoFrame videoFrame);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)onCaptureVideoFrame:(AgoraOutputVideoFrame * _Nonnull)videoFrame sourceType:(AgoraVideoSourceType)sourceType;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual bool onCaptureVideoFrame(agora::rtc::VIDEO_SOURCE_TYPE sourceType, VideoFrame&amp; videoFrame) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnCaptureVideoFrame, EVIDEO_SOURCE_TYPE, sourceType, const FVideoFrame&amp;, videoFrame);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">onCaptureVideoFrame?(
    sourceType: VideoSourceType,
    videoFrame: VideoFrame
  ): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual bool OnCaptureVideoFrame(VIDEO_SOURCE_TYPE sourceType, VideoFrame videoFrame)</codeblock>
            <codeblock props="rn" outputclass="language-typescript">onCaptureVideoFrame?(
    sourceType: VideoSourceType,
    videoFrame: VideoFrame
  ): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(VideoSourceType sourceType, VideoFrame videoFrame)?
      onCaptureVideoFrame;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p props="native unreal bp unity cs">You can get raw video data collected by the local device through this callback and preprocess it as needed. Once the preprocessing is complete, you can directly modify <parmname>videoFrame</parmname> in this callback, and set the return value to <codeph><ph keyref="true"/></codeph> to send the modified video data to the SDK.</p>
            <p props="native unreal bp">If you need to send the preprocessed data to the SDK, you need to call <xref keyref="getVideoFrameProcessMode"/><codeph>(0)</codeph> first to set the video processing mode to read and write mode.</p>
            <p props="flutter rn electron">You can get raw video data collected by the local device through this callback.</p>
        </section>
        <section id="scenario" deliveryTarget="details">
            <title>Applicable scenarios</title>
            <ul>
            <li props="native unreal bp unity electron rn cs">Preprocess the locally collected video data before it is processed by the SDK. For example, get video data through this callback and process it with filters, watermarks, cropping, rotation, etc.</li>
            <li>Get information about the locally collected video data before it is processed by the SDK. For example, the original width, height, frame rate of the video frame, etc.</li></ul>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>Trigger timing</title>
            <p>After the successful registration of the video data observer, each time the SDK captures a video frame.</p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>Restrictions</title>
            <ul>
                <li>The video data you get here is the raw video data, that is, video data that has not undergone preprocessing such as watermarking, cropping, and rotation.</li>
                <li>If the video data type you get is RGBA, the SDK does not support processing the data of the alpha channel.</li>
                <li props="flutter rn electron">Due to framework limitations, this callback does not support sending processed video data back to the SDK.</li>
            </ul>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
                <plentry>
                    <pt>sourceType</pt>
                    <pd>Video source types, including cameras, screens, or media player. See <xref keyref="VIDEO_SOURCE_TYPE"/>.</pd>
                </plentry>
            <plentry id="videoframe">
                <pt>videoFrame</pt>
                <pd>The video frame. See <xref keyref="VideoFrame"/>.<note>The default value of the video frame data format obtained through this callback is as follows:<ul>
                        <li props="android cpp unreal bp rn unity flutter">Android: I420 or RGB (GLES20.GL_TEXTURE_2D)</li>
                        <li props="ios cpp unreal bp rn unity flutter">iOS: I420 or CVPixelBufferRef</li>
                        <li props="mac cpp unreal bp electron unity flutter">macOS: I420 or CVPixelBufferRef</li>
                        <li props="cpp unreal bp electron unity flutter cs">Windows: YUV420</li></ul></note></pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native unreal bp unity cs">
            <title>Returns</title>
            <p id="return">
            <ul>
            <li props="native unreal bp">When the video processing mode is <apiname keyref="PROCESS_MODE_READ_ONLY"/>:<ul>
                <li><codeph><ph keyref="true"/></codeph>: Reserved for future use.</li>
                <li><codeph><ph keyref="false"/></codeph>: Reserved for future use.</li>
                </ul></li>
            <li props="native unreal bp">When the video processing mode is <apiname keyref="PROCESS_MODE_READ_WRITE"/>:<ul>
                <li><codeph><ph keyref="true"/></codeph>: Sets the SDK to receive the video frame.</li>
                <li><codeph><ph keyref="false"/></codeph>: Sets the SDK to discard the video frame.</li>
                </ul></li>
            </ul>
            <ul props="unity cs">
            <li><codeph><ph keyref="true"/></codeph>: Sets the SDK to receive the video frame.</li>
            <li><codeph><ph keyref="false"/></codeph>: Sets the SDK to discard the video frame.</li>
            </ul></p>
        </section>
    </refbody>
</reference>
