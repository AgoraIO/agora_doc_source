<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startaudiorecording2">
    <title><ph keyref="startAudioRecording2"/></title>
    <shortdesc id="short"><ph id="shortdesc">Starts audio recording on the client and sets the sample rate of recording.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startAudioRecording2"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="ios mac" outputclass="language-objectivec"/>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int startAudioRecording(const char* filePath,
    int sampleRate,
    AUDIO_RECORDING_QUALITY_TYPE quality) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StartAudioRecording(string filePath, int sampleRate, AUDIO_RECORDING_QUALITY_TYPE quality);</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
           <codeblock props="flutter" outputclass="language-dart"/>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>The Agora SDK allows recording during a call. After successfully calling this method, you can record the audio of all the users in the channel and get an audio recording file. Supported formats of the recording file are as follows:<ul>
            <li>.wav: Large file size with high fidelity.</li>
            <li>.aac: Small file size with low fidelity.</li>
            </ul> </p>
            <note type="attention">
            <ul>
            <li>Ensure that the directory you use to save the recording file exists and is writable.</li>
            <li>This method should be called after the <apiname keyref="joinChannel2"/> method. The recording automatically stops when you call the <xref keyref="leaveChannel2"/> method.</li>
            <li>For better recording effects, set <parmname>quality</parmname> to <apiname keyref="AUDIO_RECORDING_QUALITY_MEDIUM"/> or <apiname keyref="AUDIO_RECORDING_QUALITY_HIGH"/> when <parmname>sampleRate</parmname> is 44.1 kHz or 48 kHz.</li>
            </ul> </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="AudioRecordingConfiguration/filepath">
                <pt/>
                <pd/>
            </plentry>
            <plentry>
                <pt>sampleRate</pt>
                <pd>
                    <p>The sample rate (kHz) of the recording file. Supported values are as follows:<ul>
                    <li>16000</li>
                    <li>(Default) 32000</li>
                    <li>44100</li>
                    <li>48000</li>
                    </ul> </p>
                </pd>
            </plentry>
            <plentry>
                <pt>quality</pt>
                <pd>Recording quality. See <xref keyref="AUDIO_RECORDING_QUALITY_TYPE"/>.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native unreal bp electron unity rn cs">
            <title>Returns</title>
            <ul>
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
