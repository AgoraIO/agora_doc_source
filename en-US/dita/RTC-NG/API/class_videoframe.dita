<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videoframe">
    <title><ph keyref="VideoFrame" /></title>
    <shortdesc id="short"><ph id="shortdesc">Video frame information.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraOutputVideoFrame : NSObject
@property (nonatomic, assign) NSInteger type;
@property (nonatomic, assign) int width;
@property (nonatomic, assign) int height;
@property (nonatomic, assign) int yStride;
@property (nonatomic, assign) int uStride;
@property (nonatomic, assign) int vStride;
@property (nonatomic, assign) uint8_t* _Nullable yBuffer;
@property (nonatomic, assign) uint8_t* _Nullable uBuffer;
@property (nonatomic, assign) uint8_t* _Nullable vBuffer;
@property (nonatomic, assign) int rotation;
@property (nonatomic, assign) int64_t renderTimeMs;
@property (nonatomic, assign) int avSyncType;
@property(assign, nonatomic) CVPixelBufferRef _Nullable pixelBuffer;

@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct VideoFrame {
  VideoFrame():
  type(VIDEO_PIXEL_DEFAULT),
  width(0),
  height(0),
  yStride(0),
  uStride(0),
  vStride(0),
  yBuffer(NULL),
  uBuffer(NULL),
  vBuffer(NULL),
  rotation(0),
  renderTimeMs(0),
  avsync_type(0),
  VIDEO_PIXEL_FORMAT type;
  int width;
  int height;
  int yStride;
  int uStride;
  int vStride;
  uint8_t* yBuffer;
  uint8_t* uBuffer;
  uint8_t* vBuffer;
  int rotation;
  int64_t renderTimeMs;
  int avsync_type;
};
</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class VideoFrame {
  
  type?: VideoPixelFormat;
  
  width?: number;
  
  height?: number;
  
  yStride?: number;
  
  uStride?: number;
  
  vStride?: number;
  
  yBuffer?: Uint8Array;
  
  uBuffer?: Uint8Array;
  
  vBuffer?: Uint8Array;
  
  rotation?: number;
  
  renderTimeMs?: number;
  
  avsync_type?: number;
  
  metadata_buffer?: Uint8Array;
  
  metadata_size?: number;
  
  textureId?: number;
  
  matrix?: number[];
  
  alphaBuffer?: Uint8Array;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class VideoFrame
    {
        public VideoFrame()
        {
            type = VIDEO_PIXEL_FORMAT.VIDEO_PIXEL_UNKNOWN;
            width = 0;
            height = 0;
            yStride = 0;
            uStride = 0;
            vStride = 0;
            yBuffer = new byte[0];
            uBuffer = new byte[0];
            vBuffer = new byte[0];
            rotation = 0;
            renderTimeMs = 0;
            avsync_type = 0;

        }
        public VIDEO_PIXEL_FORMAT type;
        public int width;
        public int height;
        public int yStride;
        public int uStride;
        public int vStride; 
        public byte[] yBuffer;
        public byte[] uBuffer;
        public byte[] vBuffer;
        public int rotation;
        public long renderTimeMs;
        public int avsync_type;
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoFrame {
  
  type?: VideoPixelFormat;
  
  width?: number;
  
  height?: number;
  
  yStride?: number;
  
  uStride?: number;
  
  vStride?: number;
  
  yBuffer?: Uint8Array;
  
  uBuffer?: Uint8Array;
  
  vBuffer?: Uint8Array;
  
  rotation?: number;
  
  renderTimeMs?: number;
  
  avsync_type?: number;
  
  metadata_buffer?: Uint8Array;
  
  metadata_size?: number;
  
  textureId?: number;
  
  matrix?: number[];
  
  alphaBuffer?: Uint8Array;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">There are no corresponding names available</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <p>The video data format is YUV420. The buffer provides a pointer to a pointer. This interface cannot modify the pointer of the buffer but can modify the content of the buffer.</p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>type</pt>
                <pd props="cpp unity" conkeyref="ExternalVideoFrame/windows-format" />
                <pd props="ios mac" conkeyref="ExternalVideoFrame/oc-format" />
            </plentry>
            <plentry>
                <pt>width</pt>
                <pd>Video pixel width.</pd>
            </plentry>
            <plentry>
                <pt>height</pt>
                <pd>Video pixel height.</pd>
            </plentry>
            <plentry>
                <pt>yStride</pt>
                <pd>For YUV data, the line span of the Y buffer; for RGBA data, the total data length.</pd>
            </plentry>
            <plentry>
                <pt>uStride</pt>
                <pd>For YUV data, the line span of the U buffer; for RGBA data, the value is 0.</pd>
            </plentry>
            <plentry>
                <pt>vStride</pt>
                <pd>For YUV data, the line span of the V buffer; for RGBA data, the value is 0.</pd>
            </plentry>
            <plentry>
                <pt>yBuffer</pt>
                <pd>For YUV data, the pointer to the Y buffer; for RGBA data, the data buffer.</pd>
            </plentry>
            <plentry>
                <pt>uBuffer</pt>
                <pd>For YUV data, the pointer to the U buffer; for RGBA data, the value is NULL.</pd>
            </plentry>
            <plentry>
                <pt>vBuffer</pt>
                <pd>For YUV data, the pointer to the V buffer; for RGBA data, the value is 0.</pd>
            </plentry>
            <plentry>
                <pt>rotation</pt>
                <pd>The clockwise rotation angle of the video frame before rendering. The supported values are 0, 90, 180, or 270 degrees.</pd>
            </plentry>
            <plentry>
                <pt>renderTimeMs</pt>
                <pd>The Unix timestamp (ms) when the video frame is rendered. This timestamp can be used to guide the rendering of the video frame. It is required.</pd>
            </plentry>
            <plentry>
                <pt>avsync_type</pt>
                <pd>Reserved for future use.</pd>
            </plentry>
            <plentry props="ios mac">
                <pt>pixelBuffer</pt>
                <pd>Fills the data to CVPixelBuffer.</pd>
            </plentry>
            <plentry props="hide">
                <pt>alphaBuffer</pt>
                <pd>
                    <p>Indicates the output data of the portrait segmentation algorithm, which is consistent with the size of the video frame. The value range of each pixel is [0,255], where 0 represents the background; 255 represents the foreground (portrait).</p>
                    <p>In the costom video renderer scenario, you can use this parameter to render the video background into various effects, such as: transparent, solid color, picture, video and so on.<note>You can <xref keyref="ticket-link" /> to activate this parameter.</note></p>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>