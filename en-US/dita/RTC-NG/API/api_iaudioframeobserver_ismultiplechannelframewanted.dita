<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_iaudioframeobserver_ismultiplechannelframewanted">
    <title><ph keyref="isMultipleChannelFrameWanted_IAudioFrameObserver" /></title>
    <shortdesc id="short"><ph id="shortdesc">Determines whether to receive audio data from multiple channels.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="isMultipleChannelFrameWanted_IAudioFrameObserver" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java" />
                <codeblock props="ios mac" outputclass="language-objectivec" />
                <codeblock props="cpp" outputclass="language-cpp">virtual bool isMultipleChannelFrameWanted() { return false; }</codeblock>
                <codeblock props="electron" outputclass="language-typescript" />
                <codeblock props="unity" outputclass="language-csharp">public virtual bool IsMultipleChannelFrameWanted()
        {
            return true;
        }</codeblock>
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart" />
        </p>
        </section>
        <section id="detailed_desc">
   
       <dl outputclass="since">
  <dlentry>
      <dt>Since</dt>
      <dd>v3.0.1</dd>
  </dlentry>
       </dl>
   <p>After you register the audio frame observer, the SDK triggers this callback every time it captures an audio frame.</p>
   <p>In the multi-channel scenario, if you want to get audio data from multiple channels, set the return value of this callback as <ph keyref="true" />. After that, the SDK triggers the <xref keyref="onPlaybackAudioFrameBeforeMixingEx" /> callback to send you the before-mixing audio frame from various channels. You can also get the channel ID of each audio frame.</p>
   <note type="attention">
       <ul>
  <li>Once you set the return value of the callback as <ph keyref="true" />, the SDK triggers only the <apiname keyref="onPlaybackAudioFrameBeforeMixingEx" /> callback to send the audio data. <xref keyref="onPlaybackAudioFrameBeforeMixing" /> will not be triggered. In the multi-channel scenario, Agora recommends setting the return value as <ph keyref="true" />.</li>
  <li>If you set the return value of this callback as <ph keyref="false" />, the SDK triggers only the <apiname keyref="onPlaybackAudioFrameBeforeMixing" /> callback to send the audio data.</li>
       </ul>
   </note>
        </section>
        <section id="return_values">
   <title>Returns</title>
   <ul>
       <li><codeph><ph keyref="true" /></codeph>: Receive audio data from multiple channels.</li>
       <li><codeph><ph keyref="false" /></codeph>: Do not receive audio data from multiple channels.</li>
   </ul>
        </section></refbody>
</reference>