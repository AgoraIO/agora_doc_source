<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_registermediametadataobserver">
    <title><ph keyref="registerMediaMetadataObserver" /></title>
    <shortdesc id="short"><ph id="shortdesc">Registers the metadata observer.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="registerMediaMetadataObserver" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int registerMediaMetadataObserver(IMetadataObserver observer, int type);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)setMediaMetadataDelegate:(id&lt;AgoraMediaMetadataDelegate&gt; _Nullable)metadataDelegate withType:(AgoraMetadataType)type;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int registerMediaMetadataObserver(IMetadataObserver *observer, IMetadataObserver::METADATA_TYPE type) = 0;
</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int RegisterMediaMetadataObserver(UIMetadataObserver* observer, FENUMWRAP_METADATA_TYPE type);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract registerMediaMetadataObserver(
    observer: IMetadataObserver,
    type: MetadataType
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int RegisterMediaMetadataObserver(IMetadataObserver observer, METADATA_TYPE type);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract registerMediaMetadataObserver(
    observer: IMetadataObserver,
    type: MetadataType
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">void registerMediaMetadataObserver(
      {required MetadataObserver observer, required MetadataType type});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>You need to implement the <xref keyref="IMetadataObserver" /> class and specify the metadata type in this method. This method enables you to add synchronized metadata in the video stream for more diversified
 live interactive streaming, such as sending shopping links, digital coupons, and online quizzes.</p>
            <p props="native unreal bp cs">A successful call of this method triggers the <xref keyref="getMaxMetadataSize" /> callback.</p>
            <note type="attention">Call this method before <apiname keyref="joinChannel2" />.</note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>observer</pt>
                <pd>The metadata observer. See <xref keyref="IMetadataObserver" />.</pd>
            </plentry>
            <plentry id="metadatatype">
                <pt>type</pt>
                <pd>
                    <p>The metadata type. The SDK currently only supports <apiname keyref="VIDEO_METADATA" />. <ph props="ios mac cpp unreal bp unity rn electron cs">See <xref keyref="METADATA_TYPE" />.</ph></p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul>
                <li props="native unreal bp rn unity electron cs">0: Success.</li>
                <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul>
        </section>
    </refbody>
</reference>
