<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_datastreamconfig">
    <title><ph keyref="DataStreamConfig" /></title>
    <shortdesc id="short"><ph id="shortdesc">The configurations for the data stream.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock" props="rtc-ng">
            <codeblock props="unity" outputclass="language-csharp">public class DataStreamConfig
    {
        public DataStreamConfig()
        {
        }
        public DataStreamConfig(bool syncWithAudio, bool ordered)
        {
            this.syncWithAudio = syncWithAudio;
            this.ordered = ordered;
        }
        public bool syncWithAudio { set; get; }
        public bool ordered { set; get; }
       </codeblock> </p>
            <p outputclass="codeblock" props="rtc">
            <codeblock props="unity" outputclass="language-csharp">struct DataStreamConfig {
    bool syncWithAudio;
    bool ordered;
    };</codeblock></p>
    <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class DataStreamConfig {
  public boolean syncWithAudio = false;
  public boolean ordered = false;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraDataStreamConfig: NSObject
@property (assign, nonatomic) BOOL ordered;
@property (assign, nonatomic) BOOL syncWithAudio;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct DataStreamConfig {
    bool syncWithAudio;
    bool ordered;
    };</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export interface DataStreamConfig {
  syncWithAudio: boolean;
  ordered: boolean;
}</codeblock>
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart">class DataStreamConfig {
 
  bool syncWithAudio;
  bool ordered;

  DataStreamConfig(
    this.syncWithAudio,
    this.ordered,
  );

  factory DataStreamConfig.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$DataStreamConfigFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$DataStreamConfigToJson(this);
}</codeblock> </p>
        </section>
        <section id="detailed_desc">
   
   <p>The following table shows the SDK behaviors under different parameter settings:</p>
   <table id="table_uxz_bjk_t4b">
       <tgroup cols="3">
  <colspec colnum="1" colname="col1" />
  <colspec colnum="2" colname="col2" />
  <colspec colnum="3" colname="col3" />
           <thead>
               <row>
                   <entry><codeph>syncWithAudio</codeph></entry>
                   <entry><codeph>ordered</codeph></entry>
                   <entry>SDK behaviors</entry>
               </row>
           </thead>
           <tbody>
      <row>
 <entry><codeph><ph keyref="false" /></codeph></entry>
 <entry><codeph><ph keyref="false" /></codeph></entry>
 <entry>The SDK triggers the <xref keyref="onStreamMessage" /> callback immediately after the receiver receives a data packet.</entry>
      </row>
      <row>
 <entry><codeph><ph keyref="true" /></codeph></entry>
 <entry><codeph><ph keyref="false" /></codeph></entry>
 <entry>If the data packet delay is within the audio delay, the SDK triggers the <ph keyref="onStreamMessage" /> callback when the synchronized audio packet is played out. If the data packet delay exceeds the audio delay, the SDK triggers the <ph keyref="onStreamMessage" /> callback as soon as the data packet is received.</entry>
      </row>
      <row>
 <entry><codeph><ph keyref="false" /></codeph></entry>
 <entry><codeph><ph keyref="true" /></codeph></entry>
 <entry>If the delay of a data packet is less than five seconds, the SDK corrects the order of the data packet. If the delay of a data packet exceeds five seconds, the SDK discards the data packet.</entry>
      </row>
      <row>
 <entry><codeph><ph keyref="true" /></codeph></entry>
 <entry><codeph><ph keyref="true" /></codeph></entry>
 <entry>If the delay of the data packet is within the range of the audio delay, the SDK corrects the order of the data packet. If the delay of a data packet exceeds the audio delay, the SDK discards this data packet.</entry>
      </row>
  </tbody>
       </tgroup>
   </table>
   
        </section>
        <section id="parameters">
   <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
   <parml>
       <plentry>
  <pt>syncWithAudio</pt>
  <pd>
                        <p>Whether to synchronize the data packet with the published audio packet.<ul>
                                <li><codeph><ph keyref="true" /></codeph>: Synchronize the data packet with the audio packet.</li>
                                <li><codeph><ph keyref="false" /></codeph>: Do not synchronize the data packet with the audio packet.</li>
                            </ul>When you set the data packet to synchronize with the audio, then if the data packet delay is within the audio delay, the SDK triggers the <xref keyref="onStreamMessage" /> callback when the synchronized audio packet is played out. Do not set this parameter as <ph keyref="true" /> if you need the receiver to receive the data packet immediately. Agora recommends that you set this parameter to `true` only when you need to implement specific functions, for example lyric synchronization.</p>
                    </pd>
       </plentry>
       <plentry>
  <pt>ordered</pt>
  <pd>
                        <p>Whether the SDK guarantees that the receiver receives the data in the sent order.<ul>
                                <li><codeph><ph keyref="true" /></codeph>: Guarantee that the receiver receives the data in the sent order.</li>
                                <li><codeph><ph keyref="false" /></codeph>: Do not guarantee that the receiver receives the data in the sent order.</li>
                            </ul>Do not set this parameter as <codeph><ph keyref="true" /></codeph> if you need the receiver to receive the data packet immediately.</p>
                    </pd>
       </plentry>
   </parml>
        </section></refbody>
</reference>