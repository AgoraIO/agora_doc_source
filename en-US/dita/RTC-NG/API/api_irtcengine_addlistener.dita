<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_addlistener">
    <title><ph keyref="addListener" /></title>
    <shortdesc id="short"><ph id="shortdesc">Adds one <xref keyref="IRtcEngineEvent" /> listener.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="addListener" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec" />
            <codeblock props="cpp" outputclass="language-cpp" />
            <codeblock props="cs" outputclass="language-csharp" />
            <codeblock props="electron" outputclass="language-typescript">addListener?&lt;EventType extends keyof IRtcEngineEvent&gt;(
      eventType: EventType,
      listener: IRtcEngineEvent[EventType]
    ): void;</codeblock>
            <codeblock props="unity" outputclass="language-csharp" />
            <codeblock props="rn" outputclass="language-typescript">addListener?&lt;EventType extends keyof IRtcEngineEvent&gt;(
      eventType: EventType,
      listener: IRtcEngineEvent[EventType]
    ): EventSubscription;</codeblock>
            <codeblock props="unreal" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <p>After calling this method, you can listen for the corresponding events in the <xref keyref="IRtcEngine" /> object and obtain data through <apiname keyref="IRtcEngineEvent" />. Depending on your project needs, you can add multiple listeners for the same event.</p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry id="eventType">
                <pt>eventType</pt>
                <pd>The name of the target event to listen for. See <apiname keyref="IRtcEngineEvent" />.</pd>
            </plentry>
            <plentry id="listener">
                <pt>listener</pt>
                <pd>The callback function for <parmname>eventType</parmname>. Take adding a listener for <xref keyref="onJoinChannelSuccess" /> as an example: <codeblock outputclass="language-typescript">// Create an onJoinChannelSuccess object
const onJoinChannelSuccess = (connection: RtcConnection, elapsed: number) =&gt; {};
// Add one onJoinChannelSuccess listener
engine.addListener('onJoinChannelSuccess', onJoinChannelSuccess);</codeblock></pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="rn">
            <title>Returns</title>
            <p>The native interface <codeph>EventSubscription</codeph> in React Native API.</p>
        </section>
    </refbody>
</reference>