<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setremotevideostreamtype">
     <title> <ph keyref="setRemoteVideoStreamType" /> </title>
     <shortdesc id="short"><ph id="shortdesc">Sets the video stream type to subscribe to.</ph></shortdesc>
     <prolog>
          <metadata>
               <keywords>
                    <indexterm keyref="setRemoteVideoStreamType" />
               </keywords>
          </metadata>
     </prolog>
     <refbody>
          <section id="prototype">
               <p outputclass="codeblock">
               <codeblock props="android" outputclass="language-java">public abstract int setRemoteVideoStreamType(int uid, int streamType);</codeblock>
               <codeblock props="hmos" outputclass="language-arkts">public abstract setRemoteVideoStreamType(uid: number, streamType: Constants.VideoStreamType): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setRemoteVideoStream:(NSUInteger)uid
                       type:(AgoraVideoStreamType)streamType;</codeblock>
               <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setRemoteVideoStreamType(uid_t uid, VIDEO_STREAM_TYPE streamType) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetRemoteVideoStreamType(int64 uid, EVIDEO_STREAM_TYPE streamType);</codeblock>
               <codeblock props="electron" outputclass="language-typescript">abstract setRemoteVideoStreamType(
    uid: number,
    streamType: VideoStreamType
  ): number;</codeblock>
               <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetRemoteVideoStreamType(uint uid, VIDEO_STREAM_TYPE streamType);</codeblock>
               <codeblock props="rn" outputclass="language-typescript">abstract setRemoteVideoStreamType(
    uid: number,
    streamType: VideoStreamType
  ): number;</codeblock>
               <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setRemoteVideoStreamType(
    {required int uid, required VideoStreamType streamType});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
          </section>
          <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="deprecated" props="android">
            <dlentry>
                <dt>Deprecated:</dt>
                <dd>This method is deprecated as of v4.4.0. Use <xref keyref="setRemoteVideoStreamType2"/> instead.</dd>
            </dlentry>
            </dl>
               <p id="desc1">Depending on the default behavior of the sender and the specific settings when calling <xref keyref="setDualStreamMode2"/>, the scenarios for the receiver calling this method are as follows:<ul>
               <li>The SDK defaults to enabling low-quality video stream adaptive mode (<apiname keyref="AUTO_SIMULCAST_STREAM"/>) on the sender side, meaning that the sender only transmits the high-quality video stream. Only the receiver with the host identity can call this method to initiate a small stream request. Once the sender receives the request, it will start automatically sending the small stream. At this point, all users in the channel can call this method to switch to small stream subscription mode.<b></b></li>
               <li>当发送端调用 <apiname keyref="setDualStreamMode2"/> 并将 <parmname>mode</parmname> 设置为 <apiname keyref="DISABLE_SIMULCAST_STREAM"/>（始终不发送小流），则调用该方法不生效。</li>
               <li>当发送端调用 <apiname keyref="setDualStreamMode2"/> 并将 <parmname>mode</parmname> 设置为 <apiname keyref="ENABLE_SIMULCAST_STREAM"/>（始终发送小流），则主播或观众身份的接收端均可调用该方法切换到小流订阅模式。</li></ul></p>
               <p id="desc2">The SDK will dynamically adjust the size of the corresponding video stream based on the size of the video window to save bandwidth and computing resources. The default aspect ratio of the low-quality video stream is the same as that of the high-quality video stream. According to the current aspect ratio of the high-quality video stream, the system will automatically allocate the resolution, frame rate, and bitrate of the low-quality video stream.</p>
               <note type="attention" id="note"><ul>
                    <li>You can call this method either before or after joining a channel.</li>
                    <li>If you call both this method and <xref keyref="setRemoteDefaultVideoStreamType"/>, the setting of this method takes effect.</li></ul></note> </section>
          <section id="parameters">
               <title>Parameters</title>
               <parml>
               <plentry id="uid">
                    <pt>uid</pt>
                    <pd>The user ID.</pd>
               </plentry>
               <plentry id="streamtype">
                    <pt>streamType</pt>
                    <pd>
                         <p props="apple cpp framework">The video stream type, see <xref keyref="VIDEO_STREAM_TYPE"/>.</p>
                         <p props="android hmos">The video stream type:<ul>
                         <li>0: High-quality video stream.</li>
                         <li>1: Low-quality video stream.</li>
                         </ul> </p>
                    </pd>
               </plentry>
               </parml> </section>
          <section id="return_values">
               <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
               <ul props="native unreal bp unity electron rn cs">
               <li>0: Success.</li>
               <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
               </ul> </section>
     </refbody>
</reference>
