<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_player_openwithurl">
    <title><ph keyref="OpenWithUrl"/></title>
    <shortdesc id="short"><ph id="shortdesc">Opens a URL.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="OpenWithUrl"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void openWithUrl(String url, long startTime, AsyncCallback callback);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)openWithUrl:(NSString * _Nonnull)url startTime:(uint64_t)startTime cb:(void (^_Nullable)(AgoraRteError* _Nullable err))cb;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">void OpenWithUrl(const char* url, uint64_t start_time, std::function&lt;void(rte::Error* err)> cb);</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.5.0</dd>
            </dlentry>
            </dl>
            <p>This method can open a live stream via URL. If you want to speed up the process of opening a URL, you can call the <xref keyref="PreloadWithUrl"/> method to preload the URL before calling the method.</p>
            <p>If you fail to open the URL, you will receive the <xref keyref="onStateChanged"/> callback reporting the state as <ph keyref="kRtePlayerStateFailed"/>. At this time, you need to call <xref keyref="Stop_Player"/> first, then call <apiname keyref="OpenWithUrl"/> to reopen the URL. If you have disabled autoplay, you can call <xref keyref="Play_Player"/> to play after opening the URL.</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>Call timing</title>
            <p>Call this method after <xref keyref="Player_Player"/>.</p>
        </section>
        <section id="restriction" deliveryTarget="details">
            <title>Restrictions</title>
            <p>该方法目前仅支持打开以 <codeph>rte://</codeph> 开头的 URL、CDN URL 和本地媒体文件。 //TODO</p>
        </section>
        <section id="related" deliveryTarget="details">
                <title>Related callbacks</title>
                <p>After calling this method, the SDK triggers the <xref keyref="onStateChanged"/> callback and reports the state as <apiname keyref="kRtePlayerStateOpening"/>, which means the player is opening the URL. After successfully opening the URL, the SDK reports the player's state as <apiname keyref="kRtePlayerStateOpenCompleted"/>.</p>
            </section>
        <section id="parameters" deliveryTarget="details">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="PreloadWithUrl/url">
                <pt></pt>
                <pd></pd>
            </plentry>
             <plentry>
                 <pt props="cpp">start_time</pt>
                 <pt props="android apple">startTime</pt>
                 <pd>起始播放位置，单位为毫秒。</pd>
             </plentry>
             <plentry props="cpp apple">
                 <pt>cb</pt>
                 <pd>An asynchronous callback, used to notify the result of opening a URL. If an error occurs during the opening, you can get specific error information through the <parmname>err</parmname> parameter in this callback. See <xref keyref="Error"/>.</pd>
             </plentry>
             <plentry props="android">
                 <pt>callback</pt>
                 <pd>An asynchronous callback, used to notify the result of opening a URL. If an error occurs during the opening, you can get specific error information through the <xref keyref="onResult_AsyncCallback"/> callback in the <xref keyref="AsyncCallback"/>.</pd>
             </plentry>
            </parml> </section>
        </refbody>
</reference>
