<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_release">
    <title><ph keyref="release"/></title>
    <shortdesc id="short"><ph id="shortdesc">Releases all resources used by the Agora SDK.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="release"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static synchronized void destroy(@Nullable IRtcEngineReleaseCallback callback)</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">+ (void)destroy:(void (^ _Nullable)(void))engineReleasedBlock NS_SWIFT_NAME(destroy(_:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">AGORA_CPP_API static void release(RtcEngineReleaseCallback callback = nullptr);</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since:</dt>
                <dd props="native">Available since v4.6.0.</dd>
                </dlentry>
            </dl>
            <p>This method is intended for applications that occasionally make voice or video calls. It releases resources when not in a call so they can be used for other operations. Once this method is called to destroy the engine instance, other methods in the SDK can no longer be used, and no callbacks will be triggered. To start communication again, call the <codeph>sharedEngineWithAppId</codeph> method to create a new instance.</p>
            <note type="attention" props="cpp">If you want to create a new <codeph>IRtcEngine</codeph> instance after destroying the current one, make sure to wait until the <codeph>release</codeph> method completes.</note>
            <note type="attention" props="apple">Do not call this method within any SDK-generated callback, or it may cause a deadlock.</note>
            </section>
        <section id="restriction" deliveryTarget="details">
            <title>Restrictions</title>
            <p>None.</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>Parameters</title>
            <parml>
            <plentry props="android cpp">
                <pt props="android cpp">callback</pt>
                <pd props="android">Optional callback instance. Determines whether the method call is synchronous:
                    <ul>
                        <li>Non-null: The method is asynchronous. It returns immediately even if the <codeph>RtcEngine</codeph> object resources are not yet released, and triggers the <codeph>onEngineReleased</codeph> callback after the engine resources are released.</li>
                        <li>Null: The method is synchronous and returns only after the <codeph>RtcEngine</codeph> object resources are released. Do not call this method within any SDK-generated callback, or it may cause a deadlock. See <codeph>IRtcEngineReleaseCallback</codeph>.</li>
                        </ul>
                    </pd>
                <pd props="cpp">Determines whether the method call is synchronous.
                    <ul>
                        <li>Non-null pointer: The method is asynchronous and returns immediately, even if the <codeph>IRtcEngine</codeph> object resources are not yet released. The <codeph>onEngineReleased</codeph> callback is triggered when the engine is released.</li>
                        <li>Null pointer: The method is synchronous and returns only after the <codeph>IRtcEngine</codeph> object resources are released. Do not call this method within any SDK-generated callback, or it may cause a deadlock.</li>
                        </ul>
                    </pd>
            </plentry>
            <plentry props="apple">
                <pt props="apple">engineReleasedBlock</pt>
                <pd props="apple">The callback block triggered when <codeph>AgoraRtcEngineKit</codeph> is destroyed. This parameter determines whether the method call is synchronous or asynchronous.
                    <ul>
                        <li>Non-null: The method is asynchronous. It returns immediately even if the <codeph>AgoraRtcEngineKit</codeph> instance resources are not yet released, and triggers <codeph>engineReleasedBlock</codeph> after the resources are released.</li>
                        <li>Null: The method is synchronous and returns only after the <codeph>AgoraRtcEngineKit</codeph> instance resources are released.</li>
                        </ul>
                    </pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="bp cs electron flutter rn unity unreal">
            <title><ph keyref="return-section-title"/></title>
        <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
        <ul props="bp cs electron rn unity unreal">
                <li>0: Success.</li>
                <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
                </ul>
    </section>
        </refbody>
</reference>
