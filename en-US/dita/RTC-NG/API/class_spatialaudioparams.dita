<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_spatialaudioparams">
  <title><ph keyref="SpatialAudioParams" /></title>
  <shortdesc id="short"><ph id="shortdesc">The spatial audio parameters.</ph></shortdesc>
  <refbody>
    <section id="prototype">
      <p outputclass="codeblock">
      <codeblock props="android" outputclass="language-java">public class SpatialAudioParams {
    public Double speaker_azimuth;
    public Double speaker_elevation;
    public Double speaker_distance;
    public Integer speaker_orientation;
    public Boolean enable_blur;
    public Boolean enable_air_absorb;
    public Double speaker_attenuation;
    @CalledByNative
  public Double getSpeakerAzimuth() {
    return speaker_azimuth;
  }
    @CalledByNative
  public Double getSpeakerElevation() {
    return speaker_elevation;
  }
    @CalledByNative
  public Double getSpeakerDistance() {
    return speaker_distance;
  }
    @CalledByNative
  public Integer getSpeakerOrientation() {
    return speaker_orientation;
  }
    @CalledByNative
  public Boolean getBlurFlag() {
    return enable_blur;
  }
    @CalledByNative
  public Boolean getAirAbsorbFlag() {
    return enable_air_absorb;
  }
    @CalledByNative
  public Double getSpeakerAttenuation() {
    return speaker_attenuation;
  }
}</codeblock>
      <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraSpatialAudioParams : NSObject
@property(strong, nonatomic) AgoraRtcDoubleOptional* _Nullable speaker_azimuth;
@property(strong, nonatomic) AgoraRtcDoubleOptional* _Nullable speaker_elevation;
@property(strong, nonatomic) AgoraRtcDoubleOptional* _Nullable speaker_distance;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable speaker_orientation;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable enable_blur;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable enable_air_absorb;
@property(strong, nonatomic) AgoraRtcDoubleOptional* _Nullable speaker_attenuation;
@end</codeblock>
      <codeblock props="cpp" outputclass="language-cpp">struct SpatialAudioParams {
  Optional&lt;double&gt; speaker_azimuth;
  Optional&lt;double&gt; speaker_elevation;
  Optional&lt;double&gt; speaker_distance;
  Optional&lt;int&gt; speaker_orientation;
  Optional&lt;bool&gt; enable_blur;
  Optional&lt;bool&gt; enable_air_absorb;
  Optional&lt;double&gt; speaker_attenuation;
};</codeblock>
<codeblock props="electron" outputclass="language-typescript">export class SpatialAudioParams {
  
  speaker_azimuth?: number;
  
  speaker_elevation?: number;
  
  speaker_distance?: number;
  
  speaker_orientation?: number;
  
  enable_blur?: boolean;
  
  enable_air_absorb?: boolean;
  
  speaker_attenuation?: number;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class SpatialAudioParams : OptionalJsonParse
    {
        public Optional&lt;double&gt; speaker_azimuth = new Optional&lt;double&gt;();
        public Optional&lt;double&gt; speaker_elevation = new Optional&lt;double&gt;();
        public Optional&lt;double&gt; speaker_distance = new Optional&lt;double&gt;();
        public Optional&lt;int&gt; speaker_orientation = new Optional&lt;int&gt;();
        public Optional&lt;bool&gt; enable_blur = new Optional&lt;bool&gt;();
        public Optional&lt;bool&gt; enable_air_absorb = new Optional&lt;bool&gt;();
        Optional&lt;double&gt; speaker_attenuation = new Optional&lt;double&gt;();
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class SpatialAudioParams {
  
  speaker_azimuth?: number;
  
  speaker_elevation?: number;
  
  speaker_distance?: number;
  
  speaker_orientation?: number;
  
  enable_blur?: boolean;
  
  enable_air_absorb?: boolean;
  
  speaker_attenuation?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class SpatialAudioParams {
  const SpatialAudioParams(
      {this.speakerAzimuth,
      this.speakerElevation,
      this.speakerDistance,
      this.speakerOrientation,
      this.enableBlur,
      this.enableAirAbsorb});

  @JsonKey(name: 'speaker_azimuth')
  final double? speakerAzimuth;
  @JsonKey(name: 'speaker_elevation')
  final double? speakerElevation;
  @JsonKey(name: 'speaker_distance')
  final double? speakerDistance;
  @JsonKey(name: 'speaker_orientation')
  final int? speakerOrientation;
  @JsonKey(name: 'enable_blur')
  final bool? enableBlur;
  @JsonKey(name: 'enable_air_absorb')
  final bool? enableAirAbsorb;
  factory SpatialAudioParams.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$SpatialAudioParamsFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$SpatialAudioParamsToJson(this);
}</codeblock></p>
    </section>
    <section id="parameters">
      <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
      <parml>
      <plentry>
        <pt>speaker_azimuth</pt>
        <pd>The azimuth angle of the remote user or media player relative to the local user. The value range is [0,360], and the unit is degrees, as defined by the following main directions:<ul>
          <li>0: (Default) 0 degrees, which means directly to the front on the horizontal plane.</li>
          <li>90: 90 degrees, which means directly to the left on the horizontal plane.</li>
          <li>180: 180 degrees, which means directly behind on the horizontal plane.</li>
          <li>270: 270 degrees, which means directly to the right on the horizontal plane.</li>
          <li>360: 360 degrees, which means directly to the front on the horizontal plane.</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>speaker_elevation</pt>
        <pd>The elevation angle of the remote user or media player relative to the local user. The value range is [-90,90], and the unit is degrees, as defined by the following main directions:<ul>
          <li>0: (Default) 0 degrees, which means that the horizontal plane is not rotated.</li>
          <li>-90: -90 degrees, which means that the horizontal plane is rotated 90 degrees downwards.</li>
          <li>90: 90 degrees, which means that the horizontal plane is rotated 90 degrees upwards.</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>speaker_distance</pt>
        <pd>The distance of the remote user or media player relative to the local user. The value range is [1,50], and the unit is meters. The default value is 1 meter.</pd>
      </plentry>
      <plentry>
        <pt>speaker_orientation</pt>
        <pd>The orientation of the remote user or media player relative to the local user. The value range is [0,180], and the unit is degrees, as defined by the following main directions:<ul>
          <li>0: (Default) 0 degrees, which means that the sound source and listener face the same direction.</li>
          <li>180: 180 degrees, which means that the sound source and listener face each other.</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>enable_blur</pt>
        <pd>Whether to enable audio blurring:<ul>
          <li><codeph><ph keyref="true" /></codeph>: Enable blurring.</li>
          <li><codeph><ph keyref="false" /></codeph>: (Default) Disable blurring.</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>enable_air_absorb</pt>
        <pd>Whether to enable air absorption, that is, to simulate the sound attenuation effect of sound transmitting in the air; under a certain transmission distance, the attenuation speed of high frequency sound is fast, and the attenuation speed of low frequency sound is slow.<ul>
          <li><codeph><ph keyref="true" /></codeph>: (Default) Enable air absorption. Make sure that the value of <parmname>speaker_attenuation</parmname> is not <codeph>0</codeph>; otherwise, this setting does not take effect.</li>
          <li><codeph><ph keyref="false" /></codeph>: Disable air absorption.</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>speaker_attenuation</pt>
        <pd>The sound attenuation coefficient of the remote user or media player. The value range is [0,1]. Includes the following situations:<ul>
            <li>0: Broadcast mode, where the volume and timbre are not attenuated with distance, and the volume and timbre heard by local users does not change regardless of distance.</li>
            <li>(0,0.5): Weak attenuation mode, where the volume and timbre (<parmname>enable_air_absorb</parmname> needs to be enabled at the same time) only have a weak attenuation during the propagation, and the sound can travel farther than that in a real environment.</li>
            <li>0.5: (Default) simulates the attenuation of the volume in the real environment; the effect is equivalent to not setting the <parmname>speaker_attenuation</parmname> parameter.</li>
            <li>(0.5,1]: Strong attenuation mode, where volume and timbre (<parmname>enable_air_absorb</parmname> needs to be enabled at the same time) attenuate rapidly during the propagation.</li>
            </ul></pd>
      </plentry>
      </parml> </section>
  </refbody>
</reference>