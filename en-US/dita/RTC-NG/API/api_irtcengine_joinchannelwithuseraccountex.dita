<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_joinchannelwithuseraccountex">
    <title><ph keyref="joinChannelWithUserAccountEx" /></title>
    <shortdesc id="short"><ph id="shortdesc">Joins the channel with a user account, and configures whether to automatically subscribe to audio or video streams after joining the channel.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="joinChannelWithUserAccountEx" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int joinChannelWithUserAccountEx(String token, String channelId,
    String userAccount, ChannelMediaOptions options, IRtcEngineEventHandler eventHandler);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)joinChannelExByToken:(NSString* _Nullable)token
                  channelId:(NSString* _Nonnull)channelId
                userAccount:(NSString* _Nonnull)userAccount
                   delegate:(id&lt;AgoraRtcEngineDelegate&gt; _Nullable)delegate
               mediaOptions:(AgoraRtcChannelMediaOptions* _Nonnull)mediaOptions
                joinSuccess:(void(^ _Nullable)(NSString* _Nonnull channel, NSUInteger uid, NSInteger elapsed))joinSuccessBlock;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int joinChannelWithUserAccountEx(const char* token, const char* channelId,
                                         const char* userAccount, const ChannelMediaOptions&amp; options,
                                         IRtcEngineEventHandler* eventHandler) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int JoinChannelWithUserAccountEx(FString token, FString channelId, FString userAccount, const FChannelMediaOptions&amp; options, UIRtcEngineEventHandler* eventHandler);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract joinChannelWithUserAccountEx(
    token: string,
    channelId: string,
    userAccount: string,
    options: ChannelMediaOptions
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public int JoinChannelWithUserAccountEx(string token, string channelId,
                                                string userAccount, ChannelMediaOptions options)</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract joinChannelWithUserAccountEx(
    token: string,
    channelId: string,
    userAccount: string,
    options: ChannelMediaOptions
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; joinChannelWithUserAccountEx(
    {required String token,
    required String channelId,
    required String userAccount,
    required ChannelMediaOptions options});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p props="native unreal bp flutter" conkeyref="joinChannelWithUserAccount2/desc1" />
            <p props="rn electron" id="desc1">This method allows a user to join the channel with the user account. After the user successfully joins the channel, the SDK triggers the following callbacks:<ul>
            <li>The local client: <xref keyref="onLocalUserRegistered" />, <xref keyref="onJoinChannelSuccess" /> and <xref keyref="onConnectionStateChanged" /> callbacks.</li>
            <li>The remote client: The <xref keyref="onUserJoined" /> callback, if the user is in the COMMUNICATION profile, and the <xref keyref="onUserInfoUpdated" /> callback if the user is a host in the LIVE_BROADCASTING profile.</li>
            </ul></p>
            <p props="native unreal bp flutter" conkeyref="joinChannelWithUserAccount2/desc2" />
            <p props="rn electron" id="desc2">Once a user joins the channel, the user subscribes to the audio and video streams of all the other users in the channel by default, giving rise to usage and billing calculation. To stop subscribing to a specified stream or all remote streams, call the corresponding <apiname>mute</apiname> methods.</p>
            <note conkeyref="joinChannelWithUserAccount1/note" props="native unreal bp flutter unity cs" />
            <note type="attention" id="note" props="rn electron">To ensure smooth communication, use the same parameter type to identify the user. For example, if a user joins the channel with a user ID, then ensure all the other users use the user ID too. The same applies to the user account. If a user joins the channel with the Agora Web SDK, ensure that the ID of the user is set to the same parameter type.</note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="joinChannel2/token">
                <pt />
                <pd />
            </plentry>
            <plentry>
                <pt>channelId</pt>
                <pd>
                    <p conkeyref="joinChannel2/channelID_desc" />
                </pd>
            </plentry>
            <plentry props="native unreal bp flutter unity rn electron cs" conkeyref="joinChannelWithUserAccount2/userAccount">
                <pt />
                <pd />
            </plentry>
            <plentry>
                <pt props="cpp unreal bp android unity rn electron flutter cs">options</pt>
                <pt props="ios mac">mediaOptions</pt>
                <pd conkeyref="joinChannel2/options_desc" />
            </plentry>
            <plentry props="cpp unreal bp android unity cs" conkeyref="joinChannelEx/event">
                <pt />
                <pd />
            </plentry>
            <plentry conkeyref="joinChannel2/joinsuccessblock" props="ios mac">
                <pt />
                <pd />
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown; and you need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp electron rn">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>