<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengineex_muteallremoteaudiostreamsex">
    <title><ph keyref="muteAllRemoteAudioStreamsEx"/></title>
    <shortdesc id="short"><ph id="shortdesc">Stops or resumes subscribing to the audio streams of all remote users.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="muteAllRemoteAudioStreamsEx"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int muteAllRemoteAudioStreamsEx(boolean muted, RtcConnection connection);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)muteAllRemoteAudioStreamsEx:(BOOL)mute
                        connection:(AgoraRtcConnection * _Nonnull)connection  NS_SWIFT_NAME(muteAllRemoteAudioStreamsEx(_:connection:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int muteAllRemoteAudioStreamsEx(bool mute, const RtcConnection&amp; connection) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int MuteAllRemoteAudioStreamsEx(bool mute, const FRtcConnection&amp; connection);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract muteAllRemoteAudioStreamsEx(
    mute: boolean,
    connection: RtcConnection
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int MuteAllRemoteAudioStreamsEx(bool mute, RtcConnection connection);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract muteAllRemoteAudioStreamsEx(
    mute: boolean,
    connection: RtcConnection
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> muteAllRemoteAudioStreamsEx(
      {required bool mute, required RtcConnection connection});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p id="desc">After successfully calling this method, the local user stops or resumes subscribing to the audio streams of all remote users, including the ones join the channel subsequent to this call.</p>
            <note type="attention" id="note">
            <ul>
            <li>Call this method after joining a channel.</li>
            <li>If you do not want to subscribe the audio streams of remote users before joining a channel, you can set <parmname>autoSubscribeAudio</parmname> as <codeph><ph keyref="false"/></codeph> when calling <xref keyref="joinChannel2"/>.</li>
            <li props="hide"><ph>See recommended settings in <xref keyref="guide-set-subscribing-state">Set the Subscribing State</xref>.</ph></li>
            </ul> </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt props="android">muted</pt>
                <pt props="ios mac cpp unreal bp unity flutter rn electron cs">mute</pt>
                <pd>
                    <p>Whether to stop subscribing to the audio streams of all remote users:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Stops subscribing to the audio streams of all remote users.</li>
                    <li><codeph><ph keyref="false"/></codeph>: (Default) Subscribes to the audio streams of all remote users by default.</li>
                    </ul> </p>
                </pd>
            </plentry>
            <plentry conkeyref="joinChannelEx/connection">
                <pt/>
                <pd/>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: Success.</li>
            <li> &lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
