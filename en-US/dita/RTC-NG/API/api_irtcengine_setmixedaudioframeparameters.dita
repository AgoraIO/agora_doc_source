<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setmixedaudioframeparameters">
    <title><ph keyref="setMixedAudioFrameParameters" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the audio data format reported by <xref keyref="onMixedAudioFrame" />.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setMixedAudioFrameParameters" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setMixedAudioFrameParameters(int sampleRate, int channel, int samplesPerCall);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setMixedAudioFrameParametersWithSampleRate:(NSInteger)sampleRate
                                          channel:(NSInteger)channel
                                   samplesPerCall:(NSInteger)samplesPerCall;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int setMixedAudioFrameParameters(int sampleRate, int channel, int samplesPerCall) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setMixedAudioFrameParameters(
    sampleRate: number,
    channel: number,
    samplesPerCall: number
  ): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int SetMixedAudioFrameParameters(int sampleRate, int channel, int samplesPerCall);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setMixedAudioFrameParameters(
    sampleRate: number,
    channel: number,
    samplesPerCall: number
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setMixedAudioFrameParameters(
    {required int sampleRate,
    required int channel,
    required int samplesPerCall});</codeblock>
            <codeblock props="unreal" outputclass="language-cpp" /></p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>sampleRate</pt>
                <pd>
                    <p>The sample rate (Hz) of the audio data, which can be set as <codeph>8000</codeph>, <codeph>16000</codeph>, <codeph>32000</codeph>, <codeph>44100</codeph>, or <codeph>48000</codeph>.</p>
                </pd>
            </plentry>
            </parml>
            <parml id="parml_i4h_rfg_3qb">
            <plentry>
                <pt>channel</pt>
                <pd>
                    <p>The number of channels of the audio data, which can be set as <codeph>1</codeph> (Mono) or <codeph>2</codeph> (Stereo).</p>
                </pd>
            </plentry>
            </parml>
            <parml id="parml_q4f_sfg_3qb">
            <plentry>
                <pt>samplesPerCall</pt>
                <pd>
                    <p>Sets the number of samples. In Media Push scenarios, set it as <codeph>1024</codeph>.</p>
                </pd>
            </plentry>
            </parml>
            <note id="note_n1y_cgg_3qb">
            <p>The SDK triggers the <apiname keyref="onMixedAudioFrame" /> callback according to the sample interval. Sample interval (sec) = <codeph>samplePerCall</codeph>/(<codeph>sampleRate</codeph> Ã— <codeph>channel</codeph>) Ensure that the value of sample interval is more than or equal to 0.01.</p>
            </note> </section>
        <section id="return_values" props="native unity electron rn">
            <title>Returns</title>
            <ul id="ul_ahk_23f_3qb">
            <li>0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul> </section>
    </refbody>
</reference>