<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_encryptionconfig">
  <title><ph keyref="EncryptionConfig" /></title>
  <shortdesc id="short"><ph id="shortdesc">Built-in encryption configurations.</ph></shortdesc>
  <refbody>
    <section id="prototype">
      <p outputclass="codeblock">
      <codeblock props="android" outputclass="language-java">public class EncryptionConfig {
  public enum EncryptionMode {
    AES_128_XTS(1),
    AES_128_ECB(2),
    AES_256_XTS(3),
    SM4_128_ECB(4),
    AES_128_GCM(5),
    AES_256_GCM(6),
    AES_128_GCM2(7),
    AES_256_GCM2(8),
    MODE_END(9);
    private int value;

    private EncryptionMode(int v) {
      value = v;
    }

    public int getValue() {
      return this.value;
    }
}</codeblock>
      <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraEncryptionConfig: NSObject

 @property (assign, nonatomic) AgoraEncryptionMode encryptionMode;
 @property (copy, nonatomic) NSString * _Nullable encryptionKey;
 @property (strong, nonatomic) NSData * _Nullable encryptionKdfSalt;
 @end</codeblock>
      <codeblock props="cpp unreal" outputclass="language-cpp">struct EncryptionConfig {
  ENCRYPTION_MODE encryptionMode;
  const char* encryptionKey;
  uint8_t encryptionKdfSalt[32];

  EncryptionConfig()
    : encryptionMode(AES_128_GCM2),
      encryptionKey(NULL)
  {
    memset(encryptionKdfSalt, 0, sizeof(encryptionKdfSalt));
  }

  const char* getEncryptionString() const {
    switch(encryptionMode) {
      case AES_128_XTS:
        return "aes-128-xts";
      case AES_128_ECB:
        return "aes-128-ecb";
      case AES_256_XTS:
        return "aes-256-xts";
      case SM4_128_ECB:
        return "sm4-128-ecb";
      case AES_128_GCM:
        return "aes-128-gcm";
      case AES_256_GCM:
        return "aes-256-gcm";
      case AES_128_GCM2:
        return "aes-128-gcm-2";
      case AES_256_GCM2:
        return "aes-256-gcm-2";
      default:
        return "aes-128-gcm-2";
    }
    return "aes-128-gcm-2";
  }
};    </codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FEncryptionConfig
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|EncryptionConfig&quot;)
	ENCRYPTION_MODE encryptionMode = ENCRYPTION_MODE::AES_128_GCM;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|EncryptionConfig&quot;)
	FString encryptionKey;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|EncryptionConfig&quot;)
	FString encryptionKdfSalt;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export class EncryptionConfig {
  
  encryptionMode?: EncryptionMode;
  
  encryptionKey?: string;
  
  encryptionKdfSalt?: number[];
}</codeblock>
      <codeblock props="unity cs" outputclass="language-csharp">public class EncryptionConfig
    {
        public EncryptionConfig()
        {
            encryptionMode = ENCRYPTION_MODE.MODE_END;
            encryptionKey = "";
            encryptionKdfSalt = new byte[32];
        }

        public EncryptionConfig(ENCRYPTION_MODE encryptionMode, string encryptionKey, byte[] encryptionKdfSalt)
        {
            this.encryptionMode = encryptionMode;
            this.encryptionKey = encryptionKey;
            this.encryptionKdfSalt = encryptionKdfSalt;
        }

        public ENCRYPTION_MODE encryptionMode { set; get; }
        public string encryptionKey { set; get; }
        private byte[] encryptionKdfSalt32 = new byte[32];
        public byte[] encryptionKdfSalt
        {
            set { Buffer.BlockCopy(value, 0, encryptionKdfSalt32, 0, 32); }

            get { return encryptionKdfSalt32; }
        }
    }</codeblock>
      <codeblock props="rn" outputclass="language-typescript">export class EncryptionConfig {
  
  encryptionMode?: EncryptionMode;
  
  encryptionKey?: string;
  
  encryptionKdfSalt?: number[];
}</codeblock>
      <codeblock props="flutter" outputclass="language-dart">class EncryptionConfig {
  const EncryptionConfig(
      {this.encryptionMode, this.encryptionKey, this.encryptionKdfSalt});

  @JsonKey(name: 'encryptionMode')
  final EncryptionMode? encryptionMode;
  @JsonKey(name: 'encryptionKey')
  final String? encryptionKey;
  @JsonKey(name: 'encryptionKdfSalt', ignore: true)
  final Uint8List? encryptionKdfSalt;
  factory EncryptionConfig.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$EncryptionConfigFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$EncryptionConfigToJson(this);
}</codeblock>
      </p>
    </section>
    <section id="parameters">
      <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
      <parml>
      <plentry>
        <pt>encryptionMode</pt>
        <pd>
          <p>The built-in encryption mode. See <xref keyref="ENCRYPTION_MODE" />. Agora recommends using <codeph><ph keyref="AES_128_GCM2" /></codeph> or <codeph><ph keyref="AES_256_GCM2" /></codeph> encrypted mode. These two modes support the use of salt for higher security.</p>
        </pd>
      </plentry>
      <plentry>
        <pt>encryptionKey</pt>
        <pd>
          <p>Encryption key in string type with unlimited length. Agora recommends using a 32-byte key.</p>
          <note type="attention">If you do not set an encryption key or set it as <codeph><ph keyref="NULL" /></codeph>, you cannot use the built-in encryption, and the SDK returns <codeph>-2</codeph>.</note> </pd>
      </plentry>
      <plentry>
        <pt>encryptionKdfSalt</pt>
        <pd>
          <p><ph>Salt, 32 bytes in length. Agora recommends that you use OpenSSL to generate salt on the server side. See Media Stream Encryption for details. </ph><ph props="native unreal bp">See "Media Stream Encryption" for details.</ph></p>
          <note type="attention">This parameter takes effect only in <codeph><ph keyref="AES_128_GCM2" /></codeph> or <codeph><ph keyref="AES_256_GCM2" /></codeph> encrypted mode. In this case, ensure that this parameter is not <codeph>0</codeph>.</note>
        </pd>
      </plentry>
      </parml> </section>
  </refbody>
</reference>