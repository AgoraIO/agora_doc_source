<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_encryptionconfig">
  <title><ph keyref="EncryptionConfig" /></title>
  <shortdesc id="short"><ph id="shortdesc">Built-in encryption configurations.</ph></shortdesc>
  <refbody>
    <section id="prototype">
      <p outputclass="codeblock">
      <codeblock props="android" outputclass="language-java">public class EncryptionConfig {
  public EncryptionMode encryptionMode;
  public String encryptionKey;
  public final byte[] encryptionKdfSalt = new byte[32];
  public boolean datastreamEncryptionEnabled;

  public EncryptionConfig() {
    encryptionMode = EncryptionMode.AES_128_GCM2;
    encryptionKey = null;
    datastreamEncryptionEnabled = false;
    java.util.Arrays.fill(encryptionKdfSalt, (byte) 0);
  }
}</codeblock>
      <codeblock props="hmos" outputclass="language-arkts">export class EncryptionConfig {
  encryptionMode : EncryptionMode = EncryptionMode.AES_128_GCM2;
  encryptionKey : string = &quot;&quot;;
  encryptionKdfSalt : ArrayBuffer = new ArrayBuffer(32);
  public EncryptionConfig() {
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraEncryptionConfig: NSObject

 @property (assign, nonatomic) AgoraEncryptionMode encryptionMode;
 @property (copy, nonatomic) NSString * _Nullable encryptionKey;
 @property (strong, nonatomic) NSData * _Nullable encryptionKdfSalt;
 @property (assign, nonatomic) BOOL  datastreamEncryptionEnabled;
 @end</codeblock>
      <codeblock props="cpp unreal" outputclass="language-cpp">struct EncryptionConfig {
  ENCRYPTION_MODE encryptionMode;
  const char* encryptionKey;
  uint8_t encryptionKdfSalt[32];  
  bool datastreamEncryptionEnabled;

  EncryptionConfig()
    : encryptionMode(AES_128_GCM2),
      encryptionKey(OPTIONAL_NULLPTR),
      datastreamEncryptionEnabled(false)
  {
    memset(encryptionKdfSalt, 0, sizeof(encryptionKdfSalt));
  }
};   </codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FEncryptionConfig
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|EncryptionConfig&quot;)
	EENCRYPTION_MODE encryptionMode = EENCRYPTION_MODE::AES_128_GCM;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|EncryptionConfig&quot;)
	FString encryptionKey = &quot;&quot;;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|EncryptionConfig&quot;)
	FString encryptionKdfSalt = &quot;&quot;;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|EncryptionConfig&quot;)
	bool datastreamEncryptionEnabled = false;
	FEncryptionConfig(){}
	FEncryptionConfig(const agora::rtc::EncryptionConfig &amp; AgoraData){
		encryptionMode = static_cast&lt;EENCRYPTION_MODE&gt;(AgoraData.encryptionMode);
		encryptionKey = UTF8_TO_TCHAR(AgoraData.encryptionKey);
		char valencryptionKdfSalt[32] = {0};
		int AgoraCount = 32;
		for (int i = 0; i &lt; AgoraCount; i++) {
			encryptionKdfSalt[i] = AgoraData.encryptionKdfSalt[i];
		}
		encryptionKdfSalt = valencryptionKdfSalt;
		datastreamEncryptionEnabled = AgoraData.datastreamEncryptionEnabled;
	}
	agora::rtc::EncryptionConfig CreateAgoraData() const {
		agora::rtc::EncryptionConfig AgoraData;
		AgoraData.encryptionMode = static_cast&lt;agora::rtc::ENCRYPTION_MODE&gt;(encryptionMode);
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.encryptionKey,this-&gt;encryptionKey)

		std::string StdencryptionKdfSalt = TCHAR_TO_UTF8(*encryptionKdfSalt);
		int AgoraCount = 32;
		for (int i = 0; i &lt; AgoraCount; i++) {
			if(i &gt;= StdencryptionKdfSalt.size()){
				break;
			}
			AgoraData.encryptionKdfSalt[i] = StdencryptionKdfSalt[i];
		}
		AgoraData.datastreamEncryptionEnabled = datastreamEncryptionEnabled;
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::EncryptionConfig &amp; AgoraData) const {
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.encryptionKey)
	}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export class EncryptionConfig {

  encryptionMode?: EncryptionMode;

  encryptionKey?: string;

  encryptionKdfSalt?: number[];

  datastreamEncryptionEnabled?: boolean;
}</codeblock>
      <codeblock props="unity cs" outputclass="language-csharp">public class EncryptionConfig
    {
        public ENCRYPTION_MODE encryptionMode;
        public string encryptionKey;
        public byte[] encryptionKdfSalt;
        public bool datastreamEncryptionEnabled;
    }</codeblock>
      <codeblock props="rn" outputclass="language-typescript">export class EncryptionConfig {

  encryptionMode?: EncryptionMode;

  encryptionKey?: string;

  encryptionKdfSalt?: number[];

  datastreamEncryptionEnabled?: boolean;
}</codeblock>
      <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class EncryptionConfig {
  const EncryptionConfig(
      {this.encryptionMode,
      this.encryptionKey,
      this.encryptionKdfSalt,
      this.datastreamEncryptionEnabled});

  @JsonKey(name: 'encryptionMode')
  final EncryptionMode? encryptionMode;

  @JsonKey(name: 'encryptionKey')
  final String? encryptionKey;

  @JsonKey(name: 'encryptionKdfSalt', ignore: true)
  final Uint8List? encryptionKdfSalt;

  @JsonKey(name: 'datastreamEncryptionEnabled')
  final bool? datastreamEncryptionEnabled;

  factory EncryptionConfig.fromJson(Map&lt;String, dynamic> json) =>
      _$EncryptionConfigFromJson(json);

  Map&lt;String, dynamic> toJson() => _$EncryptionConfigToJson(this);
}</codeblock>
      </p>
    </section>
    <section id="parameters">
      <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
      <parml>
      <plentry>
        <pt>encryptionMode</pt>
        <pd>
          <p>The built-in encryption mode. See <xref keyref="ENCRYPTION_MODE" />. Agora recommends using <codeph><ph keyref="AES_128_GCM2" /></codeph> or <codeph><ph keyref="AES_256_GCM2" /></codeph> encrypted mode. These two modes support the use of salt for higher security.</p>
        </pd>
      </plentry>
      <plentry>
        <pt>encryptionKey</pt>
        <pd>
          <p>Encryption key in string type with unlimited length. Agora recommends using a 32-byte key.</p>
          <note type="attention">If you do not set an encryption key or set it as <codeph><ph keyref="NULL" /></codeph>, you cannot use the built-in encryption, and the SDK returns <codeph>-2</codeph>.</note> </pd>
      </plentry>
      <plentry>
        <pt>encryptionKdfSalt</pt>
        <pd>
          <p>Salt, 32 bytes in length. Agora recommends that you use OpenSSL to generate salt on the server side. See Media Stream Encryption for details.</p>
          <p props="native"><ph props="cn">To add Agora built-in media stream encryption in your app, see <xref keyref="channel-encryption"/>.</ph></p>
          <note type="attention">This parameter takes effect only in <codeph><ph keyref="AES_128_GCM2" /></codeph> or <codeph><ph keyref="AES_256_GCM2" /></codeph> encrypted mode. In this case, ensure that this parameter is not <codeph>0</codeph>.</note>
        </pd>
      </plentry>
      <plentry props="android cpp apple framework">
        <pt>datastreamEncryptionEnabled</pt>
        <pd><ph>Whether to enable data stream encryption:</ph><ul>
            <li><codeph><ph keyref="true"/></codeph>: Enable data stream encryption.</li>
            <li><codeph><ph keyref="false"/></codeph>: (Default) Disable data stream encryption.</li>
          </ul>
        </pd>
      </plentry>
      </parml> </section>
  </refbody>
</reference>
