<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startaudiomixing">
    <title><ph keyref="startAudioMixing" /></title>
    <shortdesc id="short"><ph id="shortdesc">Starts playing the music file.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startAudioMixing" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int startAudioMixing(
      String filePath, boolean loopback, boolean replace, int cycle);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)startAudioMixing:(NSString *  _Nonnull)filePath
               loopback:(BOOL)loopback
                replace:(BOOL)replace
                  cycle:(NSInteger)cycle;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int startAudioMixing(const char* filePath,
    bool loopback,
    bool replace,
    int cycle) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startAudioMixing(filePath: string, loopback: boolean, replace: boolean, cycle: number, startPos?: number): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp"> public abstract int StartAudioMixing(string filePath, bool loopback, int cycle);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startAudioMixing(
    filePath: string,
    loopback: boolean,
    cycle: number,
    startPos?: number
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startAudioMixing(
      {required String filePath,
      required bool loopback,
      required int cycle,
      int startPos = 0});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="deprecated" props="native">
            <dlentry>
                <dt>Deprecated:</dt>
                <dd>Use <xref keyref="startAudioMixing2" /> instead.</dd>
            </dlentry>
            </dl>
            <p id="audiomixing_detailed">This method mixes the specified local or online audio file with the audio from the microphone, or replaces the microphone's audio with the specified local or remote audio file. A successful method call triggers the <xref keyref="onAudioMixingStateChanged" /> (<apiname keyref="AUDIO_MIXING_STATE_PLAYING" />) callback. When the audio mixing file playback finishes, the SDK triggers the <apiname keyref="onAudioMixingStateChanged" /> (<apiname keyref="AUDIO_MIXING_STATE_STOPPED" />) callback on the local client.</p>
            <note type="attention" id="audiomixing_note">
            <ul>
            <li>You can call this method either before or after joining a channel. If you need to call <apiname keyref="startAudioMixing" /> multiple times, ensure that the time interval between calling this method is more than 500 ms.</li>
            <li>If the local music file does not exist, the SDK does not support the file format, or the the SDK cannot access the music file URL, the SDK reports the warn code 701.</li>
            <li props="android cpp unity" id="principle">On Android, there are following considerations:<ul>
                <li>To use this method, ensure that the Android device is v4.2 or later, and the API version is v16 or later.</li>
                <li>If you need to play an online music file, Agora does not recommend using the redirected URL address. Some Android devices may fail to open a redirected URL address.</li>
                <li>If you call this method on an emulator, ensure that the music file is in the <codeph>/sdcard/</codeph> directory and the format is MP3.</li>
                </ul></li>
            </ul> </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="playEffect2/filepath" props="unity">
                <pt />
                <pd />
            </plentry>
            <plentry props="native">
                <pt>filePath</pt>
                <pd>
                    <p conkeyref="playEffect3/filepath" />
                </pd>
            </plentry>
            <plentry id="loopback">
                <pt>loopback</pt>
                <pd>
                    <p>Whether to play music files only on the local client:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: Only play music files on the local client so that only the local user can hear the music.</li>
                    <li><codeph><ph keyref="false" /></codeph>: Publish music files to remote clients so that both the local user and remote users can hear the music.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry id="cycle">
                <pt>cycle</pt>
                <pd>
                    <p>The number of times the music file plays.<ul>
                    <li>â‰¥ 0: The number of playback times.  For example, 0 means that the SDK does not play the music file while 1 means that the SDK plays once.</li>
                    <li>-1: Play the audio file in an infinite loop.</li>
                    </ul></p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title>Returns</title>
            <ul>
            <li>0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul> </section>
    </refbody>
</reference>