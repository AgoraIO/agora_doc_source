<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengineex_setdualstreammodeex">
    <title><ph keyref="setDualStreamModeEx"/></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the dual-stream mode on the sender side.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setDualStreamModeEx"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setDualStreamModeEx(Constants.SimulcastStreamMode mode,
      SimulcastStreamConfig streamConfig, RtcConnection connection);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setDualStreamModeEx:(AgoraSimulcastStreamMode)mode
              streamConfig:(AgoraSimulcastStreamConfig*)streamConfig
                connection:(AgoraRtcConnection* _Nonnull)connection;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setDualStreamModeEx(SIMULCAST_STREAM_MODE mode,
                                   const SimulcastStreamConfig&amp; streamConfig,
                                   const RtcConnection&amp; connection) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetDualStreamModeEx(FENUMWRAP_SIMULCAST_STREAM_MODE mode, const FSimulcastStreamConfig&amp; streamConfig, const FRtcConnection&amp; connection);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setDualStreamModeEx(
    mode: SimulcastStreamMode,
    streamConfig: SimulcastStreamConfig,
    connection: RtcConnection
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetDualStreamModeEx(SIMULCAST_STREAM_MODE mode, SimulcastStreamConfig streamConfig, RtcConnection connection);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setDualStreamModeEx(
    mode: SimulcastStreamMode,
    streamConfig: SimulcastStreamConfig,
    connection: RtcConnection
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> setDualStreamModeEx(
      {required SimulcastStreamMode mode,
      required SimulcastStreamConfig streamConfig,
      required RtcConnection connection});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.0.1</dd>
            </dlentry>
            </dl>
            <p id="desc">The SDK defaults to enabling low-quality video stream adaptive mode (<apiname keyref="AUTO_SIMULCAST_STREAM"/>) on the sending end, which means the sender does not actively send low-quality video stream. The receiver with the role of the <b>host</b> can initiate a low-quality video stream request by calling <xref keyref="setRemoteVideoStreamTypeEx"/>, and upon receiving the request, the sending end automatically starts sending the low-quality video stream.<ul>
                <li>If you want to modify this behavior, you can call this method and set <parmname>mode</parmname> to <apiname keyref="DISABLE_SIMULCAST_STREAM"/> (never send low-quality video streams) or <apiname keyref="ENABLE_SIMULCAST_STREAM"/> (always send low-quality video streams).</li>
                <li>If you want to restore the default behavior after making changes, you can call this method again with <parmname>mode</parmname> set to <apiname keyref="AUTO_SIMULCAST_STREAM"/>.</li></ul></p>
            <note id="note">The difference and connection between this method and <xref keyref="enableDualStreamModeEx"/> is as follows:<ul>
                <li>When calling this method and setting <parmname>mode</parmname> to <ph keyref="DISABLE_SIMULCAST_STREAM"/>, it has the same effect as <apiname keyref="enableDualStreamModeEx"/><codeph>(<ph keyref="false"/>)</codeph>.</li>
                <li>When calling this method and setting <parmname>mode</parmname> to <ph keyref="ENABLE_SIMULCAST_STREAM"/>, it has the same effect as <apiname keyref="enableDualStreamModeEx"/><codeph>(<ph keyref="true"/>)</codeph>.</li>
                <li>Both methods can be called before and after joining a channel. If both methods are used, the settings in the method called later takes precedence.</li></ul>
            </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="setDualStreamMode/mode">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="enableDualStreamMode3/streamconfig">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="joinChannelEx/connection">
                <pt/>
                <pd/>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp unity rn electron cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
