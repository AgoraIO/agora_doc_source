<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_pauseallchannelmediarelay">
    <title><ph keyref="pauseAllChannelMediaRelay" /></title>
    <shortdesc id="short"><ph id="shortdesc">Pauses the media stream relay to all target channels.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="pauseAllChannelMediaRelay" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int pauseAllChannelMediaRelay();</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)pauseAllChannelMediaRelay;</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int pauseAllChannelMediaRelay() = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract pauseAllChannelMediaRelay(): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int PauseAllChannelMediaRelay();</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract pauseAllChannelMediaRelay(): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; pauseAllChannelMediaRelay();</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>After the cross-channel media stream relay starts, you can call this method to pause relaying media streams to all target channels; after the pause, if you want to resume the relay, call <xref keyref="resumeAllChannelMediaRelay" />.</p>
            <note type="attention">Call this method after <xref keyref="startOrUpdateChannelMediaRelay" />.</note> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title" /></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException" /> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul>
            <li props="native unreal bp electron unity rn cs">0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul> </section>
    </refbody>
</reference>