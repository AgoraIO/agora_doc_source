<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_echotestconfiguration">
    <title><ph keyref="EchoTestConfiguration" /></title>
    <shortdesc id="short"><ph id="shortdesc">The configuration of the audio and video call loop test.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class EchoTestConfiguration {
  public SurfaceView view = null;
  public boolean enableAudio = true;
  public boolean enableVideo = true;
  public String token = null;
  public String channelId = null;
  public int intervalInSeconds = 2;
 
  @CalledByNative
  public EchoTestConfiguration(SurfaceView view, boolean enableAudio, boolean enableVideo,
      String token, String channelId, int intervalInSeconds) {
    this.view = view;
    this.enableAudio = enableAudio;
    this.enableVideo = enableVideo;
    this.token = token;
    this.channelId = channelId;
    this.intervalInSeconds = intervalInSeconds;
  }

  @CalledByNative
  public EchoTestConfiguration(
      SurfaceView view, boolean enableAudio, boolean enableVideo, String token, String channelId) {
    this(view, enableAudio, enableVideo, token, channelId, 10);
  }

  @CalledByNative
  public EchoTestConfiguration() {
    this.view = null;
    this.enableAudio = true;
    this.enableVideo = true;
    this.token = null;
    this.channelId = null;
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">NS_SWIFT_NAME(AgoraEchoTestConfiguration) 
__attribute__((visibility("default"))) @interface AgoraEchoTestConfiguration : NSObject
@property(strong, nonatomic) VIEW_CLASS* _Nullable view NS_SWIFT_NAME(view);
@property(assign, nonatomic) BOOL enableAudio NS_SWIFT_NAME(enableAudio);
@property(assign, nonatomic) BOOL enableVideo NS_SWIFT_NAME(enableVideo);
@property(copy, nonatomic) NSString* _Nullable token NS_SWIFT_NAME(token);
@property(copy, nonatomic) NSString* _Nonnull channelId NS_SWIFT_NAME(channelId);
@property(assign, nonatomic) NSInteger intervalInSeconds NS_SWIFT_NAME(intervalInSeconds);
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">
struct EchoTestConfiguration {
  view_t view;
  bool enableAudio;
  bool enableVideo;
  const char* token;
  const char* channelId;
  int intervalInSeconds;

  EchoTestConfiguration(view_t v, bool ea, bool ev, const char* t, const char* c, const int is)
   : view(v), enableAudio(ea), enableVideo(ev), token(t), channelId(c), intervalInSeconds(is) {}

  EchoTestConfiguration()
   : view(OPTIONAL_NULLPTR), enableAudio(true), enableVideo(true), token(OPTIONAL_NULLPTR), channelId(OPTIONAL_NULLPTR), intervalInSeconds(2) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class EchoTestConfiguration {

  view?: any;

  enableAudio?: boolean;

  enableVideo?: boolean;

  token?: string;

  channelId?: string;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class EchoTestConfiguration
    {
        public view_t view { set; get; }
        public bool enableAudio { set; get; }
        public bool enableVideo { set; get; }
        public string token { set; get; }
        public string channelId { set; get; }

        public EchoTestConfiguration(view_t v, bool ea, bool ev, string t, string c)
        {
            view = v;
            enableAudio = ea;
            enableVideo = ev;
            token = t;
            channelId = c;
        }

        public EchoTestConfiguration()
        {
            view = 0;
            enableAudio = true;
            enableVideo = true;
            token = "";
            channelId = "";
        }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class EchoTestConfiguration {

  view?: any;

  enableAudio?: boolean;

  enableVideo?: boolean;

  token?: string;

  channelId?: string;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class EchoTestConfiguration {
  const EchoTestConfiguration(
      {this.view,
      this.enableAudio,
      this.enableVideo,
      this.token,
      this.channelId});

  @JsonKey(name: 'view')
  final int? view;

  @JsonKey(name: 'enableAudio')
  final bool? enableAudio;

  @JsonKey(name: 'enableVideo')
  final bool? enableVideo;

  @JsonKey(name: 'token')
  final String? token;

  @JsonKey(name: 'channelId')
  final String? channelId;

  factory EchoTestConfiguration.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$EchoTestConfigurationFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$EchoTestConfigurationToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>view</pt>
                <pd>The view used to render the local user's video. This parameter is only applicable to scenarios testing video devices, that is, when <ph>enableVideo</ph> is <ph keyref="true" />.</pd>
            </plentry>
            <plentry>
                <pt>enableAudio</pt>
                <pd>Whether to enable the audio device for the loop test:<ul>
                    <li><ph keyref="true" />: (Default) Enable the audio device. To test the audio device, set this parameter as <ph keyref="true" />.</li>
                    <li><ph keyref="false" />: Disable the audio device.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>enableVideo</pt>
                <pd>Whether to enable the video device for the loop test:<ul>
                    <li><ph keyref="true" />: (Default) Enable the video device. To test the video device, set this parameter as <ph keyref="true" />.</li>
                    <li><ph keyref="false" />: Disable the video device.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>token.</pt>
                <pd>The token used to secure the audio and video call loop test. If you do not enable App Certificate in Agora Console, you do not need to pass a value in this parameter; if you have enabled App Certificate in Agora Console, you must pass a token in this parameter; the <codeph>uid</codeph> used when you generate the token must be 0xFFFFFFFF, and the channel name used must be the channel name that identifies each audio and video call loop tested. For server-side token generation, see<xref keyref="guide-token"> Authenticate Your Users with Tokens</xref>.</pd>
            </plentry>
            <plentry>
                <pt>channelId</pt>
                <pd>The channel name that identifies each audio and video call loop. To ensure proper loop test functionality, the channel name passed in to identify each loop test cannot be the same when users of the same project (App ID) perform audio and video call loop tests on different devices.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>