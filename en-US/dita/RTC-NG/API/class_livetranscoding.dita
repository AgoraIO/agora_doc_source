<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_livetranscoding">
  <title> <ph keyref="LiveTranscoding" /> </title>
  <shortdesc id="short"><ph id="shortdesc">Transcoding configurations for Media Push.</ph></shortdesc>
  <refbody>
    <section id="prototype">
      <p outputclass="codeblock">
      <codeblock props="android" outputclass="language-java">public class LiveTranscoding {
  public enum AudioSampleRateType {
    TYPE_32000(32000),
    TYPE_44100(44100),
    TYPE_48000(48000);
    private int value;
    private AudioSampleRateType(int v) {
      value = v;
    }
    public static int getValue(AudioSampleRateType type) {
      return type.value;
    }
  }
  public enum VideoCodecProfileType {
    BASELINE(66),
    MAIN(77),
    HIGH(100);
    private int value;
    private VideoCodecProfileType(int v) {
      value = v;
    }
    public static int getValue(VideoCodecProfileType type) {
      return type.value;
    }
  }
  public enum AudioCodecProfileType {
    LC_AAC(0),
    HE_AAC(1),
    HE_AAC(1);
    HE_AAC_V2(2);
    private int value;
    private AudioCodecProfileType(int v) {
      value = v;
    }
    public static int getValue(AudioCodecProfileType type) {
      return type.value;
    }
  }
  public enum VideoCodecType {
    H264(1),
    H265(2);
    private int value;
    private VideoCodecType(int v) {
      value = v;
    }
    public static int getValue(VideoCodecType type) {
      return type.value;
    }
  }
  public int width;
  public int height;
  public int videoBitrate;
  public int videoFramerate;
  public boolean lowLatency;
  @Deprecated public boolean lowLatency;
  public int videoGop;
  private ArrayList&lt;AgoraImage&gt; watermarkList;
  public void addWatermark(AgoraImage watermark) {
    if (watermarkList == null) {
      watermarkList = new ArrayList&lt;AgoraImage&gt;();
    }
    watermarkList.add(watermark);
  }
  public boolean removeWatermark(AgoraImage watermark) {
    if (watermarkList == null) {
      return false;
    }
    return watermarkList.remove(watermark);
  }
  public ArrayList&lt;AgoraImage&gt; getWatermarkList() {
    return watermarkList;
  }
  private ArrayList&lt;AgoraImage&gt; backgroundImageList;
  public void addBackgroundImage(AgoraImage backgroundImage) {
    if (backgroundImageList == null) {
      backgroundImageList = new ArrayList&lt;AgoraImage&gt;();
    }
    backgroundImageList.add(backgroundImage);
  }
  public boolean removeBackgroundImage(AgoraImage backgroundImage) {
    if (backgroundImageList == null) {
      return false;
    }
    return backgroundImageList.remove(backgroundImage);
  }
  public ArrayList&lt;AgoraImage&gt; getBackgroundImageList() {
    return backgroundImageList;
  }
  public AudioSampleRateType audioSampleRate;
  public int audioBitrate;
  public int audioChannels;
  public AudioCodecProfileType audioCodecProfile;
  public VideoCodecProfileType videoCodecProfile;
  public VideoCodecType videoCodecType;
  @Deprecated public int userCount;
  @Deprecated public int backgroundColor;
  public String userConfigExtraInfo;
  public String metadata;
  @Deprecated public String metadata;
  private Map&lt;Integer, TranscodingUser&gt; transcodingUsers;
  private Map&lt;String, Boolean&gt; advancedFeatures;
  public void setAdvancedFeatures(String featureName, Boolean opened) {
    advancedFeatures.put(featureName, opened);
  }
  public Map&lt;String, Boolean&gt; getAdvancedFeatures() {
    return advancedFeatures;
  }
  public static class TranscodingUser {
    public int uid;
    public String userId;
    public String userId;
    public int x;
    public int y;
    public int width;
    public int height;
    public int zOrder;
    public float alpha;
    public int audioChannel;
    public TranscodingUser() {
      alpha = 1;
    }
  }
  public LiveTranscoding() {
    width = 360;
    height = 640;
    videoBitrate = 400;
    videoCodecProfile = VideoCodecProfileType.HIGH;
    videoCodecType = VideoCodecType.H264;
    videoGop = 30;
    videoFramerate = 15;
    lowLatency = false;
    audioSampleRate = AudioSampleRateType.TYPE_44100;
    audioBitrate = 48;
    audioChannels = 1;
    audioCodecProfile = AudioCodecProfileType.LC_AAC;
    transcodingUsers = new HashMap&lt;&gt;();
    advancedFeatures = new HashMap&lt;&gt;();
    backgroundColor = 0xFF000000;
    userConfigExtraInfo = null;
    metadata = null;
  }
  public int addUser(TranscodingUser user) {
    if (user == null || user.uid == 0) {
      return -Constants.ERR_INVALID_ARGUMENT;
    }
    transcodingUsers.put(user.uid, user);
    userCount = transcodingUsers.size();
    return Constants.ERR_OK;
  }
  public final ArrayList&lt;TranscodingUser&gt; getUsers() {
    Collection&lt;TranscodingUser&gt; values = transcodingUsers.values();
    return new ArrayList&lt;&gt;(values);
  }
  public void setUsers(ArrayList&lt;TranscodingUser&gt; users) {
    transcodingUsers.clear();
    if (users != null) {
      for (TranscodingUser user : users) {
        transcodingUsers.put(user.uid, user);
      }
    }
    userCount = transcodingUsers.size();
  }
  public void setUsers(Map&lt;Integer, TranscodingUser&gt; users) {
    transcodingUsers.clear();
    if (users != null) {
      transcodingUsers.putAll(users);
    }
    userCount = transcodingUsers.size();
  }
  public int removeUser(int uid) {
    if (!transcodingUsers.containsKey(uid))
      return -Constants.ERR_INVALID_ARGUMENT;
    transcodingUsers.remove(uid);
    userCount = transcodingUsers.size();
    return Constants.ERR_OK;
  }
  public int getUserCount() {
    return transcodingUsers.size();
  }
  public int getBackgroundColor() {
    return this.backgroundColor;
  }
  public void setBackgroundColor(int color) {
    this.backgroundColor = color;
  }
  public void setBackgroundColor(int red, int green, int blue) {
    this.backgroundColor = (red &lt;&lt; 16) | (green &lt;&lt; 8) | (blue &lt;&lt; 0);
  }
  @Deprecated
  public int getRed() {
    return (backgroundColor &gt;&gt; 16) &amp; 0x0ff;
  }
  @Deprecated
  public int getGreen() {
    return (backgroundColor &gt;&gt; 8) &amp; 0x0ff;
  }
  @Deprecated
  public int getBlue() {
    return backgroundColor &amp; 0x0ff;
  }
  @Deprecated
  public void setRed(int red) {
    int green = getGreen();
    int blue = getBlue();
    this.backgroundColor = (red &lt;&lt; 16) | (green &lt;&lt; 8) | (blue &lt;&lt; 0);
  }
  @Deprecated
  public void setGreen(int green) {
    int red = getRed();
    int blue = getBlue();
    this.backgroundColor = (red &lt;&lt; 16) | (green &lt;&lt; 8) | (blue &lt;&lt; 0);
  }
  @Deprecated
  public void setBlue(int blue) {
    int red = getRed();
    int green = getGreen();
    this.backgroundColor = (red &lt;&lt; 16) | (green &lt;&lt; 8) | (blue &lt;&lt; 0);
  }
}</codeblock>
      <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraLiveTranscoding : NSObject

@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) NSInteger videoBitrate;
@property(assign, nonatomic) NSInteger videoFramerate;
@property(assign, nonatomic) BOOL lowLatency;
@property(assign, nonatomic) NSInteger videoGop;
@property(assign, nonatomic) AgoraVideoCodecProfileType videoCodecProfile;
@property(assign, nonatomic) AgoraVideoCodecTypeForStream videoCodecType;
@property(copy, nonatomic) NSArray&lt;AgoraLiveTranscodingUser *&gt; *_Nullable transcodingUsers;
@property(copy, nonatomic) NSString *_Nullable transcodingExtraInfo;
@property (copy, nonatomic) NSArray&lt;AgoraImage *&gt; *_Nullable watermarkArray;
@property (copy, nonatomic) NSArray&lt;AgoraImage *&gt; *_Nullable backgroundImageArray;
@property(strong, nonatomic) COLOR_CLASS *_Nullable backgroundColor;
@property(assign, nonatomic) AgoraAudioSampleRateType audioSampleRate;
@property(assign, nonatomic) NSInteger audioBitrate;
@property(assign, nonatomic) NSInteger audioChannels;
@property(assign, nonatomic) AgoraAudioCodecProfileType audioCodecProfile;
+ (AgoraLiveTranscoding *_Nonnull)defaultTranscoding;
- (int)addUser:(AgoraLiveTranscodingUser *_Nonnull)user;
- (int)removeUser:(NSUInteger)uid;
- (void)setAdvancedFeatures:(NSString* _Nonnull)featureName opened:(BOOL)opened;
- (NSArray&lt;AgoraLiveStreamAdvancedFeature*&gt;* _Nullable)getAdvancedFeatures;
@end</codeblock>
      <codeblock props="cpp" outputclass="language-cpp">struct LiveTranscoding {
  int width;
  int height;
  int videoBitrate;
  int videoFramerate;
  bool lowLatency;
  int videoGop;
  VIDEO_CODEC_PROFILE_TYPE videoCodecProfile;
  unsigned int backgroundColor;
  VIDEO_CODEC_TYPE_FOR_STREAM videoCodecType;
  unsigned int userCount;
  TranscodingUser* transcodingUsers;
  const char* transcodingExtraInfo;
  const char* metadata;
  RtcImage* watermark;
  unsigned int watermarkCount;
  RtcImage* backgroundImage;
  unsigned int backgroundImageCount;
  AUDIO_SAMPLE_RATE_TYPE audioSampleRate;
  int audioBitrate;
  int audioChannels;
  AUDIO_CODEC_PROFILE_TYPE audioCodecProfile;
  LiveStreamAdvancedFeature* advancedFeatures;
  unsigned int advancedFeatureCount;
  LiveTranscoding() : width(360), height(640), videoBitrate(400), videoFramerate(15), lowLatency(false), videoGop(30), videoCodecProfile(VIDEO_CODEC_PROFILE_HIGH), backgroundColor(0x000000), videoCodecType(VIDEO_CODEC_H264_FOR_STREAM), userCount(0), transcodingUsers(NULL), transcodingExtraInfo(NULL), metadata(NULL), watermark(NULL), watermarkCount(0), backgroundImage(NULL), backgroundImageCount(0), audioSampleRate(AUDIO_SAMPLE_RATE_48000), audioBitrate(48), audioChannels(1), audioCodecProfile(AUDIO_CODEC_PROFILE_LC_AAC), advancedFeatures(NULL), advancedFeatureCount(0) {}
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export class LiveTranscoding {
  
  width?: number;
  
  height?: number;
  
  videoBitrate?: number;
  
  videoFramerate?: number;
  
  lowLatency?: boolean;
  
  videoGop?: number;
  
  videoCodecProfile?: VideoCodecProfileType;
  
  backgroundColor?: number;
  
  videoCodecType?: VideoCodecTypeForStream;
  
  userCount?: number;
  
  transcodingUsers?: TranscodingUser[];
  
  transcodingExtraInfo?: string;
  
  metadata?: string;
  
  watermark?: RtcImage[];
  
  watermarkCount?: number;
  
  backgroundImage?: RtcImage[];
  
  backgroundImageCount?: number;
  
  audioSampleRate?: AudioSampleRateType;
  
  audioBitrate?: number;
  
  audioChannels?: number;
  
  audioCodecProfile?: AudioCodecProfileType;
  
  advancedFeatures?: LiveStreamAdvancedFeature[];
  
  advancedFeatureCount?: number;
}</codeblock>
      <codeblock props="unity cs" outputclass="language-csharp">public class LiveTranscoding
    {
        public LiveTranscoding()
        {
            width = 360;
            height = 640;
            videoBitrate = 400;
            videoFramerate = 15;
            lowLatency = false;
            videoGop = 30;
            videoCodecProfile = VIDEO_CODEC_PROFILE_TYPE.VIDEO_CODEC_PROFILE_HIGH;
            backgroundColor = 0x000000;
            videoCodecType = VIDEO_CODEC_TYPE_FOR_STREAM.VIDEO_CODEC_H264_FOR_STREAM;
            userCount = 0;
            transcodingUsers = new TranscodingUser[0];
            transcodingExtraInfo = null;
            metadata = null;
            watermark = new RtcImage[0];
            watermarkCount = 0;
            backgroundImage = new RtcImage[0];
            backgroundImageCount = 0;
            audioSampleRate = AUDIO_SAMPLE_RATE_TYPE.AUDIO_SAMPLE_RATE_48000;
            audioBitrate = 48;
            audioChannels = 1;
            audioCodecProfile = AUDIO_CODEC_PROFILE_TYPE.AUDIO_CODEC_PROFILE_LC_AAC;
            advancedFeatures = new LiveStreamAdvancedFeature[0];
            advancedFeatureCount = 0;
        }

        public LiveTranscoding(int width, int height, int videoBitrate, int videoFramerate, bool lowLatency,
            int videoGop, VIDEO_CODEC_PROFILE_TYPE videoCodecProfile, uint backgroundColor,
            VIDEO_CODEC_TYPE_FOR_STREAM videoCodecType, uint userCount, TranscodingUser[] transcodingUsers,
            string transcodingExtraInfo, string metadata, RtcImage[] watermark, uint watermarkCount,
            RtcImage[] backgroundImage, uint backgroundImageCount,
            AUDIO_SAMPLE_RATE_TYPE audioSampleRate, int audioBitrate, int audioChannels,
            AUDIO_CODEC_PROFILE_TYPE audioCodecProfile, LiveStreamAdvancedFeature[] advancedFeatures, uint advancedFeatureCount)
        {
            this.width = width;
            this.height = height;
            this.videoBitrate = videoBitrate;
            this.videoFramerate = videoFramerate;
            this.lowLatency = lowLatency;
            this.videoGop = videoGop;
            this.videoCodecProfile = videoCodecProfile;
            this.backgroundColor = backgroundColor;
            this.videoCodecType = videoCodecType;
            this.userCount = userCount;
            this.transcodingUsers = transcodingUsers;
            this.transcodingExtraInfo = transcodingExtraInfo;
            this.metadata = metadata;
            this.watermark = watermark;
            this.watermarkCount = watermarkCount;
            this.backgroundImage = backgroundImage;
            this.backgroundImageCount = backgroundImageCount;
            this.audioSampleRate = audioSampleRate;
            this.audioBitrate = audioBitrate;
            this.audioChannels = audioChannels;
            this.audioCodecProfile = audioCodecProfile;
            this.advancedFeatures = advancedFeatures;
            this.advancedFeatureCount = advancedFeatureCount;
        }
        public int width { set; get; }
        public int height { set; get; }
        public int videoBitrate { set; get; }
        public int videoFramerate { set; get; }
        public bool lowLatency { set; get; }
        public int videoGop { set; get; }
        public VIDEO_CODEC_PROFILE_TYPE videoCodecProfile { set; get; }
        public uint backgroundColor { set; get; }
        public VIDEO_CODEC_TYPE_FOR_STREAM videoCodecType { set; get; }
        public uint userCount { set; get; }
        public TranscodingUser[] transcodingUsers { set; get; }
        public string transcodingExtraInfo { set; get; }
        public string metadata { set; get; }
        public RtcImage[] watermark { set; get; }
        public uint watermarkCount { set; get; }
        public RtcImage[] backgroundImage { set; get; }
        public uint backgroundImageCount { set; get; }
        public AUDIO_SAMPLE_RATE_TYPE audioSampleRate { set; get; }
        public int audioBitrate { set; get; }
        public int audioChannels { set; get; }
        public AUDIO_CODEC_PROFILE_TYPE audioCodecProfile { set; get; }
        public LiveStreamAdvancedFeature[] advancedFeatures { set; get; }
        public uint advancedFeatureCount { set; get; }
    }</codeblock>
      <codeblock props="rn" outputclass="language-typescript">export class LiveTranscoding {
  
  width?: number;
  
  height?: number;
  
  videoBitrate?: number;
  
  videoFramerate?: number;
  
  lowLatency?: boolean;
  
  videoGop?: number;
  
  videoCodecProfile?: VideoCodecProfileType;
  
  backgroundColor?: number;
  
  videoCodecType?: VideoCodecTypeForStream;
  
  userCount?: number;
  
  transcodingUsers?: TranscodingUser[];
  
  transcodingExtraInfo?: string;
  
  metadata?: string;
  
  watermark?: RtcImage[];
  
  watermarkCount?: number;
  
  backgroundImage?: RtcImage[];
  
  backgroundImageCount?: number;
  
  audioSampleRate?: AudioSampleRateType;
  
  audioBitrate?: number;
  
  audioChannels?: number;
  
  audioCodecProfile?: AudioCodecProfileType;
  
  advancedFeatures?: LiveStreamAdvancedFeature[];
  
  advancedFeatureCount?: number;
}</codeblock>
      <codeblock props="flutter" outputclass="language-dart">class LiveTranscoding {
  const LiveTranscoding(
      {this.width,
      this.height,
      this.videoBitrate,
      this.videoFramerate,
      this.lowLatency,
      this.videoGop,
      this.videoCodecProfile,
      this.backgroundColor,
      this.videoCodecType,
      this.userCount,
      this.transcodingUsers,
      this.transcodingExtraInfo,
      this.metadata,
      this.watermark,
      this.watermarkCount,
      this.backgroundImage,
      this.backgroundImageCount,
      this.audioSampleRate,
      this.audioBitrate,
      this.audioChannels,
      this.audioCodecProfile,
      this.advancedFeatures,
      this.advancedFeatureCount});

  @JsonKey(name: 'width')
  final int? width;

  @JsonKey(name: 'height')
  final int? height;

  @JsonKey(name: 'videoBitrate')
  final int? videoBitrate;

  @JsonKey(name: 'videoFramerate')
  final int? videoFramerate;

  @JsonKey(name: 'lowLatency')
  final bool? lowLatency;

  @JsonKey(name: 'videoGop')
  final int? videoGop;

  @JsonKey(name: 'videoCodecProfile')
  final VideoCodecProfileType? videoCodecProfile;

  @JsonKey(name: 'backgroundColor')
  final int? backgroundColor;

  @JsonKey(name: 'videoCodecType')
  final VideoCodecTypeForStream? videoCodecType;

  @JsonKey(name: 'userCount')
  final int? userCount;

  @JsonKey(name: 'transcodingUsers')
  final List&lt;TranscodingUser&gt;? transcodingUsers;

  @JsonKey(name: 'transcodingExtraInfo')
  final String? transcodingExtraInfo;

  @JsonKey(name: 'metadata')
  final String? metadata;

  @JsonKey(name: 'watermark')
  final List&lt;RtcImage&gt;? watermark;

  @JsonKey(name: 'watermarkCount')
  final int? watermarkCount;

  @JsonKey(name: 'backgroundImage')
  final List&lt;RtcImage&gt;? backgroundImage;

  @JsonKey(name: 'backgroundImageCount')
  final int? backgroundImageCount;

  @JsonKey(name: 'audioSampleRate')
  final AudioSampleRateType? audioSampleRate;

  @JsonKey(name: 'audioBitrate')
  final int? audioBitrate;

  @JsonKey(name: 'audioChannels')
  final int? audioChannels;

  @JsonKey(name: 'audioCodecProfile')
  final AudioCodecProfileType? audioCodecProfile;

  @JsonKey(name: 'advancedFeatures')
  final List&lt;LiveStreamAdvancedFeature&gt;? advancedFeatures;

  @JsonKey(name: 'advancedFeatureCount')
  final int? advancedFeatureCount;

  factory LiveTranscoding.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$LiveTranscodingFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$LiveTranscodingToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp" /></p>
    </section>
    <section id="parameters">
      <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
      <parml>
      <plentry props="android cpp electron rn unity flutter cs">
        <pt>width</pt>
        <pd>
          <p>The width of the video in pixels. The default value is 360.</p>
          <ul>
          <li>When pushing video streams to the CDN, the value range of <codeph>width</codeph> is [64,1920]. If the value is less than 64, Agora server automatically adjusts it to 64; if the value is greater than 1920, Agora server automatically adjusts it to 1920.</li>
          <li>When pushing audio streams to the CDN, set <codeph>width</codeph> and <codeph>height</codeph> as 0.</li>
          </ul> </pd>
      </plentry>
      <plentry props="android cpp electron rn unity flutter cs">
        <pt>height</pt>
        <pd>
          <p>The height of the video in pixels. The default value is 640.</p>
          <ul>
          <li>When pushing video streams to the CDN, the value range of<codeph> height</codeph> is [64,1080]. If the value is less than 64, Agora server automatically adjusts it to 64; if the value is greater than 1080, Agora server automatically adjusts it to 1080.</li>
          <li>When pushing audio streams to the CDN, set <codeph>width</codeph> and <codeph>height</codeph> as 0.</li>
          </ul> </pd>
      </plentry>
      <plentry props="ios mac">
        <pt>size</pt>
        <pd>
          <p>The size of the video (width and height in pixels).</p>
          <ul>
          <li>When pushing video streams to the CDN, note the following:<ul>
            <li>The value range of the width is [64,1920].  If the value is less than 64, Agora server automatically adjusts it to 64; if the value is greater than 1920, Agora server automatically adjusts it to 1920.</li>
            <li>The value range of the height is [64,1080]. If the value is less than 64, Agora server automatically adjusts it to 64; if the value is greater than 1080, Agora server automatically adjusts it to 1080.</li>
            </ul></li>
          <li>When pushing audio streams to the CDN, set the width and height as 0.</li>
          </ul> </pd>
      </plentry>
      <plentry>
        <pt>videoBitrate</pt>
        <pd>
          <p>Bitrate of the output video stream for Media Push in Kbps. The default value is 400 Kbps.</p>
          <p props="native">Set this member according to the <xref keyref="video-profile-table">Video profile</xref> table. If you set a bitrate beyond the proper range, the SDK automatically adapts it to a value within the range.</p>
        </pd>
      </plentry>
      <plentry>
        <pt>videoFrameRate</pt>
        <pd>
          <p>Frame rate (fps) of the output video stream set for Media Push. The default value is 15.  The value range is (0,30].</p>
          <note type="attention">The Agora server adjusts any value over 30 to 30.</note></pd>
      </plentry>
      <plentry>
        <pt>lowLatency</pt>
        <pd>
          <dl outputclass="deprecated">
          <dlentry>
            <dt>Deprecated</dt>
            <dd>This member is deprecated.</dd>
          </dlentry>
          </dl>
          <p>Latency mode:</p>
          <ul>
          <li><codeph><ph keyref="true" /></codeph>: Low latency with unassured quality.</li>
          <li><codeph><ph keyref="false" /></codeph>: (Default) High latency with assured quality.</li>
          </ul></pd>
      </plentry>
      <plentry>
        <pt>videoGop</pt>
        <pd>GOP (Group of Pictures) in fps of the video frames  for Media Push. The default value is 30.</pd>
      </plentry>
      <plentry>
        <pt>videoCodecProfile</pt>
        <pd>
          <p>Video codec profile type for Media Push. Set it as 66, 77, or 100 (default). See <xref keyref="VIDEO_CODEC_PROFILE_TYPE" /> for details.</p>
          <note type="attention">If you set this parameter to any other value, Agora adjusts it to the default value.</note></pd>
      </plentry>
      <plentry>
        <pt>videoCodecType</pt>
        <pd>Video codec profile types for Media Push. See <xref keyref="VIDEO_CODEC_TYPE_FOR_STREAM" />.</pd>
      </plentry>
      <plentry>
        <pt>transcodingUsers</pt>
        <pd>
          <p>Manages the user layout configuration in the Media Push. Agora supports a maximum of 17 transcoding users in a Media Push channel. See <xref keyref="TranscodingUser" />.</p>
        </pd>
      </plentry>
      <plentry>
        <pt props="ios mac cpp unity electron rn flutter cs">transcodingExtraInfo</pt>
        <pt props="android">userConfigExtraInfo</pt>
        <pd>
          <p>Reserved property. Extra user-defined information to send SEI for the H.264/H.265 video stream to the CDN live client. Maximum length: 4096 bytes. For more information on SEI, see <xref keyref="faq-sei">SEI-related questions</xref>.</p>
        </pd>
      </plentry>
      <plentry props="ios mac">
        <pt>backgroundColor</pt>
        <pd>
          <p>The background color in for Media Push.</p>
          <p>The color of the custom background image. The format is a hexadecimal integer defined by RGB, without the # sign, such as 0xFFB6C1 for light pink. The default value is 0x000000(black).</p>
          <p>COLOR_CLASS is a general name for the type:<ul>
          <li>iOS: UIColor</li>
          <li>macOS: NSColor</li>
          </ul></p>
        </pd>
      </plentry>
      <plentry props="android cpp unity electron rn flutter cs">
        <pt>backgroundColor</pt>
        <pd props="android">
          <dl outputclass="deprecated">
          <dlentry>
            <dt>Deprecated</dt>
            <dd>Obsolete and not recommended for use. Use <xref keyref="setBackgroundColor" /> instead.</dd>
          </dlentry>
          </dl>
        </pd>
        <pd props="cpp unity electron rn flutter cs">
          <p>The background color in RGB hex value. Value only. Do not include a preceeding #. For example, 0xFFB6C1 (light pink). The default value is 0x000000 (black).</p>
        </pd>
      </plentry>
      <plentry props="android cpp electron rn unity flutter cs">
        <pt>userCount</pt>
        <pd>
          <dl outputclass="deprecated" props="android">
          <dlentry>
            <dt>Deprecated</dt>
            <dd>Obsolete and not recommended for use. Use <xref keyref="getUserCount" /> instead.</dd>
          </dlentry>
          </dl>
          <p>The number of users in the Media Push. The value range is [0,17].</p>
        </pd>
      </plentry>
      <plentry props="android cpp unity electron rn flutter cs">
        <pt>metadata</pt>
        <pd>
          <dl outputclass="deprecated">
          <dlentry>
            <dt>Deprecated</dt>
            <dd>Obsolete and not recommended for use.</dd>
          </dlentry>
          </dl>
          <p>The metadata sent to the CDN client.</p>
        </pd>
      </plentry>
      <plentry props="cpp unity flutter electron rn cs">
        <pt>watermark</pt>
        <pd>
          <p>The watermark on the live video. The image format needs to be PNG. See <xref keyref="RtcImage" />.</p>
          <p>You can add one watermark, or add multiple watermarks using an array. <ph props="cpp unity electron rn cs">This parameter is used with <parmname>watermarkCount</parmname>.</ph></p>
        </pd>
      </plentry>
      <plentry props="cpp unity electron rn flutter cs">
        <pt>backgroundImage</pt>
        <pd>
          <p>The number of background images on the live video. The image format needs to be PNG. See <xref keyref="RtcImage" />.</p>
          <p>You can add a background image or use an array to add multiple background images. This parameter is used with <parmname>backgroundImageCount</parmname>.</p>
        </pd>
      </plentry>
      <plentry props="ios mac">
        <pt>backgroundImageArray</pt>
        <pd>An array of background images on the live video. See <xref keyref="RtcImage" />. You can use <parmname>backgroundImageArray</parmname> to add one or more background images. The image format needs to be PNG. The total number of watermarks and background images on a live video must be greater than or equal to 0 and less than or equal to 10.</pd>
      </plentry>
      <plentry>
        <pt>audioSampleRate</pt>
        <pd>
          <p>The audio sampling rate (Hz) of the output media stream. See <xref keyref="AUDIO_SAMPLE_RATE_TYPE" />.</p>
        </pd>
      </plentry>
      <plentry>
        <pt>audioBitrate</pt>
        <pd>
          <p>Bitrate (Kbps) of the audio output stream for Media Push. The default value is 48, and the highest value is 128.</p>
        </pd>
      </plentry>
      <plentry>
        <pt>audioChannels</pt>
        <pd>
          <p>The number of audio channels for Media Push. Agora recommends choosing 1 (mono), or 2 (stereo) audio channels. Special players are required if you choose 3, 4, or 5.</p>
          <ul>
          <li>1: (Default) Mono</li>
          <li>2: Stereo.</li>
          <li>3: Three audio channels.</li>
          <li>4: Four audio channels.</li>
          <li>5: Five audio channels.</li>
          </ul> </pd>
      </plentry>
      <plentry>
        <pt>audioCodecProfile</pt>
        <pd>Audio codec profile type for Media Push. See <xref keyref="AUDIO_CODEC_PROFILE_TYPE" />.</pd>
      </plentry>
      <plentry props="ios mac">
        <pt>watermarkArray</pt>
        <pd>The array of watermarks on the live video. See <xref keyref="RtcImage" />. You can add one or more <parmname>watermarks</parmname> using <parmname>watermarkArray</parmname>. The image format needs to be PNG. The total number of watermarks and background images on a live video must be greater than or equal to 0 and less than or equal to 10.</pd>
      </plentry>
      <plentry props="cpp unity electron rn flutter cs">
        <pt>watermarkCount</pt>
        <pd>The number of watermarks on the live video. The total number of watermarks and background images can range from 0 to 10. This parameter is used with <parmname>watermark</parmname>.</pd>
      </plentry>
      <plentry props="cpp unity electron rn flutter cs">
        <pt>backgroundImageCount</pt>
        <pd>The number of background images on the live video. The total number of watermarks and background images can range from 0 to 10. This parameter is used with <parmname>backgroundImage</parmname>.</pd>
      </plentry>
      <plentry props="cpp unity electron rn flutter cs">
        <pt>advancedFeatures</pt>
        <pd>Advanced features of the Media Push with transcoding. See <xref keyref="LiveStreamAdvancedFeature" />.</pd>
      </plentry>
      <plentry props="cpp unity electron rn flutter cs">
        <pt>advancedFeatureCount</pt>
        <pd>The number of enabled advanced features. The default value is 0.</pd>
      </plentry>
      </parml> </section>
    <section props="android apple">
      <title>Method</title>
      <parml>
      <plentry props="android">
        <pt>addBackgroundImage</pt>
        <pd>Adds a background image. See <xref keyref="addBackgroundImage" />.</pd>
      </plentry>
      <plentry props="android apple">
        <pt>addUser</pt>
        <pd>Adds a user for video mixing during the CDN live streaming. See <xref keyref="addUser" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>addWatermark</pt>
        <pd>Adds a watermark. See <xref keyref="addWatermark" />.</pd>
      </plentry>
      <plentry props="android apple">
        <pt>getAdvancedFeatures</pt>
        <pd>Gets the status of the advanced features of streaming with transcoding. See <xref keyref="getAdvancedFeatures" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>getBackgroundColor</pt>
        <pd>Gets the background color in hex. See <xref keyref="getBackgroundColor" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>getBackgroundImageList</pt>
        <pd>Gets the list of background images. See <xref keyref="getBackgroundImageList" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>getBlue</pt>
        <pd>
          <dl outputclass="deprecated">
          <dlentry>
            <dt>Deprecated</dt>
            <dd>Obsolete and not recommended for use.</dd>
          </dlentry>
          </dl>
         <p>Gets the background color's blue component. See <xref keyref="getBlue" />.</p>
        </pd>
      </plentry>
      <plentry props="android">
        <pt>getGreen</pt>
        <pd>
          <dl outputclass="deprecated">
          <dlentry>
            <dt>Deprecated</dt>
            <dd>Obsolete and not recommended for use.</dd>
          </dlentry>
          </dl>
         <p>Gets the background color's green component. See <xref keyref="getGreen" />.</p>
        </pd>
      </plentry>
      <plentry props="android">
        <pt>getRed</pt>
        <pd>
          <dl outputclass="deprecated">
          <dlentry>
            <dt>Deprecated</dt>
            <dd>Obsolete and not recommended for use.</dd>
          </dlentry>
          </dl>
          <p>Gets the background color's red component. See <xref keyref="getRed" />.</p>
        </pd>
      </plentry>
      <plentry props="android">
        <pt>getUserCount</pt>
        <pd>Gets the number of users transcoded in the CDN live streaming. See <xref keyref="getUserCount" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>getUsers</pt>
        <pd>Gets the user list in the CDN live streaming. See <xref keyref="getUsers" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>getWatermarkList</pt>
        <pd>Gets the watermark list. See <xref keyref="getWatermarkList" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>removeBackgroundImage</pt>
        <pd>Removes a background image from the background image list. See <xref keyref="removeBackgroundImage" />.</pd>
      </plentry>
      <plentry props="android apple">
        <pt>removeUser</pt>
        <pd>Removes a user from video mixing during the CDN live streaming. See <xref keyref="removeUser" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>removeWatermark</pt>
        <pd>Removes a watermark from the watermark list. See <xref keyref="removeWatermark" />.</pd>
      </plentry>
      <plentry props="android apple">
        <pt>setAdvancedFeatures</pt>
        <pd>Sets whether to enable the advanced features of streaming with transcoding. See <xref keyref="setAdvancedFeatures" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>setBackgroundColor [1/2]</pt>
        <pd>Sets the background color of the CDN live stream in the format of RGB hex. See <xref keyref="setBackgroundColor" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>setBackgroundColor [2/2]</pt>
        <pd>Sets the background color in RGB format. See <xref keyref="setBackgroundColor2" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>setBlue</pt>
        <pd>
          <dl outputclass="deprecated">
          <dlentry>
            <dt>Deprecated</dt>
            <dd>Obsolete and not recommended for use.</dd>
          </dlentry>
          </dl>
          <p>Sets the background color's blue component. See <xref keyref="setBlue" />.</p>
        </pd>
      </plentry>
      <plentry props="android">
        <pt>setGreen</pt>
        <pd>
          <dl outputclass="deprecated">
          <dlentry>
            <dt>Deprecated</dt>
            <dd>Obsolete and not recommended for use.</dd>
          </dlentry>
          </dl>
          <p>Sets the background color's green component. See <xref keyref="setGreen" />.</p>
        </pd>
      </plentry>
      <plentry props="android">
        <pt>setRed</pt>
        <pd>
          <dl outputclass="deprecated">
          <dlentry>
            <dt>Deprecated</dt>
            <dd>Obsolete and not recommended for use.</dd>
          </dlentry>
          </dl>
          <p>Sets the background color's red component. See <xref keyref="setRed" />.</p>
        </pd>
      </plentry>
      <plentry props="android">
        <pt>setUsers [1/2]</pt>
        <pd>Sets the users in batches in the CDN live streaming. See <xref keyref="setUsers" />.</pd>
      </plentry>
      <plentry props="android">
        <pt>setUsers [2/2]</pt>
        <pd>Sets the users in batches in the CDN live streaming. See <xref keyref="setUsers2" />.</pd>
      </plentry>
        <plentry props="apple">
          <pt>defaultTranscoding</pt>
          <pd>Applies the default transcoding settings, see <xref keyref="defaultTranscoding" />.</pd>
        </plentry>
      </parml>
    </section>
  </refbody>
</reference>