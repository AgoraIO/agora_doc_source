<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_leavechannel2">
    <title><ph keyref="leaveChannel2"/></title>
    <shortdesc id="short"><ph id="shortdesc">Sets channel options and leaves the channel.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="leaveChannel2"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int leaveChannel(LeaveChannelOptions options);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)leaveChannel:(AgoraLeaveChannelOptions * _Nonnull)options
  leaveChannelBlock:(void (^ _Nullable)(AgoraChannelStats * _Nonnull))leaveChannelBlock;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int leaveChannel(const LeaveChannelOptions&amp; options) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int LeaveChannel(const FLeaveChannelOptions&amp; options);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract leaveChannel(options?: LeaveChannelOptions): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int LeaveChannel(LeaveChannelOptions options); </codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract leaveChannel(options?: LeaveChannelOptions): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; leaveChannel({LeaveChannelOptions? options});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>This method will release all resources related to the session, leave the channel, that is, hang up or exit the call. This method can be called whether or not a call is currently in progress.</p>
            <p>After joining the channel, you must call this method or  to end the call, otherwise, the next call cannot be started.</p>
            <p props="native unreal bp unity electron flutter cs">This method call is asynchronous. When this method returns, it does not necessarily mean that the user has left the channel. After actually leaving the channel, the local user triggers the <apiname keyref="onLeaveChannel"/> callback; after the user in the communication scenario and the host in the live streaming scenario leave the channel, the remote user triggers the <xref keyref="onUserOffline"/> callback.</p>
            <p props="rn">Calling this method does not necessarily mean that the user has left the channel. After actually leaving the channel, the local user triggers the <apiname keyref="onLeaveChannel"/> callback; after the user in the communication scenario and the host in the live streaming scenario leave the channel, the remote user triggers the <xref keyref="onUserOffline"/> callback.</p>
            <note conkeyref="leaveChannel/note" props="native unreal bp flutter unity electron rn cs"/> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml id="parml_jsr_dky_hqb">
            <plentry id="options">
                <pt>options</pt>
                <pd>The options for leaving the channel. See <xref keyref="LeaveChannelOptions"/>.</pd>
            </plentry>
            <plentry props="ios mac" id="leavechannelblock">
                <pt>leaveChannelBlock</pt>
                <pd>
                    <p>This callback indicates that a user leaves a channel, and provides the statistics of the call in <xref keyref="RtcStats"/>.</p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
