<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setextensionproviderproperty">
    <title><ph keyref="setExtensionProviderProperty" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the properties of the extension provider.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setExtensionProviderProperty" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setExtensionProviderProperty(String provider, String key, String value);
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int) setExtensionProviderPropertyWithVendor:(NSString * __nonnull)provider key:(NSString * __nonnull)key value:(NSString * __nonnull)value;
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setExtensionProviderProperty(
      const char* provider, const char* key, const char* value) = 0;
</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetExtensionProviderProperty(FString provider, FString key, FString value);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setExtensionProviderProperty(
    provider: string,
    key: string,
    value: string
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetExtensionProviderProperty(string provider, string key, string value);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setExtensionProviderProperty(
    provider: string,
    key: string,
    value: string
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setExtensionProviderProperty(
    {required String provider, required String key, required String value});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>You can call this method to set the attributes of the extension provider and initialize the relevant parameters according to the type of the provider.</p>
            <p>
            <note type="attention">
            <p>Call this method after <xref keyref="enableExtension" />, and before enabling the audio (<xref keyref="enableAudio" />/<xref keyref="enableLocalAudio" />) or the video (<xref keyref="enableVideo" />/<xref keyref="enableLocalVideo" />).</p>
            </note> </p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="setExtensionProperty/vendor">
                <pt />
                <pd />
            </plentry>
            <plentry conkeyref="setExtensionProperty/key">
                <pt />
                <pd />
            </plentry>
            <plentry conkeyref="setExtensionProperty/value">
                <pt />
                <pd />
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp unity electron rn cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>