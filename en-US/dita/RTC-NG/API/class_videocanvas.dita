<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videocanvas">
    <title><ph keyref="VideoCanvas"/></title>
    <shortdesc id="short"><ph id="shortdesc">Attributes of the video canvas object.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class VideoCanvas {
  public int uid;
  public int subviewUid;
  public static final int RENDER_MODE_HIDDEN = 1;
  public static final int RENDER_MODE_FIT = 2;
  public static final int RENDER_MODE_ADAPTIVE = 3;
  public static final int VIEW_SETUP_MODE_REPLACE = 0;
  public static final int VIEW_SETUP_MODE_ADD = 1;
  public static final int VIEW_SETUP_MODE_REMOVE = 2;
  public View view;
  public SurfaceTexture surfaceTexture;
  public int renderMode;
  public int mirrorMode;
  public int setupMode = VIEW_SETUP_MODE_REPLACE;
  public int sourceType;
  public int mediaPlayerId;
  public Rect rect;
  public boolean enableAlphaMask;
  public int backgroundColor;
  public Constants.VideoModulePosition position =
      Constants.VideoModulePosition.VIDEO_MODULE_POSITION_POST_CAPTURER;
  public VideoCanvas(View view) {
    uid = 0;
    this.view = view;
    this.renderMode = RENDER_MODE_HIDDEN;
    this.backgroundColor = 0;
  }
  public VideoCanvas(View view, int renderMode, int uid) {
    this.uid = uid;
    this.view = view;
    this.renderMode = renderMode;
    this.backgroundColor = 0;
  }
  public VideoCanvas(View view, int renderMode, int uid, int subviewUid) {
    this.uid = uid;
    this.subviewUid = subviewUid;
    this.view = view;
    this.renderMode = renderMode;
    this.backgroundColor = 0;
  }
}
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcVideoCanvas : NSObject
@property(assign, nonatomic) NSUInteger uid;
@property(assign, nonatomic) NSUInteger subviewUid;
@property(strong, nonatomic) VIEW_CLASS *_Nullable view;
@property(assign, nonatomic) AgoraVideoRenderMode renderMode;
@property(assign, nonatomic) AgoraVideoMirrorMode mirrorMode;
@property(assign, nonatomic) AgoraVideoViewSetupMode setupMode;
@property(nonatomic, assign) AgoraVideoSourceType sourceType;
@property(nonatomic, assign) int mediaPlayerId;
@property(assign, nonatomic) CGRect cropArea;
@property(assign, nonatomic) UInt32 backgroundColor;
@property(assign, nonatomic) BOOL enableAlphaMask;
@property(assign, nonatomic) AgoraVideoModulePosition position;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct VideoCanvas {
  uid_t uid;
  uid_t subviewUid;
  view_t view;
  uint32_t backgroundColor;
  media::base::RENDER_MODE_TYPE renderMode;
  VIDEO_MIRROR_MODE_TYPE mirrorMode;
  VIDEO_VIEW_SETUP_MODE setupMode;
  VIDEO_SOURCE_TYPE sourceType;
  int mediaPlayerId;
  Rectangle cropArea;
  bool enableAlphaMask;
  media::base::VIDEO_MODULE_POSITION position;
  VideoCanvas()
    : uid(0), subviewUid(0), view(NULL), backgroundColor(0x00000000), renderMode(media::base::RENDER_MODE_HIDDEN), mirrorMode(VIDEO_MIRROR_MODE_AUTO),
      setupMode(VIDEO_VIEW_SETUP_REPLACE), sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY),
      cropArea(0, 0, 0, 0), enableAlphaMask(false), position(media::base::POSITION_POST_CAPTURER) {}
  VideoCanvas(view_t v, media::base::RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt)
    : uid(0), subviewUid(0), view(v), backgroundColor(0x00000000), renderMode(m), mirrorMode(mt), setupMode(VIDEO_VIEW_SETUP_REPLACE),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY),
      cropArea(0, 0, 0, 0), enableAlphaMask(false), position(media::base::POSITION_POST_CAPTURER) {}
  VideoCanvas(view_t v, media::base::RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, uid_t u)
    : uid(u), subviewUid(0), view(v), backgroundColor(0x00000000), renderMode(m), mirrorMode(mt), setupMode(VIDEO_VIEW_SETUP_REPLACE),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY),
      cropArea(0, 0, 0, 0), enableAlphaMask(false), position(media::base::POSITION_POST_CAPTURER) {}
  VideoCanvas(view_t v, media::base::RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, uid_t u, uid_t subu)
    : uid(u), subviewUid(subu), view(v), backgroundColor(0x00000000), renderMode(m), mirrorMode(mt), setupMode(VIDEO_VIEW_SETUP_REPLACE),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY),
      cropArea(0, 0, 0, 0), enableAlphaMask(false), position(media::base::POSITION_POST_CAPTURER) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FVideoCanvas
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	UImage* view;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	ERENDER_MODE_TYPE renderMode = ERENDER_MODE_TYPE::RENDER_MODE_HIDDEN;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	EVIDEO_MIRROR_MODE_TYPE mirrorMode = EVIDEO_MIRROR_MODE_TYPE::VIDEO_MIRROR_MODE_AUTO;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	int64 uid;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	bool isScreenView = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	int64 priv_size;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	EVIDEO_SOURCE_TYPE sourceType = EVIDEO_SOURCE_TYPE::VIDEO_SOURCE_CAMERA_PRIMARY;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	FRectangle cropArea;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|VideoCanvas&quot;)
	EVIDEO_VIEW_SETUP_MODE setupMode = EVIDEO_VIEW_SETUP_MODE::VIDEO_VIEW_SETUP_REPLACE;
};</codeblock>
            <codeblock props="unreal" outputclass="language-cpp">struct VideoCanvas {
    view_t view;
    uid_t uid;
    VIDEO_SOURCE_TYPE sourceType;
    int mediaPlayerId;

  VideoCanvas()
    : view(NULL), uid(0), sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY) {}
  
  VideoCanvas(view_t v, uid_t u)
    : view(v), uid(u),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY)
  
  VideoCanvas(view_t v, user_id_t)
    : view(v), uid(0),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class VideoCanvas {
  view?: any
  uid?: number;
  subviewUid?: number;
  backgroundColor?: number;
  renderMode?: RenderModeType
  mirrorMode?: VideoMirrorModeType
  setupMode?: VideoViewSetupMode;
  sourceType?: VideoSourceType
  mediaPlayerId?: number;
  cropArea?: Rectangle;
  enableAlphaMask?: boolean;
  position?: VideoModulePosition;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class VideoCanvas
    {

        public view_t view;
        public uint uid;
        public uint subviewUid;
        public uint backgroundColor;
        public RENDER_MODE_TYPE renderMode;
        public VIDEO_MIRROR_MODE_TYPE mirrorMode;
        public VIDEO_VIEW_SETUP_MODE setupMode;
        public VIDEO_SOURCE_TYPE sourceType;
        public int mediaPlayerId;
        public Rectangle cropArea;
        public bool enableAlphaMask;
        public VIDEO_MODULE_POSITION position; 
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoCanvas {
  view?: any
  uid?: number;
  subviewUid?: number;
  backgroundColor?: number;
  renderMode?: RenderModeType
  mirrorMode?: VideoMirrorModeType
  setupMode?: VideoViewSetupMode;
  sourceType?: VideoSourceType
  mediaPlayerId?: number;
  cropArea?: Rectangle;
  enableAlphaMask?: boolean;
  position?: VideoModulePosition;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class VideoCanvas {
  const VideoCanvas(
      {this.uid,
      this.subviewUid,
      this.view,
      this.backgroundColor,
      this.renderMode,
      this.mirrorMode,
      this.setupMode,
      this.sourceType,
      this.mediaPlayerId,
      this.cropArea,
      this.enableAlphaMask,
      this.position});

  @JsonKey(name: &#x27;uid&#x27;)
  final int? uid;

  @JsonKey(name: &#x27;subviewUid&#x27;)
  final int? subviewUid;

  @JsonKey(name: &#x27;view&#x27;)
  final int? view;

  @JsonKey(name: &#x27;backgroundColor&#x27;)
  final int? backgroundColor;

  @JsonKey(name: &#x27;renderMode&#x27;)
  final RenderModeType? renderMode;

  @JsonKey(name: &#x27;mirrorMode&#x27;)
  final VideoMirrorModeType? mirrorMode;

  @JsonKey(name: &#x27;setupMode&#x27;)
  final VideoViewSetupMode? setupMode;

  @JsonKey(name: &#x27;sourceType&#x27;)
  final VideoSourceType? sourceType;

  @JsonKey(name: &#x27;mediaPlayerId&#x27;)
  final int? mediaPlayerId;

  @JsonKey(name: &#x27;cropArea&#x27;)
  final Rectangle? cropArea;

  @JsonKey(name: &#x27;enableAlphaMask&#x27;)
  final bool? enableAlphaMask;

  @JsonKey(name: &#x27;position&#x27;)
  final VideoModulePosition? position;

  factory VideoCanvas.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$VideoCanvasFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$VideoCanvasToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc"> </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>uid</pt>
                <pd>User ID that publishes the video source.</pd>
                <pd props="cpp unity rn flutter">For Android and iOS platforms, when the video source is a mixed video stream ( <apiname keyref="VIDEO_SOURCE_TRANSCODED"/>), this parameter represents the ID of the user who publishes the mixed video stream.</pd>
                <pd props="android ios">When the video source is a mixed video stream ( <apiname keyref="VIDEO_SOURCE_TRANSCODED"/>), this parameter represents the ID of the user who publishes the mixed video stream.</pd>
              </plentry>
                <plentry>
                    <pt>subviewUid</pt>
                    <pd props="android ios cpp unity rn flutter">The ID of the user who publishes a specific sub-video stream within the mixed video stream.</pd>
                    <pd props="mac electron">Reserved for future use.<note type="attention" props="cpp unity flutter">This parameter applies to Android and iOS only.</note></pd>
                </plentry>
                <plentry>
                    <pt>view</pt>
                    <pd props="native flutter unity cs electron rn">The video display window.</pd>
                    <pd props="unreal bp">The video image. You need to define a pointer of UImage type and pass in this parameter. The sample code is as follows:<codeblock props="unreal bp" outputclass="language-cpp">agora::rtc::VideoCanvas videoCanvas;
    UImage* LocalVideo;
    videoCanvas.view = LocalVideo;</codeblock></pd>
                </plentry>
                <plentry props="native flutter unity cs electron rn bp">
                    <pt>renderMode</pt>
                    <pd props="ios mac cpp unity electron rn flutter cs bp">The rendering mode of the video. See <xref keyref="RENDER_MODE_TYPE"/>.</pd>
                    <pd props="android"><ul conkeyref="setLocalRenderMode2/rendermodetype"><li/></ul></pd>
                </plentry>
                <plentry props="native flutter unity cs electron rn bp">
                    <pt>mirrorMode</pt>
                <pd>
                    <p props="ios mac cpp unity electron rn flutter cs bp">The mirror mode of the view. See <xref keyref="VIDEO_MIRROR_MODE_TYPE"/>.</p>
                    <p props="android">
                    <ul conkeyref="setLocalRenderMode2/videomirrormodetype">
                    <li/>
                    </ul> </p>
                    <note type="attention">
                    <ul>
                    <li>For the mirror mode of the local video view: If you use a front camera, the SDK enables the mirror mode by default; if you use a rear camera, the SDK disables the mirror mode by default.</li>
                    <li>For the remote user: The mirror mode is disabled by default.</li>
                    </ul> </note> </pd>
            </plentry>
            <plentry>
                <pt>uid</pt>
                <pd>The user ID.</pd>
            </plentry>
            <plentry id="sourcetype">
                <pt>sourceType</pt>
                <pd>The type of the video source. See <xref keyref="VIDEO_SOURCE_TYPE"/>.</pd>
            </plentry>
            <plentry props="native flutter unity cs electron rn bp">
                <pt>setupMode</pt>
                <pd props="ios mac cpp flutter unity cs electron rn bp">Setting mode of the view. See <xref keyref="VIDEO_VIEW_SETUP_MODE"/>.</pd>
                <pd props="android">Setting mode of the view.<ul>
                    <li><ph keyref="VIDEO_VIEW_SETUP_REPLACE"/>(0): (Default) Replaces a view.</li>
                    <li><ph keyref="VIDEO_VIEW_SETUP_ADD"/>(1): Adds a view.</li>
                    <li><ph keyref="VIDEO_VIEW_SETUP_REMOVE"/>(2): Deletes a view.</li>
                </ul></pd>
            </plentry>
            <plentry props="native unreal flutter unity cs electron rn">
                <pt>mediaPlayerId</pt>
                <pd>The ID of the media player. You can get the Device ID by calling <xref keyref="getMediaPlayerId"/>.</pd>
                <pd>This parameter is required when <parmname>sourceType</parmname> is <apiname keyref="VIDEO_SOURCE_MEDIA_PLAYER"/>.</pd>
            </plentry>
            <plentry props="android">
              <pt>rect</pt>
              <pd>(Optional) Display area for the video frame. See <xref keyref="rect-link"/>. <parmname>width</parmname> and <parmname>height</parmname> represent the video pixel width and height of the area. The default value is null (width or height is 0), which means that the actual resolution of the video frame is displayed.</pd>
          </plentry>
          <plentry props="cpp flutter unity cs electron rn bp">
                <pt>cropArea</pt>
                <pd>(Optional) Display area of the video frame, see <xref keyref="Rectangle"/>. <parmname>width</parmname> and <parmname>height</parmname> represent the video pixel width and height of the area. The default value is null (width or height is 0), which means that the actual resolution of the video frame is displayed.</pd>
          </plentry>
          <plentry props="apple">
            <pt>cropArea</pt>
            <pd>(Optional) Display area of the video frame, see <xref keyref="rect-link"/>. <parmname>width</parmname> and <parmname>height</parmname> represent the video pixel width and height of the area. The default value is null (width or height is 0), which means that the actual resolution of the video frame is displayed.</pd>
          </plentry>
          <plentry props="native flutter unity cs electron rn">
              <pt>backgroundColor</pt>
              <pd>The background color of the video canvas in RGBA format. The default value is 0x00000000, which represents completely transparent black.</pd>
          </plentry>
          <plentry props="cpp ios mac unity electron flutter cs">
              <pt>enableAlphaMask</pt>
              <pd props="cpp mac unity electron flutter">(Optional) Whether the receiver enables alpha mask rendering:<ul>
                  <li><codeph><ph keyref="true"/></codeph>: The receiver enables alpha mask rendering.</li>
                  <li><codeph><ph keyref="false"/></codeph>: (default) The receiver disables alpha mask rendering.</li>
                </ul>
              <p>Alpha mask rendering can create images with transparent effects and extract portraits from videos. When used in combination with other methods, you can implement effects such as portrait-in-picture and watermarking.</p>
              <note type="attention" props="cpp mac unity electron flutter"><ul><li>This property applies to macOS only.</li><li>The receiver can render alpha channel information only when the sender enables alpha transmission.</li><li>To enable alpha transmission, <xref keyref="ticket-link"/>.</li></ul></note>
              </pd>
              <pd props="cs ios">Reserved.</pd>
          </plentry>
                <plentry>
                    <pt>position</pt>
                    <pd>The observation position of the video frame in the video link. See <xref keyref="VIDEO_MODULE_POSITION"/>.</pd>
                </plentry>
            </parml> </section>
    </refbody>
</reference>
