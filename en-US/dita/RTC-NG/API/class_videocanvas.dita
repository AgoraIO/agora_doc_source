<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videocanvas">
    <title><ph keyref="VideoCanvas" /></title>
    <shortdesc id="short"><ph id="shortdesc">Attributes of video canvas object.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class VideoCanvas {

  public static final int RENDER_MODE_HIDDEN = 1;
  public static final int RENDER_MODE_FIT = 2;
  public static final int RENDER_MODE_ADAPTIVE = 3;
  public View view;
  public int renderMode;
  public int mirrorMode;
  public int sourceType;
  public int sourceId;
  public int uid;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcVideoCanvas : NSObject

@property(strong, nonatomic) VIEW_CLASS *_Nullable view;
@property(assign, nonatomic) AgoraVideoRenderMode renderMode;
@property(assign, nonatomic) AgoraVideoMirrorMode mirrorMode;
@property(assign, nonatomic) NSUInteger uid;
@property(copy, nonatomic) NSString *_Nullable userId;
@property(nonatomic, assign) AgoraVideoSourceType sourceType;
@property(nonatomic, assign) int sourceId;

@end</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class VideoCanvas {
  view?: any
  renderMode?: RenderModeType
  mirrorMode?: VideoMirrorModeType
  uid?: number
  isScreenView?: boolean
  priv?: number[]
  priv_size?: number
  sourceType?: VideoSourceType
  cropArea?: Rectangle
  setupMode?: VideoViewSetupMode
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class VideoCanvas
    {
        public VideoCanvas()
        {
            view = 0;
            renderMode = RENDER_MODE_TYPE.RENDER_MODE_HIDDEN;
            uid = 0;
            mirrorMode = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_AUTO;
            sourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY;        }

        public VideoCanvas(view_t v, RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, uint u)
        {
            this.view = v;
            this.renderMode = m;
            this.mirrorMode = mt;
            this.uid = u;
            this.sourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY;        }

        public VideoCanvas(view_t v, RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, string u)
        {
            this.view = v;
            this.renderMode = m;
            this.mirrorMode = mt;
            this.uid = 0;
            this.sourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY;
        }
        public view_t view { set; get; }
        public RENDER_MODE_TYPE renderMode { set; get; }
        public VIDEO_MIRROR_MODE_TYPE mirrorMode { set; get; }
        public uint uid { set; get; }
        public VIDEO_SOURCE_TYPE sourceType { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoCanvas {
  view?: any;
  renderMode?: RenderModeType;
  mirrorMode?: VideoMirrorModeType;
  uid?: number;
  isScreenView?: boolean;
  priv?: number[];
  priv_size?: number;
  sourceType?: VideoSourceType;
  cropArea?: Rectangle;
  setupMode?: VideoViewSetupMode;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class VideoCanvas {
  const VideoCanvas(
      {this.view,
      this.renderMode,
      this.mirrorMode,
      this.uid,
      this.isScreenView,
      this.priv,
      this.privSize,
      this.sourceType,
      this.cropArea,
      this.setupMode});

  @JsonKey(name: 'view')
  final int? view;
  @JsonKey(name: 'renderMode')
  final RenderModeType? renderMode;
  @JsonKey(name: 'mirrorMode')
  final VideoMirrorModeType? mirrorMode;
  @JsonKey(name: 'uid')
  final int? uid;
  @JsonKey(name: 'isScreenView')
  final bool? isScreenView;
  @JsonKey(name: 'priv', ignore: true)
  final Uint8List? priv;
  @JsonKey(name: 'priv_size')
  final int? privSize;
  @JsonKey(name: 'sourceType')
  final VideoSourceType? sourceType;
  @JsonKey(name: 'cropArea')
  final Rectangle? cropArea;
  @JsonKey(name: 'setupMode')
  final VideoViewSetupMode? setupMode;
  factory VideoCanvas.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$VideoCanvasFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$VideoCanvasToJson(this);
}</codeblock> </p>
        </section>
        <section id="detailed_desc"> </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>view</pt>
                <pd>Video display window.</pd>
            </plentry>
            <plentry>
                <pt>renderMode</pt>
                <pd>
                    <p props="ios mac cpp unity electron rn flutter">The rendering mode of the video. See <xref keyref="RENDER_MODE_TYPE" />.</p>
                    <p props="android">
                    <ul conkeyref="setLocalRenderMode2/rendermodetype">
                    <li />
                    </ul> </p>
                </pd>
            </plentry>
            <plentry>
                <pt>mirrorMode</pt>
                <pd>
                    <p props="ios mac cpp unity electron rn flutter">The mirror mode of the view. See <xref keyref="VIDEO_MIRROR_MODE_TYPE" />.</p>
                    <p props="android">
                    <ul conkeyref="setLocalRenderMode2/videomirrormodetype">
                    <li />
                    </ul> </p>
                    <note type="attention">
                    <ul>
                    <li>For the mirror mode of the local video view: If you use a front camera, the SDK enables the mirror mode by default; if you use a rear camera, the SDK disables the mirror mode by default.</li>
                    <li>For the remote user: The mirror mode is disabled by default.</li>
                    </ul> </note> </pd>
            </plentry>
            <plentry>
                <pt>uid</pt>
                <pd>The user ID.</pd>
            </plentry>
            <plentry id="sourcetype">
                <pt>sourceType</pt>
                <pd>The type of the video source, see <xref keyref="VIDEO_SOURCE_TYPE" />.</pd>
            </plentry>
            <plentry props="android ios mac">
                <pt>sourceId</pt>
                <pd>The ID of the video source.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>