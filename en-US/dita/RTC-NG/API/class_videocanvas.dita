<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videocanvas">
    <title><ph keyref="VideoCanvas" /></title>
    <shortdesc id="short"><ph id="shortdesc">Attributes of video canvas object.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class VideoCanvas {
    public static final int RENDER_MODE_HIDDEN = 1;
    public static final int RENDER_MODE_FIT = 2;
    public static final int RENDER_MODE_ADAPTIVE = 3;

  public static final int VIEW_SETUP_MODE_REPLACE = 0;

  public static final int VIEW_SETUP_MODE_ADD = 1;

  public static final int VIEW_SETUP_MODE_REMOVE = 2;
    public View view;
    public int uid;
    public int renderMode;
    public int mirrorMode;
    public int setupMode = VIEW_SETUP_MODE_REPLACE;
    public int sourceType;
    public int mediaPlayerId;
    public Rect rect;

  public VideoCanvas(View view) {
    this.view = view;
    this.renderMode = RENDER_MODE_HIDDEN;
  }

  public VideoCanvas(View view, int renderMode) {
    this.view = view;
    this.renderMode = renderMode;
    this.uid = 0;
  }

  public VideoCanvas(View view, int renderMode, int uid) {
    this.view = view;
    this.renderMode = renderMode;
    this.uid = uid;
  }

  public VideoCanvas(View view, int renderMode, int mirrorMode, int uid) {
    this.view = view;
    this.renderMode = renderMode;
    this.mirrorMode = mirrorMode;
    this.uid = uid;
  }

  public VideoCanvas(View view, int renderMode, int mirrorMode, int sourceType, int uid) {
    this.view = view;
    this.renderMode = renderMode;
    this.mirrorMode = mirrorMode;
    this.sourceType = sourceType;
    this.uid = uid;
  }

  public VideoCanvas(
      View view, int renderMode, int mirrorMode, int sourceType, int mediaPlayerId, int uid) {
    this.view = view;
    this.renderMode = renderMode;
    this.mirrorMode = mirrorMode;
    this.sourceType = sourceType;
    this.mediaPlayerId = mediaPlayerId;
    this.uid = uid;
  }

  public VideoCanvas(View view, int renderMode, int mirrorMode, int sourceType, int mediaPlayerId,
      int uid, Rect rect, int setupMode) {
    this.view = view;
    this.renderMode = renderMode;
    this.mirrorMode = mirrorMode;
    this.sourceType = sourceType;
    this.mediaPlayerId = mediaPlayerId;
    this.uid = uid;
    this.rect = rect;
    this.setupMode = setupMode;
  }
}</codeblock>
            <codeblock props="ios" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcVideoCanvas : NSObject
@property(strong, nonatomic) VIEW_CLASS *_Nullable view;
@property(assign, nonatomic) NSUInteger uid;
@property(assign, nonatomic) AgoraVideoRenderMode renderMode;
@property(assign, nonatomic) AgoraVideoMirrorMode mirrorMode;
@property(assign, nonatomic) AgoraVideoViewSetupMode setupMode;
@property(nonatomic, assign) AgoraVideoSourceType sourceType;
@property(nonatomic, assign) int mediaPlayerId;
@property(assign, nonatomic) CGRect cropArea;
@end</codeblock>
            <codeblock props="mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcVideoCanvas : NSObject
@property(strong, nonatomic) VIEW_CLASS *_Nullable view;
@property(assign, nonatomic) NSUInteger uid;
@property(assign, nonatomic) AgoraVideoRenderMode renderMode;
@property(assign, nonatomic) AgoraVideoMirrorMode mirrorMode;
@property(assign, nonatomic) AgoraVideoViewSetupMode setupMode;
@property(nonatomic, assign) AgoraVideoSourceType sourceType;
@property(nonatomic, assign) int mediaPlayerId;
@property(assign, nonatomic) CGRect cropArea;
@property(assign, nonatomic) BOOL enableAlphaMask;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct VideoCanvas {
    view_t view;
    uid_t uid;
    media::base::RENDER_MODE_TYPE renderMode;
    VIDEO_MIRROR_MODE_TYPE mirrorMode;
    VIDEO_VIEW_SETUP_MODE setupMode;
    VIDEO_SOURCE_TYPE sourceType;
    int mediaPlayerId;
    Rectangle cropArea;
    bool enableAlphaMask;

  VideoCanvas()
    : view(NULL), uid(0), renderMode(media::base::RENDER_MODE_HIDDEN), mirrorMode(VIDEO_MIRROR_MODE_AUTO),
      setupMode(VIDEO_VIEW_SETUP_REPLACE), sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY), cropArea(0, 0, 0, 0), enableAlphaMask(false) {}
  
  VideoCanvas(view_t v, media::base::RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, uid_t u)
    : view(v), uid(u), renderMode(m), mirrorMode(mt), setupMode(VIDEO_VIEW_SETUP_REPLACE),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY), cropArea(0, 0, 0, 0), enableAlphaMask(false) {}
  
  VideoCanvas(view_t v, media::base::RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, user_id_t)
    : view(v), uid(0), renderMode(m), mirrorMode(mt), setupMode(VIDEO_VIEW_SETUP_REPLACE),
      sourceType(VIDEO_SOURCE_CAMERA_PRIMARY), mediaPlayerId(-ERR_NOT_READY), cropArea(0, 0, 0, 0), enableAlphaMask(false) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class VideoCanvas {
  view?: any
  uid?: number;
  renderMode?: RenderModeType
  mirrorMode?: VideoMirrorModeType
  setupMode?: VideoViewSetupMode;
  sourceType?: VideoSourceType
  mediaPlayerId?: number;
  cropArea?: Rectangle;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class VideoCanvas
    {
        public VideoCanvas()
        {
            view = 0;
            uid = 0;
            renderMode = RENDER_MODE_TYPE.RENDER_MODE_HIDDEN;

            mirrorMode = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_AUTO;
            setupMode = VIDEO_VIEW_SETUP_MODE.VIDEO_VIEW_SETUP_REPLACE;
            sourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY;
            mediaPlayerId = -(int)ERROR_CODE_TYPE.ERR_NOT_READY;
            cropArea = new Rectangle();

        }

        public VideoCanvas(view_t v, RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, uint u)
        {
            this.view = v;
            this.renderMode = m;
            this.mirrorMode = mt;
            this.uid = u;
            setupMode = VIDEO_VIEW_SETUP_MODE.VIDEO_VIEW_SETUP_REPLACE;
            sourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY;
            mediaPlayerId = -(int)ERROR_CODE_TYPE.ERR_NOT_READY;
            cropArea = new Rectangle();
        }

        public VideoCanvas(view_t v, RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, string u)
        {
            this.view = v;
            this.renderMode = m;
            this.mirrorMode = mt;
            this.uid = 0;
            setupMode = VIDEO_VIEW_SETUP_MODE.VIDEO_VIEW_SETUP_REPLACE;
            sourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY;
            mediaPlayerId = -(int)ERROR_CODE_TYPE.ERR_NOT_READY;
            cropArea = new Rectangle();
        }
      }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoCanvas {
  view?: any
  uid?: number;
  renderMode?: RenderModeType
  mirrorMode?: VideoMirrorModeType
  setupMode?: VideoViewSetupMode;
  sourceType?: VideoSourceType
  mediaPlayerId?: number;
  cropArea?: Rectangle;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class VideoCanvas {
  const VideoCanvas(
      {this.view,
      this.uid,
      this.renderMode,
      this.mirrorMode,
      this.setupMode,
      this.sourceType,
      this.mediaPlayerId,
      this.cropArea});

  @JsonKey(name: 'view')
  final int? view;

  @JsonKey(name: 'uid')
  final int? uid;

  @JsonKey(name: 'renderMode')
  final RenderModeType? renderMode;

  @JsonKey(name: 'mirrorMode')
  final VideoMirrorModeType? mirrorMode;

  @JsonKey(name: 'setupMode')
  final VideoViewSetupMode? setupMode;

  @JsonKey(name: 'sourceType')
  final VideoSourceType? sourceType;

  @JsonKey(name: 'mediaPlayerId')
  final int? mediaPlayerId;

  @JsonKey(name: 'cropArea')
  final Rectangle? cropArea;

  factory VideoCanvas.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$VideoCanvasFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$VideoCanvasToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc"> </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>view</pt>
                <pd>Video display window.</pd>
            </plentry>
            <plentry>
                <pt>renderMode</pt>
                <pd>
                    <p props="ios mac cpp unity electron rn flutter">The rendering mode of the video. See <xref keyref="RENDER_MODE_TYPE" />.</p>
                    <p props="android">
                    <ul conkeyref="setLocalRenderMode2/rendermodetype">
                    <li />
                    </ul> </p>
                </pd>
            </plentry>
            <plentry>
                <pt>mirrorMode</pt>
                <pd>
                    <p props="ios mac cpp unity electron rn flutter">The mirror mode of the view. See <xref keyref="VIDEO_MIRROR_MODE_TYPE" />.</p>
                    <p props="android">
                    <ul conkeyref="setLocalRenderMode2/videomirrormodetype">
                    <li />
                    </ul> </p>
                    <note type="attention">
                    <ul>
                    <li>For the mirror mode of the local video view: If you use a front camera, the SDK enables the mirror mode by default; if you use a rear camera, the SDK disables the mirror mode by default.</li>
                    <li>For the remote user: The mirror mode is disabled by default.</li>
                    </ul> </note> </pd>
            </plentry>
            <plentry>
                <pt>uid</pt>
                <pd>The user ID.</pd>
            </plentry>
            <plentry id="sourcetype">
                <pt>sourceType</pt>
                <pd>The type of the video frame, see <xref keyref="VIDEO_SOURCE_TYPE" />.</pd>
            </plentry>
            <plentry props="android ios mac">
                <pt>sourceId</pt>
                <pd>The ID of the video source.</pd>
            </plentry>
            <plentry props="ios mac cpp framework">
                <pt>setupMode</pt>
                <pd>Setting mode of the view. See <xref keyref="VIDEO_VIEW_SETUP_MODE" />.</pd>
            </plentry>
            <plentry props="android">
                <pt>setupMode</pt>
                <pd>Setting mode of the view.<ul>
                    <li><ph keyref="VIDEO_VIEW_SETUP_REPLACE" />(0): (Default) Replaces a view.</li>
                    <li><ph keyref="VIDEO_VIEW_SETUP_ADD" />(1): Adds a view.</li>
                    <li><ph keyref="VIDEO_VIEW_SETUP_REMOVE" />(2): Delete a view.</li>
                </ul></pd>
            </plentry>
            <plentry>
                <pt>mediaPlayerId</pt>
                <pd>The ID of the media player. You can get the Device ID by calling <xref keyref="getMediaPlayerId" />.</pd>
                <pd>This parameter is required when <parmname>sourceType</parmname> is <apiname keyref="VIDEO_SOURCE_MEDIA_PLAYER" />.</pd>
            </plentry>
            <plentry props="android cpp framework">
                <pt>cropArea</pt>
                <pd><ph props="cpp framework">(Android and iOS only)</ph> (Optional) The display area for the video frame. See <xref keyref="Rectangle" />. <parmname>width</parmname> and <parmname>height</parmname> represent the video pixel width and height of the area. The default value is null (width or height is 0), which means that the actual resolution of the video frame is displayed.</pd>
             </plentry>   
             <plentry props="apple">
                <pt>cropArea</pt>
                    <pd>(Optional) The display area for video frames, which consists of the following parameters:<ul>
                    <li>x: The horizontal offset from the top-left corner.</li>
                    <li>y: The vertical offset from the top-left corner.</li>
                    <li>width: The width of the region.</li>
                    <li>height: The height of the region.</li>
                    </ul><parmname>width</parmname> and <parmname>height</parmname> represent the video pixel width and height of the area. The default value is null (width or height is 0), which means that the actual resolution of the video frame is displayed.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>