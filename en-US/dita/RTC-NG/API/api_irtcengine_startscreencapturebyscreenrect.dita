<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startscreencapturebyscreenrect">
    <title><ph keyref="startScreenCaptureByScreenRect" /></title>
    <shortdesc id="short"><ph id="shortdesc">Captures the whole or part of a screen by specifying the screen rect.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startScreenCaptureByScreenRect" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec" />
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int startScreenCaptureByScreenRect(const Rectangle&amp; screenRect,
     const Rectangle&amp; regionRect,
     const ScreenCaptureParameters&amp; captureParams) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startScreenCaptureByScreenRect(
    screenRect: Rectangle,
    regionRect: Rectangle,
    captureParams: ScreenCaptureParameters
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StartScreenCaptureByScreenRect(Rectangle screenRect, Rectangle regionRect,
            ScreenCaptureParameters captureParams);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startScreenCaptureByScreenRect(
    screenRect: Rectangle,
    regionRect: Rectangle,
    captureParams: ScreenCaptureParameters
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startScreenCaptureByScreenRect(
    {required Rectangle screenRect,
    required Rectangle regionRect,
    required ScreenCaptureParameters captureParams});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="deprecated">
                <dlentry>
                    <dt>Deprecated:</dt>
                    <dd>This method is deprecated. Use <xref keyref="startScreenCaptureByDisplayId" /> instead. Agora strongly recommends using <apiname keyref="startScreenCaptureByDisplayId" /> if you need to start screen sharing on a device connected to another display.</dd>
                </dlentry>
                </dl>
   <p id="desc">This method shares a screen or part of the screen. You need to specify the area of the screen to be shared.</p>
   <p conkeyref="startScreenCaptureByDisplayId/apisequence" />
   <note type="attention" id="note" props="cpp unreal bp electron unity flutter">This method applies to Windows only.</note>
        </section>
        <section id="parameters"><title>Parameters</title>
   <parml>
       <plentry props="cpp unreal bp unity flutter electron cs">
  <pt>screenRect</pt>
  <pd>Sets the relative location of the screen to the virtual screen.</pd>
       </plentry>
       <plentry>
  <pt>regionRect</pt>
  <pd props="cpp unreal bp unity flutter electron cs"><ph props="cpp unreal bp unity cs">(Optional) </ph>Sets the relative location of the region to the screen. If you do not set this parameter, the SDK shares the whole screen. See <xref keyref="Rectangle" />. If the specified region overruns the screen, the SDK shares only the region within it; if you set width or height as 0, the SDK shares the whole screen.</pd>
</plentry>
       <plentry>
  <pt>captureParams</pt>
  <pd>The screen sharing encoding parameters. The default video resolution is 1920 Ã— 1080, that is, 2,073,600 pixels. Agora uses the value of this parameter to calculate the charges. See <xref keyref="ScreenCaptureParameters" />.</pd>
       </plentry>
   </parml>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul>
            <li props="native unreal bp electron unity rn cs">0: Success.</li>
            <li>&lt; 0: Failure.<ul conkeyref="startScreenCaptureByDisplayId/err"><li /></ul>
            </li>
            </ul> </section>
    </refbody>
</reference>