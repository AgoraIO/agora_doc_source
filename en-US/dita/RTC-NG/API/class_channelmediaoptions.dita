<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_channelmediaoptions">
    <title> <ph keyref="ChannelMediaOptions"/> </title>
    <shortdesc id="short"> </shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class ChannelMediaOptions {
  public Boolean publishCameraTrack;
  public Boolean publishScreenCaptureVideo;
  public Boolean publishScreenCaptureAudio;
  public Boolean publishCustomAudioTrack;
  public Boolean publishDirectCustomAudioTrack;
  public Boolean publishCustomVideoTrack;
  public Boolean publishEncodedVideoTrack;
  public Boolean publishMediaPlayerAudioTrack;
  public Boolean publishMediaPlayerVideoTrack;
  public Boolean publishRhythmPlayerTrack;
  public Integer publishMediaPlayerId;
  public Boolean publishMicrophoneTrack;
  public Boolean autoSubscribeAudio;
  public Boolean autoSubscribeVideo;
  public Boolean enableAudioRecordingOrPlayout;
  public Integer clientRoleType;
  public Integer audienceLatencyLevel;
  public Integer defaultVideoStreamType;
  public Integer channelProfile;
  public Integer audioDelayMs;
  public Integer mediaPlayerAudioDelayMs;
  public String token;
  public Boolean enableBuiltInMediaEncryption;
  public Integer publishCustomAudioSourceId;
  public Integer customVideoTrackId;
  public Boolean isAudioFilterable;
  public Boolean isInteractiveAudience;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcChannelMediaOptions : NSObject
@property(assign, nonatomic) BOOL publishCameraTrack;
@property(assign, nonatomic) BOOL publishSecondaryCameraTrack;
@property(assign, nonatomic) BOOL publishMicrophoneTrack;
#if TARGET_OS_IPHONE
@property(assign, nonatomic) BOOL publishScreenCaptureVideo;
@property(assign, nonatomic) BOOL publishScreenCaptureAudio;
#elif TARGET_OS_MAC
@property(assign, nonatomic) BOOL publishScreenTrack;
@property(assign, nonatomic) BOOL publishSecondaryScreenTrack;
#endif
@property(assign, nonatomic) BOOL publishCustomAudioTrack;
@property(assign, nonatomic) NSInteger publishCustomAudioSourceId;
@property(assign, nonatomic) BOOL publishCustomAudioTrackEnableAec;
@property(assign, nonatomic) BOOL  publishDirectCustomAudioTrack;

@property(assign, nonatomic) BOOL publishCustomVideoTrack;
@property(assign, nonatomic) BOOL publishEncodedVideoTrack;
@property(assign, nonatomic) BOOL publishMediaPlayerAudioTrack;
@property(assign, nonatomic) BOOL publishMediaPlayerVideoTrack;
@property(assign, nonatomic) BOOL publishTrancodedVideoTrack;
@property(assign, nonatomic) BOOL autoSubscribeAudio;
@property(assign, nonatomic) BOOL autoSubscribeVideo;
@property(assign, nonatomic) BOOL enableAudioRecordingOrPlayout;
@property(assign, nonatomic) NSInteger publishMediaPlayerId;
@property(assign, nonatomic) AgoraClientRole clientRoleType;
@property(assign, nonatomic) AgoraAudienceLatencyLevelType audienceLatencyLevel;
@property(assign, nonatomic) AgoraVideoStreamType defaultVideoStreamType;
@property(assign, nonatomic) AgoraChannelProfile channelProfile;
@property(assign, nonatomic) NSInteger mediaPlayerAudioDelayMs;
@property(copy, nonatomic) NSString * _Nullable token;
@property(assign, nonatomic) BOOL enableBuiltInMediaEncryption;

@property(assign, nonatomic) BOOL publishRhythmPlayerTrack;
@property(assign, nonatomic) BOOL isInteractiveAudience;

@property(assign, nonatomic) NSInteger customVideoTrackId;

@property(assign, nonatomic) BOOL isAudioFilterable;

@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct ChannelMediaOptions {
  Optional&lt;bool&gt; publishCameraTrack;
  Optional&lt;bool&gt; publishSecondaryCameraTrack;
  Optional&lt;bool&gt; publishMicrophoneTrack;

  #if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;&amp; TARGET_OS_IPHONE)
  Optional&lt;bool&gt; publishScreenCaptureVideo;
  Optional&lt;bool&gt; publishScreenCaptureAudio;
  #else
  Optional&lt;bool&gt; publishScreenTrack;
  Optional&lt;bool&gt; publishSecondaryScreenTrack;
  #endif

  Optional&lt;bool&gt; publishCustomAudioTrack;
  Optional&lt;int&gt; publishCustomAudioSourceId;
  Optional&lt;bool&gt; publishCustomAudioTrackEnableAec;
  Optional&lt;bool&gt; publishDirectCustomAudioTrack;
  Optional&lt;bool&gt; publishCustomVideoTrack;
  Optional&lt;bool&gt; publishEncodedVideoTrack;
  Optional&lt;bool&gt; publishMediaPlayerAudioTrack;
  Optional&lt;bool&gt; publishMediaPlayerVideoTrack;
  Optional&lt;bool&gt; publishTrancodedVideoTrack;
  Optional&lt;bool&gt; autoSubscribeAudio;
  Optional&lt;bool&gt; autoSubscribeVideo;
  Optional&lt;bool&gt; enableAudioRecordingOrPlayout;
  Optional&lt;int&gt; publishMediaPlayerId;
  Optional&lt;CLIENT_ROLE_TYPE&gt; clientRoleType;
  Optional&lt;AUDIENCE_LATENCY_LEVEL_TYPE&gt; audienceLatencyLevel;
  Optional&lt;VIDEO_STREAM_TYPE&gt; defaultVideoStreamType;
  Optional&lt;CHANNEL_PROFILE_TYPE&gt; channelProfile;
  Optional&lt;int&gt; audioDelayMs;
  Optional&lt;int&gt; mediaPlayerAudioDelayMs;
  Optional&lt;const char*&gt; token;
  Optional&lt;bool&gt; enableBuiltInMediaEncryption;
  Optional&lt;bool&gt; publishRhythmPlayerTrack;
  Optional&lt;bool&gt; isInteractiveAudience;

  Optional&lt;video_track_id_t&gt; customVideoTrackId;

  Optional&lt;bool&gt; isAudioFilterable;

  ChannelMediaOptions() {}
  ~ChannelMediaOptions() {}</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ChannelMediaOptions {

  publishCameraTrack?: boolean;

  publishSecondaryCameraTrack?: boolean;

  publishMicrophoneTrack?: boolean;

  publishScreenCaptureVideo?: boolean;

  publishScreenCaptureAudio?: boolean;

  publishScreenTrack?: boolean;

  publishSecondaryScreenTrack?: boolean;

  publishCustomAudioTrack?: boolean;

  publishCustomAudioSourceId?: number;

  publishCustomAudioTrackEnableAec?: boolean;

  publishDirectCustomAudioTrack?: boolean;

  publishCustomVideoTrack?: boolean;

  publishEncodedVideoTrack?: boolean;

  publishMediaPlayerAudioTrack?: boolean;

  publishMediaPlayerVideoTrack?: boolean;

  publishTrancodedVideoTrack?: boolean;

  autoSubscribeAudio?: boolean;

  autoSubscribeVideo?: boolean;

  enableAudioRecordingOrPlayout?: boolean;

  publishMediaPlayerId?: number;

  clientRoleType?: ClientRoleType;

  audienceLatencyLevel?: AudienceLatencyLevelType;

  defaultVideoStreamType?: VideoStreamType;

  channelProfile?: ChannelProfileType;

  audioDelayMs?: number;

  mediaPlayerAudioDelayMs?: number;

  token?: string;

  enableBuiltInMediaEncryption?: boolean;

  publishRhythmPlayerTrack?: boolean;

  isInteractiveAudience?: boolean;

  customVideoTrackId?: number;

  isAudioFilterable?: boolean;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class ChannelMediaOptions : OptionalJsonParse
      {
          public Optional&lt;bool&gt; publishCameraTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishSecondaryCameraTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishMicrophoneTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishScreenCaptureVideo = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishScreenCaptureAudio = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishScreenTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishSecondaryScreenTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishCustomAudioTrack = new Optional&lt;bool&gt;();
          public Optional&lt;int&gt; publishCustomAudioSourceId = new Optional&lt;int&gt;();
          public Optional&lt;bool&gt; publishCustomAudioTrackEnableAec = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishDirectCustomAudioTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishCustomVideoTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishEncodedVideoTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishMediaPlayerAudioTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishMediaPlayerVideoTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; publishTrancodedVideoTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; autoSubscribeAudio = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; autoSubscribeVideo = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; enableAudioRecordingOrPlayout = new Optional&lt;bool&gt;();
          public Optional&lt;int&gt; publishMediaPlayerId = new Optional&lt;int&gt;();
          public Optional&lt;CLIENT_ROLE_TYPE&gt; clientRoleType = new Optional&lt;CLIENT_ROLE_TYPE&gt;();
          public Optional&lt;AUDIENCE_LATENCY_LEVEL_TYPE&gt; audienceLatencyLevel = new Optional&lt;AUDIENCE_LATENCY_LEVEL_TYPE&gt;();
          public Optional&lt;VIDEO_STREAM_TYPE&gt; defaultVideoStreamType = new Optional&lt;VIDEO_STREAM_TYPE&gt;();
          public Optional&lt;CHANNEL_PROFILE_TYPE&gt; channelProfile = new Optional&lt;CHANNEL_PROFILE_TYPE&gt;();
          public Optional&lt;int&gt; audioDelayMs = new Optional&lt;int&gt;();
          public Optional&lt;int&gt; mediaPlayerAudioDelayMs = new Optional&lt;int&gt;();
          public Optional&lt;string&gt; token = new Optional&lt;string&gt;();
          public Optional&lt;bool&gt; publishRhythmPlayerTrack = new Optional&lt;bool&gt;();
          public Optional&lt;bool&gt; isInteractiveAudience = new Optional&lt;bool&gt;();
          public Optional&lt;video_track_id_t&gt; customVideoTrackId = new Optional&lt;video_track_id_t&gt;();
          public Optional&lt;bool&gt; isAudioFilterable = new Optional&lt;bool&gt;();

       }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ChannelMediaOptions {

  publishCameraTrack?: boolean;

  publishSecondaryCameraTrack?: boolean;

  publishMicrophoneTrack?: boolean;

  publishScreenCaptureVideo?: boolean;

  publishScreenCaptureAudio?: boolean;

  publishScreenTrack?: boolean;

  publishSecondaryScreenTrack?: boolean;

  publishCustomAudioTrack?: boolean;

  publishCustomAudioSourceId?: number;

  publishCustomAudioTrackEnableAec?: boolean;

  publishDirectCustomAudioTrack?: boolean;

  publishCustomVideoTrack?: boolean;

  publishEncodedVideoTrack?: boolean;

  publishMediaPlayerAudioTrack?: boolean;

  publishMediaPlayerVideoTrack?: boolean;

  publishTrancodedVideoTrack?: boolean;

  autoSubscribeAudio?: boolean;

  autoSubscribeVideo?: boolean;

  enableAudioRecordingOrPlayout?: boolean;

  publishMediaPlayerId?: number;

  clientRoleType?: ClientRoleType;

  audienceLatencyLevel?: AudienceLatencyLevelType;

  defaultVideoStreamType?: VideoStreamType;

  channelProfile?: ChannelProfileType;

  audioDelayMs?: number;

  mediaPlayerAudioDelayMs?: number;

  token?: string;

  enableBuiltInMediaEncryption?: boolean;

  publishRhythmPlayerTrack?: boolean;

  isInteractiveAudience?: boolean;

  customVideoTrackId?: number;

  isAudioFilterable?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class ChannelMediaOptions {
  const ChannelMediaOptions(
      {this.publishCameraTrack,
      this.publishSecondaryCameraTrack,
      this.publishMicrophoneTrack,
      this.publishScreenCaptureVideo,
      this.publishScreenCaptureAudio,
      this.publishScreenTrack,
      this.publishSecondaryScreenTrack,
      this.publishCustomAudioTrack,
      this.publishCustomAudioSourceId,
      this.publishCustomAudioTrackEnableAec,
      this.publishDirectCustomAudioTrack,
      this.publishCustomAudioTrackAec,
      this.publishCustomVideoTrack,
      this.publishEncodedVideoTrack,
      this.publishMediaPlayerAudioTrack,
      this.publishMediaPlayerVideoTrack,
      this.publishTrancodedVideoTrack,
      this.autoSubscribeAudio,
      this.autoSubscribeVideo,
      this.enableAudioRecordingOrPlayout,
      this.publishMediaPlayerId,
      this.clientRoleType,
      this.audienceLatencyLevel,
      this.defaultVideoStreamType,
      this.channelProfile,
      this.audioDelayMs,
      this.mediaPlayerAudioDelayMs,
      this.token,
      this.enableBuiltInMediaEncryption,
      this.publishRhythmPlayerTrack,
      this.isInteractiveAudience,
      this.customVideoTrackId,
      this.isAudioFilterable});

  @JsonKey(name: 'publishCameraTrack')
  final bool? publishCameraTrack;

  @JsonKey(name: 'publishSecondaryCameraTrack')
  final bool? publishSecondaryCameraTrack;

  @JsonKey(name: 'publishMicrophoneTrack')
  final bool? publishMicrophoneTrack;

  @JsonKey(name: 'publishScreenCaptureVideo')
  final bool? publishScreenCaptureVideo;

  @JsonKey(name: 'publishScreenCaptureAudio')
  final bool? publishScreenCaptureAudio;

  @JsonKey(name: 'publishScreenTrack')
  final bool? publishScreenTrack;

  @JsonKey(name: 'publishSecondaryScreenTrack')
  final bool? publishSecondaryScreenTrack;

  @JsonKey(name: 'publishCustomAudioTrack')
  final bool? publishCustomAudioTrack;

  @JsonKey(name: 'publishCustomAudioSourceId')
  final int? publishCustomAudioSourceId;

  @JsonKey(name: 'publishCustomAudioTrackEnableAec')
  final bool? publishCustomAudioTrackEnableAec;

  @JsonKey(name: 'publishDirectCustomAudioTrack')
  final bool? publishDirectCustomAudioTrack;

  @JsonKey(name: 'publishCustomAudioTrackAec')
  final bool? publishCustomAudioTrackAec;

  @JsonKey(name: 'publishCustomVideoTrack')
  final bool? publishCustomVideoTrack;

  @JsonKey(name: 'publishEncodedVideoTrack')
  final bool? publishEncodedVideoTrack;

  @JsonKey(name: 'publishMediaPlayerAudioTrack')
  final bool? publishMediaPlayerAudioTrack;

  @JsonKey(name: 'publishMediaPlayerVideoTrack')
  final bool? publishMediaPlayerVideoTrack;

  @JsonKey(name: 'publishTrancodedVideoTrack')
  final bool? publishTrancodedVideoTrack;

  @JsonKey(name: 'autoSubscribeAudio')
  final bool? autoSubscribeAudio;

  @JsonKey(name: 'autoSubscribeVideo')
  final bool? autoSubscribeVideo;

  @JsonKey(name: 'enableAudioRecordingOrPlayout')
  final bool? enableAudioRecordingOrPlayout;

  @JsonKey(name: 'publishMediaPlayerId')
  final int? publishMediaPlayerId;

  @JsonKey(name: 'clientRoleType')
  final ClientRoleType? clientRoleType;

  @JsonKey(name: 'audienceLatencyLevel')
  final AudienceLatencyLevelType? audienceLatencyLevel;

  @JsonKey(name: 'defaultVideoStreamType')
  final VideoStreamType? defaultVideoStreamType;

  @JsonKey(name: 'channelProfile')
  final ChannelProfileType? channelProfile;

  @JsonKey(name: 'audioDelayMs')
  final int? audioDelayMs;

  @JsonKey(name: 'mediaPlayerAudioDelayMs')
  final int? mediaPlayerAudioDelayMs;

  @JsonKey(name: 'token')
  final String? token;

  @JsonKey(name: 'enableBuiltInMediaEncryption')
  final bool? enableBuiltInMediaEncryption;

  @JsonKey(name: 'publishRhythmPlayerTrack')
  final bool? publishRhythmPlayerTrack;

  @JsonKey(name: 'isInteractiveAudience')
  final bool? isInteractiveAudience;

  @JsonKey(name: 'customVideoTrackId')
  final int? customVideoTrackId;

  @JsonKey(name: 'isAudioFilterable')
  final bool? isAudioFilterable;

  factory ChannelMediaOptions.fromJson(Map&lt;String, dynamic> json) =>
      _$ChannelMediaOptionsFromJson(json);

  Map&lt;String, dynamic> toJson() => _$ChannelMediaOptionsToJson(this);
}</codeblock>            
            <codeblock props="unreal" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc"> </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt> </pt>
                <pd> <ul id="ul_vx5_np5_3qb">
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                </ul></pd>
                <pd>
                    <note type="note"> </note>
                </pd>
            </plentry>
            <plentry props="cpp unity flutter rn electron">
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt props="android ios"> </pt>
                <pt props="mac cpp framework"> </pt>
                <pd>
                    <p> <ul>
                    <li> </li>
                    <li> </li>
                    </ul></p>
                    <p><note type="note" props="android ios"> </note></p>
                </pd>
            </plentry>
            <plentry props="cpp unity flutter rn electron">
                <pt> </pt>
                <pd>
                    <p> <ul>
                    <li> </li>
                    <li> </li>
                    </ul></p>
                    <p><note type="attention" props="cpp unity flutter rn electron"> </note></p> </pd>
            </plentry>
            <plentry props="android ios cpp framework">
                <pt> </pt>
                <pd>
                    <p> <ul>
                    <li> </li>
                    <li> </li>
                    </ul></p>
                    <p>
                    <note type="attention" props="cpp unity flutter rn electron"> </note></p>
                </pd>
            </plentry>
            <plentry props="cpp unity flutter rn electron">
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul>
                </pd>
            </plentry>
            <plentry props="cpp unity flutter rn electron">
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <p> </p>
                </pd>
            </plentry>
            <plentry props="cpp unity flutter rn electron">
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul id="ul_ljg_4q5_3qb">
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul id="ul_gr3_rq5_3qb">
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul id="ul_gtd_tq5_3qb">
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul id="ul_gxf_vq5_3qb">
                    <li> </li>
                    <li> </li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul id="ul_gfh_xq5_3qb">
                    <li> </li>
                    <li> </li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> </pd>
            </plentry>
            <plentry props="native unity">
                <pt> </pt>
                <pd conkeyref="setClientRole1/clientrole"/>
            </plentry>
            <plentry props="rn electron flutter">
                <pt> </pt>
                <pd> </pd>
            </plentry>
            <plentry conkeyref="ClientRoleOptions/audiencelatencylevel">
                <pt/>
                <pd/>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd conkeyref="setRemoteDefaultVideoStreamType/defaultstreamtype"/>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd conkeyref="setChannelProfile/channelprofiletype"/>
            </plentry>
            <plentry props="hide">
                <pt> </pt>
                <pd>
                    <p> </p>
                    <p> </p>
                </pd>
            </plentry>
            <plentry props="hide">
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd>
                    <p> </p>
                    <note type="caution">
                    <ul>
                    <li> </li>
                    <li> </li>
                    </ul></note></pd>
            </plentry>
            <plentry props="hide">
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul>
                    <note type="attention">
                    <ul>
                    <li> </li>
                    <li> </li>
                    </ul> </note> </pd>
            </plentry>
            <plentry id="customvideotrackid">
                <pt> </pt>
                <pd> </pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <ul>
                    <li> </li>
                    <li> </li>
                    </ul>
                    <note type="attention"> </note></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
