<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_channelmediaoptions">
    <title> <ph keyref="ChannelMediaOptions"/> </title>
    <shortdesc id="short"><ph id="shortdesc">The channel media options.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p props="cn" outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class ChannelMediaOptions {
  public Boolean publishCameraTrack;
  public Boolean publishSecondaryCameraTrack;
  public Boolean publishThirdCameraTrack;
  public Boolean publishFourthCameraTrack;
  public Boolean publishMicrophoneTrack;
  public Boolean publishScreenCaptureVideo;
  public Boolean publishScreenCaptureAudio;
  public Boolean publishCustomAudioTrack;
  public Integer publishCustomAudioTrackId;
  public Boolean publishCustomVideoTrack;
  public Boolean publishEncodedVideoTrack;
  public Boolean publishMediaPlayerAudioTrack;
  public Boolean publishMediaPlayerVideoTrack;
  public Boolean publishTranscodedVideoTrack;
  public Boolean publishMixedAudioTrack;
  public Boolean autoSubscribeAudio;
  public Boolean autoSubscribeVideo;
  public Boolean enableAudioRecordingOrPlayout;
  public Integer publishMediaPlayerId;
  public Integer clientRoleType;
  public Integer audienceLatencyLevel;
  public Integer defaultVideoStreamType;
  public Integer channelProfile;
  public Integer mediaPlayerAudioDelayMs;
  public String token;
  public Boolean enableBuiltInMediaEncryption;
  public Boolean publishRhythmPlayerTrack;
  public Boolean isInteractiveAudience;
  public Integer customVideoTrackId;
  public Boolean isAudioFilterable;
  public Boolean enableMultipath;
  public Integer uplinkMultipathMode;
  public Integer downlinkMultipathMode;
  public Integer preferMultipathType;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">export class ChannelMediaOptions {

  public publishCameraTrack?:boolean;

  public publishSecondaryCameraTrack?:boolean;

  public publishMicrophoneTrack?:boolean;

  public publishScreenCaptureVideo?:boolean;

  public publishScreenCaptureAudio?:boolean;

  public publishCustomAudioTrack?:boolean;

  public publishCustomAudioTrackId?:number;

  public publishCustomVideoTrack?:boolean;

  public publishEncodedVideoTrack?:boolean;

  public publishMediaPlayerAudioTrack?:boolean;

  public publishMediaPlayerVideoTrack?:boolean;

  public publishTranscodedVideoTrack?:boolean;

  public publishMixedAudioTrack?:boolean;

  public autoSubscribeAudio?:boolean;

  public autoSubscribeVideo?:boolean;

  public enableAudioRecordingOrPlayout?:boolean;

  public publishMediaPlayerId?:number;

  public clientRoleType?:number;

  public audienceLatencyLevel?:number;

  public defaultVideoStreamType?:number;

  public channelProfile?:number;

  public audioDelayMs?:number;

  public mediaPlayerAudioDelayMs?:number;

  public token?:string;

  public enableBuiltInMediaEncryption?:boolean;

  public publishRhythmPlayerTrack?:boolean;

  public isInteractiveAudience?:boolean;

  public customVideoTrackId?:number;

  public isAudioFilterable?:boolean;

  public startPreview?:boolean;
  public constructor() {
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcChannelMediaOptions : NSObject
@property(assign, nonatomic) BOOL publishCameraTrack;
@property(assign, nonatomic) BOOL publishSecondaryCameraTrack;
@property(assign, nonatomic) BOOL publishMicrophoneTrack;
#if TARGET_OS_IPHONE
@property(assign, nonatomic) BOOL publishScreenCaptureVideo;
@property(assign, nonatomic) BOOL publishScreenCaptureAudio;
#elif TARGET_OS_MAC
@property(assign, nonatomic) BOOL publishThirdCameraTrack;
@property(assign, nonatomic) BOOL publishFourthCameraTrack;
@property(assign, nonatomic) BOOL publishScreenTrack;
@property(assign, nonatomic) BOOL publishSecondaryScreenTrack;
@property(assign, nonatomic) BOOL publishThirdScreenTrack;
@property(assign, nonatomic) BOOL publishFourthScreenTrack;
#endif
@property(assign, nonatomic) BOOL publishCustomAudioTrack;
@property(assign, nonatomic) NSInteger publishCustomAudioTrackId;

@property(assign, nonatomic) BOOL publishCustomVideoTrack;
@property(assign, nonatomic) BOOL publishEncodedVideoTrack;
@property(assign, nonatomic) BOOL publishMediaPlayerAudioTrack;
@property(assign, nonatomic) BOOL publishMediaPlayerVideoTrack;
@property(assign, nonatomic) BOOL publishTranscodedVideoTrack;
@property(assign, nonatomic) BOOL publishMixedAudioTrack;
@property(assign, nonatomic) BOOL autoSubscribeAudio;
@property(assign, nonatomic) BOOL autoSubscribeVideo;
@property(assign, nonatomic) BOOL enableAudioRecordingOrPlayout;
@property(assign, nonatomic) NSInteger publishMediaPlayerId;
@property(assign, nonatomic) AgoraClientRole clientRoleType;
@property(assign, nonatomic) AgoraAudienceLatencyLevelType audienceLatencyLevel;
@property(assign, nonatomic) AgoraVideoStreamType defaultVideoStreamType;
@property(assign, nonatomic) AgoraChannelProfile channelProfile;
@property(copy, nonatomic) NSString * _Nullable token;
@property(assign, nonatomic) BOOL enableBuiltInMediaEncryption;

@property(assign, nonatomic) BOOL publishRhythmPlayerTrack;
@property(assign, nonatomic) BOOL isInteractiveAudience;
@property(assign, nonatomic) NSInteger customVideoTrackId;
@property(assign, nonatomic) BOOL isAudioFilterable;
@property(assign, nonatomic) BOOL enableMultipath;
@property(assign, nonatomic) AgoraMultipathMode uplinkMultipathMode;
@property(assign, nonatomic) AgoraMultipathMode downlinkMultipathMode;
@property(assign, nonatomic) AgoraMultipathType preferMultipathType;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct ChannelMediaOptions {
  Optional&amp;lt;bool&amp;gt; publishCameraTrack;
  Optional&amp;lt;bool&amp;gt; publishSecondaryCameraTrack;
  Optional&amp;lt;bool&amp;gt; publishThirdCameraTrack;
  Optional&amp;lt;bool&amp;gt; publishFourthCameraTrack;
  Optional&amp;lt;bool&amp;gt; publishMicrophoneTrack;
#if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;amp;&amp;amp; TARGET_OS_IPHONE) || defined(__OHOS__)
  Optional&amp;lt;bool&amp;gt; publishScreenCaptureVideo;
  Optional&amp;lt;bool&amp;gt; publishScreenCaptureAudio;
#else
  Optional&amp;lt;bool&amp;gt; publishScreenTrack;
  Optional&amp;lt;bool&amp;gt; publishSecondaryScreenTrack;
  Optional&amp;lt;bool&amp;gt; publishThirdScreenTrack;
  Optional&amp;lt;bool&amp;gt; publishFourthScreenTrack;
#endif
  Optional&amp;lt;bool&amp;gt; publishCustomAudioTrack;
  Optional&amp;lt;int&amp;gt; publishCustomAudioTrackId;
  Optional&amp;lt;bool&amp;gt; publishCustomVideoTrack;
  Optional&amp;lt;bool&amp;gt; publishEncodedVideoTrack;
  Optional&amp;lt;bool&amp;gt; publishMediaPlayerAudioTrack;
  Optional&amp;lt;bool&amp;gt; publishMediaPlayerVideoTrack;
  Optional&amp;lt;bool&amp;gt; publishTranscodedVideoTrack;
  Optional&amp;lt;bool&amp;gt; publishMixedAudioTrack;
  Optional&amp;lt;bool&amp;gt; publishLipSyncTrack;
  Optional&amp;lt;bool&amp;gt; autoSubscribeAudio;
  Optional&amp;lt;bool&amp;gt; autoSubscribeVideo;
  Optional&amp;lt;bool&amp;gt; enableAudioRecordingOrPlayout;
  Optional&amp;lt;int&amp;gt; publishMediaPlayerId;
  Optional&amp;lt;CLIENT_ROLE_TYPE&amp;gt; clientRoleType;
  Optional&amp;lt;AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt; audienceLatencyLevel;
  Optional&amp;lt;VIDEO_STREAM_TYPE&amp;gt; defaultVideoStreamType;
  Optional&amp;lt;CHANNEL_PROFILE_TYPE&amp;gt; channelProfile;

  Optional&amp;lt;const char*&amp;gt; token;
  Optional&amp;lt;bool&amp;gt; enableBuiltInMediaEncryption;
  Optional&amp;lt;bool&amp;gt; publishRhythmPlayerTrack;
  Optional&amp;lt;bool&amp;gt; isInteractiveAudience;
  Optional&amp;lt;video_track_id_t&amp;gt; customVideoTrackId;
  Optional&amp;lt;bool&amp;gt; isAudioFilterable;

  Optional&amp;lt;bool&amp;gt; enableMultipath;
  Optional&amp;lt;MultipathMode&amp;gt; uplinkMultipathMode;
  Optional&amp;lt;MultipathMode&amp;gt; downlinkMultipathMode;
  Optional&amp;lt;MultipathType&amp;gt; preferMultipathType;
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FChannelMediaOptions
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishSecondaryCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishThirdCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishFourthCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishMicrophoneTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishScreenCaptureVideo = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishScreenCaptureAudio = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishSecondaryScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishThirdScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishFourthScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishCustomAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool publishCustomAudioTrackId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int publishCustomAudioTrackId = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishCustomVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishEncodedVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishMediaPlayerAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishMediaPlayerVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishTranscodedVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishMixedAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishLipSyncTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional autoSubscribeAudio = EAgoraOptional::AGORA_TRUE_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional autoSubscribeVideo = EAgoraOptional::AGORA_TRUE_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional enableAudioRecordingOrPlayout = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool publishMediaPlayerId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int publishMediaPlayerId = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool clientRoleType_SetValue = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	ECLIENT_ROLE_TYPE clientRoleType = ECLIENT_ROLE_TYPE::CLIENT_ROLE_BROADCASTER;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool audienceLatencyLevel_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAUDIENCE_LATENCY_LEVEL_TYPE audienceLatencyLevel = EAUDIENCE_LATENCY_LEVEL_TYPE::AUDIENCE_LATENCY_LEVEL_LOW_LATENCY;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool defaultVideoStreamType_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EVIDEO_STREAM_TYPE defaultVideoStreamType = EVIDEO_STREAM_TYPE::VIDEO_STREAM_HIGH;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool channelProfile_SetValue = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	ECHANNEL_PROFILE_TYPE channelProfile = ECHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_LIVE_BROADCASTING;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool audioDelayMs_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int audioDelayMs = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool mediaPlayerAudioDelayMs_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int mediaPlayerAudioDelayMs = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool token_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	FString token = "";
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional enableBuiltInMediaEncryption = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishRhythmPlayerTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional isInteractiveAudience = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool customVideoTrackId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int64 customVideoTrackId = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional isAudioFilterable = EAgoraOptional::AGORA_NULL_VALUE;

	FChannelMediaOptions(){}
	FChannelMediaOptions(const agora::rtc::ChannelMediaOptions &amp;amp; AgoraData){

		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishCameraTrack, AgoraData.publishCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishSecondaryCameraTrack, AgoraData.publishSecondaryCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishThirdCameraTrack, AgoraData.publishThirdCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishFourthCameraTrack, AgoraData.publishFourthCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishMicrophoneTrack, AgoraData.publishMicrophoneTrack)
#if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;amp;&amp;amp; TARGET_OS_IPHONE)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishScreenCaptureVideo, AgoraData.publishScreenCaptureVideo)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishScreenCaptureAudio, AgoraData.publishScreenCaptureAudio)
#else
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishScreenTrack, AgoraData.publishScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishSecondaryScreenTrack, AgoraData.publishSecondaryScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishThirdScreenTrack, AgoraData.publishThirdScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishFourthScreenTrack, AgoraData.publishFourthScreenTrack)
#endif
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishCustomAudioTrack, AgoraData.publishCustomAudioTrack)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&amp;gt;publishCustomAudioTrackId, AgoraData.publishCustomAudioTrackId)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishCustomVideoTrack, AgoraData.publishCustomVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishEncodedVideoTrack, AgoraData.publishEncodedVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishMediaPlayerAudioTrack, AgoraData.publishMediaPlayerAudioTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishMediaPlayerVideoTrack, AgoraData.publishMediaPlayerVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishTranscodedVideoTrack, AgoraData.publishTranscodedVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishMixedAudioTrack, AgoraData.publishMixedAudioTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishLipSyncTrack, AgoraData.publishLipSyncTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;autoSubscribeAudio, AgoraData.autoSubscribeAudio)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;autoSubscribeVideo, AgoraData.autoSubscribeVideo)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;enableAudioRecordingOrPlayout, AgoraData.enableAudioRecordingOrPlayout)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&amp;gt;publishMediaPlayerId, AgoraData.publishMediaPlayerId)
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&amp;gt;clientRoleType,AgoraData.clientRoleType,static_cast&amp;lt;ECLIENT_ROLE_TYPE&amp;gt;(AgoraData.clientRoleType.value()))

		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&amp;gt;audienceLatencyLevel, AgoraData.audienceLatencyLevel, static_cast&amp;lt;EAUDIENCE_LATENCY_LEVEL_TYPE&amp;gt;(AgoraData.audienceLatencyLevel.value()))
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&amp;gt;defaultVideoStreamType, AgoraData.defaultVideoStreamType, static_cast&amp;lt;EVIDEO_STREAM_TYPE&amp;gt;(AgoraData.defaultVideoStreamType.value()))
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&amp;gt;channelProfile, AgoraData.channelProfile, static_cast&amp;lt;ECHANNEL_PROFILE_TYPE&amp;gt;(AgoraData.channelProfile.value()))
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&amp;gt;audioDelayMs, AgoraData.audioDelayMs)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&amp;gt;mediaPlayerAudioDelayMs, AgoraData.mediaPlayerAudioDelayMs)

		SET_UEBP_OPTIONAL_VAL_FString(this-&amp;gt;token,AgoraData.token)

		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;enableBuiltInMediaEncryption, AgoraData.enableBuiltInMediaEncryption)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishRhythmPlayerTrack, AgoraData.publishRhythmPlayerTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;isInteractiveAudience, AgoraData.isInteractiveAudience)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&amp;gt;customVideoTrackId, AgoraData.customVideoTrackId)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;isAudioFilterable, AgoraData.isAudioFilterable)
	}
	agora::rtc::ChannelMediaOptions CreateAgoraData() const{
		agora::rtc::ChannelMediaOptions AgoraData;
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCameraTrack, this-&amp;gt;publishCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishSecondaryCameraTrack, this-&amp;gt;publishSecondaryCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishThirdCameraTrack, this-&amp;gt;publishThirdCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishFourthCameraTrack, this-&amp;gt;publishFourthCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMicrophoneTrack, this-&amp;gt;publishMicrophoneTrack)
#if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;amp;&amp;amp; TARGET_OS_IPHONE)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenCaptureVideo, this-&amp;gt;publishScreenCaptureVideo)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenCaptureAudio, this-&amp;gt;publishScreenCaptureAudio)
#else
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenTrack, this-&amp;gt;publishScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishSecondaryScreenTrack, this-&amp;gt;publishSecondaryScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishThirdScreenTrack, this-&amp;gt;publishThirdScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishFourthScreenTrack, this-&amp;gt;publishFourthScreenTrack)
#endif
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCustomAudioTrack, this-&amp;gt;publishCustomAudioTrack)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.publishCustomAudioTrackId, this-&amp;gt;publishCustomAudioTrackId)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCustomVideoTrack, this-&amp;gt;publishCustomVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishEncodedVideoTrack, this-&amp;gt;publishEncodedVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMediaPlayerAudioTrack, this-&amp;gt;publishMediaPlayerAudioTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMediaPlayerVideoTrack, this-&amp;gt;publishMediaPlayerVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishTranscodedVideoTrack, this-&amp;gt;publishTranscodedVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMixedAudioTrack, this-&amp;gt;publishMixedAudioTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishLipSyncTrack, this-&amp;gt;publishLipSyncTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.autoSubscribeAudio, this-&amp;gt;autoSubscribeAudio)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.autoSubscribeVideo, this-&amp;gt;autoSubscribeVideo)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.enableAudioRecordingOrPlayout, this-&amp;gt;enableAudioRecordingOrPlayout)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.publishMediaPlayerId, this-&amp;gt;publishMediaPlayerId)
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.clientRoleType, this-&amp;gt;clientRoleType,static_cast&amp;lt;agora::rtc::CLIENT_ROLE_TYPE&amp;gt;(this-&amp;gt;clientRoleType))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.audienceLatencyLevel, this-&amp;gt;audienceLatencyLevel, static_cast&amp;lt;agora::rtc::AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt;(this-&amp;gt;audienceLatencyLevel))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.defaultVideoStreamType, this-&amp;gt;defaultVideoStreamType, static_cast&amp;lt;agora::rtc::VIDEO_STREAM_TYPE&amp;gt;(this-&amp;gt;defaultVideoStreamType))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.channelProfile, this-&amp;gt;channelProfile, static_cast&amp;lt;agora::CHANNEL_PROFILE_TYPE&amp;gt;(this-&amp;gt;channelProfile))
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.audioDelayMs, this-&amp;gt;audioDelayMs)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.mediaPlayerAudioDelayMs, this-&amp;gt;mediaPlayerAudioDelayMs)
		SET_AGORA_OPTIONAL_VAL_CHARPTR______MEMOALLOC(AgoraData.token, this-&amp;gt;token)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.enableBuiltInMediaEncryption, this-&amp;gt;enableBuiltInMediaEncryption)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishRhythmPlayerTrack, this-&amp;gt;publishRhythmPlayerTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.isInteractiveAudience, this-&amp;gt;isInteractiveAudience)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.customVideoTrackId, this-&amp;gt;customVideoTrackId)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.isAudioFilterable, this-&amp;gt;isAudioFilterable)
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::ChannelMediaOptions&amp;amp; AgoraData) const {
		SET_AGORA_OPTIONAL_VAL_CHARPTR______MEMOFREE(AgoraData.token)
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ChannelMediaOptions {

  publishCameraTrack?: boolean;

  publishSecondaryCameraTrack?: boolean;

  publishThirdCameraTrack?: boolean;

  publishFourthCameraTrack?: boolean;

  publishMicrophoneTrack?: boolean;

  publishScreenTrack?: boolean;

  publishSecondaryScreenTrack?: boolean;

  publishThirdScreenTrack?: boolean;

  publishFourthScreenTrack?: boolean;

  publishCustomAudioTrack?: boolean;

  publishCustomAudioTrackId?: number;

  publishCustomVideoTrack?: boolean;

  publishEncodedVideoTrack?: boolean;

  publishMediaPlayerAudioTrack?: boolean;

  publishMediaPlayerVideoTrack?: boolean;

  publishTranscodedVideoTrack?: boolean;

  publishLipSyncTrack?: boolean;

  autoSubscribeAudio?: boolean;

  autoSubscribeVideo?: boolean;

  enableAudioRecordingOrPlayout?: boolean;

  publishMediaPlayerId?: number;

  clientRoleType?: ClientRoleType;

  audienceLatencyLevel?: AudienceLatencyLevelType;

  defaultVideoStreamType?: VideoStreamType;

  channelProfile?: ChannelProfileType;

  token?: string;

  enableBuiltInMediaEncryption?: boolean;

  publishRhythmPlayerTrack?: boolean;

  isInteractiveAudience?: boolean;

  customVideoTrackId?: number;

  isAudioFilterable?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ChannelMediaOptions : OptionalJsonParse
    {
        public Optional&amp;lt;bool&amp;gt; publishCameraTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishSecondaryCameraTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishThirdCameraTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishFourthCameraTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishMicrophoneTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishScreenCaptureVideo = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishScreenCaptureAudio = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishScreenTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishSecondaryScreenTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishThirdScreenTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishFourthScreenTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishCustomAudioTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;int&amp;gt; publishCustomAudioTrackId = new Optional&amp;lt;int&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishCustomVideoTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishEncodedVideoTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishMediaPlayerAudioTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishMediaPlayerVideoTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishTranscodedVideoTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishLipSyncTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; autoSubscribeAudio = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; autoSubscribeVideo = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; enableAudioRecordingOrPlayout = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;int&amp;gt; publishMediaPlayerId = new Optional&amp;lt;int&amp;gt;();
        public Optional&amp;lt;CLIENT_ROLE_TYPE&amp;gt; clientRoleType = new Optional&amp;lt;CLIENT_ROLE_TYPE&amp;gt;();
        public Optional&amp;lt;AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt; audienceLatencyLevel = new Optional&amp;lt;AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt;();
        public Optional&amp;lt;VIDEO_STREAM_TYPE&amp;gt; defaultVideoStreamType = new Optional&amp;lt;VIDEO_STREAM_TYPE&amp;gt;();
        public Optional&amp;lt;CHANNEL_PROFILE_TYPE&amp;gt; channelProfile = new Optional&amp;lt;CHANNEL_PROFILE_TYPE&amp;gt;();
        public Optional&amp;lt;string&amp;gt; token = new Optional&amp;lt;string&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; publishRhythmPlayerTrack = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; isInteractiveAudience = new Optional&amp;lt;bool&amp;gt;();
        public Optional&amp;lt;video_track_id_t&amp;gt; customVideoTrackId = new Optional&amp;lt;video_track_id_t&amp;gt;();
        public Optional&amp;lt;bool&amp;gt; isAudioFilterable = new Optional&amp;lt;bool&amp;gt;();

   }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ChannelMediaOptions {

  publishCameraTrack?: boolean;

  publishSecondaryCameraTrack?: boolean;

  publishThirdCameraTrack?: boolean;

  publishFourthCameraTrack?: boolean;

  publishMicrophoneTrack?: boolean;

  publishScreenCaptureVideo?: boolean;

  publishScreenCaptureAudio?: boolean;

  publishSecondaryScreenTrack?: boolean;

  publishThirdScreenTrack?: boolean;

  publishFourthScreenTrack?: boolean;

  publishCustomAudioTrack?: boolean;

  publishCustomAudioTrackId?: number;

  publishCustomVideoTrack?: boolean;

  publishEncodedVideoTrack?: boolean;

  publishMediaPlayerAudioTrack?: boolean;

  publishMediaPlayerVideoTrack?: boolean;

  publishTranscodedVideoTrack?: boolean;

  publishLipSyncTrack?: boolean;

  autoSubscribeAudio?: boolean;

  autoSubscribeVideo?: boolean;

  enableAudioRecordingOrPlayout?: boolean;

  publishMediaPlayerId?: number;

  clientRoleType?: ClientRoleType;

  audienceLatencyLevel?: AudienceLatencyLevelType;

  defaultVideoStreamType?: VideoStreamType;

  channelProfile?: ChannelProfileType;

  token?: string;

  enableBuiltInMediaEncryption?: boolean;

  publishRhythmPlayerTrack?: boolean;

  isInteractiveAudience?: boolean;

  customVideoTrackId?: number;

  isAudioFilterable?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class ChannelMediaOptions {
  const ChannelMediaOptions(
      {this.publishCameraTrack,
      this.publishSecondaryCameraTrack,
      this.publishThirdCameraTrack,
      this.publishFourthCameraTrack,
      this.publishMicrophoneTrack,
      this.publishScreenCaptureVideo,
      this.publishScreenCaptureAudio,
      this.publishScreenTrack,
      this.publishSecondaryScreenTrack,
      this.publishThirdScreenTrack,
      this.publishFourthScreenTrack,
      this.publishCustomAudioTrack,
      this.publishCustomAudioTrackId,
      this.publishCustomVideoTrack,
      this.publishEncodedVideoTrack,
      this.publishMediaPlayerAudioTrack,
      this.publishMediaPlayerVideoTrack,
      this.publishTranscodedVideoTrack,
      this.publishMixedAudioTrack,
      this.publishLipSyncTrack,
      this.autoSubscribeAudio,
      this.autoSubscribeVideo,
      this.enableAudioRecordingOrPlayout,
      this.publishMediaPlayerId,
      this.clientRoleType,
      this.audienceLatencyLevel,
      this.defaultVideoStreamType,
      this.channelProfile,
      this.audioDelayMs,
      this.mediaPlayerAudioDelayMs,
      this.token,
      this.enableBuiltInMediaEncryption,
      this.publishRhythmPlayerTrack,
      this.isInteractiveAudience,
      this.customVideoTrackId,
      this.isAudioFilterable,
      this.parameters});

  @JsonKey(name: 'publishCameraTrack')
  final bool? publishCameraTrack;

  @JsonKey(name: 'publishSecondaryCameraTrack')
  final bool? publishSecondaryCameraTrack;

  @JsonKey(name: 'publishThirdCameraTrack')
  final bool? publishThirdCameraTrack;

  @JsonKey(name: 'publishFourthCameraTrack')
  final bool? publishFourthCameraTrack;

  @JsonKey(name: 'publishMicrophoneTrack')
  final bool? publishMicrophoneTrack;

  @JsonKey(name: 'publishScreenCaptureVideo')
  final bool? publishScreenCaptureVideo;

  @JsonKey(name: 'publishScreenCaptureAudio')
  final bool? publishScreenCaptureAudio;

  @JsonKey(name: 'publishScreenTrack')
  final bool? publishScreenTrack;

  @JsonKey(name: 'publishSecondaryScreenTrack')
  final bool? publishSecondaryScreenTrack;

  @JsonKey(name: 'publishThirdScreenTrack')
  final bool? publishThirdScreenTrack;

  @JsonKey(name: 'publishFourthScreenTrack')
  final bool? publishFourthScreenTrack;

  @JsonKey(name: 'publishCustomAudioTrack')
  final bool? publishCustomAudioTrack;

  @JsonKey(name: 'publishCustomAudioTrackId')
  final int? publishCustomAudioTrackId;

  @JsonKey(name: 'publishCustomVideoTrack')
  final bool? publishCustomVideoTrack;

  @JsonKey(name: 'publishEncodedVideoTrack')
  final bool? publishEncodedVideoTrack;

  @JsonKey(name: 'publishMediaPlayerAudioTrack')
  final bool? publishMediaPlayerAudioTrack;

  @JsonKey(name: 'publishMediaPlayerVideoTrack')
  final bool? publishMediaPlayerVideoTrack;

  @JsonKey(name: 'publishTranscodedVideoTrack')
  final bool? publishTranscodedVideoTrack;

  @JsonKey(name: 'publishMixedAudioTrack')
  final bool? publishMixedAudioTrack;

  @JsonKey(name: 'autoSubscribeAudio')
  final bool? autoSubscribeAudio;

  @JsonKey(name: 'autoSubscribeVideo')
  final bool? autoSubscribeVideo;

  @JsonKey(name: 'enableAudioRecordingOrPlayout')
  final bool? enableAudioRecordingOrPlayout;

  @JsonKey(name: 'publishMediaPlayerId')
  final int? publishMediaPlayerId;

  @JsonKey(name: 'clientRoleType')
  final ClientRoleType? clientRoleType;

  @JsonKey(name: 'audienceLatencyLevel')
  final AudienceLatencyLevelType? audienceLatencyLevel;

  @JsonKey(name: 'defaultVideoStreamType')
  final VideoStreamType? defaultVideoStreamType;

  @JsonKey(name: 'channelProfile')
  final ChannelProfileType? channelProfile;

  @JsonKey(name: 'audioDelayMs')
  final int? audioDelayMs;

  @JsonKey(name: 'mediaPlayerAudioDelayMs')
  final int? mediaPlayerAudioDelayMs;

  @JsonKey(name: 'token')
  final String? token;

  @JsonKey(name: 'enableBuiltInMediaEncryption')
  final bool? enableBuiltInMediaEncryption;

  @JsonKey(name: 'publishRhythmPlayerTrack')
  final bool? publishRhythmPlayerTrack;

  @JsonKey(name: 'isInteractiveAudience')
  final bool? isInteractiveAudience;

  @JsonKey(name: 'customVideoTrackId')
  final int? customVideoTrackId;

  @JsonKey(name: 'isAudioFilterable')
  final bool? isAudioFilterable;

  @JsonKey(name: 'parameters')
  final String? parameters;

  factory ChannelMediaOptions.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;
      _$ChannelMediaOptionsFromJson(json);

  Map&amp;lt;String, dynamic&amp;gt; toJson() =&amp;gt; _$ChannelMediaOptionsToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
    <p props="en" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public class ChannelMediaOptions {
      public Boolean publishCameraTrack;
      public Boolean publishSecondaryCameraTrack;
      public Boolean publishThirdCameraTrack;
      public Boolean publishFourthCameraTrack;
      public Boolean publishMicrophoneTrack;
      public Boolean publishScreenCaptureVideo;
      public Boolean publishScreenCaptureAudio;
      public Boolean publishCustomAudioTrack;
      public Integer publishCustomAudioTrackId;
      public Boolean publishCustomVideoTrack;
      public Boolean publishEncodedVideoTrack;
      public Boolean publishMediaPlayerAudioTrack;
      public Boolean publishMediaPlayerVideoTrack;
      public Boolean publishTranscodedVideoTrack;
      public Boolean publishMixedAudioTrack;
      public Boolean publishLipSyncTrack;
      public Boolean autoSubscribeAudio;
      public Boolean autoSubscribeVideo;
      public Boolean enableAudioRecordingOrPlayout;
      public Integer publishMediaPlayerId;
      public Integer clientRoleType;
      public Integer audienceLatencyLevel;
      public Integer defaultVideoStreamType;
      public Integer channelProfile;
      public Integer mediaPlayerAudioDelayMs;
      public String token;
      public Boolean enableBuiltInMediaEncryption;
      public Boolean publishRhythmPlayerTrack;
      public Boolean isInteractiveAudience;
      public Integer customVideoTrackId;
      public Boolean isAudioFilterable;
                }</codeblock>
                <codeblock props="hmos" outputclass="language-arkts">export class ChannelMediaOptions {

  public publishCameraTrack?:boolean;

  public publishSecondaryCameraTrack?:boolean;

  public publishMicrophoneTrack?:boolean;

  public publishScreenCaptureVideo?:boolean;

  public publishScreenCaptureAudio?:boolean;

  public publishCustomAudioTrack?:boolean;

  public publishCustomAudioTrackId?:number;

  public publishCustomVideoTrack?:boolean;

  public publishEncodedVideoTrack?:boolean;

  public publishMediaPlayerAudioTrack?:boolean;

  public publishMediaPlayerVideoTrack?:boolean;

  public publishTranscodedVideoTrack?:boolean;

  public publishMixedAudioTrack?:boolean;

  public autoSubscribeAudio?:boolean;

  public autoSubscribeVideo?:boolean;

  public enableAudioRecordingOrPlayout?:boolean;

  public publishMediaPlayerId?:number;

  public clientRoleType?:number;

  public audienceLatencyLevel?:number;

  public defaultVideoStreamType?:number;

  public channelProfile?:number;

  public audioDelayMs?:number;

  public mediaPlayerAudioDelayMs?:number;

  public enableBuiltInMediaEncryption?:boolean;

  public publishRhythmPlayerTrack?:boolean;

  public isInteractiveAudience?:boolean;

  public customVideoTrackId?:number;

  public isAudioFilterable?:boolean;

  public startPreview?:boolean;
  public constructor() {
  }
}</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcChannelMediaOptions : NSObject
    @property(assign, nonatomic) BOOL publishCameraTrack;
    @property(assign, nonatomic) BOOL publishSecondaryCameraTrack;
    @property(assign, nonatomic) BOOL publishMicrophoneTrack;
    #if TARGET_OS_IPHONE
    @property(assign, nonatomic) BOOL publishScreenCaptureVideo;
    @property(assign, nonatomic) BOOL publishScreenCaptureAudio;
    #elif TARGET_OS_MAC
    @property(assign, nonatomic) BOOL publishThirdCameraTrack;
    @property(assign, nonatomic) BOOL publishFourthCameraTrack;
    @property(assign, nonatomic) BOOL publishScreenTrack;
    @property(assign, nonatomic) BOOL publishSecondaryScreenTrack;
    @property(assign, nonatomic) BOOL publishThirdScreenTrack;
    @property(assign, nonatomic) BOOL publishFourthScreenTrack;
    #endif
    @property(assign, nonatomic) BOOL publishCustomAudioTrack;
    @property(assign, nonatomic) NSInteger publishCustomAudioTrackId;

    @property(assign, nonatomic) BOOL publishCustomVideoTrack;
    @property(assign, nonatomic) BOOL publishEncodedVideoTrack;
    @property(assign, nonatomic) BOOL publishMediaPlayerAudioTrack;
    @property(assign, nonatomic) BOOL publishMediaPlayerVideoTrack;
    @property(assign, nonatomic) BOOL publishTranscodedVideoTrack;
    @property(assign, nonatomic) BOOL publishMixedAudioTrack;
    @property(assign, nonatomic) BOOL publishLipSyncTrack;
    @property(assign, nonatomic) BOOL autoSubscribeAudio;
    @property(assign, nonatomic) BOOL autoSubscribeVideo;
    @property(assign, nonatomic) BOOL enableAudioRecordingOrPlayout;
    @property(assign, nonatomic) NSInteger publishMediaPlayerId;
    @property(assign, nonatomic) AgoraClientRole clientRoleType;
    @property(assign, nonatomic) AgoraAudienceLatencyLevelType audienceLatencyLevel;
    @property(assign, nonatomic) AgoraVideoStreamType defaultVideoStreamType;
    @property(assign, nonatomic) AgoraChannelProfile channelProfile;
    @property(copy, nonatomic) NSString * _Nullable token;
    @property(assign, nonatomic) BOOL enableBuiltInMediaEncryption;

    @property(assign, nonatomic) BOOL publishRhythmPlayerTrack;
    @property(assign, nonatomic) BOOL isInteractiveAudience;

    @property(assign, nonatomic) NSInteger customVideoTrackId;

    @property(assign, nonatomic) BOOL isAudioFilterable;

    @end</codeblock>
                <codeblock props="cpp" outputclass="language-cpp">struct ChannelMediaOptions {
      Optional&amp;lt;bool&amp;gt; publishCameraTrack;
      Optional&amp;lt;bool&amp;gt; publishSecondaryCameraTrack;
      Optional&amp;lt;bool&amp;gt; publishThirdCameraTrack;
      Optional&amp;lt;bool&amp;gt; publishFourthCameraTrack;
      Optional&amp;lt;bool&amp;gt; publishMicrophoneTrack;

      #if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;amp;&amp;amp; TARGET_OS_IPHONE)
      Optional&amp;lt;bool&amp;gt; publishScreenCaptureVideo;
      Optional&amp;lt;bool&amp;gt; publishScreenCaptureAudio;
      #else
      Optional&amp;lt;bool&amp;gt; publishScreenTrack;
      Optional&amp;lt;bool&amp;gt; publishSecondaryScreenTrack;
      Optional&amp;lt;bool&amp;gt; publishThirdScreenTrack;
      Optional&amp;lt;bool&amp;gt; publishFourthScreenTrack;
      #endif

      Optional&amp;lt;bool&amp;gt; publishCustomAudioTrack;
      Optional&amp;lt;int&amp;gt; publishCustomAudioTrackId;
      Optional&amp;lt;bool&amp;gt; publishCustomVideoTrack;
      Optional&amp;lt;bool&amp;gt; publishEncodedVideoTrack;
      Optional&amp;lt;bool&amp;gt; publishMediaPlayerAudioTrack;
      Optional&amp;lt;bool&amp;gt; publishMediaPlayerVideoTrack;
      Optional&amp;lt;bool&amp;gt; publishTranscodedVideoTrack;
      Optional&amp;lt;bool&amp;gt; publishMixedAudioTrack;
      Optional&amp;lt;bool&amp;gt; publishLipSyncTrack;
      Optional&amp;lt;bool&amp;gt; autoSubscribeAudio;
      Optional&amp;lt;bool&amp;gt; autoSubscribeVideo;
      Optional&amp;lt;bool&amp;gt; enableAudioRecordingOrPlayout;
      Optional&amp;lt;int&amp;gt; publishMediaPlayerId;
      Optional&amp;lt;CLIENT_ROLE_TYPE&amp;gt; clientRoleType;
      Optional&amp;lt;AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt; audienceLatencyLevel;
      Optional&amp;lt;VIDEO_STREAM_TYPE&amp;gt; defaultVideoStreamType;
      Optional&amp;lt;CHANNEL_PROFILE_TYPE&amp;gt; channelProfile;
      Optional&amp;lt;const char*&amp;gt; token;
      Optional&amp;lt;bool&amp;gt; enableBuiltInMediaEncryption;
      Optional&amp;lt;bool&amp;gt; publishRhythmPlayerTrack;
      Optional&amp;lt;bool&amp;gt; isInteractiveAudience;

      Optional&amp;lt;video_track_id_t&amp;gt; customVideoTrackId;

      Optional&amp;lt;bool&amp;gt; isAudioFilterable;

      ChannelMediaOptions() {}
      ~ChannelMediaOptions() {}</codeblock>
             <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FChannelMediaOptions
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishSecondaryCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishThirdCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishFourthCameraTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishMicrophoneTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishScreenCaptureVideo = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishScreenCaptureAudio = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishSecondaryScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishThirdScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishFourthScreenTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishCustomAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool publishCustomAudioTrackId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int publishCustomAudioTrackId = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishCustomVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishEncodedVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishMediaPlayerAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishMediaPlayerVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishTranscodedVideoTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishMixedAudioTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishLipSyncTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional autoSubscribeAudio = EAgoraOptional::AGORA_TRUE_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional autoSubscribeVideo = EAgoraOptional::AGORA_TRUE_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional enableAudioRecordingOrPlayout = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool publishMediaPlayerId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int publishMediaPlayerId = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool clientRoleType_SetValue = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	ECLIENT_ROLE_TYPE clientRoleType = ECLIENT_ROLE_TYPE::CLIENT_ROLE_BROADCASTER;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool audienceLatencyLevel_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAUDIENCE_LATENCY_LEVEL_TYPE audienceLatencyLevel = EAUDIENCE_LATENCY_LEVEL_TYPE::AUDIENCE_LATENCY_LEVEL_LOW_LATENCY;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool defaultVideoStreamType_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EVIDEO_STREAM_TYPE defaultVideoStreamType = EVIDEO_STREAM_TYPE::VIDEO_STREAM_HIGH;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool channelProfile_SetValue = true;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	ECHANNEL_PROFILE_TYPE channelProfile = ECHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_LIVE_BROADCASTING;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool audioDelayMs_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int audioDelayMs = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool mediaPlayerAudioDelayMs_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int mediaPlayerAudioDelayMs = 0;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool token_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	FString token = "";
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional enableBuiltInMediaEncryption = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional publishRhythmPlayerTrack = EAgoraOptional::AGORA_NULL_VALUE;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional isInteractiveAudience = EAgoraOptional::AGORA_NULL_VALUE;
		UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	bool customVideoTrackId_SetValue = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	int64 customVideoTrackId = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ChannelMediaOptions")
	EAgoraOptional isAudioFilterable = EAgoraOptional::AGORA_NULL_VALUE;

	FChannelMediaOptions(){}
	FChannelMediaOptions(const agora::rtc::ChannelMediaOptions &amp;amp; AgoraData){

		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishCameraTrack, AgoraData.publishCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishSecondaryCameraTrack, AgoraData.publishSecondaryCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishThirdCameraTrack, AgoraData.publishThirdCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishFourthCameraTrack, AgoraData.publishFourthCameraTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishMicrophoneTrack, AgoraData.publishMicrophoneTrack)
#if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;amp;&amp;amp; TARGET_OS_IPHONE)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishScreenCaptureVideo, AgoraData.publishScreenCaptureVideo)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishScreenCaptureAudio, AgoraData.publishScreenCaptureAudio)
#else
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishScreenTrack, AgoraData.publishScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishSecondaryScreenTrack, AgoraData.publishSecondaryScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishThirdScreenTrack, AgoraData.publishThirdScreenTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishFourthScreenTrack, AgoraData.publishFourthScreenTrack)
#endif
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishCustomAudioTrack, AgoraData.publishCustomAudioTrack)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&amp;gt;publishCustomAudioTrackId, AgoraData.publishCustomAudioTrackId)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishCustomVideoTrack, AgoraData.publishCustomVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishEncodedVideoTrack, AgoraData.publishEncodedVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishMediaPlayerAudioTrack, AgoraData.publishMediaPlayerAudioTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishMediaPlayerVideoTrack, AgoraData.publishMediaPlayerVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishTranscodedVideoTrack, AgoraData.publishTranscodedVideoTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishMixedAudioTrack, AgoraData.publishMixedAudioTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishLipSyncTrack, AgoraData.publishLipSyncTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;autoSubscribeAudio, AgoraData.autoSubscribeAudio)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;autoSubscribeVideo, AgoraData.autoSubscribeVideo)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;enableAudioRecordingOrPlayout, AgoraData.enableAudioRecordingOrPlayout)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&amp;gt;publishMediaPlayerId, AgoraData.publishMediaPlayerId)
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&amp;gt;clientRoleType,AgoraData.clientRoleType,static_cast&amp;lt;ECLIENT_ROLE_TYPE&amp;gt;(AgoraData.clientRoleType.value()))

		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&amp;gt;audienceLatencyLevel, AgoraData.audienceLatencyLevel, static_cast&amp;lt;EAUDIENCE_LATENCY_LEVEL_TYPE&amp;gt;(AgoraData.audienceLatencyLevel.value()))
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&amp;gt;defaultVideoStreamType, AgoraData.defaultVideoStreamType, static_cast&amp;lt;EVIDEO_STREAM_TYPE&amp;gt;(AgoraData.defaultVideoStreamType.value()))
		SET_UEBP_OPTIONAL_VAL_ASSIGN_VAL(this-&amp;gt;channelProfile, AgoraData.channelProfile, static_cast&amp;lt;ECHANNEL_PROFILE_TYPE&amp;gt;(AgoraData.channelProfile.value()))
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&amp;gt;audioDelayMs, AgoraData.audioDelayMs)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&amp;gt;mediaPlayerAudioDelayMs, AgoraData.mediaPlayerAudioDelayMs)

		SET_UEBP_OPTIONAL_VAL_FString(this-&amp;gt;token,AgoraData.token)

		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;enableBuiltInMediaEncryption, AgoraData.enableBuiltInMediaEncryption)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;publishRhythmPlayerTrack, AgoraData.publishRhythmPlayerTrack)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;isInteractiveAudience, AgoraData.isInteractiveAudience)
		SET_UEBP_OPTIONAL_VAL_DIR_ASSIGN(this-&amp;gt;customVideoTrackId, AgoraData.customVideoTrackId)
		SET_UEBP_OPTIONAL_VAL_BOOL(this-&amp;gt;isAudioFilterable, AgoraData.isAudioFilterable)
	}
	agora::rtc::ChannelMediaOptions CreateAgoraData() const{
		agora::rtc::ChannelMediaOptions AgoraData;
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCameraTrack, this-&amp;gt;publishCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishSecondaryCameraTrack, this-&amp;gt;publishSecondaryCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishThirdCameraTrack, this-&amp;gt;publishThirdCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishFourthCameraTrack, this-&amp;gt;publishFourthCameraTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMicrophoneTrack, this-&amp;gt;publishMicrophoneTrack)
#if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;amp;&amp;amp; TARGET_OS_IPHONE)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenCaptureVideo, this-&amp;gt;publishScreenCaptureVideo)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenCaptureAudio, this-&amp;gt;publishScreenCaptureAudio)
#else
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishScreenTrack, this-&amp;gt;publishScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishSecondaryScreenTrack, this-&amp;gt;publishSecondaryScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishThirdScreenTrack, this-&amp;gt;publishThirdScreenTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishFourthScreenTrack, this-&amp;gt;publishFourthScreenTrack)
#endif
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCustomAudioTrack, this-&amp;gt;publishCustomAudioTrack)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.publishCustomAudioTrackId, this-&amp;gt;publishCustomAudioTrackId)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishCustomVideoTrack, this-&amp;gt;publishCustomVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishEncodedVideoTrack, this-&amp;gt;publishEncodedVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMediaPlayerAudioTrack, this-&amp;gt;publishMediaPlayerAudioTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMediaPlayerVideoTrack, this-&amp;gt;publishMediaPlayerVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishTranscodedVideoTrack, this-&amp;gt;publishTranscodedVideoTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishMixedAudioTrack, this-&amp;gt;publishMixedAudioTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishLipSyncTrack, this-&amp;gt;publishLipSyncTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.autoSubscribeAudio, this-&amp;gt;autoSubscribeAudio)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.autoSubscribeVideo, this-&amp;gt;autoSubscribeVideo)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.enableAudioRecordingOrPlayout, this-&amp;gt;enableAudioRecordingOrPlayout)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.publishMediaPlayerId, this-&amp;gt;publishMediaPlayerId)
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.clientRoleType, this-&amp;gt;clientRoleType,static_cast&amp;lt;agora::rtc::CLIENT_ROLE_TYPE&amp;gt;(this-&amp;gt;clientRoleType))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.audienceLatencyLevel, this-&amp;gt;audienceLatencyLevel, static_cast&amp;lt;agora::rtc::AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt;(this-&amp;gt;audienceLatencyLevel))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.defaultVideoStreamType, this-&amp;gt;defaultVideoStreamType, static_cast&amp;lt;agora::rtc::VIDEO_STREAM_TYPE&amp;gt;(this-&amp;gt;defaultVideoStreamType))
		SET_AGORA_OPTIONAL_VAL_ASSIGN_VAL(AgoraData.channelProfile, this-&amp;gt;channelProfile, static_cast&amp;lt;agora::CHANNEL_PROFILE_TYPE&amp;gt;(this-&amp;gt;channelProfile))
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.audioDelayMs, this-&amp;gt;audioDelayMs)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.mediaPlayerAudioDelayMs, this-&amp;gt;mediaPlayerAudioDelayMs)
		SET_AGORA_OPTIONAL_VAL_CHARPTR______MEMOALLOC(AgoraData.token, this-&amp;gt;token)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.enableBuiltInMediaEncryption, this-&amp;gt;enableBuiltInMediaEncryption)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.publishRhythmPlayerTrack, this-&amp;gt;publishRhythmPlayerTrack)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.isInteractiveAudience, this-&amp;gt;isInteractiveAudience)
		SET_AGORA_OPTIONAL_VAL_DIR_ASSIGN(AgoraData.customVideoTrackId, this-&amp;gt;customVideoTrackId)
		SET_AGORA_OPTIONAL_VAL_BOOL(AgoraData.isAudioFilterable, this-&amp;gt;isAudioFilterable)
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::ChannelMediaOptions&amp;amp; AgoraData) const {
		SET_AGORA_OPTIONAL_VAL_CHARPTR______MEMOFREE(AgoraData.token)
	}
};</codeblock>
                <codeblock props="unreal" outputclass="language-cpp">struct ChannelMediaOptions {
      Optional&amp;lt;bool&amp;gt; publishCameraTrack;
      Optional&amp;lt;bool&amp;gt; publishSecondaryCameraTrack;
      Optional&amp;lt;bool&amp;gt; publishMicrophoneTrack;

      #if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;amp;&amp;amp; TARGET_OS_IPHONE)
      Optional&amp;lt;bool&amp;gt; publishScreenCaptureVideo;
      Optional&amp;lt;bool&amp;gt; publishScreenCaptureAudio;
      #else
      Optional&amp;lt;bool&amp;gt; publishScreenTrack;
      Optional&amp;lt;bool&amp;gt; publishSecondaryScreenTrack;
      #endif

      Optional&amp;lt;bool&amp;gt; publishCustomAudioTrack;
      Optional&amp;lt;int&amp;gt; publishCustomAudioTrackId;
      Optional&amp;lt;bool&amp;gt; publishCustomVideoTrack;
      Optional&amp;lt;bool&amp;gt; publishEncodedVideoTrack;
      Optional&amp;lt;bool&amp;gt; publishMediaPlayerAudioTrack;
      Optional&amp;lt;bool&amp;gt; publishMediaPlayerVideoTrack;
      Optional&amp;lt;bool&amp;gt; publishTranscodedVideoTrack;
      Optional&amp;lt;bool&amp;gt; autoSubscribeAudio;
      Optional&amp;lt;bool&amp;gt; autoSubscribeVideo;
      Optional&amp;lt;bool&amp;gt; enableAudioRecordingOrPlayout;
      Optional&amp;lt;int&amp;gt; publishMediaPlayerId;
      Optional&amp;lt;CLIENT_ROLE_TYPE&amp;gt; clientRoleType;
      Optional&amp;lt;AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt; audienceLatencyLevel;
      Optional&amp;lt;VIDEO_STREAM_TYPE&amp;gt; defaultVideoStreamType;
      Optional&amp;lt;CHANNEL_PROFILE_TYPE&amp;gt; channelProfile;
      Optional&amp;lt;const char*&amp;gt; token;
      Optional&amp;lt;bool&amp;gt; enableBuiltInMediaEncryption;
      Optional&amp;lt;bool&amp;gt; publishRhythmPlayerTrack;
      Optional&amp;lt;bool&amp;gt; isInteractiveAudience;

      Optional&amp;lt;video_track_id_t&amp;gt; customVideoTrackId;

      Optional&amp;lt;bool&amp;gt; isAudioFilterable;

      ChannelMediaOptions() {}
      ~ChannelMediaOptions() {}</codeblock>
                <codeblock props="electron" outputclass="language-typescript">export class ChannelMediaOptions {

      publishCameraTrack?: boolean;

      publishSecondaryCameraTrack?: boolean;

      publishThirdCameraTrack?: boolean;

      publishFourthCameraTrack?: boolean;

      publishMicrophoneTrack?: boolean;

      publishScreenTrack?: boolean;

      publishSecondaryScreenTrack?: boolean;

      publishThirdScreenTrack?: boolean;

      publishFourthScreenTrack?: boolean;

      publishCustomAudioTrack?: boolean;

      publishCustomAudioTrackId?: number;

      publishCustomVideoTrack?: boolean;

      publishEncodedVideoTrack?: boolean;

      publishMediaPlayerAudioTrack?: boolean;

      publishMediaPlayerVideoTrack?: boolean;

      publishTranscodedVideoTrack?: boolean;

      publishLipSyncTrack?: boolean;

      autoSubscribeAudio?: boolean;

      autoSubscribeVideo?: boolean;

      enableAudioRecordingOrPlayout?: boolean;

      publishMediaPlayerId?: number;

      clientRoleType?: ClientRoleType;

      audienceLatencyLevel?: AudienceLatencyLevelType;

      defaultVideoStreamType?: VideoStreamType;

      channelProfile?: ChannelProfileType;

      token?: string;

      enableBuiltInMediaEncryption?: boolean;

      publishRhythmPlayerTrack?: boolean;

      isInteractiveAudience?: boolean;

      customVideoTrackId?: number;

      isAudioFilterable?: boolean;
    }</codeblock>
                <codeblock props="unity cs" outputclass="language-csharp">public class ChannelMediaOptions : OptionalJsonParse
        {
            public Optional&amp;lt;bool&amp;gt; publishCameraTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishSecondaryCameraTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishThirdCameraTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishFourthCameraTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishMicrophoneTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishScreenCaptureVideo = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishScreenCaptureAudio = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishScreenTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishSecondaryScreenTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishThirdScreenTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishFourthScreenTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishCustomAudioTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;int&amp;gt; publishCustomAudioTrackId = new Optional&amp;lt;int&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishCustomVideoTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishEncodedVideoTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishMediaPlayerAudioTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishMediaPlayerVideoTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishTranscodedVideoTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishLipSyncTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; autoSubscribeAudio = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; autoSubscribeVideo = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; enableAudioRecordingOrPlayout = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;int&amp;gt; publishMediaPlayerId = new Optional&amp;lt;int&amp;gt;();
            public Optional&amp;lt;CLIENT_ROLE_TYPE&amp;gt; clientRoleType = new Optional&amp;lt;CLIENT_ROLE_TYPE&amp;gt;();
            public Optional&amp;lt;AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt; audienceLatencyLevel = new Optional&amp;lt;AUDIENCE_LATENCY_LEVEL_TYPE&amp;gt;();
            public Optional&amp;lt;VIDEO_STREAM_TYPE&amp;gt; defaultVideoStreamType = new Optional&amp;lt;VIDEO_STREAM_TYPE&amp;gt;();
            public Optional&amp;lt;CHANNEL_PROFILE_TYPE&amp;gt; channelProfile = new Optional&amp;lt;CHANNEL_PROFILE_TYPE&amp;gt;();
            public Optional&amp;lt;string&amp;gt; token = new Optional&amp;lt;string&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; publishRhythmPlayerTrack = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; isInteractiveAudience = new Optional&amp;lt;bool&amp;gt;();
            public Optional&amp;lt;video_track_id_t&amp;gt; customVideoTrackId = new Optional&amp;lt;video_track_id_t&amp;gt;();
            public Optional&amp;lt;bool&amp;gt; isAudioFilterable = new Optional&amp;lt;bool&amp;gt;();

       }</codeblock>
                <codeblock props="rn" outputclass="language-typescript">export class ChannelMediaOptions {

      publishCameraTrack?: boolean;

      publishSecondaryCameraTrack?: boolean;

      publishThirdCameraTrack?: boolean;

      publishFourthCameraTrack?: boolean;

      publishMicrophoneTrack?: boolean;

      publishScreenCaptureVideo?: boolean;

      publishScreenCaptureAudio?: boolean;

      publishSecondaryScreenTrack?: boolean;

      publishThirdScreenTrack?: boolean;

      publishFourthScreenTrack?: boolean;

      publishCustomAudioTrack?: boolean;

      publishCustomAudioTrackId?: number;

      publishCustomVideoTrack?: boolean;

      publishEncodedVideoTrack?: boolean;

      publishMediaPlayerAudioTrack?: boolean;

      publishMediaPlayerVideoTrack?: boolean;

      publishTranscodedVideoTrack?: boolean;

      publishLipSyncTrack?: boolean;

      autoSubscribeAudio?: boolean;

      autoSubscribeVideo?: boolean;

      enableAudioRecordingOrPlayout?: boolean;

      publishMediaPlayerId?: number;

      clientRoleType?: ClientRoleType;

      audienceLatencyLevel?: AudienceLatencyLevelType;

      defaultVideoStreamType?: VideoStreamType;

      channelProfile?: ChannelProfileType;

      token?: string;

      enableBuiltInMediaEncryption?: boolean;

      publishRhythmPlayerTrack?: boolean;

      isInteractiveAudience?: boolean;

      customVideoTrackId?: number;

      isAudioFilterable?: boolean;
    }</codeblock>
                <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
    class ChannelMediaOptions {
      const ChannelMediaOptions(
          {this.publishCameraTrack,
          this.publishSecondaryCameraTrack,
          this.publishThirdCameraTrack,
          this.publishFourthCameraTrack,
          this.publishMicrophoneTrack,
          this.publishScreenCaptureVideo,
          this.publishScreenCaptureAudio,
          this.publishScreenTrack,
          this.publishSecondaryScreenTrack,
          this.publishThirdScreenTrack,
          this.publishFourthScreenTrack,
          this.publishCustomAudioTrack,
          this.publishCustomAudioTrackId,
          this.publishCustomVideoTrack,
          this.publishEncodedVideoTrack,
          this.publishMediaPlayerAudioTrack,
          this.publishMediaPlayerVideoTrack,
          this.publishTranscodedVideoTrack,
          this.publishMixedAudioTrack,
          this.publishLipSyncTrack,
          this.autoSubscribeAudio,
          this.autoSubscribeVideo,
          this.enableAudioRecordingOrPlayout,
          this.publishMediaPlayerId,
          this.clientRoleType,
          this.audienceLatencyLevel,
          this.defaultVideoStreamType,
          this.channelProfile,
          this.audioDelayMs,
          this.mediaPlayerAudioDelayMs,
          this.token,
          this.enableBuiltInMediaEncryption,
          this.publishRhythmPlayerTrack,
          this.isInteractiveAudience,
          this.customVideoTrackId,
          this.isAudioFilterable,
          this.parameters});

      @JsonKey(name: 'publishCameraTrack')
      final bool? publishCameraTrack;

      @JsonKey(name: 'publishSecondaryCameraTrack')
      final bool? publishSecondaryCameraTrack;

      @JsonKey(name: 'publishThirdCameraTrack')
      final bool? publishThirdCameraTrack;

      @JsonKey(name: 'publishFourthCameraTrack')
      final bool? publishFourthCameraTrack;

      @JsonKey(name: 'publishMicrophoneTrack')
      final bool? publishMicrophoneTrack;

      @JsonKey(name: 'publishScreenCaptureVideo')
      final bool? publishScreenCaptureVideo;

      @JsonKey(name: 'publishScreenCaptureAudio')
      final bool? publishScreenCaptureAudio;

      @JsonKey(name: 'publishScreenTrack')
      final bool? publishScreenTrack;

      @JsonKey(name: 'publishSecondaryScreenTrack')
      final bool? publishSecondaryScreenTrack;

      @JsonKey(name: 'publishThirdScreenTrack')
      final bool? publishThirdScreenTrack;

      @JsonKey(name: 'publishFourthScreenTrack')
      final bool? publishFourthScreenTrack;

      @JsonKey(name: 'publishCustomAudioTrack')
      final bool? publishCustomAudioTrack;

      @JsonKey(name: 'publishCustomAudioTrackId')
      final int? publishCustomAudioTrackId;

      @JsonKey(name: 'publishCustomVideoTrack')
      final bool? publishCustomVideoTrack;

      @JsonKey(name: 'publishEncodedVideoTrack')
      final bool? publishEncodedVideoTrack;

      @JsonKey(name: 'publishMediaPlayerAudioTrack')
      final bool? publishMediaPlayerAudioTrack;

      @JsonKey(name: 'publishMediaPlayerVideoTrack')
      final bool? publishMediaPlayerVideoTrack;

      @JsonKey(name: 'publishTranscodedVideoTrack')
      final bool? publishTranscodedVideoTrack;

      @JsonKey(name: 'publishMixedAudioTrack')
      final bool? publishMixedAudioTrack;

      @JsonKey(name: 'publishLipSyncTrack')
      final bool? publishLipSyncTrack;

      @JsonKey(name: 'autoSubscribeAudio')
      final bool? autoSubscribeAudio;

      @JsonKey(name: 'autoSubscribeVideo')
      final bool? autoSubscribeVideo;

      @JsonKey(name: 'enableAudioRecordingOrPlayout')
      final bool? enableAudioRecordingOrPlayout;

      @JsonKey(name: 'publishMediaPlayerId')
      final int? publishMediaPlayerId;

      @JsonKey(name: 'clientRoleType')
      final ClientRoleType? clientRoleType;

      @JsonKey(name: 'audienceLatencyLevel')
      final AudienceLatencyLevelType? audienceLatencyLevel;

      @JsonKey(name: 'defaultVideoStreamType')
      final VideoStreamType? defaultVideoStreamType;

      @JsonKey(name: 'channelProfile')
      final ChannelProfileType? channelProfile;

      @JsonKey(name: 'audioDelayMs')
      final int? audioDelayMs;

      @JsonKey(name: 'mediaPlayerAudioDelayMs')
      final int? mediaPlayerAudioDelayMs;

      @JsonKey(name: 'token')
      final String? token;

      @JsonKey(name: 'enableBuiltInMediaEncryption')
      final bool? enableBuiltInMediaEncryption;

      @JsonKey(name: 'publishRhythmPlayerTrack')
      final bool? publishRhythmPlayerTrack;

      @JsonKey(name: 'isInteractiveAudience')
      final bool? isInteractiveAudience;

      @JsonKey(name: 'customVideoTrackId')
      final int? customVideoTrackId;

      @JsonKey(name: 'isAudioFilterable')
      final bool? isAudioFilterable;

      @JsonKey(name: 'parameters')
      final String? parameters;

      factory ChannelMediaOptions.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;
          _$ChannelMediaOptionsFromJson(json);

      Map&amp;lt;String, dynamic&amp;gt; toJson() =&amp;gt; _$ChannelMediaOptionsToJson(this);
    }</codeblock>
                <codeblock props="reserve" outputclass="language-cpp"/></p>
            </section>
        <section id="detailed_desc">Agora supports publishing multiple audio streams and one video stream at the same time and in the same <xref keyref="RtcConnection"/>. For example, <parmname>publishMicrophoneTrack</parmname>, <parmname>publishCustomAudioTrack</parmname>, and <parmname>publishMediaPlayerAudioTrack</parmname> can be set as <codeph><ph keyref="true"/></codeph> at the same time, but only one of <parmname>publishCameraTrack</parmname>, <ph props="android bp cpp flutter ios rn unity unreal"><parmname>publishScreenCaptureVideo</parmname>, </ph><ph props="bp cpp electron flutter mac unity unreal"><parmname>publishScreenTrack</parmname>, </ph><parmname>publishCustomVideoTrack</parmname>, or <parmname>publishEncodedVideoTrack</parmname> can be set as <codeph><ph keyref="true"/></codeph>.<note type="attention" id="note">Agora recommends that you set member parameter values yourself according to your business scenario, otherwise the SDK will automatically assign values to member parameters.</note>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>publishCameraTrack</pt>
                <pd>Whether to publish the video captured by the camera:<ul id="ul_vx5_np5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video captured by the camera.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video captured by the camera.</li>
                    </ul></pd>
            </plentry>
            <plentry props="apple bp cpp cs electron flutter rn unity unreal">
                <pt>publishSecondaryCameraTrack</pt>
                <pd>Whether to publish the video captured by the second camera:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video captured by the second camera.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video captured by the second camera.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMicrophoneTrack</pt>
                <pd>Whether to publish the audio captured by the microphone:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the audio captured by the microphone.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the audio captured by the microphone.</li>
                </ul></pd>
                <pd>
                    <note type="note">
                    <ul><li props="electron native rn unity">As of v4.0.0, the parameter name is changed from <parmname>publishAudioTrack</parmname> to <parmname>publishMicrophoneTrack</parmname>.</li>
                    <li props="flutter">As of v6.0.0, the parameter name is changed from <parmname>publishAudioTrack</parmname> to <parmname>publishMicrophoneTrack</parmname>.</li>
                    <li>If you set this parameter as <codeph><ph keyref="false"/></codeph>, SDK turns off microphone capturing.</li>
                        <li>If you want to publish the audio streams captured by your microphone, ensure <parmname>enableAudioRecordingOrPlayout</parmname> is set as <codeph><ph keyref="true"/></codeph>.</li>
                    </ul></note>
                </pd>
            </plentry>
            <plentry props="android cpp framework mac">
                <pt>publishThirdCameraTrack</pt>
                <pd>Whether to publish the video captured by the third camera:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video captured by the third camera.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video captured by the third camera.</li>
                    </ul>
                    <note type="attention" props="bp cpp flutter unity unreal">This parameter is for Android, Windows and macOS only.</note><note type="attention" props="rn">This parameter is for Android only.</note></pd>
            </plentry>
            <plentry props="android cpp framework mac">
                <pt>publishFourthCameraTrack</pt>
                <pd>Whether to publish the video captured by the fourth camera:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video captured by the fourth camera.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video captured by the fourth camera.</li>
                    </ul>
                    <note type="attention" props="bp cpp flutter unity unreal">This parameter is for Android, Windows and macOS only.</note><note type="attention" props="rn">This parameter is for Android only.</note></pd>
            </plentry>
            <plentry props="bp cpp cs electron flutter mac unity unreal">
                <pt>publishScreenTrack</pt>
                <pd>
                    <p>Whether to publish the video captured from the screen:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video captured from the screen.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video captured from the screen.</li>
                    </ul></p>
                    <note type="attention" props="bp cpp flutter unity unreal">This is for Windows and macOS only.</note>
                </pd>
            </plentry>
            <plentry props="android bp cpp flutter hmos ios rn unity unreal">
                <pt>publishScreenCaptureVideo</pt>
                <pd>
                    <p>Whether to publish the video captured from the screen:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video captured from the screen.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video captured from the screen.</li>
                    </ul></p>
                    <note type="attention" props="bp cpp flutter unity unreal">This parameter is for Android and iOS only.</note>
                    <note type="note" props="android ios">As of v4.0.0, the parameter name is changed from <parmname>publishScreenTrack</parmname> to <parmname>publishScreenCaptureVideo</parmname>.</note> </pd>
            </plentry>
            <plentry props="bp flutter hmos native rn unity unreal">
                <pt>publishScreenCaptureAudio</pt>
                <pd>
                    <p>Whether to publish the audio captured from the screen:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the audio captured from the screen.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Publish the audio captured from the screen.</li>
                    </ul></p>
                    <note type="attention" props="bp cpp flutter unity unreal">This parameter is for Android and iOS only.</note>
                </pd>
            </plentry>
            <plentry props="bp cpp cs electron flutter mac rn unity unreal">
                <pt>publishSecondaryScreenTrack</pt>
                <pd>Whether to publish the video captured from the second screen:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video captured from the second screen.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video captured from the second screen.</li>
                    </ul>
                </pd>
            </plentry>
            <plentry props="bp cpp cs electron flutter mac unity unreal">
                <pt>publishThirdScreenTrack</pt>
                <pd>Whether to publish the video captured from the third screen:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the captured video from the third screen.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video captured from the third screen.</li>
                    </ul>
                    <p>
                    <note type="attention" props="bp cpp cs flutter unity unreal">This is for Windows and macOS only.</note></p>
                </pd>
            </plentry>
            <plentry props="bp cpp cs electron flutter mac unity unreal">
                <pt>publishFourthScreenTrack</pt>
                <pd>Whether to publish the video captured from the fourth screen:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the captured video from the fourth screen.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video captured from the fourth screen.</li>
                    </ul>
                    <p>
                    <note type="attention" props="bp cpp cs flutter unity unreal">This is for Windows and macOS only.</note></p>
                </pd>
            </plentry>
            <plentry props="bp cpp cs electron flutter rn unity unreal">
                <pt>publishTranscodedVideoTrack</pt>
                <pd>Whether to publish the local transcoded video:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the local transcoded video.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the local transcoded video.</li>
                    </ul>
                    <note type="note" props="native">As of v4.2.0, the parameter name is corrected from <parmname>publishTrancodedVideoTrack</parmname> to <parmname>publishTranscodedVideoTrack</parmname>.</note>
                </pd>
            </plentry>
            <plentry>
                <pt>publishMixedAudioTrack</pt>
                <pd>Whether to publish the mixed audio track:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the mixed audio track.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the mixed audio track.</li>
                    </ul>
                 </pd>
            </plentry>
            <plentry props="en">
                <pt>publishLipSyncTrack</pt>
                <pd>Whether to publish the video track processed by the speech driven extension:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video track processed by the speech driven extension.</li>
                    <li><codeph><ph keyref="false"/></codeph>: (Default) Do not publish the video track processed by the speech driven extension.</li>
                    </ul>
                 </pd>
            </plentry>
            <plentry props="cs electron flutter native rn unity unreal">
                <pt>publishCustomAudioTrack</pt>
                <pd>Whether to publish the audio captured from a custom source:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the audio captured from the custom source.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the captured audio from a custom source.</li>
                    </ul></pd>
            </plentry>
            <plentry props="cs electron flutter native rn unity unreal">
                <pt>publishCustomAudioTrackId</pt>
                <pd>The ID of the custom audio track to be published. The default value is 0. You can obtain the custom audio track ID through the <xref keyref="createCustomAudioTrack"/> method.</pd>
            </plentry>
            <plentry props="cs electron flutter native rn unity unreal">
                <pt>publishCustomVideoTrack</pt>
                <pd>Whether to publish the video captured from a custom source:<ul>
                        <li><codeph><ph keyref="true"/></codeph>: Publish the video captured from the custom source.</li>
                        <li><codeph><ph keyref="false"/></codeph>: Do not publish the captured video from a custom source.</li>
                        </ul>
                </pd>
            </plentry>
            <plentry>
                <pt>publishEncodedVideoTrack</pt>
                <pd>Whether to publish the encoded video:<ul id="ul_ljg_4q5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Publish the encoded video.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the encoded video.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerAudioTrack</pt>
                <pd>Whether to publish the audio from the media player:<ul id="ul_gr3_rq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Publish the audio from the media player.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the audio from the media player.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerVideoTrack</pt>
                <pd>Whether to publish the video from the media player:<ul id="ul_gtd_tq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video from the media player.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video from the media player.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>autoSubscribeAudio</pt>
                <pd>Whether to automatically subscribe to all remote audio streams when the user joins a channel:<ul id="ul_gxf_vq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Subscribe to all remote audio streams.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not automatically subscribe to any remote audio streams.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>autoSubscribeVideo</pt>
                <pd>Whether to automatically subscribe to all remote video streams when the user joins the channel:<ul id="ul_gfh_xq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Subscribe to all remote video streams.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not automatically subscribe to any remote video streams.</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>enableAudioRecordingOrPlayout</pt>
                <pd>Whether to enable audio capturing or playback:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Enable audio capturing or playback.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not enable audio capturing or playback.</li>
                    </ul>
                    <note type="note">If you need to publish the audio streams captured by your microphone, ensure this parameter is set as <codeph><ph keyref="true"/></codeph>.</note></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerId</pt>
                <pd>The ID of the media player to be published. The default value is 0.</pd>
            </plentry>
            <plentry props="bp cs native unity unreal">
                <pt>clientRoleType</pt>
                <pd conkeyref="setClientRole1/clientrole"/>
            </plentry>
            <plentry props="electron flutter rn">
                <pt>clientRoleType</pt>
                <pd>The user role. See <xref keyref="CLIENT_ROLE_TYPE"/>.</pd>
            </plentry>
            <plentry conkeyref="ClientRoleOptions/audiencelatencylevel">
                <pt/>
                <pd/>
            </plentry>
            <plentry>
                <pt>defaultVideoStreamType</pt>
                <pd conkeyref="setRemoteDefaultVideoStreamType/defaultstreamtype"/>
            </plentry>
            <plentry>
                <pt>channelProfile</pt>
                <pd conkeyref="setChannelProfile/channelprofiletype"/>
            </plentry>
            <plentry>
                <pt>audioDelayMs</pt>
                <pd>
                    <p>Delay (in milliseconds) for sending audio frames. You can use this parameter to set the delay of the audio frames that need to be sent, to ensure audio and video synchronization.</p>
                    <p>To switch off the delay, set the value to 0.</p>
                </pd>
            </plentry>
            <plentry props="hide">
                <pt>publishCustomAudioTrackAec</pt>
                <pd>Whether to publish audio frames processed by an external echo cancellation module.<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish audio frames processed by the external echo cancellation module.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish to publish audio frames processed by the external echo cancellation module.</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>token</pt>
                <pd>
                    <p>(Optional) The token generated on your server for authentication. See <xref keyref="guide-token"/>.</p>
                    <note type="attention">
                    <ul>
                    <li>This parameter takes effect only when calling <xref keyref="updateChannelMediaOptions"/> or <xref keyref="updateChannelMediaOptionsEx"/>.</li>
                    <li>Ensure that the App ID, channel name, and user name used for creating the token are the same as those used by the <xref keyref="initialize"/> method for initializing the RTC engine, and those used by the <xref keyref="joinChannel2"/> and <xref keyref="joinChannelEx"/> methods for joining the channel.</li>
                    </ul></note></pd>
            </plentry>
            <plentry props="hide">
                <pt>startPreview</pt>
                <pd>Whether to automatically start the preview when joining a channel:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Do not automatically start the preview. Ensure that you have called the <xref keyref="setupLocalVideo"/> method to set the local video property; otherwise, the preview is not enabled.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not automatically start the preview.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishRhythmPlayerTrack</pt>
                <pd>Whether to publish the sound of a metronome to remote users:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish processed audio frames. Both the local user and remote users can hear the metronome.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the sound of the metronome. Only the local user can hear the metronome.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>isInteractiveAudience</pt>
                <pd>Whether to enable interactive mode:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Enable interactive mode. Once this mode is enabled and the user role is set as audience, the user can receive remote video streams with low latency.</li>
                    <li><codeph><ph keyref="false"/></codeph>:Do not enable interactive mode. If this mode is disabled, the user receives the remote video streams in default settings.</li>
                    </ul>
                    <note type="attention">
                    <ul>
                    <li>This parameter only applies to co-streaming scenarios. The cohosts need to call the <xref keyref="joinChannelEx"/> method to join the other host's channel as an audience member, and set <parmname>isInteractiveAudience</parmname> to <codeph><ph keyref="true"/></codeph>.</li>
                    <li>This parameter takes effect only when the user role is <apiname keyref="CLIENT_ROLE_AUDIENCE"/>.</li>
                    </ul> </note> </pd>
            </plentry>
            <plentry id="customvideotrackid" props="cs electron flutter native rn unity unreal">
                <pt>customVideoTrackId</pt>
                <pd>The video track ID returned by calling the <xref keyref="createCustomVideoTrack"/> method. The default value is 0.</pd>
            </plentry>
            <plentry>
                <pt>isAudioFilterable</pt>
                <pd>Whether the audio stream being published is filtered according to the volume algorithm:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: The audio stream is filtered. If the audio stream filter is not enabled, this setting does not takes effect.</li>
                    <li><codeph><ph keyref="false"/></codeph>: The audio stream is not filtered.</li>
                    </ul>
                    <note type="attention">If you need to enable this function, contact <xref keyref="mailto-link"/>.</note></pd>
            </plentry>
            <plentry props="native">
                <pt props="native">enableMultipath</pt>
                <pd props="native">Whether to enable multiple transmisssion paths:<ul>
                        <li><codeph><ph keyref="true"/></codeph>: Enable multiple transmisssion path.</li>
                        <li><codeph><ph keyref="false"/></codeph>: Dsiable multiple transmisssion path.</li>
                        </ul>
                    <note type="attention">
                        <ul>
                        <li>Available since v4.6.0.</li>
                        <li><p>Permissions and system requirements: <ph props="android cpp">Android: Android 7.0 or higher (API level 24 or higher), and the ACCESS_NETWORK_STATE and CHANGE_NETWORK_STATE permissions are required. </ph><ph props="ios cpp">iOS: iOS 12.0 or later. </ph><ph props="mac cpp">macOS: 10.14 or later. </ph><ph props="cpp">Windows: Windows Vista or higher.</ph></p>
                        </li>
                        </ul>
                    </note>
                    </pd>
            </plentry>
            <plentry props="native">
                <pt props="native">uplinkMultipathMode</pt>
                <pd props="native">Uplink transmission mode. See <xref keyref="MultipathMode"/>.<note type="attention">
                    <ul>
                        <li>Available since v4.6.0.</li>
                        <li>When using this parameter, make sure that <codeph>enableMultipath</codeph> is set to <codeph><ph keyref="true"/></codeph>.</li>
                    </ul>
                </note></pd>
            </plentry>
            <plentry props="native">
                <pt props="native">downlinkMultipathMode</pt>
                <pd props="native">Downlink transmission mode. See <xref keyref="MultipathMode"/>.<note type="attention">
                        <ul>
                            <li>Available since v4.6.0.</li>
                            <li>When using this parameter, make sure that <codeph>enableMultipath</codeph> is set to <codeph><ph keyref="true"/></codeph>.</li>
                        </ul>
                    </note></pd>
            </plentry>
            <plentry props="native">
                <pt props="native">preferMultipathType</pt>
                <pd props="native">Preferred type of transmission path. See <xref keyref="MultipathType"/>.<note type="attention">
                        <ul>
                            <li>Available since v4.6.0.</li>
                            <li>When using this parameter, make sure that <codeph>enableMultipath</codeph> is set to <codeph><ph keyref="true"/></codeph>.</li>
                        </ul>
                    </note></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
