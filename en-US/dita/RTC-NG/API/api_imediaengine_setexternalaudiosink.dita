<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaengine_setexternalaudiosink">
    <title><ph keyref="setExternalAudioSink" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the external audio sink.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setExternalAudioSink" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setExternalAudioSink(boolean enabled, int sampleRate, int channels);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)enableExternalAudioSink:(BOOL)enabled
                     sampleRate:(NSUInteger)sampleRate
                       channels:(NSUInteger)channels;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setExternalAudioSink(bool enabled, int sampleRate, int channels) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setExternalAudioSink(
    enabled: boolean,
    sampleRate: number,
    channels: number
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetExternalAudioSink(bool enabled, int sampleRate, int channels);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setExternalAudioSink(
    enabled: boolean,
    sampleRate: number,
    channels: number
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> setExternalAudioSink(
    {required bool enabled, required int sampleRate, required int channels});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>This method applies to scenarios where you want to use external audio data for playback. After you set the external audio sink, you can call <xref keyref="pullAudioFrame" /> to pull remote audio frames. The app can process the remote audio and play it with the audio effects that you want.</p>
            <note props="hide">
            <ul>
            <li>Before using this method, you need to set <parmname>enableAudioDevice</parmname> to <codeph><ph keyref="false" /></codeph> in <xref keyref="RtcEngineConfig" />.</li>
            <li>Ensure that you call this method before joining a channel.</li>
            <li>Once you enable the external audio sink, the app will not retrieve any audio data from the <xref keyref="onPlaybackAudioFrame" /> callback.</li>
            </ul> </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>enabled</pt>
                <pd>
                    <p>Whether to enable or disable the external audio sink:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: Enables the external audio sink.</li>
                    <li><codeph><ph keyref="false" /></codeph>: (Default) Disables the external audio sink.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>sampleRate</pt>
                <pd>
                    <p>The sample rate (Hz) of the external audio sink, which can be set as 16000, 32000, 44100, or 48000.</p>
                </pd>
            </plentry>
            <plentry>
                <pt>channels</pt>
                <pd>The number of audio channels of the external audio sink:<ul>
                    <li>1: Mono.</li>
                    <li>2: Stereo.</li>
                    </ul></pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown; and you need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="android cpp unreal bp electron unity rn cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>