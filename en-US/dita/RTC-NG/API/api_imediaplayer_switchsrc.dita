<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaplayer_switchsrc">
    <title><ph keyref="switchSrc" /></title>
    <shortdesc id="short"><ph id="shortdesc">Switches the media resource being played.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="switchSrc" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int switchSrc(String src, boolean syncPts);
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)switchSrc:(NSString *)src syncPts:(BOOL)sync;
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int switchSrc(const char* src, bool syncPts) = 0;
</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IMediaPlayer&quot;)
	int SwitchSrc(FString src, bool syncPts);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract switchSrc(src: string, syncPts?: boolean): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SwitchSrc(string src, bool syncPts = true);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract switchSrc(src: string, syncPts?: boolean): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; switchSrc({required String src, bool syncPts = true});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>You can call this method to switch the media resource to be played according to the current network status. For example:<ul>
            <li>When the network is poor, the media resource to be played is switched to a media resource address with a lower bitrate.</li>
            <li>When the network is good, the media resource to be played is switched to a media resource address with a higher bitrate.</li>
            </ul></p>
            <p>After calling this method, if you receive the <apiname keyref="PLAYER_EVENT_SWITCH_COMPLETE" /> event in the <xref keyref="onPlayerEvent" /> callback, the switch is successful; If you receive the <apiname keyref="PLAYER_EVENT_SWITCH_ERROR" /> event in the <xref keyref="onPlayerEvent" /> callback, the switch fails.</p>
            <p props="hide">If you want to customize CDN routes for playing the media resource, call the <xref keyref="switchAgoraCDNSrc" /> method to switch media resources. Agora changes the CDN route through the self-developed scheduling center to improve the viewing user experience. If you do not need to customize CDN routes for playing the media resource, call the <xref keyref="switchSrc" /> method to switch media resources.</p>
            <note type="attention">
            <ul>
            <li>Ensure that you call this method after <xref keyref="open" />.</li>
            <li>To ensure normal playback, pay attention to the following when calling this method:<ul>
                <li>Do not call this method when playback is paused.</li>
                <li>Do not call the <xref keyref="seek" /> method during switching.</li>
                <li>Before switching the media resource, make sure that the playback position does not exceed the total duration of the media resource to be switched.</li>
                </ul></li>
            </ul> </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry id="src">
        <pt>src</pt>
        <pd>The URL of the media resource.</pd>
      </plentry>
      <plentry id="syncPts">
        <pt>syncPts</pt>
        <pd>Whether to synchronize the playback position (ms) before and after the switch:<ul>
          <li><codeph><ph keyref="true" /></codeph>: Synchronize the playback position before and after the switch.</li>
          <li><codeph><ph keyref="false" /></codeph>: (Default) Do not synchronize the playback position before and after the switch.</li>
          </ul>
          <p>Make sure to set this parameter as <codeph><ph keyref="false" /></codeph> if you need to play live streams, or the switch fails. If you need to play on-demand streams, you can set the value of this parameter according to your scenarios.</p>
        </pd>
      </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp electron unity cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
