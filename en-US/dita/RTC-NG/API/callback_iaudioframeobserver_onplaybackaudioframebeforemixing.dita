<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_iaudioframeobserver_onplaybackaudioframebeforemixing">
    <title><ph keyref="onPlaybackAudioFrameBeforeMixing"/></title>
    <shortdesc id="short"><ph id="shortdesc">Retrieves the audio frame of a specified user before mixing.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onPlaybackAudioFrameBeforeMixing"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract boolean onPlaybackAudioFrameBeforeMixing(int userId, int type,
                int samplesPerChannel, int bytesPerSample, int channels, int samplesPerSec, ByteBuffer buffer,
                long renderTimeMs, int avsync_type);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)onPlaybackAudioFrameBeforeMixing:(AgoraAudioFrame* _Nonnull)frame channelId:(NSString * _Nonnull)channelId uid:(NSUInteger)uid  NS_SWIFT_NAME(onPlaybackAudioFrame(beforeMixing:channelId:uid:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual bool onPlaybackAudioFrameBeforeMixing(const char* channelId, rtc::uid_t uid, AudioFrame&amp; audioFrame) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FOnPlaybackAudioFrameBeforeMixing, const FString, channelId, int64, uid, const FAudioFrame&amp;, audioFrame);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">  onPlaybackAudioFrameBeforeMixing?(
    channelId: string,
    uid: number,
    audioFrame: AudioFrame
  ): boolean;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual bool OnPlaybackAudioFrameBeforeMixing(string channel_id,
                                                        uint uid,
                                                        AudioFrame audio_frame)
        {
            return false;
        }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">  onPlaybackAudioFrameBeforeMixing?(
    channelId: string,
    uid: number,
    audioFrame: AudioFrame
  ): boolean;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(String channelId, int uid, AudioFrame audioFrame)?
      onPlaybackAudioFrameBeforeMixing;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc" props="flutter">
            <note type="attention">Due to the limitations of Flutter, this callback does not support sending processed audio data back to the SDK.</note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry props="cpp unreal bp electron unity rn flutter cs">
                <pt props="ios mac cpp unreal bp electron rn flutter">channelId</pt>
                <pt props="unity cs">channel_id</pt>
                <pd>The channel ID.</pd>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp ios mac unity electron rn flutter cs">uid</pt>
                <pt props="android">userId</pt>
                <pd>The user ID of the specified user.</pd>
            </plentry>
            <plentry props="cpp unreal bp unity ios mac electron rn flutter cs">
                <pt props="cpp unreal bp electron rn flutter">audioFrame</pt>
                <pt props="ios mac">frame</pt>
                <pt props="unity cs">audio_Frame</pt>
                <pd>The raw audio data. See <xref keyref="AudioFrame"/>.</pd>
            </plentry>
            </parml>
            <parml props="android">
            <plentry conkeyref="onMixedAudioFrame/type">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="onMixedAudioFrame/samplesPerChannel">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="onMixedAudioFrame/bytesPerSample">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="onMixedAudioFrame/channels">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="onMixedAudioFrame/samplesPerSec">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="onMixedAudioFrame/buffer">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="onMixedAudioFrame/renderTimeMs">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="onMixedAudioFrame/avsync">
                <pt/>
                <pd/>
            </plentry>
            </parml> </section>
        <section id="return_values" conkeyref="onMixedAudioFrame/return_values" props="native unreal bp unity rn electron cs"/>
    </refbody>
</reference>
