<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_rtcengineconfig">
    <title><ph keyref="RtcEngineConfig"/></title>
    <shortdesc id="short"><ph id="shortdesc">Configurations for the <apiname keyref="RtcEngineConfig"/> instance.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class RtcEngineConfig {
  public IRtcEngineEventHandler mEventHandler;
  public Context mContext;
  public String mAppId;
  public int mAreaCode;
  public int mChannelProfile;
  public int mAudioScenario;
  public boolean mAutoRegisterAgoraExtensions;
  public List&lt;String> mExtensionList;
  public IMediaExtensionObserver mExtensionObserver;
  public LogConfig mLogConfig;
  public String mNativeLibPath;
  public boolean mDomainLimit;  

  public void addExtension(String providerName) {
    mExtensionList.add(providerName);
  }

}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcEngineConfig: NSObject

@property (copy, nonatomic) NSString * _Nullable appId;
@property (assign, nonatomic) AgoraChannelProfile channelProfile;
@property (assign, nonatomic) AgoraAudioScenario audioScenario;
@property (assign, nonatomic) AgoraAreaCodeType areaCode;
@property (strong, nonatomic) AgoraLogConfig * _Nullable logConfig;
@property (assign, nonatomic) BOOL domainLimit;
@property (assign, nonatomic) BOOL autoRegisterAgoraExtensions;
@property (copy, nonatomic) NSArray&lt;id&lt;AgoraMediaFilterExtensionDelegate&gt;&gt;* _Nullable mediaFilterExtensions;
@property (weak, nonatomic) id&lt;AgoraMediaFilterEventDelegate&gt; _Nullable eventDelegate;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct RtcEngineContext {
  IRtcEngineEventHandler* eventHandler;
  const char* appId;
  void* context;
  CHANNEL_PROFILE_TYPE channelProfile;
  AUDIO_SCENARIO_TYPE audioScenario;
  unsigned int areaCode;
  commons::LogConfig logConfig;
  bool domainLimit;
  bool autoRegisterAgoraExtensions;

  RtcEngineContext()
      : eventHandler(NULL), appId(NULL), context(NULL),
        channelProfile(CHANNEL_PROFILE_LIVE_BROADCASTING),
        audioScenario(AUDIO_SCENARIO_DEFAULT),
        areaCode(AREA_CODE_GLOB),
        logConfig(), domainLimit(false),
        autoRegisterAgoraExtensions(true) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FRtcEngineContext
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	FString appId;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	UIRtcEngineEventHandler* eventHandler;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	int64 context;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	FString license;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	ECHANNEL_PROFILE_TYPE channelProfile = ECHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_LIVE_BROADCASTING;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	EAUDIO_SCENARIO_TYPE audioScenario = EAUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_DEFAULT;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	bool threadPriority_SetValue;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	ETHREAD_PRIORITY_TYPE threadPriority;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	FLogConfig logConfig;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	FENUMWRAP_AREA_CODE areaCode = EENUMCUSTOM_AREA_CODE::AREA_CODE_GLOB;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcEngineContext&quot;)
	bool useExternalEglContext;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class RtcEngineContext {

  appId?: string;

  channelProfile?: ChannelProfileType;

  audioScenario?: AudioScenarioType;

  areaCode?: number;

  logConfig?: LogConfig;

  threadPriority?: ThreadPriorityType;

  useExternalEglContext?: boolean;

  domainLimit?: boolean;

  autoRegisterAgoraExtensions?: boolean;

}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class RtcEngineContext : OptionalJsonParse
    {

        public string appId;
        public UInt64 context;
        public CHANNEL_PROFILE_TYPE channelProfile;
        public AUDIO_SCENARIO_TYPE audioScenario;
        public AREA_CODE areaCode;
        public LogConfig logConfig;
        public bool domainLimit;
        public bool autoRegisterAgoraExtensions;
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class RtcEngineContext {

  appId?: string;

  channelProfile?: ChannelProfileType;

  audioScenario?: AudioScenarioType;

  areaCode?: number;

  logConfig?: LogConfig;

  threadPriority?: ThreadPriorityType;

  useExternalEglContext?: boolean;

  domainLimit?: boolean;

  autoRegisterAgoraExtensions?: boolean;

}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtcEngineContext {
  const RtcEngineContext(
      {this.appId,
      this.channelProfile,
      this.audioScenario,
      this.areaCode,
      this.logConfig,
      this.threadPriority,
      this.domainLimit,
      this.autoRegisterAgoraExtensions});

  @JsonKey(name: 'appId')
  final String? appId;

  @JsonKey(name: 'channelProfile')
  final ChannelProfileType? channelProfile;

  @JsonKey(name: 'audioScenario')
  final AudioScenarioType? audioScenario;

  @JsonKey(name: 'areaCode')
  final int? areaCode;

  @JsonKey(name: 'logConfig')
  final LogConfig? logConfig;

  @JsonKey(name: 'threadPriority')
  final ThreadPriorityType? threadPriority;

  @JsonKey(name: 'domainLimit')
  final bool? domainLimit;

  @JsonKey(name: 'autoRegisterAgoraExtensions')
  final bool? autoRegisterAgoraExtensions;

  factory RtcEngineContext.fromJson(Map&lt;String, dynamic> json) =>
      _$RtcEngineContextFromJson(json);

  Map&lt;String, dynamic> toJson() => _$RtcEngineContextToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry props="cpp unreal bp android unity">
                <pt props="cpp unreal bp unity">eventHandler</pt>
                <pt props="android">mEventHandler</pt>
                <pd id="eventhandler">The event handler for <xref keyref="IRtcEngine"/>. See <xref keyref="IRtcEngineEventHandler"/>.</pd>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp ios mac unity electron rn flutter">appId</pt>
                <pt props="android">mAppId</pt>
                <pd id="appid">The App ID issued by Agora for your project. Only users in apps with the same App ID can join the same channel and communicate with each other. An App ID can only be used to create one <apiname keyref="IRtcEngine"/> instance. To change your App ID, call <xref keyref="release"/> to destroy the current <apiname keyref="IRtcEngine"/> instance, and then create a new one.</pd>
            </plentry>
            <plentry props="android cpp unreal bp unity cs">
                <pt props="cpp unreal bp unity cs">context</pt>
                <pt props="android">mContext</pt>
                <pd id="context">
                    <ul props="cpp unreal bp unity cs">
                    <li>For Windows, it is the window handle of the app. Once set, this parameter enables you to connect or disconnect the video devices while they are powered.</li>
                    <li props="cpp unreal bp unity">For Android, it is the context of Android Activity.</li>
                    </ul>
                    <p props="android">The context of Android Activity.</p>
                </pd>
            </plentry>
            <plentry props="android">
                <pt>mNativeLibPath</pt>
                <pd>
                    <p>Specifies the storage directory for the <codeph>.so</codeph> files. The storage directory must be a valid and private directory of the app, which can be obtained using <codeph>Context.getDir()</codeph>.</p>
                    <ul>
                    <li>If you set this parameter, the SDK automatically loads the <codeph>.so</codeph> files in the directory you specify, so that the app dynamically loads the required <codeph>.so </codeph>files when it runs, thereby reducing the package size.</li>
                    <li>If you do not set this parameter or set it to null, the SDK loads the <codeph>.so </codeph>files from the default app's <codeph>native unreal bpLibraryPath</codeph> when compiling the app, which increases the package size compared to the previous method.</li>
                    </ul>
                    <note type="attention">
                    <ul>
                    <li>This method is applicable when you integrate the SDK manually but not when you integrate the SDK with Maven Central or JitPack.</li>
                    <li>Ensure the specified directory exists; otherwise, the <xref keyref="IRtcEngine"/> initialization fails.</li>
                    </ul></note> </pd>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp ios mac unity cs electron rn flutter">channelProfile</pt>
                <pt props="android">mChannelProfile</pt>
                <pd conkeyref="setChannelProfile/channelprofiletype"/>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp ios mac unity cs electron rn flutter">audioScenario</pt>
                <pt props="android">mAudioScenario</pt>
                <pd conkeyref="setAudioScenario/scenario-ng"/>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp ios mac unity cs electron rn flutter">areaCode</pt>
                <pt props="android">mAreaCode</pt>
                <pd>The region for connection. This is an advanced feature and applies to scenarios that have regional restrictions. For details on supported regions, see <xref keyref="AREA_CODE"/>. The area codes support bitwise operation.</pd>
                <pd>After specifying the region, the app integrated with the Agora SDK connects to the Agora servers within that region.</pd>
            </plentry>
            <plentry>
                <pt props="cpp unreal bp ios mac unity cs electron rn flutter">logConfig</pt>
                <pt props="android">mLogConfig</pt>
                <pd>
                    <p>Sets the log file size. See <xref keyref="LogConfig"/>.</p>
                    <p>By default, the SDK generates five SDK log files and five API call log files with the following rules:</p>
                    <ul conkeyref="setLogFileSize/logprinciple">
                    <li/>
                    </ul> </pd>
            </plentry>
            <plentry props="android">
                <pt>mExtensionList</pt>
                <pd>Extension libraries.</pd>
            </plentry>
            <plentry props="android ios mac">
                <pt props="android">mExtensionObserver</pt>
                <pt props="ios mac">eventDelegate</pt>
                <pd>The <xref keyref="IMediaExtensionObserver"/> instance.</pd>
            </plentry>
            <plentry props="ios mac">
                <pt>mediaFilterExtensions</pt>
                <pd>The <xref keyref="AgoraMediaFilterExtensionDelegate"/> instance.</pd>
            </plentry>
            <plentry>
                <pt props="android">mDomainLimit</pt>
                <pt props="cpp unreal bp ios mac electron unity cs rn flutter">domainLimit</pt>
                <pd>
                    <p>Whether to enable domain name restriction:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Enables the domain name restriction. This value is suitable for scenarios where IoT devices use IoT cards for network access. The SDK will only connect to servers in the domain name or IP whitelist that has been reported to the operator.</li>
                    <li><codeph><ph keyref="false"/></codeph>: (Default) Disables the domain name restriction. This value is suitable for most common scenarios.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
              <pt props="android">mAutoRegisterAgoraExtensions</pt>
              <pt props="cpp unreal bp ios mac electron unity cs rn flutter">autoRegisterAgoraExtensions</pt>
              <pd>
                  <p>Whether to automatically register the Agora extensions when initializing <xref keyref="IRtcEngine"/>:<ul>
                  <li><codeph><ph keyref="true"/></codeph>: (Default) Automatically register the Agora extensions when initializing <apiname keyref="IRtcEngine"/>.</li>
                  <li><codeph><ph keyref="false"/></codeph>: Do not register the Agora extensions when initializing <apiname keyref="IRtcEngine"/>. You need to call <xref keyref="enableExtension"/> to register the Agora extensions.</li>
                  </ul></p>
              </pd>
          </plentry>
            </parml> </section>
            <section props="android" id="sub-method">
              <title>Method</title>
              <parml>
                <plentry>
                  <pt>addExtension</pt>
                  <pd>Adds the extension. See <xref keyref="addExtension"/>.</pd>
                </plentry>
              </parml>
            </section>
    </refbody>
</reference>
