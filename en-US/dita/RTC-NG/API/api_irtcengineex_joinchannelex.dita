<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengineex_joinchannelex">
    <title><ph keyref="joinChannelEx"/></title>
    <shortdesc id="short"><ph id="shortdesc">Joins a channel.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="joinChannelEx"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int joinChannelEx(String token, RtcConnection connection,
      ChannelMediaOptions options, IRtcEngineEventHandler eventHandler);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract joinChannelEx(token: string, connection: RtcConnection, options: ChannelMediaOptions, eventHandler: IRtcEngineEventHandler): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)joinChannelExByToken:(NSString* _Nullable)token
                 connection:(AgoraRtcConnection * _Nonnull)connection
                   delegate:(id&lt;AgoraRtcEngineDelegate&gt; _Nullable)delegate
               mediaOptions:(AgoraRtcChannelMediaOptions* _Nonnull)mediaOptions
                joinSuccess:(void(^ _Nullable)(NSString* _Nonnull channel, NSUInteger uid, NSInteger elapsed))joinSuccessBlock;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int joinChannelEx(const char* token, const RtcConnection&amp; connection,
                              const ChannelMediaOptions&amp; options,
                              IRtcEngineEventHandler* eventHandler) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int JoinChannelEx(const FString&amp; token, const FRtcConnection&amp; connection, const FChannelMediaOptions&amp; options);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract joinChannelEx(
    token: string,
    connection: RtcConnection,
    options: ChannelMediaOptions
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int JoinChannelEx(string token, RtcConnection connection, ChannelMediaOptions options);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract joinChannelEx(
    token: string,
    connection: RtcConnection,
    options: ChannelMediaOptions
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; joinChannelEx(
    {required String token,
    required RtcConnection connection,
    required ChannelMediaOptions options});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p>You can call this method multiple times to join more than one channel. If you want to join the same channel from different devices, ensure that the user IDs are different for all devices.</p>
        </section>
            <section id="scenario" deliveryTarget="details">
                <title>Applicable scenarios</title>
                <p>This method can be called in scenarios involving multiple channels.</p>
            </section>
            <section id="timing" deliveryTarget="details">
                <title>Call timing</title>
                <p>Call this method after <xref keyref="initialize"/>.</p>
                <p>In a multi-camera capture scenario, you need to call the <xref keyref="startPreview2"/> method after calling this method to set the <parmname>sourceType</parmname> to <apiname keyref="VIDEO_SOURCE_CAMERA_SECONDARY"/>, to ensure that the second camera captures normally.</p>
            </section>
            <section id="restriction" deliveryTarget="details">
                <title>Restrictions</title>
                <p>If you are already in a channel, you cannot rejoin the channel with the same user ID.</p>
                <p>Before joining a channel, ensure that the App ID you use to generate a token is the same as that you pass in the <xref keyref="initialize" /> method; otherwise, you may fail to join the channel with the token.</p>
            </section>
            <section id="related" deliveryTarget="details">
                <title>Related callbacks</title>
                <p>A successful call of this method triggers the following callbacks:<ul>
                    <li>The local client: The <xref keyref="onJoinChannelSuccess" /> and <xref keyref="onConnectionStateChanged" /> callbacks.</li>
                    <li>The remote client: The <xref keyref="onUserJoined" /> callback, if a user joining the channel in the COMMUNICATION profile, or a host joining a channel in the LIVE_BROADCASTING profile.</li>
                    </ul></p>
                    <p>When the connection between the local client and Agora's server is interrupted due to poor network conditions, the SDK tries reconnecting to the server. When the local client successfully rejoins the channel, the SDK triggers the <xref keyref="onRejoinChannelSuccess" /> callback on the local client.</p>
            </section>
            <section id="parameters" deliveryTarget="details">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="joinChannel2/token">
                <pt/>
                <pd/>
            </plentry>
            <plentry id="connection">
                <pt>connection</pt>
                <pd>The connection information. See <xref keyref="RtcConnection"/>.</pd>
            </plentry>
            <plentry conkeyref="joinChannel2/options">
                <pt/>
                <pd/>
            </plentry>
            <plentry id="event" props="native unreal bp">
                <pt props="android cpp unreal bp">eventHandler</pt>
                <pt props="ios mac">delegate</pt>
                <pd>The callback class of <xref keyref="IRtcEngineEx"/>. See <xref keyref="IRtcEngineEventHandler"/>. You can get the callback events of multiple channels through the <parmname props="android cpp unreal bp">eventHandler</parmname><parmname props="ios mac">delegate</parmname> object passed in this parameter.</pd>
            </plentry>
            <plentry props="ios mac" conkeyref="joinChannel2/joinsuccessblock">
                <pt/>
                <pd/>
            </plentry>
            </parml> </section>
        <section id="return_values" conkeyref="joinChannel2/return_values"/>
    </refbody>
</reference>
