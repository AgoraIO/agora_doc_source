<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_stopscreencapture">
    <title><ph keyref="stopScreenCapture" /></title>
    <shortdesc id="short"><ph id="shortdesc">Stops screen capture.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="stopScreenCapture" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int stopScreenCapture();</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)stopScreenCapture NS_SWIFT_NAME(stopScreenCapture());
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">#if defined(_WIN32) || defined(__APPLE__) || defined(__ANDROID__)
  virtual int stopScreenCapture() = 0;
#endif</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int StopScreenCapture();</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract stopScreenCapture(): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StopScreenCapture();</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract stopScreenCapture(): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; stopScreenCapture();</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
        </section>
        <section id="scenario" deliveryTarget="details">
            <title>Applicable scenarios</title>
            <p props="cpp unreal bp electron unity flutter">如果你调用了 <xref keyref="startScreenCapture"/>、<xref keyref="startScreenCaptureByWindowId"/> 或 <xref keyref="startScreenCaptureByDisplayId"/> 开启屏幕采集，则停止屏幕采集时需要调用该方法。</p>
            <p props="android ios rn">如果你调用了 <xref keyref="startScreenCapture"/> 开启屏幕采集，则停止屏幕采集时需要调用该方法。</p>
            <p props="mac cs">如果你调用了 <xref keyref="startScreenCaptureByWindowId"/> 或 <xref keyref="startScreenCaptureByDisplayId"/> 开启屏幕采集，则停止屏幕采集时需要调用该方法。</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>Call timing</title>
            <p>You can call this method either before or after joining a channel.</p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>Restrictions</title>
            <p>None.</p>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
