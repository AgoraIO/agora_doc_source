<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_audiorecordingconfiguration">
    <title><ph keyref="AudioRecordingConfiguration" /></title>
    <shortdesc id="short"><ph id="shortdesc">Recording configuration.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class AudioRecordingConfiguration {
  public String filePath;
  public int sampleRate;
  public boolean codec;
  public int fileRecordOption;
  public int quality;
  int recordingChannel;

  public AudioRecordingConfiguration() {
    sampleRate = 32000;
    codec = true;
    fileRecordOption = Constants.AUDIO_FILE_RECORDING_MIXED;
    quality = Constants.AUDIO_RECORDING_QUALITY_MEDIUM;
    recordingChannel = 1;
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraAudioRecordingConfiguration: NSObject
@property (copy, nonatomic) NSString * _Nullable filePath;
@property (assign, nonatomic) BOOL codec;
@property (assign, nonatomic) NSUInteger sampleRate;
@property (assign, nonatomic) AgoraAudioFileRecordingType fileRecordOption;
@property (assign, nonatomic) AgoraAudioRecordingQuality quality;
@property (assign, nonatomic) NSInteger recordingChannel;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct AudioRecordingConfiguration {
  const char* filePath;
  bool encode;
  int sampleRate;
  AUDIO_FILE_RECORDING_TYPE fileRecordingType;
  AUDIO_RECORDING_QUALITY_TYPE quality;
  int recordingChannel;

  AudioRecordingConfiguration()
    : filePath(NULL),
      encode(false),
      sampleRate(32000),
      fileRecordingType(AUDIO_FILE_RECORDING_MIXED),
      quality(AUDIO_RECORDING_QUALITY_LOW),
      recordingChannel(1) {}

  AudioRecordingConfiguration(const char* file_path, int sample_rate, AUDIO_RECORDING_QUALITY_TYPE quality_type)
    : filePath(file_path),
      encode(false),
      sampleRate(sample_rate),
      fileRecordingType(AUDIO_FILE_RECORDING_MIXED),
      quality(quality_type),
      recordingChannel(channel) {}

  AudioRecordingConfiguration(const char* file_path, bool enc, int sample_rate, AUDIO_FILE_RECORDING_TYPE type, AUDIO_RECORDING_QUALITY_TYPE quality_type)
    : filePath(file_path),
      encode(enc),
      sampleRate(sample_rate),
      fileRecordingType(type),
      quality(quality_type),
      recordingChannel(channel) {}

  AudioRecordingConfiguration(const AudioRecordingConfiguration &amp;rhs)
    : filePath(rhs.filePath),
      encode(rhs.encode),
      sampleRate(rhs.sampleRate),
      fileRecordingType(rhs.fileRecordingType),
      quality(rhs.quality),
      recordingChannel(rhs.recordingChannel) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class AudioRecordingConfiguration {
  
  filePath?: string;
  
  encode?: boolean;
  
  sampleRate?: number;
  
  fileRecordingType?: AudioFileRecordingType;
  
  quality?: AudioRecordingQualityType;
  
  recordingChannel?: number;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class AudioRecordingConfiguration
    {
        public AudioRecordingConfiguration()
        {
            filePath = "";
            encode = false;
            sampleRate = 32000;
            fileRecordingType = AUDIO_FILE_RECORDING_TYPE.AUDIO_FILE_RECORDING_MIXED;
            quality = AUDIO_RECORDING_QUALITY_TYPE.AUDIO_RECORDING_QUALITY_LOW;
            recordingChannel = 1;
        }

        public AudioRecordingConfiguration(string file_path, int sample_rate, AUDIO_RECORDING_QUALITY_TYPE quality_type, int channel)
        {
            this.filePath = file_path;
            this.encode = false;
            this.sampleRate = sample_rate;
            this.fileRecordingType = AUDIO_FILE_RECORDING_TYPE.AUDIO_FILE_RECORDING_MIXED;
            this.quality = quality_type;
            recordingChannel = channel;
        }

        public AudioRecordingConfiguration(string file_path, bool enc, int sample_rate,
                                        AUDIO_FILE_RECORDING_TYPE type, AUDIO_RECORDING_QUALITY_TYPE quality_type, int channel)
        {
            this.filePath = file_path;
            this.encode = enc;
            this.sampleRate = sample_rate;
            this.fileRecordingType = type;
            this.quality = quality_type;
            this.recordingChannel = channel;
        }

        public string filePath { set; get; }
        public bool encode { set; get; }
        public int sampleRate { set; get; }
        public AUDIO_FILE_RECORDING_TYPE fileRecordingType { set; get; }
        public AUDIO_RECORDING_QUALITY_TYPE quality { set; get; }
        public int recordingChannel { set; get; }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class AudioRecordingConfiguration {
  
  filePath?: string;
  
  encode?: boolean;
  
  sampleRate?: number;
  
  fileRecordingType?: AudioFileRecordingType;
  
  quality?: AudioRecordingQualityType;
  
  recordingChannel?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class AudioRecordingConfiguration {
  const AudioRecordingConfiguration(
      {this.filePath,
      this.encode,
      this.sampleRate,
      this.fileRecordingType,
      this.quality});

  @JsonKey(name: 'filePath')
  final String? filePath;
  @JsonKey(name: 'encode')
  final bool? encode;
  @JsonKey(name: 'sampleRate')
  final int? sampleRate;
  @JsonKey(name: 'fileRecordingType')
  final AudioFileRecordingType? fileRecordingType;
  @JsonKey(name: 'quality')
  final AudioRecordingQualityType? quality;
  factory AudioRecordingConfiguration.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$AudioRecordingConfigurationFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$AudioRecordingConfigurationToJson(this);
}</codeblock> </p>
        </section>
        <section id="parameters">
            <title> <text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /> </title>
            <parml>
            <plentry id="filepath">
                <pt>filePath</pt>
                <pd>The absolute path (including the filename extensions) of the recording file. For example: <codeph><ph keyref="filePath-example" /></codeph>.
                    <note id="note_scm_klz_mqb" type="attention">
                    <p>Ensure that the path for the recording file exists and is writable.</p>
                    </note> </pd>
            </plentry>
            <plentry>
                <pt props="cpp unity electron rn flutter">encode</pt>
                <pt props="android ios mac">codec</pt>
                <pd>Whether to encode the audio data:
                    <ul id="ul_bnv_mlz_mqb">
                    <li><codeph><ph keyref="true" />
                        </codeph>: Encode audio data in AAC.</li>
                    <li><codeph><ph keyref="false" />
                        </codeph>: (Default) Do not encode audio data, but save the recorded audio data directly.</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>sampleRate</pt>
                <pd>Recording sample rate (Hz).
                    <ul id="ul_pqs_slz_mqb">
                    <li>16000</li>
                    <li>(Default) 32000</li>
                    <li>44100</li>
                    <li>48000</li>
                    </ul>
                    <note type="attention" id="note_gdq_zlz_mqb">
                    <p>If you set this parameter to 44100 or 48000, Agora recommends recording WAV files, or AAC files with <parmname>quality</parmname> to be AgoraAudioRecordingQualityMedium or AgoraAudioRecordingQualityHigh for better recording quality.
                    </p>
                    </note> </pd>
            </plentry>
            <plentry>
                <pt props="cpp unity electron rn flutter">fileRecordingType</pt>
                <pt props="android ios mac">fileRecordOption</pt>
                <pd>
                    <p props="ios mac cpp unity flutter">Recording content. See <xref keyref="AUDIO_FILE_RECORDING_TYPE" />.</p>
                    <p props="android">Recording content:<ul>
                    <li><ph keyref="AUDIO_FILE_RECORDING_MIC" /> (1): Only records the audio of the local user.</li>
                    <li><ph keyref="AUDIO_FILE_RECORDING_PLAYBACK" /> (2): Only records the audio of all remote users.</li>
                    <li><ph keyref="AUDIO_FILE_RECORDING_MIXED" /> (3): (Default) Records the mixed audio of the local and all remote users.</li>
                    </ul> </p>
                </pd>
            </plentry>
            <plentry>
                <pt>quality</pt>
                <pd>
                    <p props="ios mac cpp unity electron rn flutter">Recording quality. See <xref keyref="AUDIO_RECORDING_QUALITY_TYPE" />.</p>
                    <p props="android">Recording quality:<ul>
                    <li><ph keyref="AUDIO_RECORDING_QUALITY_LOW" />(0): Low quality. For example, the size of an AAC file with a sample rate of 32,000 Hz and a recording duration of 10 minutes is around 1.2 MB.</li>
                    <li><ph keyref="AUDIO_RECORDING_QUALITY_MEDIUM" />(1): (Default) Medium quality. For example, the size of an AAC file with a sample rate of 32,000 Hz and a recording duration of 10 minutes is around 2 MB.</li>
                    <li><ph keyref="AUDIO_RECORDING_QUALITY_HIGH" />(2): High quality. For example, the size of an AAC file with a sample rate of 32,000 Hz and a recording duration of 10 minutes is around 3.5 MB.</li>
                        <li><ph keyref="AUDIO_RECORDING_QUALITY_ULTRA_HIGH" />(3): Ultra high quality. The sample rate is 32 kHz, and the file size is around 7.5 MB after 10 minutes of recording.</li>
                    </ul> </p>
                    <note id="note_hrx_mmz_mqb" type="attention">
                    <p>Note: This parameter applies to AAC files only.</p>
                    </note></pd>
            </plentry>
                <plentry props="native">
                    <pt>recordingChannel</pt>
                    <pd>The audio channel of recording: The parameter supports the following values:<ul><li>1: (Default) Mono.</li>
                        <li>2: Stereo.</li></ul>
                        <note type="note"><p>The actual recorded audio channel is related to the audio channel that you capture.<ul>
                                <li>If the captured audio is mono and <parmname>recordingChannel</parmname> is <codeph>2</codeph>, the recorded audio is the dual-channel data that is copied from mono data, not stereo.</li>
                                <li>If the captured audio is dual channel and <parmname>recordingChannel</parmname> is <codeph>1</codeph>, the recorded audio is the mono data that is mixed by dual-channel data.</li></ul><ph>The integration scheme also affects the final recorded audio channel. Therefore, to record in stereo, contact <xref keyref="ticket-link" />technical support for assistance.</ph></p></note>
</pd>
                </plentry>
            </parml> </section>
    </refbody>
</reference>