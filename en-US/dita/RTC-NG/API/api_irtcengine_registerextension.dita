<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_registerextension">
    <title><ph keyref="registerExtension"/></title>
    <shortdesc id="short"><ph id="shortdesc">Registers an extension.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="registerExtension"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int registerExtension(
      String provider, String extension, Constants.MediaSourceType sourceType);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)registerExtensionWithVendor:(NSString * __nonnull)provider
                         extension:(NSString * __nonnull)extension
                        sourceType:(AgoraMediaSourceType)sourceType NS_SWIFT_NAME(registerExtension(withVendor:extension:sourceType:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int registerExtension(const char* provider, const char* extension,
                        agora::media::MEDIA_SOURCE_TYPE type = agora::media::UNKNOWN_MEDIA_SOURCE) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int RegisterExtension(FString provider, FString extension, EMEDIA_SOURCE_TYPE type);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract registerExtension(
    provider: string,
    extension: string,
    type?: MediaSourceType
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int RegisterExtension(string provider, string extension, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract registerExtension(
    provider: string,
    extension: string,
    type?: MediaSourceType
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> registerExtension(
      {required String provider,
      required String extension,
      MediaSourceType type = MediaSourceType.unknownMediaSource});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.1.0</dd>
            </dlentry>
            </dl>
            <p>For extensions external to the SDK (such as those from Extensions Marketplace and SDK Extensions), you need to  load them before calling this method. Extensions internal to the SDK (those included in the full SDK package) are automatically loaded and registered after the initialization of <xref keyref="IRtcEngine" />.</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>Call timing</title>
                <ul>
                <li>Agora recommends you call this method after the initialization of <xref keyref="IRtcEngine" /> and before joining a channel.</li>
                <li>For video extensions (such as the image enhancement extension), you need to call this method after enabling the video module (<xref keyref="enableVideo" />/<xref keyref="enableLocalVideo" />).</li>
                <li props="android">Before calling this method, you need to call <xref keyref="addExtension"/> to load the extension first.</li>
                <li props="apple">Before calling this method, you need to link the extension dynamic library (.xcframework) to your project in Xcode to load the extension.</li>
                <li props="cpp framework">Before calling this method, you need to call <xref keyref="loadExtensionProvider"/> to load the extension first.</li>
                </ul>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>Restrictions</title>
            <ul>
            <li>If you want to register multiple extensions, you need to call this method multiple times.</li>
            <li>The data processing order of different extensions in the SDK is determined by the order in which the extensions are registered. That is, the extension that is registered first will process the data first.</li>
            </ul>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="setExtensionProperty/vendor">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="setExtensionProperty/extension">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="enableExtension/source">
                <pt/>
                <pd/>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp unity electron cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph><ul>
                <li>-3: The extension library is not loaded. Agora recommends that you check the storage location or the name of the dynamic library.</li>
                </ul>
            </li>
            </ul> </section>
    </refbody>
</reference>
