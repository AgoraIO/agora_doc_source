<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_segmentationproperty">
    <title><ph keyref="SegmentationProperty" /></title>
    <shortdesc id="short"><ph id="shortdesc">Processing properties for background images.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class SegmentationProperty {
  public static final int SEG_MODEL_AI = 1;
  public static final int SEG_MODEL_GREEN = 2;
  public static final int SCREEN_COLOR_AUTO = 0;
  public static final int SCREEN_COLOR_GREEN = 1;
  public static final int SCREEN_COLOR_BLUE = 2;
  public int modelType;
  public float greenCapacity;
  public int screenColorType;
  public SegmentationProperty(int modelType, float greenCapacity) {
    this.modelType = modelType;
    this.greenCapacity = greenCapacity;
    this.screenColorType = SCREEN_COLOR_AUTO;
  }

  public SegmentationProperty() {
    this.modelType = SEG_MODEL_AI;
    this.greenCapacity = 0.5f;
    this.screenColorType = SCREEN_COLOR_AUTO;
  }
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">export class SegmentationProperty {
  public static readonly SEG_MODEL_AI:number = 1;
  public static readonly SEG_MODEL_GREEN:number = 2;

  public modelType:number = SegmentationProperty.SEG_MODEL_AI;

  public greenCapacity:number = 0.5;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraSegmentationProperty: NSObject
@property(nonatomic, assign) SegModelType modelType;
@property(nonatomic, assign) float greenCapacity;
@property(nonatomic, assign) ScreenColorType screenColorType;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct SegmentationProperty {
   SEG_MODEL_TYPE modelType;
   float greenCapacity;
   SCREEN_COLOR_TYPE screenColorType;
   SegmentationProperty() : modelType(SEG_MODEL_AI), greenCapacity(0.5), screenColorType(SCREEN_COLOR_AUTO) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FSegmentationProperty
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|SegmentationProperty")
	ESEG_MODEL_TYPE modelType = ESEG_MODEL_TYPE::SEG_MODEL_AI;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|SegmentationProperty")
	float greenCapacity = 0.5;
	FSegmentationProperty(){}
	FSegmentationProperty(const agora::rtc::SegmentationProperty &amp;amp; AgoraData){
		modelType = static_cast&amp;lt;ESEG_MODEL_TYPE&amp;gt;(AgoraData.modelType);
		greenCapacity = AgoraData.greenCapacity;
	}
	agora::rtc::SegmentationProperty CreateAgoraData() const {
		agora::rtc::SegmentationProperty AgoraData;
		AgoraData.modelType = static_cast&amp;lt;agora::rtc::SegmentationProperty::SEG_MODEL_TYPE&amp;gt;(modelType);
		AgoraData.greenCapacity = greenCapacity;
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::SegmentationProperty&amp;amp; AgoraData) const {
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class SegmentationProperty {

  modelType?: SegModelType;

  greenCapacity?: number;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class SegmentationProperty
    {
        public SEG_MODEL_TYPE modelType { set; get; }
        public float greenCapacity { set; get; }

        public SegmentationProperty()
        {
            modelType = SEG_MODEL_TYPE.SEG_MODEL_AI;
            greenCapacity = 0.5f;
        }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class SegmentationProperty {

  modelType?: SegModelType;

  greenCapacity?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class SegmentationProperty {

  const SegmentationProperty({this.modelType, this.greenCapacity});

  @JsonKey(name: 'modelType')
  final SegModelType? modelType;

  @JsonKey(name: 'greenCapacity')
  final double? greenCapacity;

  factory SegmentationProperty.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;
      _$SegmentationPropertyFromJson(json);

  Map&amp;lt;String, dynamic&amp;gt; toJson() =&amp;gt; _$SegmentationPropertyToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <p></p>
            </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>modelType</pt>
                <pd><ph>The type of algorithms to user for background processing. </ph><ph props="apple bp cpp cs electron flutter rn unity unreal">See <xref keyref="SEG_MODEL_TYPE"/>.</ph><ul props="android hmos">
                    <li><ph keyref="SEG_MODEL_AI"/>(1): (Default) Use the algorithm suitable for all scenarios.</li>
                    <li><ph keyref="SEG_MODEL_GREEN"/>(2): Use the algorithm designed specifically for scenarios with a green screen background.</li>
                    </ul></pd>
            </plentry>
            <plentry props="hide">
                <pt>preferVelocity</pt>
                <pd>Whether to enable bilateral filtering:<ul>
                    <li>0: Disable bilateral filtering.</li>
                    <li>1: (Default) Enable bilateral filtering. This improves the virtual background effect in green screen background scenarios.</li>
                    </ul>
                    <note type="note">This parameter only takes effect when <parmname>modelType</parmname> is set to <apiname keyref="SEG_MODEL_GREEN"/>.</note></pd>
            </plentry>
            <plentry>
                <pt>greenCapacity</pt>
                <pd>
                    <p>The accuracy range for recognizing background colors in the image. The value range is [0,1], and the default value is 0.5. The larger the value, the wider the range of identifiable shades of pure color. When the value of this parameter is too large, the edge of the portrait and the pure color in the portrait range are also detected. Agora recommends that you dynamically adjust the value of this parameter according to the actual effect.</p>
                    <note type="note">This parameter only takes effect when <parmname>modelType</parmname> is set to <apiname keyref="SEG_MODEL_GREEN"/>.</note> </pd>
            </plentry>
            <plentry props="native">
                <pt props="native">screenColorType</pt>
                <pd props="cpp">屏幕颜色类型。 See <xref keyref="SCREEN_COLOR_TYPE"/>.</pd>
                <pd props="apple">屏幕颜色类型，详见 <xref keyref="SCREEN_COLOR_TYPE"/>。</pd>
                <pd props="android">屏幕颜色类型：<ul>
                    <li><ph keyref="SCREEN_COLOR_AUTO"/>(0): 自动选择屏幕颜色。</li>
                    <li><ph keyref="SCREEN_COLOR_GREEN"/>(1): 绿色。</li>
                    <li><ph keyref="SCREEN_COLOR_BLUE"/>(2): 蓝色。</li>
                    </ul>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
