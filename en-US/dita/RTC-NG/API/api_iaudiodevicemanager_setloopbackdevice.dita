<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_iaudiodevicemanager_setloopbackdevice">
    <title><ph keyref="setLoopbackDevice"/></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the loopback device.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setLoopbackDevice"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="ios mac" outputclass="language-objectivec"/>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setLoopbackDevice(const char deviceId[MAX_DEVICE_ID_LENGTH]) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setLoopbackDevice(deviceId: string): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetLoopbackDevice(string deviceId);</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> setLoopbackDevice(String deviceId);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.0.1</dd>
            </dlentry>
            </dl>
            <p>The SDK uses the current playback device as the loopback device by default. If you want to specify another audio device as the loopback device, call this method, and set <parmname>deviceId</parmname> to the loopback device you want to specify.</p>
            <p>You can call this method to change the audio route currently being used, but this does not change the default audio route. For example, if the default audio route is microphone, you call this method to set the audio route as a sound card before joinging a channel and then start a device test, the SDK conducts device test on the sound card. After the device test is completed and you join a channel, the SDK still uses the microphone for audio capturing.</p>
            <note type="note">
            <p props="cpp unreal bp electron unity flutter">This method is for Windows and macOS only.</p>
            <p>The scenarios where this method is applicable are as follows:</p>
            <p>Use app A to play music through a Bluetooth headset; when using app B for a video conference, play through the speakers.<ul>
            <li>If the loopback device is set as the Bluetooth headset, the SDK publishes the music in app A to the remote end.</li>
            <li>If the loopback device is set as the speaker, the SDK does not publish the music in app A to the remote end.</li>
            <li>If you set the loopback device as the Bluetooth headset, and then use a wired headset to play the music in app A, you need to call this method again, set the loopback device as the wired headset, and the SDK continues to publish the music in app A to remote end.</li>
            </ul></p>
            </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>deviceId</pt>
                <pd>
                    <p>Specifies the loopback device of the SDK. You can get the device ID by calling <xref keyref="enumeratePlaybackDevices"/>. Connecting or disconnecting the audio device does not change the value of <parmname>deviceId</parmname>.</p>
                    <p props="cpp unreal bp electron flutter">The maximum length is <xref keyref="MAX_DEVICE_ID_LENGTH_TYPE"/>.</p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown; and you need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="cpp unreal bp electron unity cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
