<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setaudioprofile">
    <title><ph keyref="setAudioProfile" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the audio profile and audio scenario.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setAudioProfile" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setAudioProfile(int profile, int scenario);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioProfile:(AgoraAudioProfile)profile scenario:(AgoraAudioScenario)scenario;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetAudioProfile(EAUDIO_PROFILE_TYPE profile = EAUDIO_PROFILE_TYPE::AUDIO_PROFILE_DEFAULT, EAUDIO_SCENARIO_TYPE scenario = EAUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_DEFAULT);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setAudioProfile(
    profile: AudioProfileType,
    scenario?: AudioScenarioType
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setAudioProfile(
    profile: AudioProfileType,
    scenario?: AudioScenarioType
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setAudioProfile(
    {required AudioProfileType profile,
    AudioScenarioType scenario = AudioScenarioType.audioScenarioDefault});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="deprecated">
            <dlentry props="native unreal unity cs">
                <dt>Deprecated:</dt>
                <dd>This method is deprecated. If you need to set the audio profile, use <xref keyref="setAudioProfile2" />; if you need to set the audio scenario, use <xref keyref="setAudioScenario" />.</dd>
            </dlentry>
            </dl>
        </section>
        <section id="scenario" deliveryTarget="details">
            <title>Applicable scenarios</title>
            <p>This method is suitable for various audio scenarios. You can choose as needed. For example, in scenarios with high audio quality requirements such as music teaching, it is recommended to set <parmname>profile</parmname> to <codeph><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY" /></codeph>(4) and <parmname>scenario</parmname> to <codeph><ph keyref="AUDIO_SCENARIO_GAME_STREAMING" /></codeph>(3).</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>Call timing</title>
            <p>You can call this method either before or after joining a channel.</p>
        </section>        
        <section id="restriction" deliveryTarget="details">
            <title>Restrictions</title>
            <p props="ios cpp unreal bp flutter unity rn">Due to iOS system restrictions, some audio routes cannot be recognized in call volume mode. Therefore, if you need to use an external sound card, it is recommended to set the audio scenario to <codeph><ph keyref="AUDIO_SCENARIO_GAME_STREAMING" /></codeph>(3). In this scenario, the SDK will switch to media volume to avoid this issue.</p>
            <p props="android mac electron cs">None.</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>profile</pt>
                <pd>
                    <p id="profile"><ph>The audio profile, including the sampling rate, bitrate, encoding mode, and the number of channels. </ph><ph props="apple cpp framework">See <xref keyref="AUDIO_PROFILE_TYPE" />. </ph><ul props="android hmos">
                    <li><codeph><ph keyref="AUDIO_PROFILE_DEFAULT" /></codeph>(0): The default value.<ul conkeyref="AUDIO_PROFILE_TYPE/default-profile">
                        <li />
                        </ul></li>
                    <li><codeph><ph keyref="AUDIO_PROFILE_SPEECH_STANDARD" /></codeph>(1): A sampling rate of 32 kHz, audio encoding, mono, and a bitrate of up to 18 Kbps.</li>
                    <li><codeph><ph keyref="AUDIO_PROFILE_MUSIC_STANDARD" /></codeph>(2): A sampling rate of 48 kHz, music encoding, mono, and a bitrate of up to 64 Kbps.</li>
                    <li><codeph><ph keyref="AUDIO_PROFILE_MUSIC_STANDARD_STEREO" /></codeph>(3): A sampling rate of 48 kHz, music encoding, stereo, and a bitrate of up to 80 Kbps.</li>
                    <li><codeph><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY" /></codeph>(4): A sampling rate of 48 kHz, music encoding, mono, and a bitrate of up to 96 Kbps.</li>
                    <li><codeph><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO" /></codeph>(5): A sampling rate of 48 kHz, music encoding, stereo, and a bitrate of up to 128 Kbps.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>scenario</pt>
                <pd conkeyref="setAudioScenario/scenario-ng"/>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: Success.</li>
            <li> &lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
        </refbody>
</reference>