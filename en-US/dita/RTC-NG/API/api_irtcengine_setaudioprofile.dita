<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setaudioprofile">
    <title><ph keyref="setAudioProfile" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the audio profile and audio scenario.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setAudioProfile" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setAudioProfile(int profile, int scenario);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioProfile:(AgoraAudioProfile)profile scenario:(AgoraAudioScenario)scenario;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetAudioProfile(EAUDIO_PROFILE_TYPE profile = EAUDIO_PROFILE_TYPE::AUDIO_PROFILE_DEFAULT, EAUDIO_SCENARIO_TYPE scenario = EAUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_DEFAULT);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setAudioProfile(
    profile: AudioProfileType,
    scenario?: AudioScenarioType
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setAudioProfile(
    profile: AudioProfileType,
    scenario?: AudioScenarioType
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setAudioProfile(
    {required AudioProfileType profile,
    AudioScenarioType scenario = AudioScenarioType.audioScenarioDefault});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="deprecated">
            <dlentry props="native unity">
                <dt>Deprecated:</dt>
                <dd>This method is deprecated. If you need to set the audio profile, use <xref keyref="setAudioProfile2" />; if you need to set the audio scenario, use <xref keyref="setAudioScenario" />.</dd>
            </dlentry>
            </dl>
            <note type="attention">
            <ul>
            <li>You can call this method either before or after joining a channel.</li>
            <li>In scenarios requiring high-quality audio, such as online music tutoring, Agora recommends you set <parmname>profile</parmname> as <codeph><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY" />(4)</codeph>and <parmname>scenario</parmname> as <codeph><ph keyref="AUDIO_SCENARIO_GAME_STREAMING" />(3)</codeph>.</li>
            </ul> </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>profile</pt>
                <pd>
                    <p id="profile"><ph>The audio profile, including the sampling rate, bitrate, encoding mode, and the number of channels. </ph><ph props="ios mac cpp unreal bp electron unity flutter rn cs">See <xref keyref="AUDIO_PROFILE_TYPE" />.</ph><ul props="android">
                    <li><ph keyref="AUDIO_PROFILE_DEFAULT" />(0): The default value.<ul conkeyref="AUDIO_PROFILE_TYPE/default-profile">
                        <li />
                        </ul></li>
                    <li><ph keyref="AUDIO_PROFILE_SPEECH_STANDARD" />(1): A sampling rate of 32 kHz, audio encoding, mono, and a bitrate of up to 18 Kbps.</li>
                    <li><ph keyref="AUDIO_PROFILE_MUSIC_STANDARD" />(2): A sampling rate of 48 kHz, music encoding, mono, and a bitrate of up to 64 Kbps.</li>
                    <li><ph keyref="AUDIO_PROFILE_MUSIC_STANDARD_STEREO" />(3): A sampling rate of 48 kHz, music encoding, stereo, and a bitrate of up to 80 Kbps.</li>
                    <li><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY" />(4): A sampling rate of 48 kHz, music encoding, mono, and a bitrate of up to 96 Kbps.</li>
                    <li><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO" />(5): A sampling rate of 48 kHz, music encoding, stereo, and a bitrate of up to 128 Kbps.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>scenario</pt>
                <pd id="scenario-ng"><ph>The audio scenarios. </ph><ph props="ios mac cpp unreal bp electron unity flutter rn cs">See <xref keyref="AUDIO_SCENARIO_TYPE" />. </ph><ph>Under different audio scenarios, the device uses different volume types.</ph><ul props="android" id="scenario">
                    <li><ph keyref="AUDIO_SCENARIO_DEFAULT" />(0): Automatic scenario match, where the SDK chooses the appropriate audio quality according to the user role and audio route.</li>
                    <li><ph keyref="AUDIO_SCENARIO_GAME_STREAMING" />(3): High-quality audio scenario, where users mainly play music.</li>
                    <li><ph keyref="AUDIO_SCENARIO_CHATROOM" />(5): Chatroom scenario, where users need to frequently switch the user role or mute and unmute the microphone. In this scenario, audience members receive a pop-up window to request permission of using microphones.</li>
                    <li><ph keyref="AUDIO_SCENARIO_CHORUS" />(7): Real-time chorus scenario, where users have good network conditions and require ultra-low latency.<note conkeyref="AUDIO_SCENARIO_TYPE/chorus" /></li>
                        <li><ph keyref="AUDIO_SCENARIO_MEETING" />(8): Meeting scenario that mainly involves the human voice.</li>
                    </ul></pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown; and you need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul>
            <li props="native unreal bp electron unity rn cs">0: Success.</li>
            <li> &lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
