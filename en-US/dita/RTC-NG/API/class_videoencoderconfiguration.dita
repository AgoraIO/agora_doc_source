<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videoencoderconfiguration">
    <title><ph keyref="VideoEncoderConfiguration" /></title>
    <shortdesc id="short"><ph id="shortdesc">Video encoder configurations.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class VideoEncoderConfiguration {
  static public class VideoDimensions {
    public int width;
    public int height;
    public VideoDimensions(int width, int height) {
      this.width = width;
      this.height = height;
    }
    public VideoDimensions() {
      this.width = 0;
      this.height = 0;
    }
  }
  public final static VideoDimensions VD_120x120 = new VideoDimensions(120, 120);
  public final static VideoDimensions VD_160x120 = new VideoDimensions(160, 120);
  public final static VideoDimensions VD_180x180 = new VideoDimensions(180, 180);
  public final static VideoDimensions VD_240x180 = new VideoDimensions(240, 180);
  public final static VideoDimensions VD_320x180 = new VideoDimensions(320, 180);
  public final static VideoDimensions VD_240x240 = new VideoDimensions(240, 240);
  public final static VideoDimensions VD_320x240 = new VideoDimensions(320, 240);
  public final static VideoDimensions VD_424x240 = new VideoDimensions(424, 240);
  public final static VideoDimensions VD_360x360 = new VideoDimensions(360, 360);
  public final static VideoDimensions VD_480x360 = new VideoDimensions(480, 360);
  public final static VideoDimensions VD_640x360 = new VideoDimensions(640, 360);
  public final static VideoDimensions VD_480x480 = new VideoDimensions(480, 480);
  public final static VideoDimensions VD_640x480 = new VideoDimensions(640, 480);
  public final static VideoDimensions VD_840x480 = new VideoDimensions(840, 480);
  public final static VideoDimensions VD_960x540 = new VideoDimensions(960, 540);
  public final static VideoDimensions VD_960x720 = new VideoDimensions(960, 720);
  public final static VideoDimensions VD_1280x720 = new VideoDimensions(1280, 720);
  public final static VideoDimensions VD_1920x1080 = new VideoDimensions(1920, 1080);
  public final static VideoDimensions VD_2540x1440 = new VideoDimensions(2540, 1440);
  public final static VideoDimensions VD_3840x2160 = new VideoDimensions(3840, 2160);
  public enum FRAME_RATE {
    FRAME_RATE_FPS_1(1),
    FRAME_RATE_FPS_7(7),
    FRAME_RATE_FPS_10(10),
    FRAME_RATE_FPS_15(15),
    FRAME_RATE_FPS_24(24),
    FRAME_RATE_FPS_30(30),
    FRAME_RATE_FPS_60(60);
    private int value;
    private FRAME_RATE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  public enum ORIENTATION_MODE {
    ORIENTATION_MODE_ADAPTIVE(0),
    ORIENTATION_MODE_FIXED_LANDSCAPE(1),
    ORIENTATION_MODE_FIXED_PORTRAIT(2);
    private int value;
    private ORIENTATION_MODE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  public enum ENCODING_PREFERENCE {
    PREFER_AUTO(-1),
    PREFER_SOFTWARE(0),
    PREFER_HARDWARE(1);
    private int value;
    private ENCODING_PREFERENCE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  public enum COMPRESSION_PREFERENCE {
    PREFER_LOW_LATENCY(0),
    PREFER_QUALITY(1);
    private int value;
    private COMPRESSION_PREFERENCE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  static public class AdvanceOptions {
    public ENCODING_PREFERENCE encodingPreference;
    public COMPRESSION_PREFERENCE compressionPreference;
    public AdvanceOptions(
        ENCODING_PREFERENCE encodingPreference, COMPRESSION_PREFERENCE compressionPreference) {
      this.encodingPreference = encodingPreference;
      this.compressionPreference = compressionPreference;
    }
    public AdvanceOptions() {
      this.encodingPreference = ENCODING_PREFERENCE.PREFER_AUTO;
      this.compressionPreference = COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY;
    }
  }
  public enum DEGRADATION_PREFERENCE {
    MAINTAIN_QUALITY(0),
    MAINTAIN_FRAMERATE(1),
    MAINTAIN_BALANCED(2),
    MAINTAIN_RESOLUTION(3),
    DISABLED(100);
    private int value;
    private DEGRADATION_PREFERENCE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  public enum MIRROR_MODE_TYPE {
    MIRROR_MODE_AUTO(0),
    MIRROR_MODE_ENABLED(1),
    MIRROR_MODE_DISABLED(2);
    private int value;
    private MIRROR_MODE_TYPE(int v) {
      value = v;
    }
    public int getValue() {
      return this.value;
    }
  }
  public static final int STANDARD_BITRATE = 0;
  public static final int COMPATIBLE_BITRATE = -1;
  public static final int DEFAULT_MIN_BITRATE = -1;
  public static final int DEFAULT_MIN_FRAMERATE = -1;
  public static final int DEFAULT_MIN_BITRATE_EQUAL_TO_TARGET_BITRATE = -2;
  public VideoDimensions dimensions;
  public int frameRate;
  public int minFrameRate;
  public int bitrate;
  public int minBitrate;
  public ORIENTATION_MODE orientationMode;
  public DEGRADATION_PREFERENCE degradationPrefer;
  public MIRROR_MODE_TYPE mirrorMode;
  public AdvanceOptions advanceOptions;
  public VideoEncoderConfiguration() {
    this.dimensions = new VideoDimensions(640, 480);
    this.frameRate = FRAME_RATE.FRAME_RATE_FPS_15.getValue();
    this.minFrameRate = DEFAULT_MIN_FRAMERATE;
    this.bitrate = STANDARD_BITRATE;
    this.minBitrate = DEFAULT_MIN_BITRATE;
    this.orientationMode = ORIENTATION_MODE.ORIENTATION_MODE_ADAPTIVE;
    this.degradationPrefer = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
    this.mirrorMode = MIRROR_MODE_TYPE.MIRROR_MODE_DISABLED;
    this.advanceOptions = new AdvanceOptions(
        ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
  }
  public VideoEncoderConfiguration(VideoDimensions dimensions, FRAME_RATE frameRate, int bitrate,
      ORIENTATION_MODE orientationMode) {
    this.dimensions = dimensions;
    this.frameRate = frameRate.getValue();
    this.minFrameRate = DEFAULT_MIN_FRAMERATE;
    this.bitrate = bitrate;
    this.minBitrate = DEFAULT_MIN_BITRATE;
    this.orientationMode = orientationMode;
    this.degradationPrefer = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
    this.mirrorMode = MIRROR_MODE_TYPE.MIRROR_MODE_DISABLED;
    this.advanceOptions = new AdvanceOptions(
        ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
  }
  public VideoEncoderConfiguration(VideoDimensions dimensions, FRAME_RATE frameRate, int bitrate,
      ORIENTATION_MODE orientationMode, MIRROR_MODE_TYPE mirrorMode) {
    this.dimensions = dimensions;
    this.frameRate = frameRate.getValue();
    this.minFrameRate = DEFAULT_MIN_FRAMERATE;
    this.bitrate = bitrate;
    this.minBitrate = DEFAULT_MIN_BITRATE;
    this.orientationMode = orientationMode;
    this.degradationPrefer = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
    this.mirrorMode = mirrorMode;
    this.advanceOptions = new AdvanceOptions(
        ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
  }
  public VideoEncoderConfiguration(
      int width, int height, FRAME_RATE frameRate, int bitrate, ORIENTATION_MODE orientationMode) {
    this.dimensions = new VideoDimensions(width, height);
    this.frameRate = frameRate.getValue();
    this.minFrameRate = DEFAULT_MIN_FRAMERATE;
    this.bitrate = bitrate;
    this.minBitrate = DEFAULT_MIN_BITRATE;
    this.orientationMode = orientationMode;
    this.degradationPrefer = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
    this.mirrorMode = MIRROR_MODE_TYPE.MIRROR_MODE_DISABLED;
    this.advanceOptions = new AdvanceOptions(
        ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
  }
  public VideoEncoderConfiguration(int width, int height, FRAME_RATE frameRate, int bitrate,
      ORIENTATION_MODE orientationMode, MIRROR_MODE_TYPE mirrorMode) {
    this.dimensions = new VideoDimensions(width, height);
    this.frameRate = frameRate.getValue();
    this.minFrameRate = DEFAULT_MIN_FRAMERATE;
    this.bitrate = bitrate;
    this.minBitrate = DEFAULT_MIN_BITRATE;
    this.orientationMode = orientationMode;
    this.degradationPrefer = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
    this.mirrorMode = mirrorMode;
    this.advanceOptions = new AdvanceOptions(
        ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraVideoEncoderConfiguration : NSObject
@property(assign, nonatomic) CGSize dimensions;
@property(assign, nonatomic) AgoraVideoCodecType codecType;
@property(assign, nonatomic) AgoraVideoFrameRate frameRate;
@property(assign, nonatomic) NSInteger bitrate;
@property(assign, nonatomic) NSInteger minBitrate;
@property(assign, nonatomic) AgoraVideoOutputOrientationMode orientationMode;
@property(assign, nonatomic) AgoraVideoMirrorMode mirrorMode;
@property (assign, nonatomic) AgoraDegradationPreference degradationPreference;

- (instancetype _Nonnull)initWithSize:(CGSize)size
                            frameRate:(AgoraVideoFrameRate)frameRate
                              bitrate:(NSInteger)bitrate
                      orientationMode:(AgoraVideoOutputOrientationMode)orientationMode
                           mirrorMode:(AgoraVideoMirrorMode)mirrorMode;

- (instancetype _Nonnull)initWithWidth:(NSInteger)width
                                height:(NSInteger)height
                             frameRate:(AgoraVideoFrameRate)frameRate
                               bitrate:(NSInteger)bitrate
                       orientationMode:(AgoraVideoOutputOrientationMode)orientationMode
                            mirrorMode:(AgoraVideoMirrorMode)mirrorMode;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct VideoEncoderConfiguration {
  VIDEO_CODEC_TYPE codecType;
  VideoDimensions dimensions;
  int frameRate;
  int bitrate;
  int minBitrate;
  ORIENTATION_MODE orientationMode;
  DEGRADATION_PREFERENCE degradationPreference;
  VIDEO_MIRROR_MODE_TYPE mirrorMode;
  AdvanceOptions advanceOptions;

  VideoEncoderConfiguration(const VideoDimensions&amp; d, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_DISABLED)
      : codecType(VIDEO_CODEC_H264),
        dimensions(d),
        frameRate(f),
        bitrate(b),
        minBitrate(DEFAULT_MIN_BITRATE),
        orientationMode(m),
        degradationPreference(MAINTAIN_QUALITY),
        mirrorMode(mirror),
        advanceOptions(PREFER_AUTO) {}
  VideoEncoderConfiguration(int width, int height, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_DISABLED)
      : codecType(VIDEO_CODEC_H264),
        dimensions(width, height),
        frameRate(f),
        bitrate(b),
        minBitrate(DEFAULT_MIN_BITRATE),
        orientationMode(m),
        degradationPreference(MAINTAIN_QUALITY),
        mirrorMode(mirror),
        advanceOptions(PREFER_AUTO) {}
  VideoEncoderConfiguration(const VideoEncoderConfiguration&amp; config)
      : codecType(config.codecType),
        dimensions(config.dimensions),
        frameRate(config.frameRate),
        bitrate(config.bitrate),
        minBitrate(config.minBitrate),
        orientationMode(config.orientationMode),
        degradationPreference(config.degradationPreference),
        mirrorMode(config.mirrorMode),
        advanceOptions(config.advanceOptions) {}
  VideoEncoderConfiguration()
      : codecType(VIDEO_CODEC_H264),
        dimensions(FRAME_WIDTH_640, FRAME_HEIGHT_360),
        frameRate(FRAME_RATE_FPS_15),
        bitrate(STANDARD_BITRATE),
        minBitrate(DEFAULT_MIN_BITRATE),
        orientationMode(ORIENTATION_MODE_ADAPTIVE),
        degradationPreference(MAINTAIN_QUALITY),
        mirrorMode(VIDEO_MIRROR_MODE_DISABLED),
        advanceOptions(PREFER_AUTO) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class VideoEncoderConfiguration {
  
  codecType?: VideoCodecType;
  
  dimensions?: VideoDimensions;
  
  frameRate?: number;
  
  bitrate?: number;
  
  minBitrate?: number;
  
  orientationMode?: OrientationMode;
  
  degradationPreference?: DegradationPreference;
  
  mirrorMode?: VideoMirrorModeType;

  advanceOptions?: AdvanceOptions;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class VideoEncoderConfiguration
    {
        public VIDEO_CODEC_TYPE codecType { set; get; }
        public VideoDimensions dimensions { set; get; }
        public int frameRate { set; get; }
        public int bitrate { set; get; }
        public int minBitrate { set; get; }
        public ORIENTATION_MODE orientationMode { set; get; }
        public DEGRADATION_PREFERENCE degradationPreference { set; get; }
        public VIDEO_MIRROR_MODE_TYPE mirrorMode { set; get; }
        public AdvanceOptions advanceOptions { set; get; }

        public VideoEncoderConfiguration(ref VideoDimensions d, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED)
        {
            codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
            dimensions = d;
            frameRate = f;
            bitrate = b;
            minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            orientationMode = m;
            degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            mirrorMode = mirror;
            advanceOptions = new AdvanceOptions(ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
        }

        public VideoEncoderConfiguration(int width, int height, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED)
        {
            codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            orientationMode = m;
            degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            mirrorMode = mirror;
            advanceOptions = new AdvanceOptions(ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
        }

        public VideoEncoderConfiguration(ref VideoEncoderConfiguration config)
        {
            codecType = config.codecType;
            dimensions = config.dimensions;
            frameRate = config.frameRate;
            bitrate = config.bitrate;
            minBitrate = config.minBitrate;
            orientationMode = config.orientationMode;
            degradationPreference = config.degradationPreference;
            mirrorMode = config.mirrorMode;
            advanceOptions = new AdvanceOptions(config.advanceOptions.encodingPreference, config.advanceOptions.compressionPreference);
        }

        public VideoEncoderConfiguration()
        {
            codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
            dimensions = new VideoDimensions((int)FRAME_WIDTH.FRAME_WIDTH_640, (int)FRAME_HEIGHT.FRAME_HEIGHT_360);
            frameRate = (int)FRAME_RATE.FRAME_RATE_FPS_15;
            bitrate = (int)BITRATE.STANDARD_BITRATE;
            minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            orientationMode = ORIENTATION_MODE.ORIENTATION_MODE_ADAPTIVE;
            degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            mirrorMode = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED;
            advanceOptions = new AdvanceOptions(ENCODING_PREFERENCE.PREFER_AUTO, COMPRESSION_PREFERENCE.PREFER_LOW_LATENCY);
        }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoEncoderConfiguration {
  
  codecType?: VideoCodecType;
  
  dimensions?: VideoDimensions;
  
  frameRate?: number;
  
  bitrate?: number;
  
  minBitrate?: number;
  
  orientationMode?: OrientationMode;
  
  degradationPreference?: DegradationPreference;
  
  mirrorMode?: VideoMirrorModeType;

  advanceOptions?: AdvanceOptions;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class VideoEncoderConfiguration {
  const VideoEncoderConfiguration(
      {this.codecType,
      this.dimensions,
      this.frameRate,
      this.bitrate,
      this.minBitrate,
      this.orientationMode,
      this.degradationPreference,
      this.mirrorMode,
      this.advanceOptions});

  @JsonKey(name: 'codecType')
  final VideoCodecType? codecType;

  @JsonKey(name: 'dimensions')
  final VideoDimensions? dimensions;

  @JsonKey(name: 'frameRate')
  final int? frameRate;

  @JsonKey(name: 'bitrate')
  final int? bitrate;

  @JsonKey(name: 'minBitrate')
  final int? minBitrate;

  @JsonKey(name: 'orientationMode')
  final OrientationMode? orientationMode;

  @JsonKey(name: 'degradationPreference')
  final DegradationPreference? degradationPreference;

  @JsonKey(name: 'mirrorMode')
  final VideoMirrorModeType? mirrorMode;

  @JsonKey(name: 'advanceOptions')
  final AdvanceOptions? advanceOptions;

  factory VideoEncoderConfiguration.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$VideoEncoderConfigurationFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$VideoEncoderConfigurationToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>dimensions</pt>
                <pd>
                    <p props="cpp unity electron rn flutter">The dimensions of the encoded video (px). See <xref keyref="VideoDimensions" />. This parameter measures the video encoding quality in the format of length × width. The default value is 960 × 540. You can set a custom value.</p>
                    <p props="android ios mac">Users can set the resolution by themselves, or directly select the desired resolution from the following list:<ul>
                    <li><ph keyref="VD_120x120" />: The video resolution is 120 × 120.</li>
                    <li><ph keyref="VD_160x120" />: The video resolution is 160 × 120.</li>
                    <li><ph keyref="VD_180x180" />: The video resolution is 180 × 180.</li>
                    <li><ph keyref="VD_240x180" />: The video resolution is 240 × 180.</li>
                    <li><ph keyref="VD_320x180" />: The video resolution is 320 × 180.</li>
                    <li><ph keyref="VD_240x240" />: The video resolution is 240 × 240.</li>
                    <li><ph keyref="VD_320x240" />: The video resolution is 320 × 240.</li>
                    <li><ph keyref="VD_424x240" />: The video resolution is 424 × 240.</li>
                    <li><ph keyref="VD_360x360" />: The video resolution is 360 × 360.</li>
                    <li><ph keyref="VD_480x360" />: The video resolution is 480 × 360.</li>
                    <li><ph keyref="VD_640x360" />: The video resolution is 640 × 360.</li>
                    <li><ph keyref="VD_480x480" />: The video resolution is 480 × 480.</li>
                    <li><ph keyref="VD_640x480" />: The video resolution is 640 × 480.</li>
                    <li><ph keyref="VD_840x480" />: The video resolution is 840 × 480.</li>
                    <li><ph keyref="VD_960x540" />: The video resolution is 960 × 540.</li>
                    <li><ph keyref="VD_960x720" />: The video resolution is 960 × 720.</li>
                    <li><ph keyref="VD_1280x720" />: The video resolution is 1280 × 720.</li>
                    <li><ph keyref="VD_1920x1080" />: The video resolution is 1920 × 1080.</li>
                    <li><ph keyref="VD_2540x1440" />: The video resolution is 2540 × 1440.</li>
                    <li><ph keyref="VD_3840x2160" />: The video resolution is 3840 × 2160.</li>
                    </ul>
                    <note type="attention">
                    <ul>
                    <li>Whether the 720p resolution or above can be supported depends on the device. If the device cannot support 720p, the frame rate will be lower than the set value.</li>
                    <li props="android apple">The default value is 960 × 540.</li>
                    </ul> </note> </p>
                </pd>
            </plentry>
            <plentry props="ios mac cpp unity electron rn flutter">
                <pt>codecType</pt>
                <pd>The codec type of the local video stream. See <xref keyref="VIDEO_CODEC_TYPE" />.</pd>
            </plentry>
            <plentry>
                <pt>frameRate</pt>
                <pd>The frame rate (fps) of the encoding video frame. The default value is 15. See <xref keyref="FRAME_RATE" />.</pd>
            </plentry>
            <plentry props="native">
                <pt>minFramerate</pt>
                <pd>The minimum encoding frame rate of the video. The default value is -1.</pd>
            </plentry>
            <plentry>
                <pt>bitrate</pt>
                <pd>
                    <p><ph>The encoding bitrate (Kbps) of the video. </ph><ph props="unity">See <xref keyref="BITRATE" />.</ph></p>
                    <ul props="native flutter">
                    <li><option keyref="STANDARD_BITRATE" />: (Recommended) Standard bitrate mode. In this mode, the bitrates of the live broadcasting profile is higher than that of the communication profile. See <xref keyref="video-profile" />.</li>
                    <li><option keyref="COMPATIBLE_BITRATE" />: Adaptive bitrate mode In this mode, the bitrates of the live broadcasting profile equals that of the communication profile. If this mode is selected, the video frame rate of live broadcasting scenarios may be lower than the set value.</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>minBitrate</pt>
                <pd>
                    <p>The minimum encoding bitrate (Kbps) of the video.</p>
                    <p>The SDK automatically adjusts the encoding bitrate to adapt to the network conditions. Using a value greater than the default value forces the video encoder to output high-quality images but may cause more packet loss and sacrifice the smoothness of the video transmission. Unless you have special requirements for image quality, Agora does not recommend changing this value.</p>
                    <note type="attention">This parameter only applies to the interactive streaming profile.</note> </pd>
            </plentry>
            <plentry>
                <pt>orientationMode</pt>
                <pd>The orientation mode of the encoded video. See <xref keyref="ORIENTATION_MODE" />.</pd>
            </plentry>
            <plentry>
                <pt>degradationPreference</pt>
                <pd>Video degradation preference under limited bandwidth. See <xref keyref="DEGRADATION_PREFERENCE" />.</pd>
            </plentry>
            <plentry>
                <pt>mirrorMode</pt>
                <pd>
                    <p props="ios mac cpp framework">Sets the mirror mode of the published local video stream. It only affects the video that the remote user sees. See <xref keyref="VIDEO_MIRROR_MODE_TYPE" />.</p>
                    <p props="android">The mirror mode specified in video encoder configurations only affect the view of remote users.<ul>
                      <li><ph keyref="VIDEO_MIRROR_MODE_AUTO" />(0): The SDK determines whether to enable the mirror mode. The SDK disables mirror mode by default.</li>
                      <li><ph keyref="VIDEO_MIRROR_MODE_ENABLED" />(1): Enables the mirror mode for remote users.</li>
                      <li><ph keyref="VIDEO_MIRROR_MODE_DISABLED" />(2): Disables the mirror mode for remote users.</li>
                      </ul> </p>
                    <note type="attention">By default, the video is not mirrored.</note> </pd>
            </plentry>
            <plentry>
                <pt>advanceOptions</pt>
                <pd>Advanced options for video encoding. See <xref keyref="AdvanceOptions" />.</pd>
            </plentry>
            </parml> </section>
        <section props="apple">
          <title>Method</title>
          <parml>
            <plentry>
              <pt>initWithSize</pt>
              <pd>Specifies the video resolution and initializes the <xref keyref="VideoEncoderConfiguration" /> object. See <xref keyref="initWithSize" />.</pd>
            </plentry>
            <plentry>
              <pt>initWithWidth</pt>
              <pd>Specifies the video width and height, and initializes the <xref keyref="VideoEncoderConfiguration" /> object. See <xref keyref="initWithWidth" />.</pd>
            </plentry>
          </parml>
        </section>
    </refbody>
</reference>