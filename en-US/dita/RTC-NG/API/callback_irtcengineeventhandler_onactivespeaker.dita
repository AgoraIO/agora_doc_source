<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onactivespeaker">
    <title><ph keyref="onActiveSpeaker" /></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs when the most active remote speaker is detected.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onActiveSpeaker" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onActiveSpeaker(int uid) {}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine activeSpeaker:(NSUInteger)speakerUid;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual void onActiveSpeaker(uid_t userId) { (void)userId; }</codeblock>
         <codeblock props="bp" outputclass="language-cpp">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnActiveSpeaker, int64, userId);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">  onActiveSpeaker?(connection: RtcConnection, uid: number): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual void OnActiveSpeaker(RtcConnection connection, uint uid) { }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">  onActiveSpeaker?(connection: RtcConnection, uid: number): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(RtcConnection connection, int uid)? onActiveSpeaker;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>After a successful call of <xref keyref="enableAudioVolumeIndication" />, the SDK continuously detects which remote user has the loudest volume. During the current period, the remote user whose volume is detected as the loudest for the most times, is the most active user.</p>
            <p>When the number of users is no less than two and an active remote speaker exists, the SDK triggers this callback and reports the <parmname>uid</parmname> of the most active remote speaker.<ul>
            <li>If the most active remote speaker is always the same user, the SDK triggers the <apiname keyref="onActiveSpeaker" /> callback only once.</li>
            <li>If the most active remote speaker changes to another user, the SDK triggers this callback again and reports the <parmname>uid</parmname> of the new active remote speaker.</li>
            </ul> </p>
            <p />
        </section>
        <section id="parameters">
            <title><ph keyref="callback-section-title" /></title>
            <parml>
            <plentry conkeyref="onJoinChannelSuccess/engine" props="ios mac">
                <pt />
                <pd />
            </plentry>
            <plentry props="unity electron rn flutter cs" conkeyref="joinChannelEx/connection">
                <pt />
                <pd />
            </plentry>
            <plentry id="uid">
                <pt props="cpp unreal bp">userId</pt>
                <pt props="android electron flutter unity rn cs">uid</pt>
                <pt props="ios mac">speakerUid</pt>
                <pd>The user ID of the most active speaker.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>