<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_contentinspectmodule">
    <title><ph keyref="ContentInspectModule"/></title>
    <shortdesc id="short"><ph id="shortdesc"><apiname keyref="ContentInspectModule"/> class, a  structure used to configure the frequency of video screenshot and upload.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static class ContentInspectModule {
    public int type;
    public int interval;
    public Constants.VideoModulePosition position;
}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">export class ContentInspectModule {

  public type:Constants.ContentInspectType = Constants.ContentInspectType.INVALID;

  public interval:number = 0;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraContentInspectModule: NSObject
@property (assign, nonatomic) AgoraContentInspectType type;
@property (assign, nonatomic) NSInteger interval;
@property (assign, nonatomic) AgoraVideoModulePosition position;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct ContentInspectModule {
  CONTENT_INSPECT_TYPE type;
  unsigned int interval;
  base::VIDEO_MODULE_POSITION position;
  ContentInspectModule() {
    type = CONTENT_INSPECT_INVALID;
    interval = 0;
    position = base::POSITION_PRE_ENCODER;
  }
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FContentInspectModule {
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ContentInspectModule")
	ECONTENT_INSPECT_TYPE type = ECONTENT_INSPECT_TYPE::CONTENT_INSPECT_INVALID;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|ContentInspectModule")
	int64 interval = 0;
	FContentInspectModule(){}
	FContentInspectModule(const agora::media::ContentInspectModule &amp; AgoraData){
		type = static_cast&lt;ECONTENT_INSPECT_TYPE&gt;(AgoraData.type);
		interval = AgoraData.interval;
	}
	agora::media::ContentInspectModule CreateAgoraData() const {
		agora::media::ContentInspectModule AgoraData;
		AgoraData.type = static_cast&lt;agora::media::CONTENT_INSPECT_TYPE&gt;(type);
		AgoraData.interval = interval;
		return AgoraData;
	}
	void FreeAgoraData(agora::media::ContentInspectModule &amp; AgoraData) const {
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ContentInspectModule {

  type?: ContentInspectType;

  interval?: number;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ContentInspectModule
    {
        public CONTENT_INSPECT_TYPE type;
        public uint interval;

        public ContentInspectModule()
        {
            type = CONTENT_INSPECT_TYPE.CONTENT_INSPECT_INVALID;
            interval = 0;
        }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ContentInspectModule {

  type?: ContentInspectType;

  interval?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class ContentInspectModule {

  const ContentInspectModule({this.type, this.interval});
  @JsonKey(name: 'type')
  final ContentInspectType? type;
  @JsonKey(name: 'interval')
  final int? interval;
  factory ContentInspectModule.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$ContentInspectModuleFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$ContentInspectModuleToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>type</pt>
                <pd props="apple bp cpp cs electron flutter hmos rn unity unreal">Types of functional module. See <xref keyref="CONTENT_INSPECT_TYPE"/>.</pd>
                <pd props="android">
                    <p>Types of functional modules:<ul>
                    <li><ph keyref="CONTENT_INSPECT_INVALID"/>(0): (Default) This module has no actual function. Do not set to this value.</li>
                    <li props="hide"><ph keyref="CONTENT_INSPECT_MODERATION"/>(1): Video content moderation. SDK takes screenshots, inspects video content of the video stream in the channel, and uploads the screenshots and moderation results.</li>
                    <li><ph keyref="CONTENT_INSPECT_SUPERVISION"/>(2): Video screenshot and upload via Agora self-developed extension. SDK takes screenshots of the video stream in the channel and uploads them.</li>
                    <li><ph keyref="CONTENT_INSPECT_IMAGE_MODERATION"/>(3): Video screenshot and upload via extensions from Agora Extensions Marketplace. SDK uses video moderation extensions from Agora Extensions Marketplace to take screenshots of the video stream in the channel and uploads them.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>interval</pt>
                <pd><ph>The frequency (s) of video screenshot and upload. The value should be set as larger than 0. The default value is 0, the SDK does not take screenshots. </ph><ph props="hide">The frequency (s) of video content moderation. The value should be set as larger than 0. If set as 0 (default), the video content is not inspected. </ph><ph>Agora recommends that you set the value as 10; you can also adjust it according to your business needs.</ph></pd>
            </plentry>
            <plentry props="native">
                <pt props="native">position</pt>
                <pd props="android cpp">The position of the video observer. See <xref keyref="VIDEO_MODULE_POSITION"/>.</pd>
                <pd props="apple">The position of the video observer. See <xref keyref="VIDEO_MODULE_POSITION"/>.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
