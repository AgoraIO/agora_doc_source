<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setsubscribevideoblocklist">
    <title><ph keyref="setSubscribeVideoBlocklist"/></title>
    <shortdesc id="short"><ph id="shortdesc">Set the blocklist of subscriptions for video streams.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setSubscribeVideoBlocklist"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setSubscribeVideoBlocklist(int[] uidList);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setSubscribeVideoBlocklist:(NSArray &lt;NSNumber *&gt; *_Nonnull)blocklist;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setSubscribeVideoBlocklist(uid_t* uidList, int uidNumber) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetSubscribeVideoBlocklist(TArray&lt;int64&gt; uidList, int uidNumber);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setSubscribeVideoBlocklist(
    uidList: number[],
    uidNumber: number
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetSubscribeVideoBlocklist(uint[] uidList, int uidNumber);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setSubscribeVideoBlocklist(
    uidList: number[],
    uidNumber: number
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> setSubscribeVideoBlocklist(
      {required List&lt;int> uidList, required int uidNumber});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>You can call this method to specify the video streams of a user that you do not want to subscribe to.</p>
            <note>
            <ul>
            <li conkeyref="setSubscribeAudioBlocklist/order"/>
            <li>The blocklist is not affected by the setting in <xref keyref="muteRemoteVideoStream"/>, <xref keyref="muteAllRemoteVideoStreams"/> and <parmname>autoSubscribeAudio</parmname> in <xref keyref="ChannelMediaOptions"/>.</li>
            <li conkeyref="setSubscribeAudioBlocklist/effect"/>
            <li conkeyref="setSubscribeAudioBlocklist/priority"/>
            </ul> </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry id="list">
                <pt props="cpp unreal bp android electron unity rn flutter cs">uidList</pt>
                <pt props="apple">blocklist</pt>
                <pd>
                    <p>The user ID list of users that you do not want to subscribe to.</p>
                    <p>If you want to specify the video streams of a user that you do not want to subscribe to, add the user ID of that user in this list. If you want to remove a user from the blocklist, you need to call the <xref keyref="setSubscribeVideoBlocklist"/> method to update the user ID list; this means you only add the <parmname>uid</parmname> of users that you do not want to subscribe to in the new user ID list.</p>
                </pd>
            </plentry>
            <plentry props="cpp unreal bp electron unity rn flutter cs" conkeyref="setSubscribeAudioBlocklist/uidnumber">
                <pt/>
                <pd/>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown; and you need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul>
            <li props="native unreal bp electron unity rn cs">0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul>
        </section>
    </refbody>
</reference>
