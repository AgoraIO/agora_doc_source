<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaengine_registerfaceinfoobserver">
    <title><ph keyref="registerFaceInfoObserver" /></title>
    <shortdesc id="short"><ph id="shortdesc">Registers a facial information observer.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="registerFaceInfoObserver"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int registerFaceInfoObserver(IFaceInfoObserver receiver);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)setFaceInfoDelegate:(id&lt;AgoraFaceInfoDelegate> _Nullable)delegate NS_SWIFT_NAME(setFaceInfoDelegate(_:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int registerFaceInfoObserver(IFaceInfoObserver* observer) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript">abstract registerFaceInfoObserver(observer: IFaceInfoObserver): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int RegisterFaceInfoObserver(IFaceInfoObserver observer);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract registerFaceInfoObserver(observer: IFaceInfoObserver): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">void registerFaceInfoObserver(FaceInfoObserver observer);</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.3.1</dd>
            </dlentry>
            </dl>
            <p>You can call this method to register the <xref keyref="onFaceInfo"/> callback to receive the facial information processed by Agora speech driven extension. When calling this method to register a facial information observer, you can register callbacks in the <apiname keyref="IFaceInfoObserver"/> class as needed. After successfully registering the facial information observer, the SDK triggers the callback you have registered when it captures the facial information converted by the speech driven extension.</p>
            <note type="attention">
                <ul>
                    <li>Ensure that you call this method before joining a channel.</li>
                    <li>Before calling this method, you need to make sure that the speech driven extension has been enabled by calling <xref keyref="enableExtension"/>.</li>
                </ul>
            </note>
        </section>
        <section id="scenario">
            <title>Applicable scenarios</title>
            <p>Facial information processed by the Agora speech driven extension is BS (Blend Shape) data that complies with ARkit standards. You can further process the BS data using third-party 3D rendering engines, such as driving avatar to make mouth movements corresponding to speech.</p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>observer</pt>
                <pd>Facial information observer, see <xref keyref="IFaceInfoObserver"/>.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly.</p>
            <ul props="native electron unity rn unreal bp">
                <li>0: Success.</li>
                <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
                </ul> </section>
        </refbody>
</reference>
