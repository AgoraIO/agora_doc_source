<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_getscreencapturesources">
    <title><ph keyref="getScreenCaptureSources" /></title>
    <shortdesc id="short"><ph id="shortdesc">Gets a list of shareable screens and windows.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="getScreenCaptureSources" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">- (NSArray&lt;AgoraScreenCaptureSourceInfo*&gt;* _Nullable)getScreenCaptureSourcesWithThumbSize:(NSSize)thumbSize iconSize:(NSSize)iconSize includeScreen:(BOOL)includeScreen;
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual IScreenCaptureSourceList* getScreenCaptureSources(const SIZE&amp; thumbSize, const SIZE&amp; iconSize, const bool includeScreen) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	UIScreenCaptureSourceList* GetScreenCaptureSources(FSIZE thumbSize, FSIZE iconSize, bool includeScreen);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract getScreenCaptureSources(
    thumbSize: Size,
    iconSize: Size,
    includeScreen: boolean
  ): ScreenCaptureSourceInfo[];</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract ScreenCaptureSourceInfo[] GetScreenCaptureSources(SIZE thumbSize, SIZE iconSize, bool includeScreen);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract getScreenCaptureSources(
    thumbSize: Size,
    iconSize: Size,
    includeScreen: boolean
  ): ScreenCaptureSourceInfo[];</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;List&lt;ScreenCaptureSourceInfo&gt;&gt; getScreenCaptureSources(
    {required Size thumbSize,
    required Size iconSize,
    required bool includeScreen});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>You can call this method before sharing a screen or window to get a list of shareable screens and windows, which enables a user to use thumbnails in the list to easily choose a particular screen or window to share. This list also contains important information such as window ID and screen ID, with which you can call <xref keyref="startScreenCaptureByWindowId" /> or <xref keyref="startScreenCaptureByDisplayId" /> to start the sharing.</p>
            <note type="note" props="cpp unreal bp unity flutter">This method applies to macOS and Windows only.</note> 
            </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>thumbSize</pt>
                <pd><ph>The target size of the screen or window thumbnail (the width and height are in pixels). </ph><ph props="cpp unreal bp">See <xref keyref="SIZE-link" />. </ph><ph>The SDK scales the original image to make the length of the longest side of the image the same as that of the target size without distorting the original image. For example, if the original image is 400 × 300 and thumbSize is 100 × 100, the actual size of the <parmname>thumbnail</parmname> is 100 × 75. If the target size is larger than the original size, the thumbnail is the original image and the SDK does not scale it.</ph></pd>
            </plentry>
            <plentry>
                <pt>iconSize</pt>
                <pd><ph>The target size of the icon corresponding to the application program (the width and height are in pixels). </ph><ph props="cpp unreal bp">See <xref keyref="SIZE-link" />. </ph><ph>The SDK scales the original image to make the length of the longest side of the image the same as that of the target size without distorting the original image. For example, if the original image is 400 × 300 and iconSize is 100 × 100, the actual size of the<parmname> icon</parmname> is 100 × 75. If the target size is larger than the original size, the icon is the original image and the SDK does not scale it.</ph></pd>
            </plentry>
            <plentry>
                <pt>includeScreen</pt>
                <pd>Whether the SDK returns the screen information in addition to the window information:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: The SDK returns screen and window information.</li>
                    <li><codeph><ph keyref="false" /></codeph>: The SDK returns window information only.</li>
                    </ul></pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title>Returns</title>
            <p props="cpp unreal bp android"><xref keyref="IScreenCaptureSourceList" /></p>
            <p props="mac electron unity flutter cs">The <xref keyref="ScreenCaptureSourceInfo" /> array.</p>
        </section>
    </refbody>
</reference>
