<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_extensioncontext">
    <title><ph keyref="ExtensionContext"/></title>
    <shortdesc id="short"><ph id="shortdesc">The context information of the extension.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class ExtensionContext {
  public boolean isValid;
  public int uid;
  public String providerName;
  public String extensionName;

  @CalledByNative
  public ExtensionContext() {
    isValid = false;
    uid = 0;
    providerName = "";
    extensionName = "";
  }

  @CalledByNative
  public ExtensionContext(int uid, String providerName, String extensionName) {
    this.isValid = true;
    this.uid = uid;
    this.providerName = providerName;
    this.extensionName = extensionName;
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">@interface AgoraExtensionContext : NSObject
@property (assign, nonatomic) BOOL isValid;
@property (assign, nonatomic) NSUInteger uid;
@property (copy, nonatomic) NSString * _Nullable providerName;
@property (copy, nonatomic) NSString * _Nullable extensionName;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct ExtensionContext {
    bool isValid;
    uid_t uid;
    const char *providerName;
    const char *extensionName;
    ExtensionContext():isValid(false), uid(0), providerName(NULL), extensionName(NULL) {}
};</codeblock>
            <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FExtensionContext {
	GENERATED_BODY()
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ExtensionContext&quot;)
	bool isValid = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ExtensionContext&quot;)
	int64 uid = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ExtensionContext&quot;)
	FString providerName = &quot;&quot;;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ExtensionContext&quot;)
	FString extensionName = &quot;&quot;;
	FExtensionContext(){}
	FExtensionContext(const agora::rtc::ExtensionContext&amp; AgoraData){
		isValid = AgoraData.isValid;
		uid = AgoraData.uid;
		providerName = UTF8_TO_TCHAR(AgoraData.providerName);
		extensionName = UTF8_TO_TCHAR(AgoraData.extensionName);
	}
	agora::rtc::ExtensionContext CreateAgoraData() const {
		agora::rtc::ExtensionContext AgoraData;
		AgoraData.isValid = isValid;
		AgoraData.uid = uid;
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.providerName, providerName)
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.extensionName, extensionName)
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::ExtensionContext&amp; AgoraData) const {
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.providerName)
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.extensionName)
	}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ExtensionContext {

  isValid?: boolean;

  uid?: number;

  providerName?: string;

  extensionName?: string;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ExtensionContext
    {
        public bool isValid;
        public uint uid;
        public string providerName;
        public string extensionName;

        public ExtensionContext()
        {
            this.isValid = false;
            this.uid = 0;
            this.providerName = "";
            this.extensionName = "";
        }

        public ExtensionContext(bool isValid, uint uid, string providerName, string extensionName)
        {
            this.isValid = isValid;
            this.uid = uid;
            this.providerName = providerName;
            this.extensionName = extensionName;
        }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ExtensionContext {

  isValid?: boolean;

  uid?: number;

  providerName?: string;

  extensionName?: string;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class ExtensionContext {
  const ExtensionContext(
      {this.isValid, this.uid, this.providerName, this.extensionName});

  @JsonKey(name: &#x27;isValid&#x27;)
  final bool? isValid;

  @JsonKey(name: &#x27;uid&#x27;)
  final int? uid;

  @JsonKey(name: &#x27;providerName&#x27;)
  final String? providerName;

  @JsonKey(name: &#x27;extensionName&#x27;)
  final String? extensionName;

  factory ExtensionContext.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$ExtensionContextFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$ExtensionContextToJson(this);
}</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.4.0</dd>
            </dlentry>
            </dl>
            <p/>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>isValid</pt>
                <pd>Whether the <parmname>uid</parmname> in <apiname keyref="ExtensionContext"/> is valid: <ul>
                        <li><codeph><ph keyref="true"/></codeph>: The <parmname>uid</parmname> is valid.</li>
                        <li><codeph><ph keyref="false"/></codeph>: The <parmname>uid</parmname> is invalid.</li>
                   </ul>
                </pd>
            </plentry>
            <plentry>
                <pt>uid</pt>
                <pd>The user ID. 0 represents a local user, while greater than 0 represents a remote user.</pd>
            </plentry>
            <plentry>
                <pt>providerName</pt>
                <pd>The name of the extension provider.</pd>
            </plentry>
            <plentry>
                <pt>extensionName</pt>
                <pd>The name of the extension.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
