<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_getfaceshapeareaoptions">
    <title><ph keyref="getFaceShapeAreaOptions" /></title>
    <shortdesc id="short"><ph id="shortdesc">Gets the facial beauty area options.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="getFaceShapeAreaOptions"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract FaceShapeAreaOptions getFaceShapeAreaOptions(
      int shapeArea, Constants.MediaSourceType sourceType);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">- (AgoraFaceShapeAreaOptions * _Nullable)getFaceShapeAreaOptions:(AgoraFaceShapeArea) area sourceType:(AgoraMediaSourceType)sourceType NS_SWIFT_NAME(getFaceShapeAreaOptions(_:sourceType:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int getFaceShapeAreaOptions(agora::rtc::FaceShapeAreaOptions::FACE_SHAPE_AREA shapeArea, FaceShapeAreaOptions&amp; options, agora::media::MEDIA_SOURCE_TYPE type = agora::media::PRIMARY_CAMERA_SOURCE) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = "Agora|IRtcEngine")
	int GetFaceShapeAreaOptions(EUABT_FACE_SHAPE_AREA shapeArea, FUABT_FaceShapeAreaOptions&amp; options, EUABT_MEDIA_SOURCE_TYPE type = EUABT_MEDIA_SOURCE_TYPE::PRIMARY_CAMERA_SOURCE);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract getFaceShapeAreaOptions(
    shapeArea: FaceShapeArea,
    type?: MediaSourceType
  ): FaceShapeAreaOptions;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int GetFaceShapeAreaOptions(FACE_SHAPE_AREA shapeArea, ref FaceShapeAreaOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract getFaceShapeAreaOptions(
    shapeArea: FaceShapeArea,
    type?: MediaSourceType
  ): FaceShapeAreaOptions;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;FaceShapeAreaOptions> getFaceShapeAreaOptions(
      {required FaceShapeArea shapeArea,
      MediaSourceType type = MediaSourceType.primaryCameraSource});</codeblock> </p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.5.0</dd>
            </dlentry>
            </dl>
            <p>Calling this method can retrieve the current settings of the beauty effect.</p>
        </section>
        <section id="scenario" deliveryTarget="details">
            <title>Applicable scenarios</title>
            <p>When the user opens the facial beauty area and shaping intensity menu in the app, you can call this method to get the current beauty effect options, then refresh the menu in the user interface according to the results, and update the UI.</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>Call timing</title>
            <p>Call this method after calling <xref keyref="enableVideo" />.</p>
        </section>
        <section id="restriction" deliveryTarget="details">
            <title>Restrictions</title>
            <p>None.</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>Parameters</title>
            <parml>
            <plentry id="area">
                <pt props="ios mac">area</pt>
                <pt props="android cpp unreal bp unity flutter rn electron cs">shapeArea</pt>
                <pd>
                    <p props="cpp ios mac unreal bp unity flutter electron rn cs">Facial enhancement areas. See <xref keyref="FACE_SHAPE_AREA" />.</p>
                    <p props="android hmos">Facial enhancement areas.<ul>
                            <li><ph keyref="FACE_SHAPE_AREA_NONE" />(-1): (Default) Invalid area, no beauty effect applied.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_HEADSCALE" />(100): Head, used to achieve a smaller head effect. The adjustment range is [0,100]; the larger the value, the smaller the head becomes, with a preset value of 100.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_FOREHEAD" />(101): Forehead, used to adjust the hairline height. The adjustment strength ranges from [-100,100], with positive values raising and negative values lowering the hairline. The greater the absolute value, the stronger the effect. The default value is 50.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_FACECONTOUR" />(102): Face contour, used to achieve a slimmer face effect. The adjustment range is [0,100]; the larger the value, the stronger the slimming effect, with a preset value of 10.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_FACELENGTH" />(103): Face length, used to achieve a longer face effect. The adjustment range is [-100,100]; positive values elongate the face, while negative values shorten it. The larger the value, the stronger the enhancement effect, with a preset value of 0.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_FACEWIDTH" />(104): Face width, used to achieve a narrower face effect. The adjustment range is [0,100]; the larger the value, the stronger the narrowing effect, with a preset value of 10.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_CHEEKBONE" />(105): Cheekbone, used to adjust cheekbone width. The adjustment range is [0,100]; the larger the value, the narrower the cheekbones, with a preset set value of 43.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_CHEEK" />(106): Cheeks, used to adjust the cheeks width. The adjustment range is [0,100]; the larger the value, the narrower the cheeks, with a preset value of 50.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_CHIN" />(108): Chin, used to adjust the chin length. The adjustment range is [-100,100]; positive values elongate the chin, while negative values shorten it. The larger the value, the stronger the enhancement effect, with a preset value of -20.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_EYESCALE" />(200):Eyes, used to achieve a larger eye effect. The adjustment range is [0,100]; the larger the value, the larger the eye size, with a preset value of 50.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_EYEDISTANCE" />(201): Eye distance adjustment. The range is [-100, 100], with a default value of 0. The greater the absolute value, the more noticeable the adjustment. Negative values indicate the opposite direction.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_EYEPOSITION" />(202): Eye position adjustment. The range is [-100, 100], with a default value of 0. The greater the absolute value, the more noticeable the adjustment. Negative values indicate the opposite direction.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_LOWEREYELID" />(203): Lower eyelid adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_EYEPUPILS" />(204): Pupil size adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_EYEINNERCORNER" />(205): Inner eye corner adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_EYEOUTERCORNER" />(206): Outer eye corner adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_NOSELENGTH" />(300): Nose length, used to achieve a longer nose effect. The adjustment range is [-100,100]; positive values elongate the nose, while negative values shorten it. The larger the value, the stronger the enhancement effect, with a preset value of -10.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_NOSEWIDTH" />(301): Nose width, used to achieve a slimmer nose effect. The adjustment range is [-100,100]; positive values make the nose wider, while negative values make it narrower. The larger the value, the stronger the enhancement effect, with a preset value of 72.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_NOSEWING" />(302): Nose wing adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_NOSEROOT" />(303): Nose root adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_NOSEBRIDGE" />(304): Nose bridge adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_NOSETIP" />(305): Nose tip adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_NOSEGENERAL" />(306): Overall nose adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_MOUTHSCALE" />(400): Mouth, used to achieve a larger mouth effect. The adjustment strength ranges from [0,100], with larger values resulting in a larger mouth. The default value is 50.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_MOUTHPOSITION" />(401): Mouth position adjustment. The range is [-100, 100], with a default value of 0. The greater the absolute value, the more noticeable the adjustment. Negative values indicate the opposite direction.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_MOUTHSMILE" />(402): Mouth smile adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_MOUTHLIP" />(403): Lip shape adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_EYEBROWPOSITION" />(500): Eyebrow position adjustment. The range is [-100, 100], with a default value of 0. The greater the absolute value, the more noticeable the adjustment. Negative values indicate the opposite direction.</li>
                            <li><ph keyref="FACE_SHAPE_AREA_EYEBROWTHICKNESS" />(501): Eyebrow thickness adjustment. The range is [0, 100], with a default value of 0. The larger the value, the more noticeable the adjustment.</li>
                        </ul>
                    </p>
                </pd>
            </plentry>
            <plentry conkeyref="setFaceShapeAreaOptions/options" props="cpp unreal bp unity cs">
                <pt/>
                <pd/>
            </plentry>
            <plentry conkeyref="setFilterEffectOptions/type">
                <pt />
                <pd />
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, the <apiname keyref="FaceShapeAreaOptions"/> object is returned; when the method call fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="cpp unreal bp unity cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul>
            <ul props="apple android electron rn">
            <li>A pointer to the <apiname keyref="FaceShapeAreaOptions"/> instance, if the method call succeeds.</li>
            <li> <ph keyref="NULL"/> is returned, if the method call fails.</li>
            </ul> </section>
        </refbody>
</reference>
