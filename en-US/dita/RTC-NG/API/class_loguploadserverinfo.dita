<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_loguploadserverinfo">
    <title><ph keyref="LogUploadServerInfo" /></title>
    <shortdesc id="short"><ph id="shortdesc">Configuration information of the log server.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public static class UploadServerInfo {
  public String serverDomain = null;
 
  public String serverPath = null;
 
  public int serverPort = 0;
  public boolean serverHttps = true;
  public UploadServerInfo() {
  serverDomain = null;
  serverPath = null;
  serverPort = 0;
  serverHttps = true;
  }
 
  public UploadServerInfo(String domain, String path, int port, boolean https){
   serverDomain =  domain;
   serverPath = path;
   serverPort = port;
   serverHttps = https;
  }
};</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface UploadServerInfo : NSObject
@property(copy, nonatomic) NSString* _Nullable serverDomain;
 
@property(copy, nonatomic) NSString* _Nullable serverPath;
 
@property(assign, nonatomic) NSInteger serverPort;
 
@property(assign, nonatomic) BOOL serverHttps;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct UploadServerInfo {
  const char* serverDomain;
 
  const char* serverPath;
 
  int serverPort;
 
  bool serverHttps;
 
  UploadServerInfo() : serverDomain(nullptr), serverPath(nullptr), serverPort(0), serverHttps(true) {}
 
  UploadServerInfo(const char* domain, const char* path, int port, bool https) : serverDomain(domain),
serverPath(path), serverPort(port), serverHttps(https) {}
};</codeblock>
            <codeblock props="cs" outputclass="language-csharp" />
            <codeblock props="electron" outputclass="language-typescript">export class LogUploadServerInfo {
  serverDomain?: string;
  serverPath?: string;
  serverPort?: number;
  serverHttps?: boolean;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp" />
            <codeblock props="rn" outputclass="language-typescript">export class LogUploadServerInfo {
  serverDomain?: string;
  serverPath?: string;
  serverPort?: number;
  serverHttps?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class LogUploadServerInfo {
  const LogUploadServerInfo(
      {this.serverDomain, this.serverPath, this.serverPort, this.serverHttps});

  @JsonKey(name: 'serverDomain')
  final String? serverDomain;

  @JsonKey(name: 'serverPath')
  final String? serverPath;

  @JsonKey(name: 'serverPort')
  final int? serverPort;

  @JsonKey(name: 'serverHttps')
  final bool? serverHttps;

  factory LogUploadServerInfo.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$LogUploadServerInfoFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$LogUploadServerInfoToJson(this);
}</codeblock>            
            <codeblock props="unreal" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.1.0</dd>
            </dlentry>
            </dl>
            <p />
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>serverDomain</pt>
                <pd>The domain name of the log server.</pd>
            </plentry>
            <plentry>
                <pt>serverPath</pt>
                <pd>The log storage path on the server.</pd>
            </plentry>
            <plentry>
                <pt>serverPort</pt>
                <pd>The port of the log server.</pd>
            </plentry>
            <plentry>
                <pt>serverHttps</pt>
                <pd>Whether the log server uses the HTTPS protocol:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: Uses HTTPS protocol.</li>
                    <li><codeph><ph keyref="false" /></codeph>: Do not use HTTPS protocol. Uses the HTTP protocol.</li>
                    </ul> </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>