<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_mediasource">
    <title><ph keyref="MediaSource" /></title>
    <shortdesc id="short"><ph id="shortdesc">Information related to the media file to be played and the playback scenario configurations.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class MediaPlayerSource {
  public MediaPlayerSource() {
    this.startPos = 0;
    this.enableCache = false;
    this.url = null;
    this.uri = null;
    this.autoPlay = true;
    this.provider = null;
  }
  String url;
  String uri;
  long startPos;
  boolean autoPlay;
  Boolean isAgoraSource;
  Boolean isLiveSource;
  boolean enableCache;
  IMediaPlayerCustomDataProvider provider;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraMediaSource : NSObject
@property(copy, nonatomic) NSString *_Nullable url;
@property(copy, nonatomic) NSString *_Nullable uri;
@property(assign, nonatomic) NSUInteger startPos;
@property(assign, nonatomic) BOOL enableCache;
@property(assign, nonatomic) BOOL autoPlay;
@property(assign, nonatomic) BOOL isAgoraSource;
@property(assign, nonatomic) BOOL isLiveSource;
@property(copy, nonatomic) AgoraRtcMediaPlayerCustomSourceOnReadCallback _Nonnull playerOnReadCallback;
@property(copy, nonatomic) AgoraRtcMediaPlayerCustomSourceOnSeekCallback _Nonnull playerOnSeekCallback;
@end
@end</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">struct MediaSource {
  const char* url;
  const char* uri;
  int64_t startPos;
  bool autoPlay;
  bool enableCache;
  Optional&lt;bool&gt; isAgoraSource;
  Optional&lt;bool&gt; isLiveSource;
  IMediaPlayerCustomDataProvider* provider;

  MediaSource() : url(NULL), uri(NULL), startPos(0), autoPlay(true), enableCache(false),
                  provider(NULL){
  }
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class MediaSource {

  url?: string;

  uri?: string;

  startPos?: number;

  autoPlay?: boolean;

  enableCache?: boolean;

  isAgoraSource?: boolean;

  isLiveSource?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class MediaSource : OptionalJsonParse
    {
        public string url { set; get; }
        public string uri { set; get; }
        public int64_t startPos { set; get; }
        public bool autoPlay { set; get; }
        public bool enableCache { set; get; }
        public Optional&lt;bool&gt; isAgoraSource = new Optional&lt;bool&gt;();
        public Optional&lt;bool&gt; isLiveSource = new Optional&lt;bool&gt;();
        public IMediaPlayerCustomDataProvider provider { set; get; }

        public MediaSource()
        {
            url = "";
            uri = "";
            startPos = 0;
            autoPlay = true;
            enableCache = false;
            provider = null;
        }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class MediaSource {

  url?: string;

  uri?: string;

  startPos?: number;

  autoPlay?: boolean;

  enableCache?: boolean;

  isAgoraSource?: boolean;

  isLiveSource?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class MediaSource {
  const MediaSource(
      {this.url,
      this.uri,
      this.startPos,
      this.autoPlay,
      this.enableCache,
      this.isAgoraSource,
      this.isLiveSource});

  @JsonKey(name: 'url')
  final String? url;

  @JsonKey(name: 'uri')
  final String? uri;

  @JsonKey(name: 'startPos')
  final int? startPos;

  @JsonKey(name: 'autoPlay')
  final bool? autoPlay;

  @JsonKey(name: 'enableCache')
  final bool? enableCache;

  @JsonKey(name: 'isAgoraSource')
  final bool? isAgoraSource;

  @JsonKey(name: 'isLiveSource')
  final bool? isLiveSource;

  factory MediaSource.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$MediaSourceFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$MediaSourceToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p></section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>url</pt>
                <pd>
                    <p>The URL of the media file to be played.</p>
                    <note>
                        <p props="apple" id="url">If you open a common media resource, pass in the value to <parmname>url</parmname>. If you open a custom media resource, pass in the value to <parmname>playerOnReadCallback</parmname> and <parmname>playerOnSeekCallback</parmname>. Agora recommends that you do not pass in values to all these parameters in one call; otherwise, this call may fail.</p>
                        <p props="android cpp unreal bp unity cs">If you open a common media resource, pass in the value to <parmname>url</parmname>. If you open a custom media resource, pass in the value to <parmname>provider</parmname>. Agora recommends that you do not pass in values to both parameters in one call; otherwise, this call may fail.</p>
                    </note></pd>
            </plentry>
            <plentry>
                <pt>uri</pt>
                <pd>The URI (Uniform Resource Identifier) of the media file.</pd>
            </plentry>
            <plentry>
                <pt>startPos</pt>
                <pd>The starting position (ms) for playback. The default value is 0.</pd>
            </plentry>
            <plentry>
                <pt>autoPlay</pt>
                <pd>Whether to enable autoplay once the media file is opened:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: (Default) Enables autoplay.</li>
                    <li><codeph><ph keyref="false" /></codeph>: Disables autoplay.</li>
                    </ul>
                    <note>
                    <p>If autoplay is disabled, you need to call the <xref keyref="play" /> method to play a media file after it is opened.</p>
                    </note></pd>
            </plentry>
            <plentry>
                <pt>enableCache</pt>
                <pd>Whether to cache the media file when it is being played:<ul>
                    <li><codeph><ph keyref="true" /></codeph>:Enables caching.</li>
                    <li><codeph><ph keyref="false" /></codeph>: (Default) Disables caching.</li>
                    </ul>
                    <note>
                    <ul>
                    <li>Agora only supports caching on-demand audio and video streams that are not transmitted in HLS protocol.</li>
                    <li>If you need to enable caching, pass in a value to <parmname>uri</parmname>; otherwise, caching is based on the <parmname>url</parmname> of the media file.</li>
                    <li>If you enable this function, the Media Player caches part of the media file being played on your local device, and you can play the cached media file without internet connection. The statistics about the media file being cached are updated every second after the media file is played. See <xref keyref="CacheStatistics" />.</li>
                    </ul> </note></pd>
            </plentry>
            <plentry>
                <pt>isAgoraSource</pt>
                <pd>Whether the media resource to be opened is a live stream or on-demand video distributed through Media Broadcast service:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: The media resource to be played is a live or on-demand video distributed through Media Broadcast service.</li>
                    <li><codeph><ph keyref="false" /></codeph>: (Default) The media resource is not a live stream or on-demand video distributed through Media Broadcast service.</li>
                    </ul>
                    <note>
                    <p>If you need to open a live stream or on-demand video distributed through Broadcast Streaming service, pass in the URL of the media resource to <parmname>url</parmname>, and set <parmname>isAgoraSource</parmname> as <codeph><ph keyref="true" /></codeph>; otherwise, you don't need to set the <parmname>isAgoraSource</parmname> parameter.</p>
                    </note></pd>
            </plentry>
            <plentry>
                <pt>isLiveSource</pt>
                <pd>Whether the media resource to be opened is a live stream:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: The media resource is a live stream.</li>
                    <li><codeph><ph keyref="false" /></codeph>: (Default) The media resource is not a live stream.</li>
                    </ul>
                    <p>If the media resource you want to open is a live stream, Agora recommends that you set this parameter as <codeph><ph keyref="true" /></codeph> so that the live stream can be loaded more quickly.</p>
                    <note>
                    <p>If the media resource you open is not a live stream, but you set <parmname>isLiveSource</parmname> as <codeph><ph keyref="true" /></codeph>, the media resource is not to be loaded more quickly.</p>
                    </note> </pd>
            </plentry>
            <plentry props="android cpp unreal bp unity cs">
                    <pt>provider</pt>
                    <pd>
                        <p>The callback for custom media resource files. See <xref keyref="IMediaPlayerCustomDataProvider" />.</p>
                        <note>
                            <p>If you open a custom media resource, pass in the value to <parmname>provider</parmname>. If you open a common media resource, pass in the value to <parmname>url</parmname>. Agora recommends that you do not pass in values to both <parmname>url</parmname> and <parmname>provider</parmname> in one call; otherwise, this call may fail.</p>
                        </note>
                    </pd>
                </plentry>
            <plentry props="apple">
                <pt>playerOnReadCallback</pt>
                <pd>
                    <p>Occurs when the SDK reads the media resource data. See <xref keyref="onReadData" />.</p>
                    <note id="note">
                    <p conkeyref="MediaSource/url" />
                    </note></pd>
            </plentry>
            <plentry props="apple">
                <pt>playerOnSeekCallback</pt>
                <pd>
                    <p>Occurs when the SDK seeks the media resource data. See <xref keyref="onSeek" />.</p>
                    <note conkeyref="MediaSource/note">
                    <p />
                    </note></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>