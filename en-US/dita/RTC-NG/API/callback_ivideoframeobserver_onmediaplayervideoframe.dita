<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_onmediaplayervideoframe">
    <title><ph keyref="onMediaPlayerVideoFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">Gets the video data of the media player.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onMediaPlayerVideoFrame"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">boolean onMediaPlayerVideoFrame(VideoFrame videoFrame, int mediaPlayerId);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)onMediaPlayerVideoFrame:(AgoraOutputVideoFrame * _Nonnull)videoFrame mediaPlayerId:(NSInteger)mediaPlayerId;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual bool onMediaPlayerVideoFrame(VideoFrame&amp; videoFrame, int mediaPlayerId) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">onMediaPlayerVideoFrame?(videoFrame: VideoFrame, mediaPlayerId: number): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual bool OnMediaPlayerVideoFrame(VideoFrame videoFrame, int mediaPlayerId)</codeblock>
            <codeblock props="rn" outputclass="language-typescript">onMediaPlayerVideoFrame?(videoFrame: VideoFrame, mediaPlayerId: number): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(VideoFrame videoFrame, int mediaPlayerId)?
      onMediaPlayerVideoFrame;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>After you successfully register the video frame observer and calling the <xref keyref="createMediaPlayer"/> method, the SDK triggers this callback each time when it receives a video frame. In this callback, you can get the video data of the media player. You can then process the data according to your particular scenarios.</p>
            <p props="hide">After pre-processing, you can send the processed video data back to the SDK through this callback.</p>
            <note type="attention" props="flutter rn electron">Due to framework limitations, this callback does not support sending processed video data back to the SDK.</note>
            <note type="attention">This callback only supports read-only mode.</note>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="onCaptureVideoFrame/videoframe">
                <pt/>
                <pd/>
            </plentry>
            <plentry>
                <pt>mediaPlayerId</pt>
                <pd>The ID of the media player.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native unreal bp unity cs">
            <title>Returns</title>
            <ul>
                <li><codeph><ph keyref="true"/></codeph>: Reserved for future use.</li>
                <li><codeph><ph keyref="false"/></codeph>: Reserved for future use.</li></ul>
        </section>
    </refbody>
</reference>
