<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setaudioscenario">
    <title><ph keyref="setAudioScenario" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets audio scenarios.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setAudioScenario" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setAudioScenario(int scenario);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract setAudioScenario(scenario: Constants.AudioScenarioType): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioScenario:(AgoraAudioScenario)scenario;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setAudioScenario(AUDIO_SCENARIO_TYPE scenario) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int SetAudioScenario(EAUDIO_SCENARIO_TYPE scenario = EAUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_DEFAULT);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setAudioScenario(scenario: AudioScenarioType): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetAudioScenario(AUDIO_SCENARIO_TYPE scenario);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setAudioScenario(scenario: AudioScenarioType): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setAudioScenario(AudioScenarioType scenario);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p/>
        </section>
        <section id="scenario" deliveryTarget="details">
            <title>Applicable scenarios</title>
            <p>This method is suitable for various audio scenarios. You can choose as needed. For example, in scenarios such as music teaching that require high sound quality, it is recommended to set <parmname>scenario</parmname> to <codeph><ph keyref="AUDIO_SCENARIO_GAME_STREAMING" /></codeph>(3).</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>Call timing</title>
            <p>You can call this method either before or after joining a channel.</p>
        </section>
        <section id="restriction" deliveryTarget="details" conkeyref="setAudioProfile/restriction"/>
        <section id="parameters" deliveryTarget="details">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>scenario</pt>
                <pd id="scenario-ng"><ph>The audio scenarios. Under different audio scenarios, the device uses different volume types. </ph><ph props="ios mac cpp framework">See <xref keyref="AUDIO_SCENARIO_TYPE" />.</ph><ul props="android hmos">
                    <li><codeph><ph keyref="AUDIO_SCENARIO_DEFAULT" /></codeph>(0): (Default) Automatic scenario, where the SDK chooses the appropriate audio quality according to the user role and audio route.</li>
                    <li><codeph><ph keyref="AUDIO_SCENARIO_GAME_STREAMING" /></codeph>(3): High-quality audio scenario, where users mainly play music.</li>
                    <li><codeph><ph keyref="AUDIO_SCENARIO_CHATROOM" /></codeph>(5): Chatroom scenario, where users need to frequently switch the user role or mute and unmute the microphone.</li>
                    <li><codeph><ph keyref="AUDIO_SCENARIO_CHORUS" /></codeph>(7): Real-time chorus scenario, where users have good network conditions and require ultra-low latency.<note conkeyref="AUDIO_SCENARIO_TYPE/chorus" /></li>
                    <li><codeph><ph keyref="AUDIO_SCENARIO_MEETING" /></codeph>(8): Meeting scenario that mainly involves the human voice.</li>
                    </ul>
                </pd>
            </plentry></parml></section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp rn electron unity cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
        </refbody>
</reference>