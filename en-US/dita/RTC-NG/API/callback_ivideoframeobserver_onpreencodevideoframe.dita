<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_onpreencodevideoframe">
    <title><ph keyref="onPreEncodeVideoFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs each time the SDK receives a video frame before encoding.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onPreEncodeVideoFrame"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">boolean onPreEncodeVideoFrame(VideoFrame videoFrame);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)onPreEncodeVideoFrame:(AgoraOutputVideoFrame * _Nonnull)srcFrame dstFrame:(AgoraOutputVideoFrame *_Nullable* _Nullable)dstFrame;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual bool onPreEncodeVideoFrame(VideoFrame&amp; videoFrame) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">  onPreEncodeVideoFrame?(videoFrame: VideoFrame): boolean;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public virtual bool OnPreEncodeVideoFrame(VideoFrame videoFrame, VideoFrameBufferConfig config)
        {
            return true;
        }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">  onPreEncodeVideoFrame?(videoFrame: VideoFrame): boolean;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(VideoFrame videoFrame)? onPreEncodeVideoFrame;</codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>After you successfully register the video frame observer, the SDK triggers this callback each time it receives a video frame. In this callback, you can get the video data before encoding and then process the data according to your particular scenarios.</p>
            <p props="native unity electron rn">After processing, you can send the processed video data back to the SDK in this callback.</p>
            <note type="attention">
            <ul>
                <li props="native unity">To get the video data captured from the second screen before encoding, you need to set <apiname keyref="POSITION_PRE_ENCODER"/> (1 &lt;&lt; 2) as a frame position through <xref keyref="getObservedFramePosition"/>.</li>
                <li props="flutter">Due to the limitations of Flutter, this callback does not support sending processed video data back to the SDK.</li>
                <li>The video data that this callback gets has been preprocessed, with its content cropped and rotated, and the image enhanced.</li>
            </ul></note>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="onCaptureVideoFrame/videoframe">
                <pt/>
                <pd/>
            </plentry>
            <plentry props="unity" conkeyref="onCaptureVideoFrame/config">
                <pt/>
                <pd/>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native electron unity rn">
            <title>Returns</title>
            <p conkeyref="onCaptureVideoFrame/return"/>
        </section>
    </refbody>
</reference>
