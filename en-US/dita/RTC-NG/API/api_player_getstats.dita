<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_player_getstats">
    <title><ph keyref="GetStats"/></title>
    <shortdesc id="short"><ph id="shortdesc">Gets statistical information about the current media resource being played.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="GetStats"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void getStats(PlayerGetStatsCallback callback);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"/>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)getStats:(void (^_Nonnull)(AgoraRtePlayerStats* _Nonnull stats, AgoraRteError* _Nullable err))cb ;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">void GetStats(std::function&lt;void(rte::PlayerStats *stats, rte::Error *err)> cb)</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.5.0</dd>
            </dlentry>
            </dl>
            <p>This method is used to obtain statistical information about the player, including decoding, rendering frame rate, audio and video bitrate, etc., and asynchronously returns the results through a callback function.</p>
        </section>
        <section id="timing" deliveryTarget="details">
            <title>Call timing</title>
            <p>Call this method after <xref keyref="OpenWithUrl"/>.</p>
        </section>
        <section id="restriction" deliveryTarget="details">
            <title>Restrictions</title>
            <p>None.</p>
        </section>
        <section id="parameters" deliveryTarget="details">
            <title>Parameters</title>
            <parml>
            <plentry props="cpp apple">
                <pt>cb</pt>
                <pd>An asynchronous callback used to notify the result and possible error information of obtaining the statistics. The callback includes the following parameters:<ul>
                        <li><codeph>stats</codeph>: The information of the media resource currently being played. See <xref keyref="RtePlayerStats"/>.</li>
                        <li><codeph>err</codeph>: The detailed infromation about errors. See <xref keyref="Error"/>.</li></ul></pd>
            </plentry>
            <plentry props="android">
                <pt>callback</pt>
                <pd>An asynchronous callback used to notify the result and possible error information of obtaining the statistics. See the <xref keyref="PlayerGetStatsCallback"/> callback in the <xref keyref="onResult_PlayerGetStatsCallback"/> class.</pd>
            </plentry>
            </parml> </section>
        </refbody>
</reference>
