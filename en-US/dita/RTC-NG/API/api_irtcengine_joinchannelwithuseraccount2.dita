<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_joinchannelwithuseraccount2">
    <title><ph keyref="joinChannelWithUserAccount2" /></title>
    <shortdesc id="short"><ph id="shortdesc">使用 User Account 和 Token 加入频道，并设置频道媒体选项。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="joinChannelWithUserAccount2" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public abstract int joinChannelWithUserAccount(
                    String token, String channelName, String userAccount, ChannelMediaOptions options);</codeblock>
                <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)joinChannelByToken:(NSString * _Nullable)token
                channelId:(NSString * _Nonnull)channelId
              userAccount:(NSString * _Nonnull)userAccount
             mediaOptions:(AgoraRtcChannelMediaOptions * _Nonnull)mediaOptions
              joinSuccess:(void(^ _Nullable)(NSString * _Nonnull channel, NSUInteger uid, NSInteger elapsed))joinSuccessBlock;</codeblock>
                <codeblock props="cpp unreal" outputclass="language-cpp">virtual int joinChannelWithUserAccount(const char* token,
                const char* channelId,
                const char* userAccount,
                const ChannelMediaOptions&amp; options) = 0; </codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int JoinChannelWithUserAccount(FString token, FString channelId, FString userAccount, const FChannelMediaOptions&amp; options);</codeblock>
                <codeblock props="electron" outputclass="language-typescript">abstract joinChannelWithUserAccount(
    token: string,
    channelId: string,
    userAccount: string,
    options?: ChannelMediaOptions
  ): number;</codeblock>
                <codeblock props="unity cs" outputclass="language-csharp">public abstract int JoinChannelWithUserAccount(string token, string channelId, string userAccount,
            ChannelMediaOptions options);</codeblock>
                <codeblock props="rn" outputclass="language-typescript">abstract joinChannelWithUserAccount(
    token: string,
    channelId: string,
    userAccount: string,
    options?: ChannelMediaOptions
  ): number;</codeblock>
                <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; joinChannelWithUserAccount(
    {required String token,
    required String channelId,
    required String userAccount,
    ChannelMediaOptions? options});</codeblock></p>
        </section>
        <section id="detailed_desc" deliveryTarget="details" otherprops="no-title">
            <p id="account">调用该方法前，如果你未调用 <xref keyref="registerLocalUserAccount"/> 注册一个 User Account，调用该方法加入频道时，SDK 会自动为你创建一个 User Account。 Call the<xref keyref="registerLocalUserAccount"/>  method to register a user account, and then call the  method to join a channel, which can shorten the time it takes to enter the channel.</p>
            <p props="flutter rn electron bp">Once a user joins the channel, the user subscribes to the audio and video streams of all the other users in the channel by default, giving rise to usage and billing calculation. <b>To stop subscribing to a specified stream or all remote streams, call the corresponding </b>mute methods.<apiname></apiname></p>
            <p props="android ios mac cpp unreal cs unity">相比 <xref keyref="joinChannelWithUserAccount1" />，该方法增加了 <parmname>options</parmname> 参数，用于在加入频道时设置媒体选项，如是否在频道内发布音视频流等。 By default, the user subscribes to the audio and video streams of all the other users in the channel, giving rise to usage and <b>billings</b>. To unsubscribe, set <parmname>the options parameter</parmname> or <apiname>call the mute methods</apiname> accordingly.</p>
            <note type="attention" id="note">To ensure smooth communication, use the same parameter type to identify the user. For example, if a user joins the channel with a user ID, then ensure all the other users use the user ID too. The same applies to the user account. If a user joins the channel with the Agora Web SDK, ensure that the ID of the user is set to the same parameter type.</note>
        </section>
        <section id="timing" deliveryTarget="details" conkeyref="joinChannel2/timing">
            </section>
            <section id="restriction" deliveryTarget="details" conkeyref="joinChannel2/restriction">
            </section>
            <section id="related" deliveryTarget="details">
                <title>Related callbacks</title>
                <p>After the user successfully joins the channel, the SDK triggers the following callbacks:<ul>
                    <li>The local client: <xref keyref="onLocalUserRegistered" />, <xref keyref="onJoinChannelSuccess" /> and <xref keyref="onConnectionStateChanged" /> callbacks.</li>
                    <li>The remote client: The <xref keyref="onUserJoined" /> callback, if the user is in the COMMUNICATION profile, and the <xref keyref="onUserInfoUpdated" /> callback if the user is a host in the LIVE_BROADCASTING profile.</li>
                    </ul></p>
            </section>
            <section id="parameters" deliveryTarget="details">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="joinChannel2/token">
                <pt />
                <pd />
            </plentry>
            <plentry>
                <pt props="android hmos">channelName</pt>
                <pt props="cpp unreal bp ios mac unity flutter electron rn cs">channelId</pt>
                <pd>
                    <p conkeyref="joinChannel2/channelID_desc" />
                </pd>
            </plentry>
            <plentry id="userAccount">
                <pt>userAccount</pt>
                <pd>
                    <p>The user account. This parameter is used to identify the user in the channel for real-time audio and video engagement. You need to set and manage user accounts yourself and ensure that each user account in the same channel is unique. The maximum length of this parameter is 255 bytes. Ensure that you set this parameter and do not set it as <ph keyref="NULL" />. Supported characters are as follows(89 in total):<ul>
                    <li>The 26 lowercase English letters: a to z.</li>
                    <li>The 26 uppercase English letters: A to Z.</li>
                    <li>All numeric characters: 0 to 9.</li>
                    <li>Space</li>
                    <li>"!", "#", "$", "%", "&amp;", "(", ")", "+", "-", ":", ";", "&lt;", "=", ".", ">", "?", "@", "[", "]", "^", "_", "{", "}", "|", "~", ","</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry conkeyref="joinChannel2/options">
                <pt />
                <pd />
            </plentry>
            <plentry conkeyref="joinChannel2/joinsuccessblock" props="ios mac">
                <pt />
                <pd />
            </plentry>
            </parml> </section>
        <section conkeyref="joinChannel2/return_values" id="return_values"/>
    </refbody>
</reference>
