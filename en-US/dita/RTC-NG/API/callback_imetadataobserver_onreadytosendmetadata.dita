<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_imetadataobserver_onreadytosendmetadata">
    <title><ph keyref="onReadyToSendMetadata"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs when the SDK is ready to send metadata.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onReadyToSendMetadata"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract byte[] onReadyToSendMetadata(long timeStampMs, int sourceType);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (NSData * _Nullable)readyToSendMetadataAtTimestamp:(NSTimeInterval)timestamp
                    sourceType:(AgoraVideoSourceType)sourceType;</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual bool onReadyToSendMetadata(Metadata &amp;metadata, VIDEO_SOURCE_TYPE source_type) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual bool OnReadyToSendMetadata(ref Metadata metadata, VIDEO_SOURCE_TYPE source_type)
        {
            return false;
        }</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
           <codeblock props="flutter" outputclass="language-dart"/> 
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>This callback is triggered when the SDK is ready to send metadata.</p>
            <p props="hide">After receiving this callback, you can call <xref keyref="sendMetaData"/> to send the media metadata.</p>
            <note props="android ios mac cpp unreal bp" type="attention">Ensure that the size of the metadata does not exceed the value set in the <xref keyref="getMaxMetadataSize"/> callback.</note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry props="android ios mac">
                <pt props="android">timeStampMs</pt>
                <pt props="ios mac">timestamp</pt>
                <pd>The timestamp.</pd>
            </plentry>
            <plentry>
                <pt props="android ios mac">sourceType</pt>
                <pt props="cpp unreal bp unity cs">source_type</pt>
                <pd>Video data type. See <xref keyref="VIDEO_SOURCE_TYPE"/>.</pd>
            </plentry>
            <plentry props="cpp unreal bp unity cs">
                <pt>metadata</pt>
                <pd>The metadata that the user wants to send. See <xref keyref="Metadata"/>.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title>Returns</title>
            <ul props="cpp unreal bp unity cs">
            <li><codeph><ph keyref="true"/></codeph>: Send the video frame.</li>
            <li><codeph><ph keyref="false"/></codeph>: Do not send the video frame.</li>
            </ul>
            <p props="ios mac">The metadata that you want to send in the format of NSData, which includes the following parameters:<ul>
            <li><codeph>uid</codeph>: The ID of the remote user who sends the metadata.</li>
            <li><codeph>size</codeph>: The size of the metadata.</li>
            <li><codeph>buffer</codeph>: The metadata data.</li>
            <li><codeph>timeStampMs</codeph>: The NTP timestamp (ms) when the metadata is sent.</li>
            </ul> </p>
            <p props="android">The metadata that you want to send in the format of byte. Ensure that you set the return value.</p>
        </section>
    </refbody>
</reference>
