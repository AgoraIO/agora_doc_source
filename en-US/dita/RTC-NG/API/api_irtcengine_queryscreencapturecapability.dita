<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_queryscreencapturecapability">
    <title><ph keyref="queryScreenCaptureCapability" /></title>
    <shortdesc id="short"><ph id="shortdesc">Queries the highest frame rate supported by the device during screen sharing.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="queryScreenCaptureCapability" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int queryScreenCaptureCapability();</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (AgoraScreenCaptureFrameRateCapability)queryScreenCaptureCapability NS_SWIFT_NAME(queryScreenCaptureCapability());</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">#if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
    virtual int queryScreenCaptureCapability() = 0;
#endif</codeblock>
            <codeblock props="electron" outputclass="language-typescript" />
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int QueryScreenCaptureCapability();</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract queryScreenCaptureCapability(): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;int&gt; queryScreenCaptureCapability();</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.2.0</dd>
            </dlentry>
            </dl>
            <p />
        </section>
        <section id="scenario">
            <title>Applicable scenarios</title>
            <p props="cpp unreal bp unity flutter">This method is for Android and iOS only.</p>
            <p>To ensure optimal screen sharing performance, particularly in enabling high frame rates like 60 fps, Agora recommends you to query the device's maximum supported frame rate using this method beforehand. This way, if the device cannot support such a high frame rate, you can adjust the screen sharing stream accordingly to avoid any negative impact on the sharing quality. If the device does not support high frame rate, you can reduce the frame rate of the screen sharing stream appropriately when sharing the screen to ensure that the sharing effect meets your expectation.</p>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title" /></title>
            <ul props="apple"><li>The highest frame rate supported by the device, if the method is called successfully. See <xref keyref="SCREEN_CAPTURE_FRAMERATE_CAPABILITY" />.</li>
                <li>If the call fails, returns <xref keyref="NULL" />.</li></ul>
                <ul props="cpp unreal bp android unity rn flutter cs">
                    <li><ph>The highest frame rate supported by the device, if the method is called successfully. </ph><ph props="cpp unreal bp unity rn flutter cs">See <xref keyref="SCREEN_CAPTURE_FRAMERATE_CAPABILITY" />.</ph><ul props="android">
                    <li>0: The device supports the frame rate of up to 15 fps.</li>
                    <li>1: The device supports the frame rate of up to 30 fps.</li>
                    <li>2: The device supports the frame rate of up to 60 fps.</li></ul></li>
                    <li>&lt; 0: Failure.</li></ul>
        </section>
    </refbody>
</reference>