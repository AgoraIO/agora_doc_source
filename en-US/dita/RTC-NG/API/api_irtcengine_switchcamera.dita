<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_switchcamera">
    <title><ph keyref="switchCamera" /></title>
    <shortdesc id="short"><ph id="shortdesc">Switches between front and rear cameras.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="switchCamera" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int switchCamera();</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)switchCamera;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int switchCamera() = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SwitchCamera();</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract switchCamera(): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SwitchCamera();</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract switchCamera(): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; switchCamera();</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p id="desc0">You can call this method to dynamically switch cameras based on the actual camera availability during the app's runtime, without having to restart the video stream or reconfigure the video source.</p>
            <note type="attention">
            <ul><li props="cpp unreal bp flutter unity">This method is for Android and iOS only.</li>
            <li id="desc1">This method must be called after the camera is successfully enabled, that is, after the SDK triggers the <xref keyref="onLocalVideoStateChanged" /> callback and returns the local video state as <apiname keyref="LOCAL_VIDEO_STREAM_STATE_CAPTURING"/> (1).</li>
            <li id="desc2">This method only switches the camera for the video stream captured by the first camera, that is, the video source set to <apiname keyref="VIDEO_SOURCE_CAMERA_PRIMARY" props="android"/><apiname keyref="VIDEO_SOURCE_CAMERA" props="apple cpp framework"/> (0) when calling <xref keyref="startCameraCapture"/>.</li>
            <li props="android">This method and <xref keyref="switchCamera2"/> are both used to switch cameras. The difference is that <apiname keyref="switchCamera2"/> switches to a specific camera by specifying the camera ID, while this method switches the direction of the camera (front or rear).</li>
            </ul></note>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp unity rn cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>