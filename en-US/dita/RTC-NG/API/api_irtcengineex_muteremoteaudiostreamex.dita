<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengineex_muteremoteaudiostreamex">
    <title><ph keyref="muteRemoteAudioStreamEx" /></title>
    <shortdesc id="short"><ph id="shortdesc">Stops or resumes receiving the audio stream of a specified user.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="muteRemoteAudioStreamEx" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int muteRemoteAudioStreamEx(int uid, boolean muted, RtcConnection connection);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)muteRemoteAudioStreamEx:(NSUInteger)uid
                          mute:(BOOL)mute
                    connection:(AgoraRtcConnection * _Nonnull)connection;</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int muteRemoteAudioStreamEx(uid_t uid, bool mute, const RtcConnection&amp; connection) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract muteRemoteAudioStreamEx(
    uid: number,
    mute: boolean,
    connection: RtcConnection
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int MuteRemoteAudioStreamEx(uint uid, bool mute, RtcConnection connection);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract muteRemoteAudioStreamEx(
    uid: number,
    mute: boolean,
    connection: RtcConnection
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; muteRemoteAudioStreamEx(
      {required int uid,
      required bool mute,
      required RtcConnection connection});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>This method is used to stops or resumes receiving the audio stream of a specified user. You can call this method before or after joining a channel. If a user leaves a channel, the settings in this method become invalid.</section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>uid</pt>
                <pd>The ID of the specified user.</pd>
            </plentry>
            <plentry>
                <pt props="ios mac cpp unreal bp rn unity electron flutter cs">mute</pt>
                <pt props="android">muted</pt>
                <pd>
                    <p>Whether to stop receiving the audio stream of the specified user:</p>
                    <ul id="ul_pv3_2ft_3qb">
                    <li><codeph><ph keyref="true" /></codeph>: Stop receiving the audio stream of the specified user.</li>
                    <li><codeph><ph keyref="false" /></codeph>: (Default) Resume receiving the audio stream of the specified user.</li>
                    </ul> </pd>
            </plentry>
            <plentry conkeyref="joinChannelEx/connection">
                <pt />
                <pd />
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title" /></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException" /> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul>
            <li props="native unreal bp unity rn electron cs">0: Success.</li>
            <li> &lt; 0: Failure.</li>
            </ul> </section>
    </refbody>
</reference>