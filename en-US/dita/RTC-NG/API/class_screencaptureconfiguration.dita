<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencaptureconfiguration">
    <title><ph keyref="ScreenCaptureConfiguration" /></title>
    <shortdesc id="short"><ph id="shortdesc">The configuration of the captured screen.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">#if (!(TARGET_OS_IPHONE) &amp;&amp; (TARGET_OS_MAC))

__attribute__((visibility("default"))) @interface AgoraScreenCaptureConfiguration: NSObject

@property(assign, nonatomic) BOOL isCaptureWindow;

@property(assign, nonatomic) UInt32 displayId;

@property(assign, nonatomic) UInt32 windowId;

@property(strong, nonatomic) AgoraScreenCaptureParameters* _Nonnull params;

@property(assign, nonatomic) CGRect regionRect;

@end
#endif</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct ScreenCaptureConfiguration {
  bool isCaptureWindow;
  uint32_t displayId;
  Rectangle screenRect;
  view_t windowId;
  ScreenCaptureParameters params;
  Rectangle regionRect;

  ScreenCaptureConfiguration() : isCaptureWindow(false), displayId(0) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FScreenCaptureConfiguration
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	bool isCaptureWindow;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	int displayId;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	FRectangle screenRect;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	int64 windowId;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	FScreenCaptureParameters params;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|ScreenCaptureConfiguration&quot;)
	FRectangle regionRect;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ScreenCaptureConfiguration {
  
  isCaptureWindow?: boolean;
  
  displayId?: number;
  
  screenRect?: Rectangle;
  
  windowId?: any;
  
  params?: ScreenCaptureParameters;
  
  regionRect?: Rectangle;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ScreenCaptureConfiguration
    {
        public ScreenCaptureConfiguration()
        {
            isCaptureWindow = false;
            displayId = 0;
        }

        public bool isCaptureWindow { set; get; }
        public uint displayId { set; get; }
        public Rectangle screenRect { set; get; }
        public uint windowId { set; get; }
        public ScreenCaptureParameters parameters { set; get; }
        public Rectangle regionRect { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ScreenCaptureConfiguration {
  
  isCaptureWindow?: boolean;
  
  displayId?: number;
  
  screenRect?: Rectangle;
  
  windowId?: any;
  
  params?: ScreenCaptureParameters;
  
  regionRect?: Rectangle;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class ScreenCaptureConfiguration {
  const ScreenCaptureConfiguration(
      {this.isCaptureWindow,
      this.displayId,
      this.screenRect,
      this.windowId,
      this.params,
      this.regionRect});

  @JsonKey(name: 'isCaptureWindow')
  final bool? isCaptureWindow;
  @JsonKey(name: 'displayId')
  final int? displayId;
  @JsonKey(name: 'screenRect')
  final Rectangle? screenRect;
  @JsonKey(name: 'windowId')
  final int? windowId;
  @JsonKey(name: 'params')
  final ScreenCaptureParameters? params;
  @JsonKey(name: 'regionRect')
  final Rectangle? regionRect;
  factory ScreenCaptureConfiguration.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$ScreenCaptureConfigurationFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$ScreenCaptureConfigurationToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>isCaptureWindow</pt>
                <pd>Whether to capture the window on the screen:<ul id="ul_ln3_hwd_mqb">
                    <li><codeph><ph keyref="true" /></codeph>: Capture the window.</li>
                    <li><codeph><ph keyref="false" /></codeph>: (Default) Capture the screen, not the window.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>displayId</pt>
                <pd props="cpp unreal bp mac electron unity flutter"><ph props="cpp unreal bp electron unity flutter cs">(macOS only)</ph><ph> The display ID of the screen.</ph><note type="attention">This parameter takes effect only when you want to capture the screen on macOS.</note></pd>
                <pd props="cs">The display ID of the screen. You do not need to set this parameter.</pd>
            </plentry>
            <plentry props="cpp unreal bp electron unity flutter cs">
                <pt>screenRect</pt>
                <pd><ph props="cpp unreal bp electron unity flutter">(Windows only) </ph><ph>The relative position of the shared screen to the virtual screen.</ph><note type="attention" id="note_ifh_swd_mqb">This parameter takes effect only when you want to capture the screen on Windows.</note></pd>
            </plentry>
            <plentry>
                <pt>windowId</pt>
                <pd><ph props="cpp unreal bp unity flutter">(For Windows and macOS only)</ph> <ph>Window ID.</ph><note type="attention">This parameter takes effect only when you want to capture the window.</note></pd>
            </plentry>
            <plentry>
                <pt props="mac cpp unreal bp electron rn flutter">params</pt>
                <pt props="unity cs">parameters</pt>
                <pd><ph props="cpp unreal bp unity flutter">(For Windows and macOS only) </ph><ph>The screen capture configuration. See <xref keyref="ScreenCaptureParameters" />.</ph></pd>
            </plentry>
            <plentry>
                <pt>regionRect</pt>
                <pd props="cpp unreal bp unity flutter electron cs"><ph props="cpp unreal bp unity flutter">(For Windows and macOS only) </ph>The relative position of the shared region to the whole screen. See <xref keyref="Rectangle" />. If you do not set this parameter, the SDK shares the whole screen. If the region you set exceeds the boundary of the screen, only the region within in the screen is shared. If you set width or height in <apiname keyref="Rectangle" /> as 0, the whole screen is shared.</pd>
                <pd props="mac">The relative position of the shared region to the whole screen. The data type is CGRect.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>