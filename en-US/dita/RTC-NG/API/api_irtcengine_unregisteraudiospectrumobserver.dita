<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_unregisteraudiospectrumobserver">
    <title><ph keyref="unregisterAudioSpectrumObserver" /></title>
    <shortdesc id="short"><ph id="shortdesc">Unregisters the audio spectrum observer.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="unregisterAudioSpectrumObserver" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int unRegisterAudioSpectrumObserver(IAudioSpectrumObserver observer);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int) unregisterAudioSpectrumDelegate:(id&lt;AgoraAudioSpectrumDelegate&gt; _Nullable)delegate;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int unregisterAudioSpectrumObserver(agora::media::IAudioSpectrumObserver * observer) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract unregisterAudioSpectrumObserver(
    observer: IAudioSpectrumObserver
  ): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int UnregisterAudioSpectrumObserver();</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract unregisterAudioSpectrumObserver(
    observer: IAudioSpectrumObserver
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">void unregisterAudioSpectrumObserver(AudioSpectrumObserver observer);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <p>After calling <xref keyref="registerAudioSpectrumObserver" />, if you want to disable audio spectrum monitoring, you can call this method.</p>
            <note type="attention" id="note_ymh_dhn_3qb">You can call this method either before or after joining a channel.</note> </section>
        <section id="parameters" props="native">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt props="android cpp electron rn flutter">observer</pt>
                <pt props="ios mac">delegate</pt>
                <pd>The audio spectrum observer. See <xref keyref="IAudioSpectrumObserver" />.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native electron rn unity">
            <title>Returns</title>
            <ul id="ul_ofs_khn_3qb">
            <li>0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul> </section>
    </refbody>
</reference>