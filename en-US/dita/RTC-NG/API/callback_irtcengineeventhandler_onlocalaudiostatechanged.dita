<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onlocalaudiostatechanged">
    <title> <ph keyref="onLocalAudioStateChanged" /> </title>
    <shortdesc id="short"><ph id="shortdesc">Occurs when the local audio stream state changes.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onLocalAudioStateChanged" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onLocalAudioStateChanged(int state, int reason) {}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine localAudioStateChanged:(AgoraAudioLocalState)state reason:(AgoraAudioLocalReason)reason NS_SWIFT_NAME(rtcEngine(_:localAudioStateChanged:reason:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">  virtual void onLocalAudioStateChanged(LOCAL_AUDIO_STREAM_STATE state, LOCAL_AUDIO_STREAM_REASON reason) {
    (void)state;
    (void)reason;
  }</codeblock>
         <codeblock props="bp" outputclass="language-cpp">DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnLocalAudioStateChanged, ELOCAL_AUDIO_STREAM_STATE, state, ELOCAL_AUDIO_STREAM_ERROR, error);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">  onLocalAudioStateChanged?(
    connection: RtcConnection,
    state: LocalAudioStreamState,
    reason: LocalAudioStreamReason
  ): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual void OnLocalAudioStateChanged(RtcConnection connection, LOCAL_AUDIO_STREAM_STATE state, LOCAL_AUDIO_STREAM_REASON reason)</codeblock>
            <codeblock props="rn" outputclass="language-typescript">  onLocalAudioStateChanged?(
    connection: RtcConnection,
    state: LocalAudioStreamState,
    reason: LocalAudioStreamReason
  ): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(RtcConnection connection, LocalAudioStreamState state,
    LocalAudioStreamReason reason)? onLocalAudioStateChanged;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p id="desc">When the state of the local audio stream changes (including the state of the audio capture and encoding), the SDK triggers this callback to report the current state. This callback indicates the state of the local audio stream, and allows you to troubleshoot issues when audio exceptions occur.</p>
            <note id="note" type="attention">When the state is <apiname keyref="LOCAL_AUDIO_STREAM_STATE_FAILED" /> (3), you can view the error information in the <parmname>error</parmname> parameter.</note> </section>
        <section id="parameters">
            <title><ph keyref="callback-section-title" /></title>
            <parml>
            <plentry conkeyref="onJoinChannelSuccess/engine" props="ios mac">
                <pt />
                <pd />
            </plentry>
            <plentry props="unity electron rn flutter cs">
                <pt>connection</pt>
                <pd>The connection information. See <xref keyref="RtcConnection" />.</pd>
            </plentry>
            <plentry>
                <pt>state</pt>
                <pd props="ios mac cpp unreal bp unity electron rn flutter cs">The state of the local audio. See <xref keyref="LOCAL_AUDIO_STREAM_STATE" />.</pd>
                <pd props="android">The state of the local audio.<ul>
                    <li><ph keyref="LOCAL_AUDIO_STREAM_STATE_STOPPED" />(0): The local video is in the initial state.</li>
                    <li><ph keyref="LOCAL_AUDIO_STREAM_STATE_RECORDING" />(1): The local video capturing device starts successfully.</li>
                    <li><ph keyref="LOCAL_AUDIO_STREAM_STATE_ENCODING" />(2): The first video frame is successfully encoded.</li>
                    <li><ph keyref="LOCAL_AUDIO_STREAM_STATE_FAILED" />(3): Fails to start the local video.</li>
                </ul></pd>
            </plentry>
            <plentry>
                <pt>reason</pt>
                <pd props="ios mac cpp unreal bp unity electron rn flutter cs">Reasons for local audio state changes. See <xref keyref="LOCAL_AUDIO_STREAM_REASON" />.</pd>
                <pd props="android">Reasons for local audio state changes.<ul>
                    <li><ph keyref="LOCAL_AUDIO_STREAM_REASON_OK" /> (0): The local video is normal.</li>
                    <li><ph keyref="LOCAL_AUDIO_STREAM_REASON_FAILURE" /> (1): No specified reason for the local audio failure. Remind your users to try to rejoin the channel.</li>
                    <li><ph keyref="LOCAL_AUDIO_STREAM_REASON_DEVICE_NO_PERMISSION" /> (2): No permission to use the local video capturing device. Remind your users to grant permission.</li>
                    <li><ph keyref="LOCAL_AUDIO_STREAM_REASON_DEVICE_BUSY" /> (3): The microphone is in use. Remind your users to check whether another application occupies the microphone. Local audio capture automatically resumes after the microphone is idle for about five seconds. You can also try to rejoin the channel after the microphone is idle.</li>
                    <li><ph keyref="LOCAL_AUDIO_STREAM_REASON_RECORD_FAILURE" /> (4): The local video capture failed.</li>
                    <li><ph keyref="LOCAL_AUDIO_STREAM_REASON_ENCODE_FAILURE" /> (5): The local video encoding fails.</li>
                    <li><ph keyref="LOCAL_AUDIO_STREAM_REASON_INTERRUPTED" /> (8): The local audio capture is interrupted by system calls, smart assistants, or alarm clocks. Prompt your users to end the phone call, smart assistants, or alarm clock if the local audio capture is required.</li>
                </ul></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>