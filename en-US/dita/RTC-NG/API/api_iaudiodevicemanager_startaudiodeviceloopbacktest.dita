<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_iaudiodevicemanager_startaudiodeviceloopbacktest">
    <title><ph keyref="startAudioDeviceLoopbackTest" /></title>
    <shortdesc id="short"><ph id="shortdesc">Starts an audio device loopback test.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startAudioDeviceLoopbackTest" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="mac" outputclass="language-objectivec">-(int)startAudioDeviceLoopbackTest:(int)indicationInterval;</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int startAudioDeviceLoopbackTest(int indicationInterval) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startAudioDeviceLoopbackTest(indicationInterval: number): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StartAudioDeviceLoopbackTest(int indicationInterval);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startAudioDeviceLoopbackTest(indicationInterval: number): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startAudioDeviceLoopbackTest(int indicationInterval);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>This method tests whether the local audio capture device and playback device are working properly. After starting the test, the audio capture device records the local audio, and the audio playback device plays the captured audio. The SDK triggers two independent <xref keyref="onAudioVolumeIndication" /> callbacks at the time interval set in this method, which reports the volume information of the capture device (<parmname>uid</parmname> = 0) and the volume information of the playback device (<parmname>uid</parmname> = 1) respectively.</p>
            <note type="attention">
            <ul>
            <li props="cpp unreal bp unity flutter">This method is for Windows and macOS only.</li>
            <li>You can call this method either before or after joining a channel.</li>
            <li>This method only takes effect when called by the host.</li>
            <li>This method tests local audio devices and does not report the network conditions.</li>
            <li>When you finished testing, call <xref keyref="stopAudioDeviceLoopbackTest" /> to stop the audio device loopback test.</li>
            </ul></note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>indicationInterval</pt>
                <pd>The time interval (ms) at which the SDK triggers the <apiname keyref="onAudioVolumeIndication" /> callback. Agora recommends setting a value greater than 200 ms. This value must not be less than 10 ms; otherwise, you can not receive the <apiname keyref="onAudioVolumeIndication" /> callback.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title" /></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException" /> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul>
            <li props="native unreal bp electron unity rn cs">0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul> </section>
    </refbody>
</reference>