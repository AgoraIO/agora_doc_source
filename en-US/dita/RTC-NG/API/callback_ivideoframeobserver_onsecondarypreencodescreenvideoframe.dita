<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_onsecondarypreencodescreenvideoframe">
    <title><ph keyref="onSecondaryPreEncodeScreenVideoFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">Gets the video data captured from the second screen before encoding.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onSecondaryPreEncodeScreenVideoFrame"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="ios mac" outputclass="language-objectivec"/>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual bool onSecondaryPreEncodeScreenVideoFrame(VideoFrame&amp; videoFrame) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">  onSecondaryPreEncodeScreenVideoFrame?(videoFrame: VideoFrame): boolean;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript">  onSecondaryPreEncodeScreenVideoFrame?(videoFrame: VideoFrame): boolean;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(VideoFrame videoFrame)?
      onSecondaryPreEncodeScreenVideoFrame;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>After you successfully register the video frame observer, the SDK triggers this callback each time it receives a video frame. In this callback, you can get the video data captured from the second screen before encoding and then process the data according to your particular scenarios.</p>
            <p props="native unreal bp unity electron rn cs">After processing, you can send the processed video data back to the SDK in this callback.</p>
            <note props="native unreal bp unity cs" type="attention">
                <ul>
                    <li>This callback is for Windows only.</li>
                    <li>You need to set <apiname keyref="POSITION_PRE_ENCODER" />(1 &lt;&lt; 2) as a frame position by <xref keyref="getObservedFramePosition" /> before you can get the video data captured from the second screen before encoding.</li>
                    <li>The video data that this callback gets has been preprocessed, with its content cropped and rotated, and the image enhanced.</li>
                    <li>This callback does not support sending processed RGBA video data back to the SDK.</li>
                </ul>
            </note>
            <note props="flutter" type="attention">Due to the limitations of Flutter, this callback does not support sending processed video data back to the SDK.</note>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="onCaptureVideoFrame/videoframe">
                <pt/>
                <pd/>
            </plentry>
            </parml> </section>
        <section id="return_values" props="cpp unreal bp electron rn">
            <title>Returns</title>
            <p id="return">
            <ul>
            <li><codeph><ph keyref="true"/></codeph>: Sets the SDK to receive the video frame.</li>
            <li><codeph><ph keyref="false"/></codeph>: Sets the SDK to discard the video frame.</li>
            </ul> </p>
        </section>
    </refbody>
</reference>
