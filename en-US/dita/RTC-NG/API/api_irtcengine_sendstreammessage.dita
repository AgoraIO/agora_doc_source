<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_sendstreammessage">
    <title><ph keyref="sendStreamMessage" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sends data stream messages.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="sendStreamMessage" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int sendStreamMessage(int streamId, byte[] message);</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">public abstract sendStreamMessage(streamId: number, message: ArrayBuffer): number;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)sendStreamMessage:(NSInteger)streamId
                    data:(NSData * _Nonnull)data;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int sendStreamMessage(int streamId,
     const char* data,
     size_t length) = 0;</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|IRtcEngine&quot;)
	int SendStreamMessage(int streamId, const FString&amp; data);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract sendStreamMessage(streamId: number, data: Uint8Array, length: number): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SendStreamMessage(int streamId, byte[] data, uint length);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract sendStreamMessage(
  streamId: number,
  data: Uint8Array,
  length: number
): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; sendStreamMessage(
    {required int streamId, required Uint8List data, required int length});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <note conkeyref="createDataStream2/note" props="android apple cpp unity flutter"/>
            <p>After calling <xref keyref="createDataStream2" />, you can call this method to send data stream messages to all users in the channel.</p>
            <p id="limit">The SDK has the following restrictions on this method:<ul>
            <li>Each client within the channel can have up to 5 data channels simultaneously, with a total shared packet bitrate limit of 30 KB/s for all data channels.</li>
            <li>Each data channel can send up to 60 packets per second, with each packet being a maximum of 1 KB.</li>
            </ul></p>
            <p id="error">A successful method call triggers the <xref keyref="onStreamMessage" /> callback on the remote client, from which the remote user gets the stream message. A failed method call triggers the <xref keyref="onStreamMessageError" /> callback on the remote client.</p>
            <note type="attention">
            <ul>
            <li>This method needs to be called after <xref keyref="createDataStream2" /> and joining the channel.</li>
            <li>In live streaming scenarios, this method only applies to hosts.</li>
            </ul></note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>streamId</pt>
                <pd>The data stream ID. You can get the data stream ID by calling <apiname keyref="createDataStream2" />.</pd>
            </plentry>
            <plentry>
                <pt props="android hmos">message</pt>
                <pt props="electron cpp unreal bp ios mac unity flutter rn cs">data</pt>
                <pd>The message to be sent.</pd>
            </plentry>
            <plentry props="cpp unreal bp unity flutter rn electron cs">
                <pt>length</pt>
                <pd>The length of the data.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp unity electron rn cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>