<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onaudiosubscribestatechanged">
    <title><ph keyref="onAudioSubscribeStateChanged" /></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs when the audio subscribing state changes.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onAudioSubscribeStateChanged" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onAudioSubscribeStateChanged(
    String channel, int uid, int oldState, int newState, int elapseSinceLastState) {}</codeblock>
            <codeblock props="hmos" outputclass="language-arkts">onAudioSubscribeStateChanged?:(channel:string,uid:number,oldState:Constants.StreamSubscribeState,newState:Constants.StreamSubscribeState,elapseSinceLastState:number) =&gt;void;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit *_Nonnull)engine
                didAudioSubscribeStateChange:(NSString * _Nonnull)channelId
                uid:(unsigned int)uid
           oldState:(AgoraStreamSubscribeState)oldState
           newState:(AgoraStreamSubscribeState)newState
elapseSinceLastState:(int)elapseSinceLastState;</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual void onAudioSubscribeStateChanged(const char* channel,
     uid_t uid,
     STREAM_SUBSCRIBE_STATE oldState,
     STREAM_SUBSCRIBE_STATE newState,
     int elapseSinceLastState) {
     (void)channel;
     (void)uid;
     (void)oldState;
     (void)newState;
     (void)elapseSinceLastState;
     }</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintNativeEvent, Category = &quot;Agora|Event&quot;)
	void OnAudioSubscribeStateChanged(const FString&amp; channel, int64 uid, ESTREAM_SUBSCRIBE_STATE oldState, ESTREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">  onAudioSubscribeStateChanged?(
    channel: string,
    uid: number,
    oldState: StreamSubscribeState,
    newState: StreamSubscribeState,
    elapseSinceLastState: number
  ): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual void OnAudioSubscribeStateChanged(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState,
            STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState)</codeblock>
            <codeblock props="rn" outputclass="language-typescript">  onAudioSubscribeStateChanged?(
    channel: string,
    uid: number,
    oldState: StreamSubscribeState,
    newState: StreamSubscribeState,
    elapseSinceLastState: number
  ): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(
      String channel,
      int uid,
      StreamSubscribeState oldState,
      StreamSubscribeState newState,
      int elapseSinceLastState)? onAudioSubscribeStateChanged;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title><ph keyref="callback-section-title" /></title>
            <parml>
            <plentry conkeyref="onJoinChannelSuccess/engine" props="ios mac">
                <pt />
                <pd />
            </plentry>
            <plentry>
                <pt props="android cpp unreal bp unity flutter electron rn cs">channel</pt>
                <pt props="ios mac">channelId</pt>
                <pd>The channel name.</pd>
            </plentry>
            <plentry id="uid">
                <pt>uid</pt>
                <pd>The user ID of the remote user.</pd>
            </plentry>
            <plentry id="oldState">
                <pt>oldState</pt>
                <pd props="ios mac cpp unreal bp unity flutter electron rn cs">The previous subscribing status. See <xref keyref="STREAM_SUBSCRIBE_STATE" />.</pd>
                <pd props="android hmos">The previous subscription status.<ul>
                    <li><ph keyref="SUB_STATE_IDLE" />(0): The initial subscribing state after joining the channel.</li>
                    <li><ph keyref="SUB_STATE_NO_SUBSCRIBED" />(1): Fails to subscribe to the remote stream. Possible reasons:<ul>
                        <li>The remote user:<ul>
                            <li>Calls <xref keyref="muteLocalAudioStream" />(<codeph><ph keyref="true" /></codeph>) to stop sending the local audio stream.</li>
                            <li>Calls <xref keyref="disableAudio" /> to disable the local audio module.</li>
                            <li>Calls <xref keyref="enableLocalAudio" /><codeph><ph keyref="false" /></codeph>) to disable the local audio capture.</li>
                            <li>The role of the remote user is audience.</li>
                            </ul></li>
                        <li>The local user calls the following methods to stop receiving the remote audio streams:<ul id="ul_mjk_gyk_p4b">
                                <li>Sets <parmname>autoSubscribeAudio</parmname> to <codeph><ph keyref="false" /></codeph> when calling <xref keyref="joinChannel2"/> or <xref keyref="updateChannelMediaOptions"/>, which means not to automatically subscribe to any audio streams.</li>
                                <li>Sets <parmname props="android hmos">muted</parmname><parmname props="ios mac cpp unreal bp unity flutter rn electron cs">mute</parmname> to <codeph><ph keyref="true" /></codeph> when calling <xref keyref="muteRemoteAudioStream" /> or <xref keyref="muteAllRemoteAudioStreams" />, which means stopping receiving the remote video streams.</li>
                            </ul></li>
                        </ul></li>
                    <li><ph keyref="SUB_STATE_SUBSCRIBING" />(2): Subscribing.</li>
                    <li><ph keyref="SUB_STATE_SUBSCRIBED" />(3): The remote stream is received, and the subscription is successful.</li>
                    </ul></pd>
            </plentry>
            <plentry id="newState">
                <pt>newState</pt>
                <pd props="ios mac cpp unreal bp unity flutter electron rn cs">The current subscribing status. See <apiname keyref="STREAM_SUBSCRIBE_STATE" />.</pd>
                <pd props="android hmos">The current subscribing status.<ul>
                    <li><ph keyref="SUB_STATE_IDLE" />(0): The initial subscribing state after joining the channel.</li>
                    <li><ph keyref="SUB_STATE_NO_SUBSCRIBED" />(1): Fails to subscribe to the remote stream. Possible reasons:<ul>
                        <li>The remote user:<ul>
                            <li>Calls <xref keyref="muteLocalAudioStream" />(<codeph><ph keyref="true" /></codeph>) to stop sending the local audio stream.</li>
                            <li>Calls <xref keyref="disableAudio" /> to disable the local audio module.</li>
                            <li>Calls <xref keyref="enableLocalAudio" /><codeph><ph keyref="false" /></codeph>) to disable the local audio capture.</li>
                            <li>The role of the remote user is audience.</li>
                            </ul></li>
                        <li>The local user calls the following methods to stop receiving the remote audio streams:<ul>
                                <li>Sets <parmname>autoSubscribeAudio</parmname> to <codeph><ph keyref="false" /></codeph> when calling <xref keyref="joinChannel2"/> or <xref keyref="updateChannelMediaOptions"/>, which means not to automatically subscribe to any audio streams.</li>
                                <li>Sets <parmname props="android hmos">muted</parmname><parmname props="ios mac cpp unreal bp unity flutter rn electron cs">mute</parmname> to <codeph><ph keyref="true" /></codeph> when calling <xref keyref="muteRemoteAudioStream" /> or <xref keyref="muteAllRemoteAudioStreams" />, which means stopping receiving the remote video streams.</li>
                            </ul></li>
                        </ul></li>
                    <li><ph keyref="SUB_STATE_SUBSCRIBING" />(2): Subscribing.</li>
                    <li><ph keyref="SUB_STATE_SUBSCRIBED" />(3): The remote stream is received, and the subscription is successful.</li>
                    </ul></pd>
            </plentry>
            <plentry id="elapseSinceLastState">
                <pt>elapseSinceLastState</pt>
                <pd>The time elapsed (ms) from the previous state to the current state.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>