<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_watermarkoptions">
    <title><ph keyref="WatermarkOptions"/></title>
    <shortdesc id="short"><ph id="shortdesc">Watermark image configurations.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class WatermarkOptions {
  public static class Rectangle {
    public int x = 0;
    public int y = 0;
    public int width = 0;
    public int height = 0;
    public Rectangle() {
      x = 0;
      y = 0;
      width = 0;
      height = 0;
    }
    public Rectangle(int x_, int y_, int width_, int height_) {
      x = x_;
      y = y_;
      width = width_;
      height = height_;
    }
  };
  public boolean visibleInPreview = true;
  public Rectangle positionInLandscapeMode = new Rectangle();
  public Rectangle positionInPortraitMode = new Rectangle();
  public int zOrder = 0;
}
</codeblock>
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface WatermarkOptions : NSObject
@property(assign, nonatomic) BOOL visibleInPreview;
@property(assign, nonatomic) CGRect positionInLandscapeMode;
@property(assign, nonatomic) CGRect positionInPortraitMode;
@property(assign, nonatomic) int zOrder;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct WatermarkOptions {
  bool visibleInPreview;
  Rectangle positionInLandscapeMode;
  Rectangle positionInPortraitMode;
  WatermarkRatio watermarkRatio;
  WATERMARK_FIT_MODE mode;
  int zOrder;

  WatermarkOptions()
      : visibleInPreview(true),
        positionInLandscapeMode(0, 0, 0, 0),
        positionInPortraitMode(0, 0, 0, 0),
        mode(FIT_MODE_COVER_POSITION),
        zOrder(0) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FWatermarkOptions
{
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|WatermarkOptions")
	bool visibleInPreview = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|WatermarkOptions")
	FRectangle positionInLandscapeMode = FRectangle();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|WatermarkOptions")
	FRectangle positionInPortraitMode = FRectangle();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|WatermarkOptions")
	FWatermarkRatio watermarkRatio = FWatermarkRatio();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = "Agora|WatermarkOptions")
	EWATERMARK_FIT_MODE mode = EWATERMARK_FIT_MODE::FIT_MODE_COVER_POSITION;
	FWatermarkOptions(){}
	FWatermarkOptions(const agora::rtc::WatermarkOptions &amp; AgoraData){
		visibleInPreview = AgoraData.visibleInPreview;
		positionInLandscapeMode = FRectangle(AgoraData.positionInLandscapeMode);
		positionInPortraitMode = FRectangle(AgoraData.positionInPortraitMode);
		watermarkRatio = FWatermarkRatio(AgoraData.watermarkRatio);
		mode = static_cast&lt;EWATERMARK_FIT_MODE&gt;(AgoraData.mode);
	}
	agora::rtc::WatermarkOptions CreateAgoraData() const {
		agora::rtc::WatermarkOptions AgoraData;
		AgoraData.visibleInPreview = visibleInPreview;
		AgoraData.positionInLandscapeMode = positionInLandscapeMode.CreateAgoraData();
		AgoraData.positionInPortraitMode = positionInPortraitMode.CreateAgoraData();
		AgoraData.watermarkRatio = watermarkRatio.CreateAgoraData();
		AgoraData.mode = static_cast&lt;agora::rtc::WATERMARK_FIT_MODE&gt;(mode);
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::WatermarkOptions &amp; AgoraData) const {
		positionInLandscapeMode.FreeAgoraData(AgoraData.positionInLandscapeMode);
		positionInPortraitMode.FreeAgoraData(AgoraData.positionInPortraitMode);
		watermarkRatio.FreeAgoraData(AgoraData.watermarkRatio);
	}

};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class WatermarkOptions {

  visibleInPreview?: boolean;

  positionInLandscapeMode?: Rectangle;

  positionInPortraitMode?: Rectangle;

  watermarkRatio?: WatermarkRatio;

  mode?: WatermarkFitMode;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class WatermarkOptions
    {
        public WatermarkOptions()
        {
            visibleInPreview = false;
            positionInLandscapeMode = new Rectangle(0, 0, 0, 0);
            positionInPortraitMode = new Rectangle(0, 0, 0, 0);
            watermarkRatio = new WatermarkRatio();
            mode = WATERMARK_FIT_MODE.FIT_MODE_COVER_POSITION;
        }

        public WatermarkOptions(bool visibleInPreview, Rectangle positionInLandscapeMode,
            Rectangle positionInPortraitMode, WatermarkRatio ratio, WATERMARK_FIT_MODE mode)
        {
            this.visibleInPreview = visibleInPreview;
            this.positionInLandscapeMode = positionInLandscapeMode ?? new Rectangle();
            this.positionInPortraitMode = positionInPortraitMode ?? new Rectangle();
            this.watermarkRatio = ratio ?? new WatermarkRatio();
            this.mode = mode;
        }
        public bool visibleInPreview { set; get; }
        public Rectangle positionInLandscapeMode { set; get; }
        public Rectangle positionInPortraitMode { set; get; }
        public WatermarkRatio watermarkRatio { set; get; }
        public WATERMARK_FIT_MODE mode { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class WatermarkOptions {

  visibleInPreview?: boolean;

  positionInLandscapeMode?: Rectangle;

  positionInPortraitMode?: Rectangle;

  watermarkRatio?: WatermarkRatio;

  mode?: WatermarkFitMode;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">@JsonSerializable(explicitToJson: true, includeIfNull: false)
class WatermarkOptions {
  const WatermarkOptions(
      {this.visibleInPreview,
      this.positionInLandscapeMode,
      this.positionInPortraitMode,
      this.watermarkRatio,
      this.mode});

  @JsonKey(name: 'visibleInPreview')
  final bool? visibleInPreview;

  @JsonKey(name: 'positionInLandscapeMode')
  final Rectangle? positionInLandscapeMode;

  @JsonKey(name: 'positionInPortraitMode')
  final Rectangle? positionInPortraitMode;

  @JsonKey(name: 'watermarkRatio')
  final WatermarkRatio? watermarkRatio;

  @JsonKey(name: 'mode')
  final WatermarkFitMode? mode;

  factory WatermarkOptions.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$WatermarkOptionsFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$WatermarkOptionsToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <p>Configuration options for setting the watermark image to be added.</p>
            </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>visibleInPreview</pt>
                <pd>Whether the watermark is visible in the local preview view:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: (Default) The watermark is visible in the local preview view.</li>
                    <li><codeph><ph keyref="false"/></codeph>: The watermark is not visible in the local preview view.</li>
                    </ul>
                </pd>
            </plentry>
            <plentry>
                <pt>positionInLandscapeMode</pt>
                <pd props="android hmos">The area to display the watermark image in landscape mode. See <xref keyref="Rectangle"/>.</pd>
                <pd props="bp cpp cs electron flutter rn unity unreal">When the adaptation mode of the watermark is <ph keyref="FIT_MODE_COVER_POSITION"/>, it is used to set the area of the watermark image in landscape mode. See <xref keyref="Rectangle"/>.</pd>
                <pd props="apple">The area to display the watermark image in landscape mode. This parameter contains the following members:<ul>
                    <li>x: The horizontal position of the watermark relative to the upper left corner.</li>
                    <li>y: The vertical position of the watermark relative to the upper left corner.</li>
                    <li>width: The width of the watermark area (px).</li>
                    <li>height: The height of the watermark area (px).</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>positionInPortraitMode</pt>
                <pd props="android hmos">The area to display the watermark image in portrait mode. See <xref keyref="Rectangle"/>.</pd>
                <pd props="bp cpp cs electron flutter rn unity unreal">When the adaptation mode of the watermark is <ph keyref="FIT_MODE_COVER_POSITION"/>, it is used to set the area of the watermark image in portrait mode. See <xref keyref="Rectangle"/>.</pd>
                <pd props="apple">The area to display the watermark image in portrait mode. This parameter contains the following members:<ul>
                    <li>x: The horizontal position of the watermark relative to the upper left corner.</li>
                    <li>y: The vertical position of the watermark relative to the upper left corner.</li>
                    <li>width: The width of the watermark area (px).</li>
                    <li>height: The height of the watermark area (px).</li>
                    </ul> </pd>
            </plentry>
            <plentry props="bp cpp cs electron flutter rn unity unreal">
                <pt>watermarkRatio</pt>
                <pd>When the watermark adaptation mode is <ph keyref="FIT_MODE_USE_IMAGE_RATIO"/>, this parameter is used to set the watermark coordinates. See <xref keyref="WatermarkRatio"/>.</pd>
            </plentry>
            <plentry props="bp cpp cs electron flutter rn unity unreal">
                <pt>mode</pt>
                <pd>The adaptation mode of the watermark. See <xref keyref="WATERMARK_FIT_MODE"/>.</pd>
            </plentry>
            <plentry props="native">
                <pt props="native">zOrder</pt>
                <pd props="cpp">Layer order of the watermark image. The default value is 0.</pd>
                <pd props="android apple">Layer order of the watermark image. The default value is 0.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
