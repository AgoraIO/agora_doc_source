<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaengine_registeraudioframeobserver">
    <title><ph keyref="registerAudioFrameObserver" /></title>
    <shortdesc id="short"><ph id="shortdesc">Registers an audio frame observer object.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="registerAudioFrameObserver" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int registerAudioFrameObserver(IAudioFrameObserver observer);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)setAudioFrameDelegate:(id&lt;AgoraAudioFrameDelegate&gt; _Nullable)delegate;</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int registerAudioFrameObserver(IAudioFrameObserver* observer) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract registerAudioFrameObserver(observer: IAudioFrameObserver): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int RegisterAudioFrameObserver(IAudioFrameObserver audioFrameObserver, AUDIO_FRAME_POSITION position, OBSERVER_MODE mode = OBSERVER_MODE.INTPTR);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract registerAudioFrameObserver(observer: IAudioFrameObserver): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">void registerAudioFrameObserver(AudioFrameObserver observer);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>Call this method to register an audio frame observer object (register a callback). When you need the SDK to trigger <xref keyref="onMixedAudioFrame" />, <xref keyref="onRecordAudioFrame" />, <xref keyref="onPlaybackAudioFrame" /> or <xref keyref="onEarMonitoringAudioFrame" /> callback, you need to use this method to register the callbacks.</p>
            <note type="attention">Ensure that you call this method before joining a channel.</note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt props="android cpp unreal bp electron rn flutter">observer</pt>
                <pt props="ios mac">delegate</pt>
                <pt props="unity cs">audioFrameObserver</pt>
                <pd>
                    <p><ph>The observer instance. See <xref keyref="IAudioFrameObserver" />. </ph><ph props="android mac ios unity cpp unreal bp cs">Set the value as <ph keyref="NULL" /> to release the instance. </ph><ph>Agora recommends calling this method after receiving <xref keyref="onLeaveChannel" /> to release the audio observer object.</ph></p>
                </pd>
            </plentry>
            <plentry props="unity cs">
                <pt>mode</pt>
                <pd>The audio data callback mode. See <xref keyref="OBSERVER_MODE" />.</pd>
            </plentry>
            <plentry props="unity">
            <pt>position</pt>
            <pd><ph>The frame position of the audio observer.</ph><ul>
            <li><ph keyref="AUDIO_FRAME_POSITION_PLAYBACK" />(0x0001): This position can observe the playback audio mixed by all remote users, corresponding to the <apiname keyref="onPlaybackAudioFrame" /> callback.</li>
            <li><ph keyref="AUDIO_FRAME_POSITION_RECORD" />(0x0002): This position can observe the collected local user's audio, corresponding to the <apiname keyref="onRecordAudioFrame" /> callback.</li>
            <li><ph keyref="AUDIO_FRAME_POSITION_MIXED" />(0x0004): This position can observe the playback audio mixed by the loacl user and all remote users, corresponding to the <apiname keyref="onMixedAudioFrame" /> callback.</li>
            <li><ph keyref="AUDIO_FRAME_POSITION_BEFORE_MIXING" />(0x0008): This position can observe the audio of a single remote user before mixing, corresponding to the <apiname keyref="onPlaybackAudioFrameBeforeMixing" /> callback.</li>
            <li><ph keyref="AUDIO_FRAME_POSITION_EAR_MONITORING" />(0x0010): This position can observe the in-ear monitoring audio of the local user, corresponding to the <apiname keyref="onEarMonitoringAudioFrame" /> callback.</li>
            </ul>
            </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title" /></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException" /> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul props="android cpp unreal bp rn unity electron cs">
                <li>0: Success.</li>
                <li>&lt; 0: Failure.</li>
            </ul>
            <ul props="ios mac">
            <li><codeph><ph keyref="true" /></codeph>: Success.</li>
            <li><codeph><ph keyref="false" /></codeph>: Failure.</li>
            </ul></section>
    </refbody>
</reference>