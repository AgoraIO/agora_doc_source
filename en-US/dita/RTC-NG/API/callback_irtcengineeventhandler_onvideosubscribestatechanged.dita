<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_irtcengineeventhandler_onvideosubscribestatechanged">
    <title><ph keyref="onVideoSubscribeStateChanged"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs when the video subscribing state changes.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onVideoSubscribeStateChanged"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public void onVideoSubscribeStateChanged(
    String channel, int uid, int oldState, int newState, int elapseSinceLastState) {}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit *_Nonnull)engine
    didVideoSubscribeStateChange:(NSString * _Nonnull)channelId
    uid:(unsigned int)uid
    oldState:(AgoraStreamSubscribeState)oldState
    newState:(AgoraStreamSubscribeState)newState
    elapseSinceLastState:(int)elapseSinceLastState;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual void onVideoSubscribeStateChanged(const char* channel,
     uid_t uid,
     STREAM_SUBSCRIBE_STATE oldState,
     STREAM_SUBSCRIBE_STATE newState,
     int elapseSinceLastState) {
     (void)channel;
     (void)uid;
     (void)oldState;
     (void)newState;
     (void)elapseSinceLastState;
     }</codeblock>
            <codeblock props="electron" outputclass="language-typescript">onVideoSubscribeStateChanged?(channel: string, uid: number, oldState: StreamSubscribeState, newState: StreamSubscribeState, elapseSinceLastState: number): void;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public virtual void OnVideoSubscribeStateChanged(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState,
            STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState)</codeblock>
            <codeblock props="rn" outputclass="language-typescript">onVideoSubscribeStateChanged?(
  channel: string,
  uid: number,
  oldState: StreamSubscribeState,
  newState: StreamSubscribeState,
  elapseSinceLastState: number
): void;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">final void Function(
      String channel,
      int uid,
      StreamSubscribeState oldState,
      StreamSubscribeState newState,
      int elapseSinceLastState)? onVideoSubscribeStateChanged;
</codeblock> </p>
        </section>
        <section id="parameters">
            <title><ph keyref="callback-section-title"/></title>
            
            <parml>
            <plentry conkeyref="onJoinChannelSuccess/engine" props="ios mac">
                <pt/>
                <pd/>
            </plentry>
            <plentry>
                <pt>channel</pt>
                <pd>The channel name.</pd>
            </plentry>
            <plentry>
                <pt>uid</pt>
                <pd>The ID of the remote user.</pd>
            </plentry>
            <plentry>
                <pt>oldState</pt>
                <pd props="ios mac cpp unity electron rn flutter">The previous subscribing status, see <xref keyref="STREAM_SUBSCRIBE_STATE"/> for details.</pd>
                <pd props="android">The previous subscription status.<ul>
                    <li><ph keyref="SUB_STATE_IDLE"/>(0): The initial publishing state after joining the channel.</li>
                    <li><ph keyref="SUB_STATE_NO_SUBSCRIBED"/>(1): Fails to subscribe to the remote stream. Possible reasons:<ul>
                        <li>Remote users:<ul>
                            <li>Calls <xref keyref="muteLocalAudioStream"/>(<codeph><ph keyref="true"/></codeph>) or <xref keyref="muteLocalVideoStream"/>(<codeph><ph keyref="true"/></codeph>) to stop sending local media stream.</li>
                            <li>Calls <xref keyref="disableAudio"/> or <xref keyref="disableVideo"/> to disable the local audio or video module.</li>
                            <li>Calls <xref keyref="enableLocalAudio"/>(<ph keyref="false"/>) or <xref keyref="enableLocalVideo"/>(<ph keyref="false"/>) to disable local audio or video capture.</li>
                            <li>The role of the remote user is audience.</li>
                            </ul></li>
                        <li>The local user calls the following method to stop receiving the remote media stream:<ul>
                            <li>Call <xref keyref="muteRemoteAudioStream"/>(<ph keyref="true"/>) or <xref keyref="muteAllRemoteAudioStreams"/>(<ph keyref="true"/>) to stop receiving the remote audio stream.</li>
                            <li>Call <xref keyref="muteRemoteVideoStream"/>(<ph keyref="true"/>) or <xref keyref="muteAllRemoteVideoStreams"/>(<ph keyref="true"/>) to stop receiving the remote video stream.</li>
                            </ul></li>
                        </ul></li>
                    <li><ph keyref="SUB_STATE_SUBSCRIBING"/>(2): Publishing.</li>
                    <li><ph keyref="SUB_STATE_SUBSCRIBED"/>(3): The remote stream is received, and the subscription is successful.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>newState</pt>
                <pd props="ios mac cpp unity electron rn flutter">The current subscribing status, see <apiname keyref="STREAM_SUBSCRIBE_STATE"/> for details.</pd>
                <pd props="android">The current subscription status.<ul>
                    <li><ph keyref="SUB_STATE_IDLE"/>(0): The initial publishing state after joining the channel.</li>
                    <li><ph keyref="SUB_STATE_NO_SUBSCRIBED"/>(1): Fails to subscribe to the remote stream. Possible reasons:<ul>
                        <li>Remote users:<ul>
                            <li>Calls <xref keyref="muteLocalAudioStream"/>(<codeph><ph keyref="true"/></codeph>) or <xref keyref="muteLocalVideoStream"/>(<codeph><ph keyref="true"/></codeph>) to stop sending local media stream.</li>
                            <li>Calls <xref keyref="disableAudio"/> or <xref keyref="disableVideo"/> to disable the local audio or video module.</li>
                            <li>Calls <xref keyref="enableLocalAudio"/>(<ph keyref="false"/>) or <xref keyref="enableLocalVideo"/>(<ph keyref="false"/>) to disable local audio or video capture.</li>
                            <li>The role of the remote user is audience.</li>
                            </ul></li>
                        <li>The local user calls the following method to stop receiving the remote media stream:<ul>
                            <li>Call <xref keyref="muteRemoteAudioStream"/>(<ph keyref="true"/>) or <xref keyref="muteAllRemoteAudioStreams"/>(<ph keyref="true"/>) to stop receiving the remote audio stream.</li>
                            <li>Call <xref keyref="muteRemoteVideoStream"/>(<ph keyref="true"/>) or <xref keyref="muteAllRemoteVideoStreams"/>(<ph keyref="true"/>) to stop receiving the remote video stream.</li>
                            </ul></li>
                        </ul></li>
                    <li><ph keyref="SUB_STATE_SUBSCRIBING"/>(2): Publishing.</li>
                    <li><ph keyref="SUB_STATE_SUBSCRIBED"/>(3): The remote stream is received, and the subscription is successful.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>elapseSinceLastState</pt>
                <pd>The time elapsed (ms) from the previous state to the current state.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
