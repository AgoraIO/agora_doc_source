<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediarecorder_startrecording">
    <title><ph keyref="startRecording" /></title>
    <shortdesc id="short"><ph id="shortdesc">Starts recording the local audio and video.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startRecording" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public int startRecording(RtcConnection connection, MediaRecorderConfiguration config) {
    RtcEngineImpl engine = null;
    if (mEngineReference == null || (engine = mEngineReference.get()) == null) {
      mEngineReference = null;
      return -7;
    }
    return engine.startRecording(config.storagePath, config.containerFormat, config.streamType,
        config.maxDurationMs, config.recorderInfoUpdateInterval, connection);
  }</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)startRecording:(AgoraRtcConnection * _Nonnull)connection
               config:(AgoraMediaRecorderConfiguration* _Nonnull)config;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int startRecording(const RtcConnection&amp; connection, const media::MediaRecorderConfiguration&amp; config) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startRecording(
    connection: RtcConnection,
    config: MediaRecorderConfiguration
  ): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int StartRecording(RtcConnection connection, MediaRecorderConfiguration config);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startRecording(
    connection: RtcConnection,
    config: MediaRecorderConfiguration
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startRecording(
      {required RtcConnection connection,
      required MediaRecorderConfiguration config});</codeblock>
            <codeblock props="unreal" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <p props="android apple">After successfully getting the <xref keyref="IMediaRecorder" /> object, you can all this method to enable the recoridng of the local audio and video.</p>
            <p props="cpp">After successfully getting the <xref keyref="IMediaRecorder" /> object by calling <xref keyref="queryInterface" />, you can call this method to enable the recoridng of the local audio and video.</p>
            <p props="electron unity rn flutter">After successfully getting the <xref keyref="IMediaRecorder" /> object by calling <xref keyref="getMediaRecorder" />, you can call this method to enable the recoridng of the local audio and video.</p>
            <p>This method can record the audio captured by the local microphone and encoded in AAC format, and the video captured by the local camera and encoded in H.264 format. The SDK can generate a recording file only when it detects audio and video streams; when there are no audio and video streams to be recorded or the audio and video streams are interrupted for more than five seconds, the SDK stops the recording and triggers the <codeph><apiname keyref="onRecorderStateChanged" />(<apiname keyref="RECORDER_STATE_ERROR" />, <apiname keyref="RECORDER_ERROR_NO_STREAM" />)</codeph> callback.</p>
            <p>Once the recording is started, if the video resolution is changed, the SDK stops the recording; if the sampling rate and audio channel changes, the SDK continues recording and generates audio files respectively.</p>
            <note type="attention">Call this method after joining a channel.</note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="joinChannelEx/connection">
                <pt />
                <pd />
            </plentry>
            <plentry>
                <pt>config</pt>
                <pd>The recording configuration. See <xref keyref="MediaRecorderConfiguration" />.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title>Returns</title>
            <ul>
            <li>0: Success.</li>
            <li>&lt; 0: Failure.<ul>
                <li>2: The parameter is invalid. Ensure the following:<ul>
                    <li>The specified path of the recording file exists and is writable.</li>
                    <li>The specified format of the recording file is supported.</li>
                    <li>The maximum recording duration is correctly set.</li>
                    </ul></li>
                <li>4: <xref keyref="IRtcEngine" /> does not support the request. The recording is ongoing or the recording stops because an error occurs.</li>
                <li><ph>7: A method is called before <xref keyref="IRtcEngine" /> is initialized. </ph><ph props="android apple">Ensure that you have called <xref keyref="getMediaRecorder" /> before calling this method</ph>.</li>
                </ul></li>
            </ul> </section>
    </refbody>
</reference>