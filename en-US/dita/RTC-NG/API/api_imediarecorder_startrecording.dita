<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediarecorder_startrecording">
    <title><ph keyref="startRecording" /></title>
    <shortdesc id="short"><ph id="shortdesc">Starts recording audio and video streams.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startRecording" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public int startRecording(MediaRecorderConfiguration config)</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)startRecording:(AgoraMediaRecorderConfiguration* _Nonnull)config;</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int startRecording(const media::MediaRecorderConfiguration&amp; config) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startRecording(config: MediaRecorderConfiguration): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StartRecording(MediaRecorderConfiguration config);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startRecording(config: MediaRecorderConfiguration): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startRecording(MediaRecorderConfiguration config);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>You can call this method to enable the recording function. Agora supports recording the media streams of local and remote users at the same time.</p>
            <p>Before you call this method, ensure the following:<ul>
            <li>The recording object is created through <xref keyref="createMediaRecorder" />.</li>
            <li>The recording observer is registered through <xref keyref="setMediaRecorderObserver" />.</li>
            <li>You have joined the channel which the remote user that you want to record is in.</li>
            </ul></p>
            <p>Supported formats of recording are listed as below:<ul>
            <li>AAC-encoded audio captured by the microphone.</li>
            <li>Video captured by a camera and encoded in H.264 or H.265.</li>
            </ul></p>
            <p>Once the recording is started, if the video resolution is changed, the SDK stops the recording; if the sampling rate and audio channel changes, the SDK continues recording and generates audio files respectively.</p>
            <p>The SDK can generate a recording file only when it detects audio and video streams; when there are no audio and video streams to be recorded or the audio and video streams are interrupted for more than five seconds, the SDK stops the recording and triggers the <codeph><apiname keyref="onRecorderStateChanged" />(<apiname keyref="RECORDER_STATE_ERROR" />, <apiname keyref="RECORDER_ERROR_NO_STREAM" />)</codeph> callback.</p>

            <note type="attention">
            <ul>
            <li>If you want to record the media streams of the local user, ensure the role of the local user is set as broadcaster.</li>
            <li>If you want to record the media streams of a remote user, ensure you have subscribed to the user's media streams before starting the recording.</li>
            </ul></note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>config</pt>
                <pd>The recording configuration. See <xref keyref="MediaRecorderConfiguration" />.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title" /></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException" /> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul>
            <li props="native unreal bp unity rn electron cs">0: Success.</li>
            <li>&lt; 0: Failure.<ul>
                <li>-2: The parameter is invalid. Ensure the following:<ul>
                    <li>The specified path of the recording file exists and is writable.</li>
                    <li>The specified format of the recording file is supported.</li>
                    <li>The maximum recording duration is correctly set.</li>
                    </ul></li>
                <li>-4: <xref keyref="IRtcEngine" /> does not support the request. The recording is ongoing or the recording stops because an error occurs.</li>
                <li>-7: The method is called before <xref keyref="IRtcEngine" /> is initialized. Ensure the <xref keyref="IMediaRecorder" /> object is created before calling this method.</li>
                </ul></li>
            </ul> </section>
    </refbody>
</reference>