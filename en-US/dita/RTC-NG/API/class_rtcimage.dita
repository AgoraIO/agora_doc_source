<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_rtcimage">
    <title><ph keyref="RtcImage" /></title>
    <shortdesc id="short"><ph id="shortdesc">Image properties.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class AgoraImage {
  public String url;
  public int x;
  public int y;
  public int width;
  public int height;
  public int zOrder;
  public double alpha;

  public AgoraImage() {
    this.url = null;
    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
    this.zOrder = 0;
    this.alpha = 1.0;
  }

  public AgoraImage(String url) {
    this.url = url;
    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
    this.zOrder = 0;
    this.alpha = 1.0;
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraImage : NSObject
            @property(strong, nonatomic) NSURL *_Nonnull url;
            @property(assign, nonatomic) CGRect rect;
            @property (assign, nonatomic) NSInteger zOrder;
            @property(assign, nonatomic) double alpha;
            @end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">typedef struct RtcImage {
            const char* url;
            int x;
            int y;
            int width;
            int height;
            int zOrder;
            double alpha;

            RtcImage() : url(NULL), x(0), y(0), width(0), height(0), zOrder(0), alpha(1.0) {}</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FRtcImage
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcImage&quot;)
	FString url;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcImage&quot;)
	int x;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcImage&quot;)
	int y;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcImage&quot;)
	int width;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcImage&quot;)
	int height;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcImage&quot;)
	int zOrder;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|RtcImage&quot;)
	float alpha;
};</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class RtcImage
    {
        public RtcImage()
        {
            url = null;
            x = 0;
            y = 0;
            width = 0;
            height = 0;
            zOrder = 0;
            alpha = 1.0;
        }

        public RtcImage(string url, int x, int y, int width, int height, int zOrder, double alpha)
        {
            this.url = url;
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.zOrder = zOrder;
            this.alpha = alpha;
        }
        public string url { set; get; }
        public int x { set; get; }
        public int y { set; get; }
        public int width { set; get; }
        public int height { set; get; }
        public int zOrder { set; get; }
        public double alpha { set; get; }
    }</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class RtcImage {
  
  url?: string;
  
  x?: number;
  
  y?: number;
  
  width?: number;
  
  height?: number;
  
  zOrder?: number;
  
  alpha?: number;
}</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class RtcImage {
  
  url?: string;
  
  x?: number;
  
  y?: number;
  
  width?: number;
  
  height?: number;
  
  zOrder?: number;
  
  alpha?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class RtcImage {
  const RtcImage(
      {this.url,
      this.x,
      this.y,
      this.width,
      this.height,
      this.zOrder,
      this.alpha});

  @JsonKey(name: 'url')
  final String? url;
  @JsonKey(name: 'x')
  final int? x;
  @JsonKey(name: 'y')
  final int? y;
  @JsonKey(name: 'width')
  final int? width;
  @JsonKey(name: 'height')
  final int? height;
  @JsonKey(name: 'zOrder')
  final int? zOrder;
  @JsonKey(name: 'alpha')
  final double? alpha;
  factory RtcImage.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$RtcImageFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$RtcImageToJson(this);
}</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>This class sets the properties of the watermark and background images in the live video.</p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>url</pt>
                <pd>The HTTP/HTTPS URL address of the image in the live video. The maximum length of this parameter is 1024 bytes.</pd>
            </plentry>
            <plentry props="android cpp unreal bp unity electron rn flutter cs">
                <pt>x</pt>
                <pd>The x-coordinate (px) of the image on the video frame (taking the upper left corner of the video frame as the origin).</pd>
            </plentry>
            <plentry props="android cpp unreal bp unity electron rn flutter cs">
                <pt>y</pt>
                <pd>The y-coordinate (px) of the image on the video frame (taking the upper left corner of the video frame as the origin).</pd>
            </plentry>
            <plentry props="android cpp unreal bp unity electron rn flutter cs">
                <pt>width</pt>
                <pd>The width (px) of the image on the video frame.</pd>
            </plentry>
            <plentry props="android cpp unreal bp unity electron rn flutter cs">
                <pt>height</pt>
                <pd>The height (px) of the image on the video frame.</pd>
            </plentry>
            <plentry props="ios mac">
                <pt>rect</pt>
                <pd>The position and size of the image on the video frame. The data type is CGRect.</pd>
            </plentry>
            <plentry>
                <pt>zOrder</pt>
                <pd>The layer index of the watermark or background image. When you use the watermark array to add a watermark or multiple watermarks, you must pass a value to <parmname>zOrder</parmname> in the range [1,255]; otherwise, the SDK reports an error. In other cases, <parmname>zOrder</parmname> can optionally be passed in the range [0,255], with 0 being the default value. 0 means the bottom layer and 255 means the top layer.</pd>
            </plentry>
            <plentry>
                <pt>alpha</pt>
                <pd>The transparency of the watermark or background image. The range of the value is [0.0,1.0]:<ul>
                    <li>0.0: Completely transparent.</li>
                    <li>1.0: (Default) Opaque.</li>
                    </ul></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>