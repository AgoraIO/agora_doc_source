<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_stopscreencapture2">
    <title><ph keyref="stopScreenCapture2" /></title>
    <shortdesc id="short"><ph id="shortdesc">Stops screen capture.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="stopScreenCapture2" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)stopScreenCapture:(AgoraVideoSourceType)sourceType NS_SWIFT_NAME(stopScreenCapture(_:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int stopScreenCapture(VIDEO_SOURCE_TYPE sourceType) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = "Agora|RtcEngineProxy")
int StopScreenCapture(EVIDEO_SOURCE_TYPE sourceType);
</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract stopScreenCaptureBySourceType(sourceType: VideoSourceType): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StopScreenCapture(VIDEO_SOURCE_TYPE sourceType);</codeblock>
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; stopScreenCaptureBySourceType(VideoSourceType sourceType);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.2.0</dd>
            </dlentry>
            </dl>
            <p>After calling <xref keyref="startScreenCapture2" />to start capturing video from one or more screens, you can call this method and set the <parmname>sourceType </parmname>parameter to stop capturing from the specified screens.</p>
            <note type="attention"><ul>
            <li props="cpp unreal bp flutter unity">This method applies to the macOS and Windows only.</li>
            <li props="cpp unreal bp flutter unity">If you call <xref keyref="startScreenCapture" />, <xref keyref="startScreenCaptureByWindowId" />, or <xref keyref="startScreenCaptureByDisplayId" /> to start screen capure, Agora recommends that you call <xref keyref="stopScreenCapture" /> instead to stop the capture.</li>
            <li props="mac electron cs">If you call <xref keyref="startScreenCaptureByWindowId" /> or <xref keyref="startScreenCaptureByDisplayId" /> to start screen capture, Agora recommends that you call <xref keyref="stopScreenCapture" /> to stop the capture and do not use this one.</li></ul></note>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>sourceType</pt>
                <pd>The type of the video source. See <xref keyref="VIDEO_SOURCE_TYPE" />.</pd>
            </plentry></parml>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title" /></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException" /> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul>
            <li props="native unreal bp electron unity cs">0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul> </section>
    </refbody>
</reference>