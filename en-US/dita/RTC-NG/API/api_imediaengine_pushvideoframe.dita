<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaengine_pushvideoframe">
    <title><ph keyref="pushVideoFrame" /></title>
    <shortdesc id="short"><ph id="shortdesc">Pushes the external raw video frame to the SDK through video tracks.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="pushVideoFrame" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int pushExternalVideoFrameById(AgoraVideoFrame frame, int videoTrackId);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)pushExternalVideoFrame:(AgoraVideoFrame * _Nonnull)frame videoTrackId:(NSUInteger)videoTrackId NS_SWIFT_NAME(pushExternalVideoFrame(_:videoTrackId:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int pushVideoFrame(base::ExternalVideoFrame* frame, unsigned int videoTrackId = 0) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract pushVideoFrame(
    frame: ExternalVideoFrame,
    videoTrackId?: number
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int PushVideoFrame(ExternalVideoFrame frame, uint videoTrackId = 0);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract pushVideoFrame(
    frame: ExternalVideoFrame,
    videoTrackId?: number
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> pushVideoFrame(
    {required ExternalVideoFrame frame, int videoTrackId = 0});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="deprecated" props="android">
            <dlentry>
                <dt>Deprecated:</dt>
                <dd>If you need to push video frames in I422 format, you need to use this method; otherwise, use <xref keyref="pushVideoFrame3"/>.</dd>
            </dlentry>
            </dl>
            <p id="desc1">To publish a custom video source, see the following steps:<ol>
            <li>Call <xref keyref="createCustomVideoTrack"/> to create a video track and get the video track ID.</li>
            <li>Call <xref keyref="joinChannel2"/> to join the channel. In <xref keyref="ChannelMediaOptions"/>, set <parmname>customVideoTrackId</parmname> to the video track ID that you want to publish, and set <parmname>publishCustomVideoTrack</parmname> to <codeph><ph keyref="true"/></codeph>.</li>
            <li>Call this method and specify <parmname>videoTrackId</parmname> as the video track ID set in step 2. You can then publish the corresponding custom video source in the channel.</li></ol></p>
            <note type="danger" id="desc2">After calling this method, even if you stop pushing external video frames to the SDK, the custom video stream will still be counted as the video duration usage and incur charges. Agora recommends that you take appropriate measures based on the actual situation to avoid such video billing.<ul>
            <li>If you no longer need to capture external video data, you can call <xref keyref="destroyCustomVideoTrack"/> to destroy the custom video track.</li>
            <li>If you only want to use the external video data for local preview and not publish it in the channel, you can call <xref keyref="muteLocalVideoStream"/> to cancel sending video stream or call <xref keyref="updateChannelMediaOptions"/> to set <parmname>publishCustomVideoTrack</parmname> to <codeph><ph keyref="false"/></codeph>.</li>
            </ul></note>
            <p props="android">You can push the video frame either by calling this method or by calling <xref keyref="pushVideoFrame3"/>. The difference is that this method does not support video data in Texture format.</p>
        </section>
        <section props="cpp" id="scenario">
            <title>Applicable scenarios</title>
            <p>The SDK supports the ID3D11Texture2D video format since v4.2.3, which is widely used in game scenarios. When you need to push this type of video frame to the SDK, call this method and set the <parmname>format</parmname> in the <parmname>frame</parmname> to <codeph>VIDEO_TEXTURE_ID3D11TEXTURE2D</codeph>, set the <parmname>d3d11_texture_2d</parmname> and <parmname>texture_slice_index</parmname> members, and set the format of the video frame to ID3D11Texture2D.</p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry id="frame">
                <pt>frame</pt>
                <pd>
                    <p>The external raw video frame to be pushed. See <xref keyref="ExternalVideoFrame" />.</p>
                </pd>
            </plentry>
            <plentry id="videotrackid">
                <pt>videoTrackId</pt>
                <pd>The video track ID returned by calling the <apiname keyref="createCustomVideoTrack"/> method. The default value is 0.</pd>
            </plentry>    
            </parml>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="android cpp unreal bp unity rn electron cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul>
            <ul props="apple">
            <li><codeph><ph keyref="true"/></codeph>: Success.</li>
            <li><codeph><ph keyref="false"/></codeph>: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
