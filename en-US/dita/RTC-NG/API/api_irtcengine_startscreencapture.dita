<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startscreencapture">
    <title><ph keyref="startScreenCapture"/></title>
    <shortdesc id="short"><ph id="shortdesc">Starts screen capture.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startScreenCapture"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int startScreenCapture(ScreenCaptureParameters screenCaptureParameters);
</codeblock>
            <codeblock props="ios" outputclass="language-objectivec">- (int)startScreenCapture:(AgoraScreenCaptureParameters2* _Nullable)parameters NS_SWIFT_NAME(startScreenCapture(_:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">#if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
                virtual int startScreenCapture(const ScreenCaptureParameters2&amp; captureParams) = 0;
              #endif</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int StartScreenCapture(const FScreenCaptureParameters2&amp; captureParams);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startScreenCapture(captureParams: ScreenCaptureParameters2): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int StartScreenCapture(ScreenCaptureParameters2 captureParams);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startScreenCapture(captureParams: ScreenCaptureParameters2): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> startScreenCapture(ScreenCaptureParameters2 captureParams);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p id="apisequence" props="android ios cpp unreal bp unity flutter cs">There are two options for enabling screen sharing. You can choose the one that best suits your specific scenario:<ul>
            <li>Call this method before joining a channel, then call <xref keyref="joinChannel2"/> to join channel and set <parmname>publishScreenCaptureVideo</parmname> to <codeph><ph keyref="true"/></codeph> to start screen sharing.</li>
            <li>Call this method after joining a channel, then call <xref keyref="updateChannelMediaOptions"/> and set <parmname>publishScreenCaptureVideo</parmname> to <codeph><ph keyref="true"/></codeph> to start screen sharing.</li>
            </ul></p>
            <p props="ios">When the state of the screen sharing extension process changes, the SDK triggers the <xref keyref="onLocalVideoStateChanged"/> callback accordingly. When the type of <parmname>sourceType</parmname> is <apiname keyref="VIDEO_SOURCE_SCREEN"/>, the <parmname>state</parmname> parameter indicates the state of the screen sharing.</p>
            <note type="attention">
            <ul>
            <li props="cpp unreal bp rn unity flutter cs">This method applies to Android and iOS only.</li>
            <li props="cpp unreal bp rn unity flutter ios cs">On the iOS platform, screen sharing is only available on iOS 12.0 and later.</li>
            <li props="cpp unreal bp ios unity rn flutter cs">The billing for the screen sharing stream is based on the <parmname>dimensions</parmname> in <apiname keyref="ScreenVideoParameters"/>. When you do not pass in a value, Agora bills you at 1280 Ã— 720; when you pass a value in, Agora bills you at that value. For billing details, see <xref keyref="guide-bill"/>.</li>
            <li props="cpp unreal bp ios unity rn flutter cs">If you are using the custom audio source instead of the SDK to capture audio, Agora recommends you add the keep-alive processing logic to your application to avoid screen sharing stopping when the application goes to the background.</li>
            <li props="cpp unreal bp ios unity rn flutter cs">This feature requires high-performance device, and Agora recommends that you use it on iPhone X and later models.</li>
            <li props="cpp unreal bp ios unity rn flutter cs">This method relies on the iOS screen sharing dynamic library <codeph>AgoraReplayKitExtension.xcframework</codeph>. If the dynamic library is deleted, screen sharing cannot be enabled normally.</li>
            <li props="cpp unreal bp android unity rn flutter cs">On the Android platform, if the user has not granted the app screen capture permission, the SDK reports the <xref keyref="onPermissionError"/><codeph>(2)</codeph> callback.</li>
            <li props="cpp unreal bp android unity rn flutter cs">On Android 9 and later, to avoid the application being killed by the system after going to the background, Agora recommends you add the foreground service <codeph>android.permission.FOREGROUND_SERVICE</codeph> to the <codeph>/app/Manifests/AndroidManifest.xml</codeph> file.</li>
            <li props="cpp unreal bp android unity rn flutter cs">Due to performance limitations, screen sharing is not supported on Android TV.</li>
            <li props="cpp unreal bp android unity rn flutter cs">Due to system limitations, if you are using Huawei phones, do not adjust the video encoding resolution of the screen sharing stream during the screen sharing, or you could experience crashes.</li>
            <li props="cpp unreal bp android unity rn flutter cs">Due to system limitations, some Xiaomi devices do not support capturing system audio during screen sharing.</li>
            <li props="cpp unreal bp android unity rn flutter cs">To avoid system audio capture failure when screen sharing, Agora recommends that you set the audio application scenario to <apiname keyref="AUDIO_SCENARIO_GAME_STREAMING"/> by using the <xref keyref="setAudioScenario"/> method before joining the channel.</li>
            </ul></note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry id="params">
                <pt props="ios">parameters</pt>
                <pt props="android">screenCaptureParameters</pt>
                <pt props="cpp unreal bp rn unity flutter cs">captureParams</pt>
                <pd>The screen sharing encoding parameters. The default video dimension is 1920 x 1080, that is, 2,073,600 pixels. Agora uses the value of this parameter to calculate the charges. See <xref keyref="ScreenCaptureParameters2" props="android ios cpp unreal bp rn unity flutter"/>.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="cpp unreal bp android ios unity rn cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph><ul>
                <li props="ios cpp framework">-2 (iOS platform): Empty parameter.</li>
                <li props="android cpp framework">-2 (Android platform): The system version is too low. Ensure that the Android API level is not lower than 21.</li>
                <li props="android cpp framework">-3 (Android platform): Unable to capture system audio. Ensure that the Android API level is not lower than 29.</li>
                </ul></li>
            </ul> </section>
    </refbody>
</reference>
