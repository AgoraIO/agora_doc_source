<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_setscreencapturescenario">
    <title><ph keyref="setScreenCaptureScenario" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the screen sharing scenario.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setScreenCaptureScenario" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int setScreenCaptureScenario(Constants.ScreenScenarioType screenScenario);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)setScreenCaptureScenario:(AgoraScreenScenarioType)scenarioType
  NS_SWIFT_NAME(setScreenCaptureScenario(_:));
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int setScreenCaptureScenario(SCREEN_SCENARIO_TYPE screenScenario) = 0;
</codeblock>
         <codeblock props="bp" outputclass="language-cpp">UFUNCTION(BlueprintCallable, Category = &quot;Agora|RtcEngineProxy&quot;)
	int SetScreenCaptureScenario(ESCREEN_SCENARIO_TYPE screenScenario);</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract setScreenCaptureScenario(screenScenario: ScreenScenarioType): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int SetScreenCaptureScenario(SCREEN_SCENARIO_TYPE screenScenario);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract setScreenCaptureScenario(screenScenario: ScreenScenarioType): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setScreenCaptureScenario(ScreenScenarioType screenScenario);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>When you start screen sharing or window sharing, you can call this method to set the screen sharing scenario. The SDK adjusts the video quality and experience of the sharing according to the scenario.</p> 
        <note>Agora recommends that you call this method before joining a channel.</note>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt props="apple">scenarioType</pt>
                <pt props="android cpp unreal bp rn unity electron flutter cs">screenScenario</pt>
                <pd>The screen sharing scenario. See <xref keyref="SCREEN_SCENARIO_TYPE" />.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown. You need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="native unreal bp electron unity rn cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>
