<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_injectstreamconfig">
    <title><ph keyref="InjectStreamConfig" /></title>
    <shortdesc id="short"><ph id="shortdesc">Configurations of injecting an external audio or video stream.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class LiveInjectStreamConfig {

    public enum AudioSampleRateType {
        TYPE_32000(32000),
        TYPE_44100(44100),
        TYPE_48000(48000);
    }
    public int width;
    public int height;
    public int videoGop;
    public int videoFramerate;
    public int videoBitrate;
    public AudioSampleRateType audioSampleRate;
    public int audioBitrate;
    public int audioChannels;

    public LiveInjectStreamConfig() {
        width = 0;
        height = 0;
        videoGop = 30;
        videoFramerate = 15;
        videoBitrate = 400;
        audioSampleRate = AudioSampleRateType.TYPE_44100;
        audioBitrate = 48;
        audioChannels = 1;
    }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraLiveInjectStreamConfig : NSObject

@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) NSInteger videoGop;
@property(assign, nonatomic) NSInteger videoFramerate;
@property(assign, nonatomic) NSInteger videoBitrate;
@property(assign, nonatomic) AgoraAudioSampleRateType audioSampleRate;
@property(assign, nonatomic) NSInteger audioBitrate;
@property(assign, nonatomic) NSInteger audioChannels;
+ (AgoraLiveInjectStreamConfig *_Nonnull)defaultConfig;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct InjectStreamConfig {
    int width;
    int height;
    int videoGop;
    int videoFramerate;
    int videoBitrate;
    AUDIO_SAMPLE_RATE_TYPE audioSampleRate;
    int audioBitrate;
    int audioChannels;

    InjectStreamConfig()
        : width(0)
        , height(0)
        , videoGop(30)
        , videoFramerate(15)
        , videoBitrate(400)
        , audioSampleRate(AUDIO_SAMPLE_RATE_48000)
        , audioBitrate(48)
        , audioChannels(1)
    {}
    };</codeblock>
<codeblock props="electron" outputclass="language-typescript">export class InjectStreamConfig {
  width?: number
  height?: number
  videoGop?: number
  videoFramerate?: number
  videoBitrate?: number
  audioSampleRate?: AudioSampleRateType
  audioBitrate?: number
  audioChannels?: number
}</codeblock>
              <codeblock props="unity" outputclass="language-csharp">public class InjectStreamConfig
      {
          public InjectStreamConfig()
          {
              width = 0;
              height = 0;
              videoGop = 30;
              videoFramerate = 15;
              videoBitrate = 400;
              audioSampleRate = AUDIO_SAMPLE_RATE_TYPE.AUDIO_SAMPLE_RATE_48000;
              audioBitrate = 48;
              audioChannels = 1;
          }
  
          public InjectStreamConfig(int width, int height, int videoGop, int videoFramerate, int videoBitrate,
              AUDIO_SAMPLE_RATE_TYPE audioSampleRate, int audioBitrate, int audioChannels)
          {
              this.width = width;
              this.height = height;
              this.videoGop = videoGop;
              this.videoFramerate = videoFramerate;
              this.videoBitrate = videoBitrate;
              this.audioSampleRate = audioSampleRate;
              this.audioBitrate = audioBitrate;
              this.audioChannels = audioChannels;
          }
  
          public int width { set; get; }
          public int height { set; get; }
          public int videoGop { set; get; }
          public int videoFramerate { set; get; }
          public int videoBitrate { set; get; }
          public AUDIO_SAMPLE_RATE_TYPE audioSampleRate { set; get; }
          public int audioBitrate { set; get; }
          public int audioChannels { set; get; }
      }</codeblock>
              <codeblock props="rn" outputclass="language-typescript" />
              <codeblock props="flutter" outputclass="language-dart">class InjectStreamConfig {
    const InjectStreamConfig(
        {this.width,
        this.height,
        this.videoGop,
        this.videoFramerate,
        this.videoBitrate,
        this.audioSampleRate,
        this.audioBitrate,
        this.audioChannels});
  
    @JsonKey(name: 'width')
    final int? width;
    @JsonKey(name: 'height')
    final int? height;
    @JsonKey(name: 'videoGop')
    final int? videoGop;
    @JsonKey(name: 'videoFramerate')
    final int? videoFramerate;
    @JsonKey(name: 'videoBitrate')
    final int? videoBitrate;
    @JsonKey(name: 'audioSampleRate')
    final AudioSampleRateType? audioSampleRate;
    @JsonKey(name: 'audioBitrate')
    final int? audioBitrate;
    @JsonKey(name: 'audioChannels')
    final int? audioChannels;
    factory InjectStreamConfig.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
        _$InjectStreamConfigFromJson(json);
    Map&lt;String, dynamic&gt; toJson() =&gt; _$InjectStreamConfigToJson(this);
  }</codeblock>            
            <codeblock props="unreal" outputclass="language-cpp" /></p>
          </section>
        <section id="detailed_desc">
            <note conkeyref="addInjectStreamUrl/inject-sunset-note" props="cn" />
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry props="android cpp unity flutter electron rn">
                <pt>width</pt>
                <pd>The width of the external video stream after injecting. The default value is 0, which represents the same width as the original.</pd>
            </plentry>
            <plentry props="android cpp unity flutter electron rn">
                <pt>height</pt>
                <pd>The height of the external video stream after injecting. The default value is 0, which represents the same height as the original.</pd>
            </plentry>
            <plentry props="ios mac">
                <pt>size</pt>
                <pd>The size of the external video stream after injecting.</pd>
            </plentry>
            <plentry>
                <pt>videoGop</pt>
                <pd>The GOP (in frames) of injecting the external video stream. The default value is 30.</pd>
            </plentry>
            <plentry>
                <pt>videoFrameRate</pt>
                <pd>The frame rate (fps) of injecting the external video stream. The default rate is 15 fps.</pd>
            </plentry>
            <plentry>
                <pt>videoBitrate</pt>
                <pd>
                    <p>The bitrate (Kbps) of injecting the external video stream. The default value is 400 Kbps.</p>
                    <note type="attention">The bitrate setting is closely linked to the video resolution. If the bitrate you set is beyond a reasonable range, the SDK sets it within a reasonable range.</note>
                </pd>
            </plentry>
            <plentry>
                <pt>audioSampleRate</pt>
                <pd>
                    <p>The sampling rate (Hz) of injecting the external audio stream. The default value is 48000 Hz. See <xref keyref="AUDIO_SAMPLE_RATE_TYPE" />.</p>
                    <note type="attention">Agora recommends using the default value.</note> </pd>
            </plentry>
            <plentry>
                <pt>audioBitrate</pt>
                <pd>
                    <p>The bitrate (Kbps) of injecting the external audio stream. The default value is 48 Kbps.</p>
                    <note type="attention">Agora recommends using the default value.</note> </pd>
            </plentry>
            <plentry>
                <pt>audioChannels</pt>
                <pd>
                    <p>The number of channels of the external audio stream after injecting.<ul>
                    <li>1: (Default) Mono.</li>
                    <li>2: Stereo.</li>
                    </ul> </p>
                    <note type="attention">Agora recommends using the default value.</note> </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>