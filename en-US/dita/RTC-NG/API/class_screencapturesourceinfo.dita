<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencapturesourceinfo">
    <title><ph keyref="ScreenCaptureSourceInfo" /></title>
    <shortdesc id="short"><ph id="shortdesc">The information about the specified shareable window or screen. <ph props="cpp">It is returned in <xref keyref="IScreenCaptureSourceList" />.</ph></ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraScreenCaptureSourceInfo : NSObject
@property(assign, nonatomic) AgoraScreenCaptureSourceType type;
@property(assign, nonatomic) CGWindowID sourceId;
@property(copy, nonatomic) NSString* _Nonnull sourceName;
@property(strong, nonatomic) NSImage* _Nonnull thumbImage;
@property(strong, nonatomic) NSImage* _Nullable iconImage;
@property(copy, nonatomic) NSString* _Nonnull processPath;
@property(copy, nonatomic) NSString* _Nonnull sourceTitle;
@property(assign, nonatomic) BOOL primaryMonitor;

@end
</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct ScreenCaptureSourceInfo {
    ScreenCaptureSourceType type;
    view_t sourceId;
    const char* sourceName;
    ThumbImageBuffer thumbImage;
    ThumbImageBuffer iconImage;
    const char* processPath;
    const char* sourceTitle;
    bool primaryMonitor;
#if defined(_WIN32)
    bool minimizeWindow;
  ScreenCaptureSourceInfo() : type(ScreenCaptureSourceType_Unknown), sourceId(nullptr), sourceName(nullptr),
                              processPath(nullptr), sourceTitle(nullptr), primaryMonitor(false), isOccluded(false), minimizeWindow(false) {}
#else
  ScreenCaptureSourceInfo() : type(ScreenCaptureSourceType_Unknown), sourceId(nullptr), sourceName(nullptr), processPath(nullptr), sourceTitle(nullptr), primaryMonitor(false), isOccluded(false) {}
#endif
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ScreenCaptureSourceInfo {
  
  type?: ScreenCaptureSourceType;
  
  sourceId?: any;
  
  sourceName?: string;
  
  thumbImage?: ThumbImageBuffer;
  
  iconImage?: ThumbImageBuffer;
  
  processPath?: string;
  
  sourceTitle?: string;
  
  primaryMonitor?: boolean;

  minimizeWindow?: boolean;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class ScreenCaptureSourceInfo
    {
        public ScreenCaptureSourceType type { set; get; }
        public view_t sourceId { set; get; }
        public string sourceName { set; get; }
        public ThumbImageBuffer thumbImage { set; get; }
        public ThumbImageBuffer iconImage { set; get; }
        public string processPath { set; get; }
        public string sourceTitle { set; get; }
        public bool primaryMonitor { set; get; }

        public ScreenCaptureSourceInfo()
        {
            type = ScreenCaptureSourceType.ScreenCaptureSourceType_Unknown;
            sourceId = 0;
            sourceName = "";
            processPath = "";
            sourceTitle = "";
            primaryMonitor = false;
            thumbImage = new ThumbImageBuffer();
            iconImage = new ThumbImageBuffer();
        }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ScreenCaptureSourceInfo {
  
  type?: ScreenCaptureSourceType;
  
  sourceId?: any;
  
  sourceName?: string;
  
  thumbImage?: ThumbImageBuffer;
  
  iconImage?: ThumbImageBuffer;
  
  processPath?: string;
  
  sourceTitle?: string;
  
  primaryMonitor?: boolean;

  minimizeWindow?: boolean;
  }</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class ScreenCaptureSourceInfo {
  const ScreenCaptureSourceInfo(
      {this.type,
      this.sourceId,
      this.sourceName,
      this.thumbImage,
      this.iconImage,
      this.processPath,
      this.sourceTitle,
      this.primaryMonitor,
      this.minimizeWindow});

  @JsonKey(name: 'type')
  final ScreenCaptureSourceType? type;

  @JsonKey(name: 'sourceId')
  final int? sourceId;

  @JsonKey(name: 'sourceName')
  final String? sourceName;

  @JsonKey(name: 'thumbImage')
  final ThumbImageBuffer? thumbImage;

  @JsonKey(name: 'iconImage')
  final ThumbImageBuffer? iconImage;

  @JsonKey(name: 'processPath')
  final String? processPath;

  @JsonKey(name: 'sourceTitle')
  final String? sourceTitle;

  @JsonKey(name: 'primaryMonitor')
  final bool? primaryMonitor;

  @JsonKey(name: 'minimizeWindow')
  final bool? minimizeWindow;

  factory ScreenCaptureSourceInfo.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$ScreenCaptureSourceInfoFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$ScreenCaptureSourceInfoToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>type</pt>
                <pd>The type of the shared target. See <xref keyref="ScreenCaptureSourceType" />.</pd>
            </plentry>
            <plentry>
                <pt>sourceId</pt>
                <pd>The window ID for a window or the display ID for a screen.</pd>
            </plentry>
            <plentry>
                <pt>sourceName</pt>
                <pd>The name of the window or screen. UTF-8 encoding.</pd>
            </plentry>
            <plentry>
                <pt>thumbImage</pt>
                <pd><ph>The image content of the thumbnail. </ph><ph>See <xref keyref="ThumbImageBuffer" props="cpp electron unity rn flutter" /><xref keyref="nsimage-link" props="mac" />.</ph></pd>
            </plentry>
            <plentry>
                <pt>iconImage</pt>
                <pd><ph>The image content of the icon. </ph><ph>See <xref keyref="ThumbImageBuffer" props="cpp electron unity rn flutter" /><xref keyref="nsimage-link" props="mac" />.</ph></pd>
            </plentry>
            <plentry>
                <pt>processPath</pt>
                <pd>The process to which the window belongs. UTF-8 encoding.</pd>
            </plentry>
            <plentry>
                <pt>sourceTitle</pt>
                <pd>The title of the window. UTF-8 encoding.</pd>
            </plentry>
            <plentry>
                <pt>primaryMonitor</pt>
                <pd>Determines whether the screen is the primary display:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: The screen is the primary display.</li>
                    <li><codeph><ph keyref="false" /></codeph>: The screen is not the primary display.</li>
                    </ul></pd>
            </plentry>
            <plentry props="cpp flutter rn electron">
                <pt>minimizeWindow</pt>
                <pd>(For Windows only) Whether the window is minimized:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: The window is minimized.</li>
                    <li><codeph><ph keyref="false" /></codeph>: The window is not minimized.</li>
                    </ul></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>