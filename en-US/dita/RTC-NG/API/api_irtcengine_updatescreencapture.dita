<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_updatescreencapture">
    <title><ph keyref="updateScreenCapture" /></title>
    <shortdesc id="short"><ph id="shortdesc">Updates the screen capturing parameters.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="updateScreenCapture" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios" outputclass="language-objectivec">- (int)updateScreenCapture:(AgoraScreenCaptureParameters2* _Nonnull)parameters NS_SWIFT_NAME(updateScreenCapture(_:));</codeblock>
            <codeblock props="cpp unreal bp" outputclass="language-cpp">virtual int updateScreenCapture(const ScreenCaptureParameters2&amp; captureParams) = 0;
</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract updateScreenCapture(captureParams: ScreenCaptureParameters2): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int UpdateScreenCapture(ScreenCaptureParameters2 captureParams);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract updateScreenCapture(captureParams: ScreenCaptureParameters2): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; updateScreenCapture(ScreenCaptureParameters2 captureParams);</codeblock>
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p>If the system audio is not captured when screen sharing is enabled, and then you want to update the parameter configuration and publish the system audio, you can refer to the following steps:<ol>
                <li>Call this method, and set <parmname>captureAudio</parmname> to <codeph><ph keyref="true" /></codeph>.</li>
                <li>Call <xref keyref="updateChannelMediaOptions" />, and set <parmname>publishScreenCaptureAudio</parmname> to <codeph><ph keyref="true" /></codeph> to publish the audio captured by the screen.</li>
                </ol></p>
            <note type="attention">
                <ul>
                    <li props="cpp unreal bp rn unity flutter cs">This method applies to Android and iOS only.</li>
                    <li props="cpp unreal bp rn unity flutter ios cs">On the iOS platform, screen sharing is only available on iOS 12.0 and later.</li>
                </ul>
            </note>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt props="ios">parameters</pt>
                <pt props="cpp unreal bp electron unity rn flutter cs">captureParams</pt>
                <pd>The screen sharing encoding parameters. The default video resolution is 1920 Ã— 1080, that is, 2,073,600 pixels. Agora uses the value of this parameter to calculate the charges. See <xref keyref="ScreenCaptureParameters2" />.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title" /></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException" /> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul>
            <li props="ios cpp unreal bp electron unity rn cs">0: Success.</li>
            <li>&lt; 0: Failure.<ul conkeyref="startScreenCaptureByDisplayId/err">
                    <li />
                    </ul> </li>
            </ul> </section>
    </refbody>
</reference>