<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_getobservedframeposition">
    <title><ph keyref="getObservedFramePosition"/></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the frame position for the video observer.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="getObservedFramePosition"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock" props="rtc-ng">
            <codeblock props="android" outputclass="language-java">int getObservedFramePosition();</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (unsigned int)getObservedFramePosition;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual uint32_t getObservedFramePosition() {
                return base::POSITION_POST_CAPTURER | base::POSITION_PRE_RENDERER;
                }</codeblock>
            <codeblock props="cs" outputclass="language-csharp"/> </p>
            <p outputclass="codeblock" props="rtc">
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="ios mac" outputclass="language-objectivec"/>
            <codeblock props="cpp" outputclass="language-cpp">virtual uint32_t getObservedFramePosition() { return static_cast&lt;uint32_t&gt;(POSITION_POST_CAPTURER | POSITION_PRE_RENDERER); }</codeblock> </p>
            <p outputclass="codeblock">
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="cs" outputclass="language-csharp">public virtual VIDEO_OBSERVER_POSITION GetObservedFramePosition()
        {
            return VIDEO_OBSERVER_POSITION.POSITION_POST_CAPTURER | VIDEO_OBSERVER_POSITION.POSITION_PRE_RENDERER;
        }</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since" props="rtc">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v3.0.1</dd>
            </dlentry>
            </dl>
            <p>After successfully registering the video data observer, the SDK uses this callback to determine whether to trigger <xref keyref="onCaptureVideoFrame"/> , <xref keyref="onRenderVideoFrame"/> and <xref keyref="onPreEncodeVideoFrame"/> callback at each specific video frame processing position, so that you can observe the locally collected video data, the video data sent by the remote end, and the video data before encoding. You can set one or more positions you need to observe by modifying the return value according to your scenario:</p>
            <p>
            <ul>
            <li><apiname keyref="POSITION_POST_CAPTURER" props="hide"/>(1 &lt;&lt; 0) : The position after capturing the video data, which corresponds to the <apiname keyref="onCaptureVideoFrame"/> callback.</li>
            <li><apiname keyref="POSITION_PRE_RENDERER" props="hide"/>(1 &lt;&lt; 1): The position before receiving the remote video data, which corresponds to the <apiname keyref="onRenderVideoFrame"/> callback.</li>
            <li><apiname keyref="POSITION_PRE_ENCODER" props="hide"/>(1 &lt;&lt; 2): The position before encoding the video data, which corresponds to the <apiname keyref="onPreEncodeVideoFrame"/> callback.</li>
            </ul></p>
            <note type="attention">
            <ul>
            <li>Use '|' (the OR operator) to observe multiple frame positions.</li>
            <li>This callback observes <apiname keyref="POSITION_POST_CAPTURER" props="hide"/>(1 &lt;&lt; 0) and <apiname keyref="POSITION_PRE_RENDERER" props="hide"/>(1 &lt;&lt; 1) by default.</li>
            <li>To conserve the system consumption, you can reduce the number of frame positions that you want to observe.</li>
            </ul> </note> </section>
        <section id="return_values">
            <title>Returns</title>
            <p props="cpp">A bit mask that controls the frame position of the video observer. See <xref keyref="VIDEO_OBSERVER_POSITION"/> for details.</p>
            <p props="ios mac">A bit mask that controls the frame position of the video observer. <ph props="rtc">See <xref keyref="VIDEO_OBSERVER_POSITION"/>.</ph>
            <ul props="rtc-ng">
            <li>(1 &lt;&lt; 0) : The position after capturing the video data, which corresponds to the <apiname keyref="onCaptureVideoFrame"/> callback.</li>
            <li>(1 &lt;&lt; 1): The position before receiving the remote video data, which corresponds to the <apiname keyref="onRenderVideoFrame"/> callback.</li>
            <li>(1 &lt;&lt; 2): The position before encoding the video data, which corresponds to the <apiname keyref="onPreEncodeVideoFrame"/> callback.</li>
            </ul> </p>
            <p props="android">A bit mask that controls the frame position of the video observer.
            <ul>
            <li><apiname keyref="POSITION_POST_CAPTURER"/>(1 &lt;&lt; 0) : The position after capturing the video data, which corresponds to the <apiname keyref="onCaptureVideoFrame"/> callback.</li>
            <li><apiname keyref="POSITION_PRE_RENDERER"/>(1 &lt;&lt; 1): The position before receiving the remote video data, which corresponds to the <apiname keyref="onRenderVideoFrame"/> callback.</li>
            <li><apiname keyref="POSITION_PRE_ENCODER"/>(1 &lt;&lt; 2): The position before encoding the video data, which corresponds to the <apiname keyref="onPreEncodeVideoFrame"/> callback.</li>
            </ul> </p>
        </section>
    </refbody>
</reference>
