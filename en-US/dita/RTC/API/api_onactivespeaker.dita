<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_onactivespeaker">
    <title><ph keyref="onActiveSpeaker"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs when the most active speaker is detected.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="onActiveSpeaker" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public void onActiveSpeaker(int uid) {}</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine activeSpeaker:(NSUInteger)speakerUid;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual void onActiveSpeaker(uid_t uid) { (void)uid; }</codeblock>
                <codeblock props="electron" outputclass="language-typescript">on(evt: EngineEvents.ACTIVE_SPEAKER, cb: (uid: number) => void): this;</codeblock>
                <codeblock props="unity" outputclass="language-csharp"/>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart"/>
        </p>
        </section>
        <section id="detailed_desc">
   
   <p>After a successful call of <xref keyref="enableAudioVolumeIndication"/>, the SDK continuously detects which remote user has the loudest volume. During the current period, the remote user, who is detected as the loudest for the most times, is the most active user.</p>
   <p>When the number of users is no less than two and an active speaker exists, the SDK triggers this callback and reports the <parmname>uid</parmname> of the most active speaker.<ul>
  <li>If the most active speaker is always the same user, the SDK triggers the callback only once<apiname keyref="onActiveSpeaker"/>.</li>
  <li>If the most active speaker changes to another user, the SDK triggers this callback again and reports the <parmname>uid</parmname> of the new active speaker.</li>
       </ul>
   </p>
        </section>
        <section id="parameters"><title>Parameter</title>
   <parml>
                <plentry conkeyref="onJoinChannelSuccess/engine" props="ios mac">
                    <pt/>
                    <pd/>
                </plentry>
       <plentry id="uid">
  <pt props="android windows">uid</pt>
           <pt props="ios mac">speakerUid</pt>
  <pd>The user ID of the most active speaker.</pd>
       </plentry>
   </parml>
        </section>
    </refbody>
</reference>
