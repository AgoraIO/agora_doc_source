<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_livetranscoding">
    <title><ph keyref="LiveTranscoding" /></title>
    <shortdesc id="short"><ph id="shortdesc">Transcoding configurations for the media push.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock" props="rtc-ng">
            <codeblock props="android" outputclass="language-java">public LiveTranscoding() {
    width = 360;
    height = 640;
    videoBitrate = 400;
    videoCodecProfile = VideoCodecProfileType.HIGH;
    videoGop = 30;
    videoFramerate = 15;
    watermark = new AgoraImage();
    backgroundImage = new AgoraImage();

    lowLatency = false;
    audioSampleRate = AudioSampleRateType.TYPE_44100;
    audioBitrate = 48;
    audioChannels = 1;
    audioCodecProfile = AudioCodecProfileType.LC_AAC;
    transcodingUsers = new HashMap&lt;&gt;();
    backgroundColor = 0xFF000000;
    userConfigExtraInfo = null;
    metadata = null;
  }</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraLiveTranscoding : NSObject

@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) NSInteger videoBitrate;
@property(assign, nonatomic) NSInteger videoFramerate;
@property(assign, nonatomic) BOOL lowLatency;
@property(assign, nonatomic) NSInteger videoGop;
@property(assign, nonatomic) AgoraVideoCodecProfileType videoCodecProfile;
@property(copy, nonatomic) NSArray&lt;AgoraLiveTranscodingUser *&gt; *_Nullable transcodingUsers;
@property(copy, nonatomic) NSString *_Nullable transcodingExtraInfo;
@property(strong, nonatomic) AgoraImage *_Nullable watermark;
@property (copy, nonatomic) NSArray&lt;AgoraImage *&gt; *_Nullable watermarkArray;
@property(strong, nonatomic) AgoraImage *_Nullable backgroundImage;
@property (copy, nonatomic) NSArray&lt;AgoraImage *&gt; *_Nullable backgroundImageArray;
@property(strong, nonatomic) COLOR_CLASS *_Nullable backgroundColor;
@property(assign, nonatomic) AgoraAudioSampleRateType audioSampleRate;
@property(assign, nonatomic) NSInteger audioBitrate;
@property(assign, nonatomic) NSInteger audioChannels;
@property(assign, nonatomic) AgoraAudioCodecProfileType audioCodecProfile;
+ (AgoraLiveTranscoding *_Nonnull)defaultTranscoding;
- (int)addUser:(AgoraLiveTranscodingUser *_Nonnull)user;
- (int)removeUser:(NSUInteger)uid;
@end</codeblock>
            <codeblock props="windows" outputclass="language-cpp">struct LiveTranscoding {
  int width;
  int height;
  int videoBitrate;
  int videoFramerate;
  bool lowLatency;
  int videoGop;
  VIDEO_CODEC_PROFILE_TYPE videoCodecProfile;
  unsigned int backgroundColor;
  unsigned int userCount;
  TranscodingUser* transcodingUsers;
  const char* transcodingExtraInfo;
  const char* metadata;
  RtcImage* watermark;
  unsigned int watermarkCount;
  RtcImage* backgroundImage;
  unsigned int backgroundImageCount;
  AUDIO_SAMPLE_RATE_TYPE audioSampleRate;
  int audioBitrate;
  int audioChannels;
  AUDIO_CODEC_PROFILE_TYPE audioCodecProfile;

  LiveTranscoding()
      : width(360),
        height(640),
        videoBitrate(400),
        videoFramerate(15),
        lowLatency(false),
        videoGop(30),
        videoCodecProfile(VIDEO_CODEC_PROFILE_HIGH),
        backgroundColor(0x000000),
        userCount(0),
        transcodingUsers(NULL),
        transcodingExtraInfo(NULL),
        metadata(NULL),
        watermark(NULL),
        watermarkCount(0),
        backgroundImage(NULL),
        backgroundImageCount(0),
        audioSampleRate(AUDIO_SAMPLE_RATE_48000),
        audioBitrate(48),
        audioChannels(1),
        audioCodecProfile(AUDIO_CODEC_PROFILE_LC_AAC) {}
};</codeblock> </p>
            <p outputclass="codeblock" props="rtc">
            <codeblock props="windows unity" outputclass="language-cpp">typedef struct LiveTranscoding {
    int width;
    int height;
    int videoBitrate;
    int videoFramerate;

    bool lowLatency;

    int videoGop;
    VIDEO_CODEC_PROFILE_TYPE videoCodecProfile;
    unsigned int backgroundColor;
    unsigned int userCount;
    TranscodingUser *transcodingUsers;
    const char *transcodingExtraInfo;
    RtcImage* watermark;

    AUDIO_SAMPLE_RATE_TYPE audioSampleRate;
    int audioBitrate;
    int audioChannels;

    LiveTranscoding()
    : width(360)
    , height(640)
    , videoBitrate(400)
    , videoFramerate(15)
    , lowLatency(false)
    , backgroundColor(0x000000)
    , videoGop(30)
    , videoCodecProfile(VIDEO_CODEC_PROFILE_HIGH)
    , userCount(0)
    , transcodingUsers(nullptr)
    , transcodingExtraInfo(nullptr)
    , watermark(nullptr)
    , audioSampleRate(AUDIO_SAMPLE_RATE_48000)
    , audioBitrate(48)
    , audioChannels(1)
    {}
    } LiveTranscoding;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export interface LiveTranscoding {
    width: number;
    height: number;
    videoBitrate: number;
    videoFrameRate: number;
    lowLatency: boolean;
    videoGop: number;
    videoCodecProfile: VIDEO_CODEC_PROFILE_TYPE;
    videoCodecType: VIDEO_CODEC_TYPE_FOR_STREAM;
    backgroundColor: number;
    userCount: number;
    audioSampleRate: number;
    audioChannels: number;
    audioCodecProfile: AUDIO_CODEC_PROFILE_TYPE;
    audioBitrate: number;
    transcodingExtraInfo: string;
    metadata?: string;
    watermark: RtcImage;
    backgroundImage: RtcImage;
    transcodingUsers: Array&lt;TranscodingUser&gt;
    }</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class LiveTranscoding {

                @JsonKey(includeIfNull: false)
                int? width;

                @JsonKey(includeIfNull: false)
                int? height;

                @JsonKey(includeIfNull: false)
                int? videoBitrate;

                @JsonKey(includeIfNull: false)
                VideoFrameRate? videoFramerate;

                @Deprecated(
                    'This attribute is deprecated since v2.8.0, and Agora does not recommend it.')
                @JsonKey(includeIfNull: false)
                bool? lowLatency;

                @JsonKey(includeIfNull: false)
                int? videoGop;

                @JsonKey(includeIfNull: false)
                List&lt;AgoraImage&gt;? watermark;

                @JsonKey(includeIfNull: false)
                List&lt;AgoraImage&gt;? backgroundImage;

                @JsonKey(includeIfNull: false)
                AudioSampleRateType? audioSampleRate;

                @JsonKey(includeIfNull: false)
                int? audioBitrate;

                @JsonKey(includeIfNull: false)
                AudioChannel? audioChannels;

                @JsonKey(includeIfNull: false)
                AudioCodecProfileType? audioCodecProfile;

                @JsonKey(includeIfNull: false)
                VideoCodecProfileType? videoCodecProfile;

                @JsonKey(includeIfNull: false)
                int? backgroundColor;

                @JsonKey(includeIfNull: false)
                VideoCodecTypeForStream? videoCodecType;

                @JsonKey(includeIfNull: false)
                String? userConfigExtraInfo;

                List&lt;TranscodingUser&gt; transcodingUsers;

                LiveTranscoding(
                  this.transcodingUsers, {
                  this.width,
                  this.height,
                  this.videoBitrate,
                  this.videoFramerate,
                  this.lowLatency,
                  this.videoGop,
                  this.watermark,
                  this.backgroundImage,
                  this.audioSampleRate,
                  this.audioBitrate,
                  this.audioChannels,
                  this.audioCodecProfile,
                  this.videoCodecProfile,
                  this.backgroundColor,
                  this.videoCodecType,
                  this.userConfigExtraInfo,
                });

                factory LiveTranscoding.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
                    _$LiveTranscodingFromJson(json);

                Map&lt;String, dynamic&gt; toJson() =&gt; _$LiveTranscodingToJson(this);
              }</codeblock> </p>
        </section>
        <section id="parameters">
            <title> <text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /> </title>
            <parml>
            <plentry props="android windows electron unity flutter">
                <pt>width</pt>
                <pd>
                    <p>The width of the output media stream in pixels. The default value is 360.</p>
                    <ul>
                    <li>When pushing video streams to the CDN,
<codeph>width</codeph>
 is less than 64, Agora server automatically adjusts it to 64.                            </li>
                    <li>When pushing audio streams to the CDN,
<codeph>width</codeph>
 as 0.                            </li>
                    </ul> </pd>
            </plentry>
            <plentry props="android windows electron unity flutter">
                <pt>height</pt>
                <pd>
                    <p>The height of the output media stream in pixels. The default value is 640.</p>
                    <ul>
                    <li>When pushing video streams to the CDN,
<codeph>height</codeph>
 is less than 64, Agora server automatically adjusts it to 64.                            </li>
                    <li>When pushing audio streams to the CDN,
<codeph>height</codeph>
 as 0.                            </li>
                    </ul> </pd>
            </plentry>
            <plentry props="ios mac">
                <pt>size</pt>
                <pd>The width and height of the output media stream in pixels.</pd>
            </plentry>
            <plentry>
                <pt>videoBitrate</pt>
                <pd>The video bitrate (Kbps) of the output media stream. The default value is 400. <ph props="ios android windows"> You can refer
<xref keyref="guide-cdn-streaming"> Push streams to
CDN</xref>
set this parameter.
                        </ph> </pd>
            </plentry>
            <plentry>
                <pt props="native">videoFrameRate</pt>
                <pt props="flutter">videoFramerate</pt>
                <pd>The video frame rate (fps) of the output media stream. The default value is 15, and the value range is [1, 30].<note type="attention">The Agora server adjusts
any frame rate higher than 30 fps to 30 fps.</note>
                </pd>
            </plentry>
            <plentry>
                <pt>lowLatency</pt>
                <pd>
                    <dl outputclass="deprecated">
                    <dlentry>
                        <dt>Deprecated</dt>
                        <dd>This attribute is deprecated since v2.8.0, and Agora does not recommend it.</dd>
                    </dlentry>
                    </dl>
                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>: Low latency with unassured quality.</li>
                    <li><codeph><ph keyref="false" /></codeph>: (Default) High latency with assured quality.</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>videoGop</pt>
                <pd>The video GOP (Group of Pictures) of the output media stream. The default value is 30.</pd>
            </plentry>
            <plentry>
                <pt>videoCodecProfile</pt>
                <pd>
                    <p>The video encoding specifications of the output media stream. See
<xref keyref="VIDEO_CODEC_PROFILE_TYPE" />.</p>
                    <note type="attention">If you set this parameter to any other value, Agora adjusts it to the default value.</note> </pd>
            </plentry>
            <plentry props="windows electron flutter">
                <pt>videoCodecType</pt>
                <pd>The codec type of the output video. For details, see <xref keyref="VIDEO_CODEC_TYPE_FOR_STREAM" />.</pd>
            </plentry>
            <plentry>
                <pt>transcodingUsers</pt>
                <pd>
                    <p>Transcoding configurations of each host. One live streaming channel supports up to 17 hosts. For more details, see
<xref keyref="TranscodingUser" />.</p>
                </pd>
            </plentry>
            <plentry>
                <pt>transcodingExtraInfo</pt>
                <pd>The user SEI information embedded in the output media stream. This parameter is used to send SEI information to the CDN. The maximum length is 4096 bytes. For more details, see
<xref keyref="faq-sei">SEI-related questions</xref>
。
                    </pd>
            </plentry>
            <plentry>
                <pt>backgroundColor</pt>
                <pd>The video background color of the output media stream. The format is a hexadecimal integer defined by RGB without the # symbol. Such as
For example, <codeph>0xFFB6C1</codeph>
means light pink. The default is
<codeph>0x000000</codeph>
, which means black.</pd>
            </plentry>
            <plentry props="android windows electron unity">
                <pt>userCount</pt>
                <pd>The number of hosts in the transcoding. The default value is 0.</pd>
            </plentry>
            <plentry props="android windows unity">
                <pt>metadata</pt>
                <pd>
                    <dl outputclass="deprecated">
                    <dlentry>
                        <dt>Deprecated:</dt>
                        <dd>This attribute is deprecated.</dd>
                    </dlentry>
                    </dl>The metadata sent to the CDN client.</pd>
            </plentry>
            <plentry props="rtc">
                <pt>backgroundImage</pt>
                <pd props="windows">The number of background images on the live video. See <xref keyref="RtcImage" />.  You can add a background image or use an array to add multiple background images. This parameter is used with <parmname>backgroundImageCount</parmname>.</pd>
                <pd props="ios mac">
                    <p>Deprecated as of v3.6.0. Use <parmname>backgroundImageArray</parmname> instead.</p>
                    <p>The number of background images on the live video. The image format needs to be PNG. See <xref keyref="RtcImage" />.</p>
                </pd>
                <pd props="android">
                    <p>Deprecated as of v3.6.0. Use <parmname>backgroundImageList</parmname> instead.</p>
                    <p>The number of background images on the live video. Ensure that the format of the watermark image is PNG. See <xref keyref="RtcImage" />.</p>
                </pd>
            </plentry>
            <plentry props="rtc">
                <pt>watermark</pt>
                <pd props="windows">The watermark on the live video. Ensure that the format of the watermark image is PNG. See <xref keyref="RtcImage" />. You can add one watermark, or add multiple watermarks using an array. This parameter is used in conjunction with <parmname>watermarkCount</parmname>.</pd>
                <pd props="ios mac">
                    <p>Deprecated as of v3.6.0. Use <parmname>watermarkArray</parmname>.</p>
                    <p>The watermark on the live video. The image format needs to be PNG. See <xref keyref="RtcImage" />.</p>
                </pd>
                <pd props="android">
                    <p>Deprecated as of v3.6.0. Use <parmname>watermarkList</parmname>.</p>
                    <p>The watermark on the live video. The image format needs to be PNG. See <xref keyref="RtcImage" />.</p>
                </pd>
                <pd props="flutter">The watermark on the live video. Ensure that the format of the watermark image is PNG. See <xref keyref="RtcImage" />. You can add one watermark, or add multiple watermarks using an array.</pd>
            </plentry>
            <plentry props="rtc-ng">
                <pt>backgroundImage</pt>
                <pd>The video background image of the output media stream. For more details, see
<xref keyref="RtcImage" />.</pd>
            </plentry>
            <plentry props="rtc-ng">
                <pt>watermark</pt>
                <pd>
                    <p>The number of watermarks (<parmname>watermark</parmname>) of the output media stream.</p>
                    <ul>
                    <li>If you do not add a watermark or add only one watermark, this parameter is optional.</li>
                    <li>If you add more than one watermarks, ensure that you set this parameter.</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>audioSampleRate</pt>
                <pd>The audio sampling rate (Hz) of the output media stream. See
 <xref keyref="AUDIO_SAMPLE_RATE_TYPE" />.</pd>
            </plentry>
            <plentry>
                <pt>audioBitrate</pt>
                <pd>The audio bitrate (Kbps) of the output media stream. The default value is 48, and the maximum is 128.</pd>
            </plentry>
            <plentry>
                <pt>audioChannels</pt>
                <pd>The number of audio channels of the output media stream. The default value is 1. Agora recommends setting it to 1 or 2.<ul>
                    <li>1: (Default) Mono</li>
                    <li>2: Stereo.</li>
                    <li>3: Three audio channels.</li>
                    <li>4: Four audio channels.</li>
                    <li>5: Five audio channels.</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>audioCodecProfile</pt>
                <pd>The audio codec of the media stream. For more details, see <xref keyref="AUDIO_CODEC_PROFILE_TYPE" />.</pd>
            </plentry>
            <plentry props="rtc-ng">
                <pt props="ios mac">watermarkArray</pt>
                <pt props="windows">watermarkCount</pt>
                <pd props="ios mac">An array of watermarks on the live video. See <xref keyref="RtcImage" />. You can add one or more watermarks using <parmname>watermarkArray</parmname>. The image format needs to be PNG. The total number of watermarks and background images on a live video must be greater than or equal to 0 and less than or equal to 10.</pd>
                <pd props="windows">The number of watermarks on the live video. The total number of watermarks and background images must be greater than or equal to 0 and less than or equal to 10. This parameter is used with <parmname>watermark</parmname>.</pd>
            </plentry>
            <plentry props="rtc-ng">
                <pt props="ios mac">backgroundArray</pt>
                <pt props="windows">backgroundCount</pt>
                <pd props="ios mac">An array of background images on the live video. See <xref keyref="RtcImage" />. You can use <parmname>backgroundImageArray</parmname> to add one or more background images. The image format needs to be PNG. The total number of watermarks and background images on a live video must be greater than or equal to 0 and less than or equal to 10.</pd>
                <pd props="windows">The number of background images on the live video. The total number of watermarks and background images must be greater than or equal to 0 and less than or equal to 10. This parameter is used with <parmname>backgroundImage</parmname>.</pd>
            </plentry>
            <plentry props="rtc">
                <pt props="ios mac">watermarkArray</pt>
                <pt props="windows">watermarkCount</pt>
                <pt props="android">WatermarkList</pt>
                <pd props="ios mac">An array of watermarks on the live video. See <xref keyref="RtcImage" />. You can add one or more watermarks using <parmname>watermarkArray</parmname>. The image format needs to be PNG. The total number of watermarks and background images on a live video must be greater than or equal to 0 and less than or equal to 10.</pd>
                <pd props="windows">The number of watermarks on the live video. The total number of watermarks and background images must be greater than or equal to 0 and less than or equal to 10. This parameter is used with <parmname>watermark</parmname>.</pd>
                <pd props="android">An array of watermarks on the live video. See <xref keyref="RtcImage" />. You can add one or more watermarks using <parmname>watermarkList</parmname>. The image format needs to be PNG. The total number of watermarks and background images on a live video must be greater than or equal to 0 and less than or equal to 10.</pd>
            </plentry>
            <plentry props="rtc">
                <pt props="ios mac">backgroundImageArray</pt>
                <pt props="windows">backgroundImageCount</pt>
                <pt props="android">backgroundImageList</pt>
                <pd props="ios mac">An array of background images on the live video. See <xref keyref="RtcImage" />. You can use <parmname>backgroundImageArray</parmname> to add one or more background images. The image format needs to be PNG. The total number of watermarks and background images on a live video must be greater than or equal to 0 and less than or equal to 10.</pd>
                <pd props="windows">The number of background images on the live video. The total number of watermarks and background images must be greater than or equal to 0 and less than or equal to 10. This parameter is used with <parmname>backgroundImage</parmname>.</pd>
                <pd props="android">An array of background images on the live video. See <xref keyref="RtcImage" />. You can use <parmname>backgroundImageList</parmname> to add one or more background images. The image format needs to be PNG. The total number of watermarks and background images on a live video must be greater than or equal to 0 and less than or equal to 10.</pd>
            </plentry>
            <plentry props="rtc">
                <pt>userConfigExtraInfo</pt>
                <pd>Reserved property. Extra user-defined information to send the Supplemental Enhancement Information (SEI) for the H.264/H.265 video stream to the CDN live client. Maximum length: 4096 Bytes.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>