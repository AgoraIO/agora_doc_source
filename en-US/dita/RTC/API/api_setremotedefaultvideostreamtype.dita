<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_setremotedefaultvideostreamtype">
    <title><ph keyref="setRemoteDefaultVideoStreamType" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the default stream type of remote video streams.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="setRemoteDefaultVideoStreamType" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public abstract int setRemoteDefaultVideoStreamType(int streamType);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (int)setRemoteDefaultVideoStreamType:(AgoraVideoStreamType)streamType;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual int setRemoteDefaultVideoStreamType(VIDEO_STREAM_TYPE streamType) = 0;
</codeblock>
                <codeblock props="electron" outputclass="language-typescript">setRemoteDefaultVideoStreamType(streamType: REMOTE_VIDEO_STREAM_TYPE): number</codeblock>
                <codeblock props="unity" outputclass="language-csharp">public abstract int SetRemoteDefaultVideoStreamType(REMOTE_VIDEO_STREAM_TYPE streamType);</codeblock>
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setRemoteDefaultVideoStreamType(VideoStreamType streamType);</codeblock>
        </p>
        </section>
        <section id="detailed_desc">

   <p id="desc1">Under limited network conditions, if the publisher has not disabled the dual-stream mode using (),the receiver can choose to receive either the high-quality video stream or the low-quality video stream. The high-quality video stream has a higher resolution and bitrate, and the low-quality video stream has a lower resolution and bitrate.<xref keyref="enableDualStreamMode" /><codeph><ph keyref="false" /></codeph></p>
   <p id="desc2">By default, users receive the high-quality video stream. Call this method if you want to switch to the low-quality video stream. This method allows the app to adjust the corresponding video stream type based on the size of the video window to reduce the bandwidth and resources. The aspect ratio of the low-quality video stream is the same as the high-quality video stream. Once the resolution of the high-quality video stream is set, the system automatically sets the resolution, frame rate, and bitrate of the low-quality video stream.</p>
   <p id="desc3">The result of this method returns in the <xref keyref="onApiCallExecuted" /> callback.</p>
   <note type="attention">You can call this method either before or after joining a channel. If you call both <apiname keyref="setRemoteVideoStreamType" /> and <xref keyref="setRemoteDefaultVideoStreamType" />, the settings in <apiname keyref="setRemoteVideoStreamType" /> take effect.</note>
        </section>
        <section id="parameters"><title>Parameters</title>
   <parml>
       <plentry>
  <pt>streamType</pt>
           <pd id="defaultstreamtype">
               <p props="ios mac windows electron unity flutter">The default stream type of the remote video, see <xref keyref="REMOTE_VIDEO_STREAM_TYPE" />.</p>
               <p props="android">The default stream type of the remote video.<ul>
              <li>0: High-quality video stream.</li>
              <li>1: Low-quality video stream.</li>
          </ul>
      </p></pd>
       </plentry>
   </parml>
        </section>
        <section id="return_values" props="native electron unity">
   <title>Returns</title>
   <ul>
       <li>0: Success.</li>
       <li>&lt; 0: Failure.</li>
   </ul>
        </section></refbody>
</reference>