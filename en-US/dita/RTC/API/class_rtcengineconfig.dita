<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_rtcengineconfig">
    <title><ph keyref="RtcEngineConfig"/></title>
    <shortdesc id="short"><ph id="shortdesc">Configurations of initializing the
        SDK.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java"/>
                <codeblock props="ios mac" outputclass="language-objectivec"/>
                <codeblock props="cpp" outputclass="language-cpp">struct RtcEngineContext {
    IRtcEngineEventHandler* eventHandler;
    const char* appId;
    void* context;
    unsigned int areaCode;
    LogConfig logConfig;
    RtcEngineContext()
    :eventHandler(NULL)
    ,appId(NULL)
    ,context(NULL)
    ,areaCode(rtc::AREA_CODE_GLOB)
    {}
    };</codeblock>
                <codeblock props="cs" outputclass="language-csharp">public class RtcEngineContext
    {
        public RtcEngineContext(string appId, AREA_CODE areaCode = AREA_CODE.AREA_CODE_GLOB,
            LogConfig logConfig = null)
        {
            this.appId = appId;
            _areaCode = (uint) areaCode;
            this.logConfig = logConfig ?? new LogConfig();
        }

        public string appId { set; get; }

        private uint _areaCode;

        public LogConfig logConfig { set; get; }
        public AREA_CODE areaCode
        {
            get { return (AREA_CODE) _areaCode; }
            set { _areaCode = (uint) areaCode; }
        }
    };</codeblock>
                <codeblock props="electron" outputclass="language-typescript">export interface RtcEngineContext {
  appId: string;
  areaCode?: AREA_CODE;
  logConfig?: LogConfig;
}</codeblock>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart">class RtcEngineContext {

                    String appId;
                  
                    @JsonKey(includeIfNull: false, toJson: _$AreaCodeListToJson)
                    List&lt;AreaCode&gt;? areaCode;
                  
                    @JsonKey(includeIfNull: false)
                    LogConfig? logConfig;
                  
                    RtcEngineContext(
                      this.appId, {
                      this.areaCode,
                      this.logConfig,
                    });
                  
                    factory RtcEngineContext.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
                        _$RtcEngineContextFromJson(json);
                  
                    Map&lt;String, dynamic&gt; toJson() =&gt; _$RtcEngineContextToJson(this);
                  
                    static int? _$AreaCodeListToJson(List&lt;AreaCode&gt;? instance) {
                      if (instance == null) return null;
                      var areaCode = 0;
                      for (var element in instance) {
                        areaCode |= AreaCodeConverter(element).value();
                      }
                      return areaCode;
                    }
                  }</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"
                /></title>
            <parml>
                <plentry props="cpp">
                    <pt>eventHandler</pt>
                    <pd>The event handler of the Agora SDK. See <xref
                            keyref="IRtcEngineEventHandler"/>.</pd>
                </plentry>
                <plentry>
                    <pt props="cpp electron cs flutter">appId</pt>
                    <pt props="android">mAppId</pt>
                    <pd id="appid">
                        <p>The App ID issued by Agora for your app development project. Only users
                            who use the same App ID can join the same channel and communicate with
                            each other.</p>
                        <p props="cpp">An App ID can only be used to create one instance. If you
                            need to change the App ID, you must call <xref keyref="release"/> the
                            current IRtcEngine, and then call to recreate. Call <xref
                                keyref="createAgoraRtcEngine"/> and <xref keyref="create2"/> to
                            recreate <apiname keyref="IRtcEngine"/>.<xref keyref="IRtcEngine"/></p>
                        <p props="android ios mac electron">An App ID can only be used to create one
                            instance. If you need to change the App ID, you must call <xref
                                keyref="release"/> destroy the current IRtcEngine, and then call
                                <xref keyref="create2"/> to recreate <apiname keyref="IRtcEngine"
                                />.<xref keyref="IRtcEngine"/></p>
                    </pd>
                </plentry>
                <plentry props="cpp cs">
                    <pt>context</pt>
                    <pd>The video window handler. Once set, this parameter enables you to plug or
                        unplug the video devices while they are powered.</pd>
                </plentry>
                <plentry>
                    <pt>areaCode</pt>
                    <pd>
                        <p>The region for connection. This is an advanced feature and applies to
                            scenarios that have regional restrictions. For details on supported
                            regions, see <xref keyref="AREA_CODE"/>.</p>
                        <p>After specifying the region, the SDK connects to the Agora servers within
                            that region.</p>
                    </pd>
                </plentry>
                <plentry>
                    <pt>logConfig</pt>
                    <pd>
                        <p>The configuration of the log files. See <xref keyref="LogConfig"/>.</p>
                        <p>By default, the SDK outputs five log files:
                            <codeph>agorasdk.log</codeph>, <codeph>agorasdk_1.log</codeph>,
                                <codeph>agorasdk_2.log</codeph>, <codeph>agorasdk_3.log</codeph>,
                            and <codeph>agorasdk_4.log</codeph>.</p>
                        <p>Each log file has a default size of 512 KB and is encoded in UTF-8
                            format. The SDK writes the latest log in <codeph>agorasdk.log</codeph>.
                            When <codeph>agorasdk.log</codeph> is full, the SDK deletes the log file
                            with the earliest modification time among the other four, renames
                                <codeph>agorasdk.log</codeph> to the name of the deleted log file,
                            and create a new <parmname>agorasdk.log</parmname> to record the latest
                            log.</p>
                    </pd>
                </plentry>
            </parml>
        </section>
    </refbody>
</reference>
