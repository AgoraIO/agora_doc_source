<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_joinchannelwithuseraccount2">
    <title><ph keyref="joinChannelWithUserAccount2" /></title>
    <shortdesc id="short"><ph id="shortdesc">Joins the channel with a user account, and configures whether to automatically subscribe to audio or video streams after joining the channel.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="joinChannelWithUserAccount2" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock" props="rtc-ng">
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)joinChannelByToken:(NSString * _Nullable)token
                channelId:(NSString * _Nonnull)channelId
              userAccount:(NSString * _Nonnull)userAccount
             mediaOptions:(AgoraRtcChannelMediaOptions * _Nonnull)mediaOptions
              joinSuccess:(void(^ _Nullable)(NSString * _Nonnull channel, NSUInteger uid, NSInteger elapsed))joinSuccessBlock;</codeblock> </p>
            <p outputclass="codeblock" props="rtc">
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)joinChannelByUserAccount:(NSString* _Nonnull)userAccount token:(NSString* _Nullable)token channelId:(NSString* _Nonnull)channelId options:(AgoraRtcChannelMediaOptions* _Nonnull)options;</codeblock> </p>
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int joinChannelWithUserAccount(
      String token, String channelName, String userAccount, ChannelMediaOptions options);</codeblock>
            <codeblock props="windows" outputclass="language-cpp">virtual int joinChannelWithUserAccount(const char* token,
    const char* channelId,
    const char* userAccount,
    const ChannelMediaOptions&amp; options) = 0; </codeblock>
            <codeblock props="electron" outputclass="language-typescript">joinChannelWithUserAccount(
  token: string,
  channelId: string,
  userAccount: string,
  options?: ChannelMediaOptions
): number</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int JoinChannelWithUserAccount(string token, string channelId, string userAccount,
            ChannelMediaOptions options);</codeblock>
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; joinChannelWithUserAccount(
      String? token, String channelName, String userAccount,
      [ChannelMediaOptions? options]);</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since" props="rtc">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v3.3.0</dd>
            </dlentry>
            </dl>
            <p id="desc1">This method allows a user to join the channel with the user account. After the user successfully joins the channel, the SDK triggers the following callbacks:
            <ul>
            <li>The local client: <xref keyref="onLocalUserRegistered" />, <xref keyref="onJoinChannelSuccess" /> and <xref keyref="onConnectionStateChanged" /> callbacks.</li>
            <li>The remote client: The <xref keyref="onUserJoined" /> callback if the user is in the COMMUNICATION profile, and the <xref keyref="onUserInfoUpdated" /> callback if the user is a host in the LIVE_BROADCASTING profile.</li>
            </ul></p>
            <p id="desc2">Once a user joins the channel, the user subscribes to the audio and video streams of all the other users in the channel by default, giving rise to usage and billing calculation. To stop subscribing to a specified stream or all remote streams, call the corresponding <apiname>mute</apiname> methods.</p>
            <p props="android ios mac windows">Compared to <xref keyref="joinChannelWithUserAccount1" />, this method adds the <parmname>options</parmname> parameter to configure whether to automatically subscribe to all remote audio and video streams in the channel when the user joins the channel. By default, the user subscribes to the audio and video streams of all the other users in the channel, giving rise to usage and billings. To unsubscribe, set the <parmname>options</parmname> parameter or call the <apiname>mute</apiname> methods accordingly.</p>
            <note type="attention">To ensure smooth communication, use the same parameter type to identify the user. For example, if a user joins the channel with a user ID, then ensure all the other users use the user ID too. The same applies to the user account. If a user joins the channel with the Agora Web SDK, ensure that the ID of the user is set to the same parameter type.</note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry conkeyref="joinChannel2/token">
                <pt />
                <pd />
            </plentry>
            <plentry>
                <pt props="android">channelName</pt>
                <pt props="windows ios mac unity">channelId</pt>
                <pd>
                    <p conkeyref="joinChannel2/channelID_desc" />
                </pd>
            </plentry>
            <plentry id="userAccount">
                <pt>userAccount</pt>
                <pd>
                    <p>The user account. This parameter is used to identify the user in the channel for real-time audio and video engagement. You need to set and manage user accounts yourself and ensure that each user account in the same channel is unique.   The maximum length of this parameter is 255 bytes. Ensure that you set this parameter and do not set it as <ph keyref="NULL" />. Supported characters are (89 in total):
                    <ul>
                    <li>The 26 lowercase English letters: a to z.</li>
                    <li>The 26 uppercase English letters: A to Z.</li>
                    <li>All numeric characters: 0 to 9.</li>
                    <li>Space</li>
                    <li>"!", "#", "$", "%", "&amp;", "(", ")", "+", "-", ":", ";", "&lt;", "=", ".", "&gt;", "?", "@", "[", "]", "^", "_", "{", "}", "|", "~", ","</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry conkeyref="joinChannel2/options">
                <pt />
                <pd />
            </plentry>
            <plentry conkeyref="joinChannel2/joinsuccessblock" props="ios mac">
                <pt />
                <pd />
            </plentry>
            </parml> </section>
        <section props="native electron unity" conkeyref="joinChannel2/return_values" />
    </refbody>
</reference>