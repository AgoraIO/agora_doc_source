<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_release">
    <title><ph keyref="release"/></title>
    <shortdesc id="short"><ph id="shortdesc">Releases the <apiname keyref="IRtcEngine" /> instance.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="release" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        
        <p conref="../conref/conref_rtc_api.dita#apidef/release"/>
        </section>
        <section id="detailed_desc">
   
   <p>This method releases all resources used by the Agora SDK. Use this method for apps in which users occasionally make voice or video calls. When users do not make calls, you can free up resources for other operations.</p>
   <p props="windows">After a successful method call, you cannot use any method or callback in the SDK anymore. If you want to use the real-time communication functions again, you must call <xref keyref="createAgoraRtcEngine"/> and <xref keyref="create2"/> to create a new <apiname keyref="IRtcEngine" /> instance.</p>
   <p props="android ios mac">After a successful method call, you cannot use any method or callback in the SDK anymore. If you want to use the real-time communication functions again, you must call <xref keyref="create2"/> to create a new <apiname keyref="IRtcEngine" /> instance.</p>
   <note type="attention">If you want to create a new `IRtcEngine<apiname keyref="IRtcEngine"/>` instance<apiname keyref="release"/> after destroying the current one, ensure that you wait till the `release` method completes executing.</note>
        </section>
        <section id="parameters"><title>Parameter</title>
   <parml>
       <plentry>
  <pt>sync</pt>
  <pd>
      <ul>
 <li><ph keyref="true"/>: Synchronous call. Agora suggests calling this method in a sub-thread to avoid congestion in the main thread because the synchronous call and the app cannot move on to another task until the resources used by <apiname keyref="IRtcEngine"/> are released. Besides, you cannot call <apiname keyref="release"/> in any method or callback of the SDK. Otherwise, the SDK cannot release the resources until the callbacks return results, which may result in a deadlock. The SDK automatically detects the deadlock and converts this method into an asynchronous call, causing the test to take additional time.</li>
          <li><ph keyref="false"/>: Asynchronous call. The app can move on to another task, no matter the resources used by <apiname keyref="IRtcEngine"/> are released or not. Do not immediately uninstall the SDK&apos;s dynamic library after the call, or it may cause a crash due to the SDK clean-up thread not quitting.</li>
      </ul>
  </pd>
       </plentry>
   </parml>
        </section>
    </refbody>
</reference>
