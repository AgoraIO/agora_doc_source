<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_startscreencapturemobile">
  <title><ph keyref="startScreenCaptureMobile"/></title>
  <shortdesc id="short"><ph id="shortdesc">Starts screen sharing. This method is only available on
      Android and iOS.</ph></shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm keyref="startScreenCaptureMobile"/>
      </keywords>
    </metadata>
  </prolog>
  <refbody>
    <section id="prototype">
      <p outputclass="codeblock">
        <codeblock props="android" outputclass="language-java"/>
        <codeblock props="ios mac" outputclass="language-objectivec"/>
        <codeblock props="cpp" outputclass="language-cpp"/>
        <codeblock props="electron" outputclass="language-typescript"/>
        <codeblock props="cs" outputclass="language-csharp"/>
        <codeblock props="rn" outputclass="language-typescript"/>
        <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startScreenCaptureMobile(ScreenCaptureParameters2 parameters);</codeblock>
      </p>
    </section>
    <section id="detailed_desc">
      <p>On Android, during screen sharing, make sure the following: <ul>
          <li>The user has granted screen capture permission to the application; otherwise, the SDK
            triggers the <xref keyref="onLocalVideoStateChanged"/> callback and reports
              <codeph>ScreenCapturePermissionDenied</codeph>(16).</li>
          <li>The Android API level is not earlier than 21; otherwise, the method call fails and
            returns <codeph>ScreenCaptureSystemNotSupported</codeph>(2).</li>
          <li>To capture system audio during screen sharing, ensure that the Android API level is
            not earlier than 29 as well; otherwise, the method call fails and returns
              <codeph>ScreenCaptureSystemAudioNotSupported</codeph>(3).</li>
        </ul>
      </p>
      <p>On iOS, when the screen sharing extension process starts, ends, or quits unexpectedly, the
        SDK triggers the <apiname keyref="onLocalVideoStateChanged"/> callback and reports
          <codeph>ExtensionCaptureStarted</codeph>(13), <codeph>ExtensionCaptureStoped</codeph>(14),
        and <codeph>ExtensionCaptureDisconnected</codeph>(15) respectively.</p>
      <note type="attention" id="screen_capture">
        <ul>
          <li>Call this method after joining a channel.</li>
          <li>The billing of the screen sharing stream is based on the value of
              <codeph>dimensions</codeph> in <parmname>ScreenVideoParameters</parmname> When you do
            not pass in a value, Agora bills you at 1280 Ã— 720; when you pass a value in, Agora
            bills you at that value. For details, see <xref keyref="biling">Pricing for Real-time
              Communication</xref>.</li>
          <li>On Android, note the following: <ul>
              <li>On Android 9 and later, to avoid the application being killed by the system after
                going to the background, Agora recommends you add the foreground service permission
                  <codeph>android.permission.FOREGROUND_SERVICE</codeph> to the
                  <filepath>/app/Manifests/AndroidManifest.xml</filepath> file.</li>
              <li>Due to performance limitations, screen sharing is not supported on Android
                TV.</li>
              <li>Due to system limitations, if you are using Huawei phones, do not adjust the video
                encoding resolution of the screen sharing stream during the screen sharing, or you
                could experience crashes.</li>
            </ul>
          </li>
          <li>On iOS, note the following: <ul>
              <li>This feature is only available for iOS 11 or later.</li>
              <li>This feature requires a high-performance device. Agora recommends that you use
                this feature on iPhone X or later models.</li>
              <li>If you are using the custom audio source instead of the SDK to capture audio,
                Agora recommends you add the keep-alive processing logic to your application to
                avoid screen sharing stopping when the application goes to the background.</li>
            </ul>
          </li>
        </ul>
      </note>
    </section>
    <section id="parameters">
      <title>Parameters</title>
      <parml>
        <plentry>
          <pt>parameters</pt>
          <pd>The configuration of the screen sharing. See <xref keyref="ScreenCaptureParameters2"
            />.</pd>
        </plentry>
      </parml>
    </section>
    <section id="return_values" props="native electron cs">
      <title>Returns</title>
      <ul>
        <li>0: Success.</li>
        <li>&lt; 0: Failure.</li>
      </ul>
    </section>
  </refbody>
</reference>
