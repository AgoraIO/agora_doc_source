<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_onrendervideoframe">
    <title><ph keyref="onRenderVideoFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs each time the SDK receives a video frame sent by the remote user.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="onRenderVideoFrame" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock" props="rtc-ng">
                <codeblock props="android" outputclass="language-java">boolean onRenderVideoFrame(String channelId, int uid, VideoFrame videoFrame);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)onRenderVideoFrame:(AgoraOutputVideoFrame * _Nonnull)videoFrame 
    uid:(NSUInteger)uid 
    channelId:(NSString * _Nonnull)channelId;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual bool onRenderVideoFrame(const char* channelId, rtc::uid_t remoteUid, VideoFrame&amp; videoFrame) = 0;
</codeblock>
        </p>
                <p outputclass="codeblock" props="rtc">
                <codeblock props="android" outputclass="language-java">boolean onRenderVideoFrame(int uid, VideoFrame videoFrame);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)onRenderVideoFrame:(AgoraOutputVideoFrame * _Nonnull)videoFrame 
    uid:(NSUInteger)uid ;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual bool onRenderVideoFrame(unsigned int uid, VideoFrame&amp; videoFrame) = 0;</codeblock>
                <codeblock props="electron" outputclass="language-typescript"/>
                <codeblock props="unity" outputclass="language-csharp">public virtual bool OnRenderVideoFrame(uint uid, VideoFrame videoFrame)
        {
            return true;
        }</codeblock>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart"/>
        </p>
        </section>
        <section id="detailed_desc">
   
   <dl outputclass="since" props="rtc">
       <dlentry>
  <dt>Since</dt>
  <dd>v3.0.0</dd>
       </dlentry>
   </dl>
   <p>After you successfully register the video frame observer, the SDK triggers this callback each time when it receives a video frame. In this callback, you can get the video data before encoding. You can then process the data according to your particular scenarios.</p>
   <p>After processing, you can send the processed video data back to the SDK in this callback.</p>
   <note type="attention">This callback does not support sending processed RGBA video data back to the SDK.</note>
        </section>
        <section id="parameters"><title>Parameters</title>
   <parml>
       <plentry>
           <pt props="android ios mac unity">uid</pt>
           <pt props="windows"><ph props="rtc-ng">remoteUid</ph><ph props="rtc">uid</ph></pt>
           <pd>The ID of the remote user who sends the current video frame.</pd>
       </plentry> 
       <plentry conkeyref="onCaptureVideoFrame/videoframe">
  <pt/>
  <pd/>
       </plentry>
       <plentry props="rtc-ng">
           <pt>channelId</pt>
           <pd>The channel ID.</pd>
       </plentry>
   </parml>
        </section>
        <section id="return_values">
   <title>Returns</title>
   <p>Whether to ignore the current video frame if the processing fails:<ul id="ul_pgt_png_s4b">
  <li><codeph><ph keyref="true"/></codeph>: Do not ignore.</li>
  <li><codeph><ph keyref="false"/></codeph>: Ignore the current video frame, and do not send it back to the SDK.</li>
       </ul></p>
        </section></refbody>
</reference>
