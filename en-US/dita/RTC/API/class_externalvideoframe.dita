<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_externalvideoframe">
    <title><ph keyref="ExternalVideoFrame" /></title>
    <shortdesc id="short"><ph id="shortdesc">The external video frame.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class AgoraVideoFrame {
                    public static final int FORMAT_NONE = -1;
                    public static final int FORMAT_TEXTURE_2D = 10;
                    public static final int FORMAT_TEXTURE_OES = 11;
                    public static final int FORMAT_I420 = 1;
                    public static final int FORMAT_BGRA = 2;
                    public static final int FORMAT_NV21 = 3;
                    public static final int FORMAT_RGBA = 4;
                    public static final int BUFFER_TYPE_NONE = -1;/
                    public static final int BUFFER_TYPE_BUFFER = 1;
                    public static final int BUFFER_TYPE_ARRAY = 2;
                    public static final int BUFFER_TYPE_TEXTURE = 3;
                    public int format;
                    public long timeStamp;
                    public int stride;
                    public int height;
                    public int textureID;
                    public boolean syncMode;
                    public float[] transform;
                    public javax.microedition.khronos.egl.EGLContext eglContext11;
                    public android.opengl.EGLContext eglContext14;
                    public byte[] buf;
                    public int cropLeft;
                    public int cropTop;
                    public int cropRight;
                    public int cropBottom;
                    public int rotation;
                    }</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraVideoFrame : NSObject
                    @property(assign, nonatomic) NSInteger format;
                    @property(assign, nonatomic) CMTime time;
                    @property(assign, nonatomic) int stride DEPRECATED_MSG_ATTRIBUTE("use strideInPixels instead");
                    @property(assign, nonatomic) int strideInPixels;
                    @property(assign, nonatomic) int height;
                    @property(assign, nonatomic) CVPixelBufferRef _Nullable textureBuf;
                    @property(assign, nonatomic) int cropLeft;
                    @property(assign, nonatomic) int cropTop;
                    @property(assign, nonatomic) int cropRight;
                    @property(assign, nonatomic) int cropBottom;
                    @property(assign, nonatomic) int rotation;
                    @end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct ExternalVideoFrame {
                enum VIDEO_BUFFER_TYPE
                {
                VIDEO_BUFFER_RAW_DATA = 1,
                };
                enum VIDEO_PIXEL_FORMAT
                {
                VIDEO_PIXEL_UNKNOWN = 0,
                VIDEO_PIXEL_I420 = 1,
                VIDEO_PIXEL_BGRA = 2,
                VIDEO_PIXEL_NV21 = 3,
                VIDEO_PIXEL_RGBA = 4,
                VIDEO_PIXEL_IMC2 = 5,
                VIDEO_PIXEL_ARGB = 7,
                VIDEO_PIXEL_NV12 = 8,
                VIDEO_PIXEL_I422 = 16,
                };

                VIDEO_BUFFER_TYPE type;
                VIDEO_PIXEL_FORMAT format;
                void* buffer;
                int stride;
                int height;
                int cropLeft;
                int cropTop;
                int cropRight;
                int cropBottom;
                int rotation;
                long long timestamp;
                };</codeblock>
            <codeblock props="cs" outputclass="language-csharp">public class ExternalVideoFrame
    {
        public ExternalVideoFrame()
        {
        }

        public ExternalVideoFrame(VIDEO_BUFFER_TYPE type, VIDEO_PIXEL_FORMAT format, byte[] buffer, int stride,
            int height, long timestamp, int cropLeft = 0, int cropTop = 0, int cropRight = 0, int cropBottom = 0,
            int rotation = 0)
        {
            this.type = type;
            this.format = format;
            this.buffer = buffer;
            this.stride = stride;
            this.height = height;
            this.cropLeft = cropLeft;
            this.cropTop = cropTop;
            this.cropRight = cropRight;
            this.cropBottom = cropBottom;
            this.rotation = rotation;
            this.timestamp = timestamp;
        }

        public VIDEO_BUFFER_TYPE type { set; get; }
        public VIDEO_PIXEL_FORMAT format { set; get; }
        public byte[] buffer { set; get; }
        public int stride { set; get; }
        public int height { set; get; }
        public int cropLeft { set; get; }
        public int cropTop { set; get; }
        public int cropRight { set; get; }
        public int cropBottom { set; get; }
        public int rotation { set; get; }
        public long timestamp { set; get; }
    }</codeblock>
            <codeblock props="electron" outputclass="language-typescript" />
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart" /> </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry props="cpp cs">
                <pt>type</pt>
                <pd>
                    <p>The video buffer type. For details, see <xref keyref="VIDEO_BUFFER_TYPE" />.</p>
                </pd>
            </plentry>
            <plentry>
                <pt>format</pt>
                <pd props="cpp cs" id="windows-format">The pixel format. For details, see <xref keyref="VIDEO_PIXEL_FORMAT" />.</pd>
                <pd props="ios mac" id="oc-format">The format of the incoming video frame. This parameter must be specified as one of the following values:
                    <ul>
                    <li>1: I420</li>
                    <li>2: BGRA</li>
                    <li>3: NV21</li>
                    <li>4: RGBA</li>
                    <li>5: IMC2</li>
                    <li>7: ARGB</li>
                    <li>8: NV12</li>
                    <li>12: iOS texture (CVPixelBufferRef)</li>
                    </ul> </pd>
                <pd props="android">The format of the video data:
                    <ul>
                    <li>10: TEXTURE_2D</li>
                    <li>11: TEXTURE_OES, usually the data collected by the camera is in this format.</li>
                    <li>1: I420</li>
                    <li>3: NV21</li>
                    <li>4: RGBA</li>
                    </ul> </pd>
            </plentry>
            <plentry props="android cpp ios mac cs">
                <pt props="cpp cs">buffer</pt>
                <pt props="android">buf</pt>
                <pt props="ios mac">dataBuf</pt>
                <pd>The video buffer.</pd>
                <pd props="android">This parameter only applies to video data in non-Texture format.</pd>
            </plentry>
            <plentry props="ios mac">
                <pt>textureBuf</pt>
                <pd>Buffer of iOS texture.</pd>
            </plentry>
            <plentry>
                <pt>stride</pt>
                <pd>Line spacing of the incoming video frame, which must be in pixels instead of bytes. For textures, it is the width of the texture.
                    <p props="ios mac">
                    <dl outputclass="deprecated">
                    <dlentry>
                        <dt>Deprecated:</dt>
                        <dd>Replaced with <parmname>strideInPixels</parmname>.</dd>
                    </dlentry>
                    </dl>
                    </p>
                </pd>
            </plentry>
            <plentry props="ios mac">
                <pt>strideInPixels</pt>
                <pd>The line span of the frame, that is, the number of pixels between two adjacent lines of video frames.
                    <note type="attention">
                    <ul>
                    <li>The unit of this parameter is pixels, not bytes.</li>
                    <li>If the video is in Texture format, set this parameter to the width of Texture.</li>
                    <li>If the video frame format is set to 12, do not use this field.</li>
                    </ul> </note></pd>
            </plentry>
            <plentry>
                <pt>height</pt>
                <pd>Height of the incoming video frame.</pd>
            </plentry>
            <plentry props="android">
                <pt>textureID</pt>
                <pd>Texture ID of the frame. This parameter only applies to video data in Texture format.</pd>
            </plentry>
            <plentry props="android">
                <pt>syncMode</pt>
                <pd>Set whether to enable the synchronization mode. After enabling, the SDK waits while Texture processing. This parameter only applies to video data in Texture format.
                    <ul id="ul_oxx_wmy_4qb">
                    <li><codeph><ph keyref="true" /></codeph>: Turn on sync mode.</li>
                    <li><codeph><ph keyref="false" /></codeph>: Do not turn on sync mode.</li>
                    </ul></pd>
            </plentry>
            <plentry props="android">
                <pt>transform</pt>
                <pd>Additional transform of Texture frames. This parameter only applies to video data in Texture format.</pd>
            </plentry>
            <plentry props="android">
                <pt>eglContext11</pt>
                <pd>EGLContext11. This parameter only applies to video data in Texture format.</pd>
            </plentry>
            <plentry props="android">
                <pt>eglContext14</pt>
                <pd>EGLContext14. This parameter only applies to video data in Texture format.</pd>
            </plentry>
            <plentry>
                <pt>cropLeft</pt>
                <pd>Raw data related parameter. The number of pixels trimmed from the left. The default value is 0.</pd>
                <pd props="android">This parameter only applies to video data in non-Texture format.</pd>
            </plentry>
            <plentry>
                <pt>cropTop</pt>
                <pd>Raw data related parameter. The number of pixels trimmed from the top. The default value is 0.</pd>
                <pd props="android">This parameter only applies to video data in non-Texture format.</pd>
            </plentry>
            <plentry>
                <pt>cropRight</pt>
                <pd> Raw data related parameter. The number of pixels trimmed from the right. The default value is 0.</pd>
                <pd props="android">This parameter only applies to video data in non-Texture format.</pd>
            </plentry>
            <plentry>
                <pt>cropBottom</pt>
                <pd>Raw data related parameter. The number of pixels trimmed from the bottom. The default value is 0.</pd>
                <pd props="android">This parameter only applies to video data in non-Texture format.</pd>
            </plentry>
            <plentry>
                <pt>rotation</pt>
                <pd>Raw data related parameter. The clockwise rotation of the video frame. You can set the rotation angle as 0, 90, 180, or 270. The default value is 0.</pd>
            </plentry>
            <plentry>
                <pt props="android cpp cs">timestamp</pt>
                <pt props="ios mac">time</pt>
                <pd>Timestamp (ms) of the incoming video frame. An incorrect timestamp results in frame loss or unsynchronized audio and video.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>