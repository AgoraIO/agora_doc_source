<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_channelmediaoptions_ng">
    <title><ph keyref="ChannelMediaOptions"/></title>
    <shortdesc id="short"><ph id="shortdesc">The channel media options.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class ChannelMediaOptions {
  public Boolean publishCameraTrack;
  public Boolean publishScreenTrack;
  public Boolean publishCustomAudioTrack;
  public Boolean publishCustomAudioTrackEnableAec;
  public Boolean publishCustomVideoTrack;
  public Boolean publishEncodedVideoTrack;
  public Boolean publishMediaPlayerAudioTrack;
  public Boolean publishMediaPlayerVideoTrack;
  public Integer publishMediaPlayerId;
  public Boolean publishAudioTrack;
  public Integer publishCustomAudioSourceId;
  public Boolean autoSubscribeAudio;
  public Boolean autoSubscribeVideo;
  public Boolean enableAudioRecordingOrPlayout;
  public Integer clientRoleType;
  public Integer defaultVideoStreamType;
  public Integer channelProfile;
  public Integer audioDelayMs;
  public String token;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcChannelMediaOptions : NSObject
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCameraTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishScreenTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomAudioTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomAudioTrackEnableAec;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomVideoTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishEncodedVideoTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishMediaPlayerAudioTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishMediaPlayerVideoTrack;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable publishMediaPlayerId;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable publishCustomAudioSourceId;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishAudioTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable autoSubscribeAudio;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable autoSubscribeVideo;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable enableAudioRecordingOrPlayout;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable clientRoleType;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable defaultVideoStreamType;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable channelProfile;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable audioDelayMs;
@property(copy, nonatomic) NSString * _Nullable token;
@end</codeblock>
            <codeblock props="windows" outputclass="language-cpp">struct ChannelMediaOptions {
  Optional&lt;bool> publishCameraTrack;
  Optional&lt;bool> publishSecondaryCameraTrack;
  Optional&lt;bool> publishAudioTrack;
  Optional&lt;bool> publishScreenTrack;
  Optional&lt;bool> publishSecondaryScreenTrack;
  Optional&lt;bool> publishCustomAudioTrack;
  Optional&lt;bool> publishCustomAudioTrackEnableAec;
  Optional&lt;bool> publishCustomVideoTrack;
  Optional&lt;bool> publishEncodedVideoTrack;
  Optional&lt;bool> publishMediaPlayerAudioTrack;
  Optional&lt;bool> publishMediaPlayerVideoTrack;
  Optional&lt;bool> publishTrancodedVideoTrack;
  Optional&lt;int> publishCustomAudioSourceId;
  Optional&lt;bool> autoSubscribeAudio;
  Optional&lt;bool> autoSubscribeVideo;
  Optional&lt;bool> enableAudioRecordingOrPlayout;
  Optional&lt;int> publishMediaPlayerId;
  Optional&lt;CLIENT_ROLE_TYPE> clientRoleType;
  Optional&lt;VIDEO_STREAM_TYPE> defaultVideoStreamType;
  Optional&lt;CHANNEL_PROFILE_TYPE> channelProfile;
  Optional&lt;int> audioDelayMs;
  Optional&lt;char*> token;
  ChannelMediaOptions() {}
  ~ChannelMediaOptions() {}
</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>publishCameraTrack</pt>
                <pd>Whether to publish the video captured by the camera:<ul id="ul_vx5_np5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video captured by the camera.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video captured by the camera.</li>
                    </ul></pd>
            </plentry>
            <plentry props="windows">
                <pt>publishSecondaryCameraTrack</pt>
                <pd>Whether to publish the video captured by the camera:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video captured by the second camera.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video captured by the second camera.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishAudioTrack</pt>
                <pd>Whether to publish the captured audio:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the captured audio.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the captured audio.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishScreenTrack</pt>
                <pd>
                    <p>Whether to publish the captured video from the screen:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the captured video from the screen.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the captured video from the screen.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry props="windows">
                <pt>publishSecondaryScreenTrack</pt>
                <pd>
                    <p>Whether to publish the captured video from the second screen:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the captured video from the second screen.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the captured video from the second screen.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry props="windows">
                <pt>publishTrancodedVideoTrack</pt>
                <pd>
                    <p>Whether to publish the local transcoded video.<ul>
                    <li><codeph><ph keyref="true"/>: Publish the local transcoded video.</codeph></li>
                    <li><codeph><ph keyref="false"/>: Do not publish the local transcoded video.</codeph></li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>publishCustomAudioTrack</pt>
                <pd>Whether to publish the captured audio from a custom source:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the captured audio from a custom source.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the captured audio from a custom source.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishCustomAudioSourceId</pt>
                <pd>The ID of the custom audio source to publish. The default value is 0.<p>If you have set the value of <parmname>sourceNumber</parmname> greater than 1 in <xref keyref="setExternalAudioSource2"/>, the SDK creates the corresponding number of custom audio tracks and assigns an ID to each audio track starting from 0.</p>
                </pd>
            </plentry>
            <plentry props="windows">
                <pt>publishCustomAudioTrackEnableAec</pt>
                <pd>Whether to enable AEC when publishing the captured audio from a custom source:<ul>
                    <li><codeph><ph keyref="true" /></codeph>: Enable AEC when publishing the captured audio from a custom source.</li>
                    <li><codeph><ph keyref="false" /></codeph>: Do not enable AEC when publishing the captured audio from a custom source.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishCustomVideoTrack</pt>
                <pd>Whether to publish the captured video from a custom source:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the captured video from a custom source.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the captured video from a custom source.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishEncodedVideoTrack</pt>
                <pd>Whether to publish the encoded video:<ul id="ul_ljg_4q5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Publish the encoded video.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the encoded video.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerAudioTrack</pt>
                <pd>Whether to publish the audio from the media player:<ul id="ul_gr3_rq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Publish the audio from the media player.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the audio from the media player.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerVideoTrack</pt>
                <pd>Whether to publish the video from the media player:<ul id="ul_gtd_tq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video from the media player.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish the video from the media player.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>autoSubscribeAudio</pt>
                <pd>Whether to automatically subscribe to all remote audio streams when the user joins a channel:<ul id="ul_gxf_vq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Subscribe to all remote audio streams.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not subscribe to any remote audio stream.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>autoSubscribeVideo</pt>
                <pd>Whether to subscribe to all remote video streams when the user joins the channel:<ul id="ul_gfh_xq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>: Subscribe to all remote video streams.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not subscribe to any remote video stream.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>enableAudioRecordingOrPlayout</pt>
                <pd>Whether to enable audio capturing or playback.<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Enable audio capturing and playback.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not enable audio capturing or playback.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerId</pt>
                <pd>The ID of the media player to be published. The default value is 0.</pd>
            </plentry>
            <plentry>
                <pt>clientRoleType</pt>
                <pd conkeyref="setClientRole1/clientrole"/>
            </plentry>
            <plentry>
                <pt>defaultVideoStreamType</pt>
                <pd conkeyref="setRemoteDefaultVideoStreamType/defaultstreamtype" />
            </plentry>
            <plentry>
                <pt>channelProfile</pt>
                <pd conkeyref="setChannelProfile/channelprofiletype"/>
            </plentry>
            <plentry props="windows">
                <pt>audioDelayMs</pt>
                <pd>
                    <p>The delay in ms for sending audio frames. This is used for explicit control of A/V sync.</p>
                    <p>To switch off the delay, set the value to 0.</p>
                </pd>
            </plentry>
            <plentry props="hide">
                <pt>publishCustomAudioTrackAec</pt>
                <pd>Whether to publish audio frames processed by the external echo cancellation module.<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish processed audio frames.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not publish processed audio frames.</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>token</pt>
                <pd>
                    <p>(Optional) The token generated on your server for authentication. See <xref keyref="guide-token">Authenticate Your Users with Token</xref>.</p>
                    <note type="caution">
                    <ul>
                    <li>This parameter takes effect only when calling <xref keyref="updateChannelMediaOptions" /> or <xref keyref="updateChannelMediaOptionsEx" />.</li>
                    <li>Ensure that the App ID, channel name, and user name used for creating the token are the same ones as those used by the <xref keyref="create2" /> method for initializing the RTC engine, and those used by the <xref keyref="joinChannel2" /> and <xref keyref="joinChannelEx" /> methods for joining the channel.</li>
                    </ul></note></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
