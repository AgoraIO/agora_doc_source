<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_setaudioprofile">
    <title><ph keyref="setAudioProfile" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the audio profile and audio scenario.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="setAudioProfile" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public abstract int setAudioProfile(int profile, int scenario);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioProfile:(AgoraAudioProfile)profile scenario:(AgoraAudioScenario)scenario;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual int setAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario) = 0;</codeblock>
                <codeblock props="electron" outputclass="language-typescript">setAudioProfile(profile: AUDIO_PROFILE_TYPE, scenario: AUDIO_SCENARIO_TYPE): number</codeblock>
                <codeblock props="unity" outputclass="language-csharp">public abstract int SetAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario);</codeblock>
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setAudioProfile(AudioProfile profile, AudioScenario scenario);</codeblock>
        </p>
        </section>
        <section id="detailed_desc">

   <note type="attention">
       <ul>
  <li props="rtc-ng">You can call this method either before or after joining a channel.</li>
           <li props="rtc">Ensure that you call this method before joining a channel.</li>
           <li>In scenarios requiring high-quality audio, such as online music tutoring, Agora recommends you set <parmname>profile</parmname> as <ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY" /> (4), and <parmname>scenario</parmname> as <ph keyref="AUDIO_SCENARIO_GAME_STREAMING" /> (3)<ph props="rtc-ng"> or <ph keyref="AUDIO_SCENARIO_HIGH_DEFINITION" />(6)</ph>.</li>
       </ul>
   </note>
        </section>
        <section id="parameters"><title>Parameters</title>
   <parml>
       <plentry>
  <pt>profile</pt>
  <pd>
      <p id="profile"><ph>The audio profile, including the sampling rate, bitrate, encoding mode, and the number of channels. </ph><ph props="ios mac windows electron unity flutter">See <xref keyref="AUDIO_PROFILE_TYPE"/>.</ph><ul props="android">
          <li><ph keyref="AUDIO_PROFILE_DEFAULT"/> (0): Default value<ul conkeyref="AUDIO_PROFILE_TYPE/default-profile">
                                <li/>
                                </ul></li>
          <li><ph keyref="AUDIO_PROFILE_SPEECH_STANDARD"/> (1): A sampling rate of 32 kHz, audio encoding, mono, and a bitrate of up to 18 Kbps.</li>
          <li><ph keyref="AUDIO_PROFILE_MUSIC_STANDARD"/> (2): A sampling rate of 48 kHz, music encoding, mono, and a bitrate of up to 64 Kbps.</li>
          <li><ph keyref="AUDIO_PROFILE_MUSIC_STANDARD_STEREO"/> (3): A sampling rate of 48 kHz, music encoding, stereo, and a bitrate of up to 80 Kbps.</li>
          <li><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY"/> (4): A sampling rate of 48 kHz, music encoding, mono, and a bitrate of up to 96 Kbps.</li>
          <li><ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO"/> (5): A sampling rate of 48 kHz, music encoding, stereo, and a bitrate of up to 128 Kbps.</li>
                            </ul></p>
  </pd>
       </plentry>
       <plentry>
  <pt>scenario</pt>
           <pd props="rtc-ng" id="scenario-ng"><ph>The audio scenario. </ph><ph props="ios mac windows electron unity flutter">See <xref keyref="AUDIO_SCENARIO_TYPE"/>. </ph><ph>Under different audio scenarios, the device uses different volume types.</ph><ul props="android" id="scenario">
               <li><ph keyref="AUDIO_SCENARIO_DEFAULT"/> (0): Automatic scenario match, where the SDK chooses the appropriate audio quality according to the user role and audio route.</li>
               <li><ph keyref="AUDIO_SCENARIO_GAME_STREAMING"/> (3): High-quality audio scenario, where users mainly play music.</li>
               <li><ph keyref="AUDIO_SCENARIO_CHATROOM"/> (5): Chatroom scenario, where users need to frequently switch the user role or mute and unmute the microphone.</li>
               <li><ph keyref="AUDIO_SCENARIO_HIGH_DEFINITION"/> (6): High-quality audio scenario, where users mainly play music.</li>
               <li><ph keyref="AUDIO_SCENARIO_CHORUS"/> (7): Real-time chorus scenario, where users have good network conditions and require extremely low latency.<note conkeyref="AUDIO_SCENARIO_TYPE/chorus"/></li>
                        </ul></pd>
           <pd props="rtc"><ph>The audio scenario. </ph><ph props="ios mac windows electron unity flutter">See <xref keyref="AUDIO_SCENARIO_TYPE"/>. </ph><ph>Under different audio scenarios, the device uses different volume types.</ph><ul props="android">
               <li><ph keyref="AUDIO_SCENARIO_DEFAULT"/> (0): The default audio scenario.</li>
               <li><ph keyref="AUDIO_SCENARIO_CHATROOM_ENTERTAINMENT"/>(1): Entertainment scenario where users need to frequently switch the user role.</li>
               <li><ph keyref="AUDIO_SCENARIO_EDUCATION"/>(2): Education scenario where users want smoothness and stability.</li>
               <li><ph keyref="AUDIO_SCENARIO_GAME_STREAMING"/> (3): High-quality audio scenario, where users mainly play music.</li>
               <li><ph keyref="AUDIO_SCENARIO_SHOWROOM"/>(4): Showroom scenario where a single host wants high-quality audio.</li>
               <li><ph keyref="AUDIO_SCENARIO_CHATROOM_GAMING"/>(5): Gaming scenario for group chat that only contains the human voice.</li>
               <li><ph keyref="AUDIO_SCENARIO_IOT"/> (6): IoT (Internet of Things) scenario where users use IoT devices with low power consumption.</li>
               <li><ph keyref="AUDIO_SCENARIO_MEETING"/>(8): Meeting scenario that mainly contains the human voice.</li>
           </ul></pd>
       </plentry>
   </parml>
        </section>
        <section id="return_values" props="native electron unity">
   <title>Returns</title>
   <ul>
       <li>0: Success.</li>
       <li> &lt; 0: Failure.</li>
   </ul>
        </section></refbody>
</reference>