<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_setaudioprofile">
    <title><ph keyref="setAudioProfile" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the audio profile and audio scenario.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="setAudioProfile" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public abstract int setAudioProfile(int profile, int scenario);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioProfile:(AgoraAudioProfile)profile scenario:(AgoraAudioScenario)scenario;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual int setAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario) = 0;</codeblock>
                <codeblock props="electron" outputclass="language-typescript">setAudioProfile(profile: AUDIO_PROFILE_TYPE, scenario: AUDIO_SCENARIO_TYPE): number</codeblock>
                <codeblock props="unity" outputclass="language-csharp">public abstract int SetAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario);</codeblock>
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setAudioProfile(AudioProfile profile, AudioScenario scenario);</codeblock>
        </p>
        </section>
        <section id="detailed_desc">

   <note type="attention">
       <ul>
  <li props="rtc-ng">You can call this method either before or after joining a channel.</li>
           <li props="rtc">Ensure that you call this method before joining a channel.</li>
           <li>In scenarios requiring high-quality audio, such as online music tutoring, Agora recommends you set <parmname>profile</parmname> as <ph keyref="AUDIO_PROFILE_MUSIC_HIGH_QUALITY" /> (4), and <parmname>scenario</parmname> as <ph keyref="AUDIO_SCENARIO_GAME_STREAMING" /> (3)<ph props="rtc-ng"> or <ph keyref="AUDIO_SCENARIO_HIGH_DEFINITION" />(6)</ph>.</li>
       </ul>
   </note>
        </section>
        <section id="parameters"><title>Parameters</title>
   <parml>
       <plentry>
  <pt>profile</pt>
  <pd>
      <p>The audio profile, including the sampling rate, bitrate, encoding mode, and the number of channels. See <xref keyref="AUDIO_PROFILE_TYPE" />.</p>
  </pd>
       </plentry>
       <plentry>
  <pt>scenario</pt>
  <pd>The audio scenario. See <xref keyref="AUDIO_SCENARIO_TYPE" />. Under different audio scenarios, the device uses different volume types.</pd>
       </plentry>
   </parml>
        </section>
        <section id="return_values" props="native electron unity">
   <title>Returns</title>
   <ul>
       <li>0: Success.</li>
       <li> &lt; 0: Failure.</li>
   </ul>
        </section></refbody>
</reference>