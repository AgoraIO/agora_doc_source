<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_registermediametadataobserver">
    <title><ph keyref="registerMediaMetadataObserver" /></title>
    <shortdesc id="short"><ph id="shortdesc">Registers the metadata observer.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="registerMediaMetadataObserver" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
        <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public abstract int registerMediaMetadataObserver(IMetadataObserver observer, int type);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)setMediaMetadataDelegate:(id&lt;AgoraMediaMetadataDelegate&gt; _Nullable)metadataDelegate withType:(AgoraMetadataType)type;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual int registerMediaMetadataObserver(IMetadataObserver *observer, IMetadataObserver::METADATA_TYPE type) = 0;
</codeblock>
                <codeblock props="electron" outputclass="language-typescript">registerMediaMetadataObserver(type: METADATA_TYPE = 0): number </codeblock>
                <codeblock props="unity" outputclass="language-csharp">public abstract int RegisterMediaMetadataObserver(METADATA_TYPE type);</codeblock>
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; registerMediaMetadataObserver();</codeblock>
        </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since" props="rtc">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v2.4.1</dd>
            </dlentry>
            </dl>
            <p props="android ios mac windows">You need to implement the <xref keyref="IMetadataObserver" /> class and specify the metadata type in this method. This method enables you to add synchronized metadata in the video stream for more diversified
 live interactive streaming, such as sending shopping links, digital coupons, and online quizzes.</p>
            <p props="android ios mac windows">A successful call of this method triggers the <xref keyref="getMaxMetadataSize" /> callback.</p>
            <p>
            <note type="attention">
            <ul id="ul_bmd_btz_r4b">
            <li>Call this method before <apiname keyref="joinChannel2" />.</li>
            <li>This method applies only to interactive live streaming.</li>
            </ul> </note> </p>
        </section>
        <section id="parameters" props="android apple windows electron unity">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>observer</pt>
                <pd>The metadata observer. See <xref keyref="IMetadataObserver" />.</pd>
            </plentry>
            <plentry id="metadatatype">
                <pt>type</pt>
                <pd>The metadata type. The SDK currently only supports <apiname keyref="VIDEO_METADATA" />. See <xref keyref="METADATA_TYPE" />.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="android apple windows electron unity">
            <title>Returns</title>
            <ul>
            <li>0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul> </section>
    </refbody>
</reference>