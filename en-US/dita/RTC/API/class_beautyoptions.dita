<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_beautyoptions">
    <title>
        <ph keyref="BeautyOptions"/>
    </title>
    <shortdesc id="short"><ph id="shortdesc">Image enhancement options.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p props="rtc-ng" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public class BeautyOptions {
  public static final int LIGHTENING_CONTRAST_LOW = 0;
  public static final int LIGHTENING_CONTRAST_NORMAL = 1;
  public static final int LIGHTENING_CONTRAST_HIGH = 2;

  public int lighteningContrastLevel;
  public float lighteningLevel;
  public float smoothnessLevel;
  public float rednessLevel;
  public float sharpnessLevel;
}</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraBeautyOptions : NSObject

@property(nonatomic, assign) AgoraLighteningContrastLevel lighteningContrastLevel;
@property(nonatomic, assign) float lighteningLevel;
@property(nonatomic, assign) float smoothnessLevel;
@property(nonatomic, assign) float rednessLevel;
@property(nonatomic, assign) float sharpnessLevel;
@end</codeblock>
                <codeblock props="cpp" outputclass="language-cpp">struct BeautyOptions {
    enum LIGHTENING_CONTRAST_LEVEL {
        LIGHTENING_CONTRAST_LOW = 0,
        LIGHTENING_CONTRAST_NORMAL,
        LIGHTENING_CONTRAST_HIGH
    };
    LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel;
    float lighteningLevel;
    float smoothnessLevel;
    float rednessLevel;
    float sharpnessLevel;
    BeautyOptions(LIGHTENING_CONTRAST_LEVEL contrastLevel, float lightening, float smoothness, float redness, float sharpness) : lighteningContrastLevel(contrastLevel), lighteningLevel(lightening), smoothnessLevel(smoothness), rednessLevel(redness), sharpnessLevel(sharpness) {}
    BeautyOptions() : lighteningContrastLevel(LIGHTENING_CONTRAST_NORMAL), lighteningLevel(0), smoothnessLevel(0), rednessLevel(0), sharpnessLevel(0) {}
};
</codeblock>
                <codeblock props="cs" outputclass="language-csharp">public class BeautyOptions
    {
        public BeautyOptions()
        {
            lighteningContrastLevel = LIGHTENING_CONTRAST_LEVEL.LIGHTENING_CONTRAST_NORMAL;
        }
        public BeautyOptions(
            LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel, float lighteningLevel, float smoothnessLevel,
            float rednessLevel, float sharpnessLevel)
        {
            this.lighteningContrastLevel = lighteningContrastLevel;
            this.lighteningLevel = lighteningLevel;
            this.smoothnessLevel = smoothnessLevel;
            this.rednessLevel = rednessLevel;
            this.sharpnessLevel = sharpnessLevel;
        }
        
        public LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel { set; get; }
        
        public float lighteningLevel { set; get; }
        
        public float smoothnessLevel { set; get; }
        
        public float rednessLevel { set; get; }
        
        public float sharpnessLevel { set; get; }
    }

    }</codeblock>
            </p>
            <p props="rtc" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java"/>
                <codeblock props="ios mac" outputclass="language-objectivec"/>
                <codeblock props="cpp" outputclass="language-cpp">struct BeautyOptions {
    enum LIGHTENING_CONTRAST_LEVEL
    {
        LIGHTENING_CONTRAST_LOW = 0,
        LIGHTENING_CONTRAST_NORMAL,
        LIGHTENING_CONTRAST_HIGH
    };

    LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel;
    float lighteningLevel;
    float smoothnessLevel;
    float rednessLevel;

    BeautyOptions(LIGHTENING_CONTRAST_LEVEL contrastLevel, float lightening, float smoothness, float redness)
        : lighteningLevel(lightening),
        smoothnessLevel(smoothness),
        rednessLevel(redness),
        lighteningContrastLevel(contrastLevel) {}

    BeautyOptions()
        : lighteningLevel(0),
        smoothnessLevel(0),
        rednessLevel(0),
        lighteningContrastLevel(LIGHTENING_CONTRAST_NORMAL) {}
    };</codeblock>
                <codeblock props="cs" outputclass="language-csharp">public class BeautyOptions
    {
        public BeautyOptions()
        {
            lighteningContrastLevel = LIGHTENING_CONTRAST_LEVEL.LIGHTENING_CONTRAST_NORMAL;
        }

        public BeautyOptions(
            LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel, float lighteningLevel, float smoothnessLevel,
            float rednessLevel, float sharpnessLevel)
        {
            this.lighteningContrastLevel = lighteningContrastLevel;
            this.lighteningLevel = lighteningLevel;
            this.smoothnessLevel = smoothnessLevel;
            this.rednessLevel = rednessLevel;
            this.sharpnessLevel = sharpnessLevel;
        }

        public LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel { set; get; }
        public float lighteningLevel { set; get; }
        public float smoothnessLevel { set; get; }
        public float rednessLevel { set; get; }
        public float sharpnessLevel { set; get; }
    }</codeblock>
                <codeblock props="electron" outputclass="language-typescript">export interface BeautyOptions {
    lighteningContrastLevel: LIGHTENING_CONTRAST_LEVEL;
    lighteningLevel: number;
    smoothnessLevel: number;
    rednessLevel: number;
    }</codeblock>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart">class BeautyOptions {

  @JsonKey(includeIfNull: false)
  LighteningContrastLevel? lighteningContrastLevel;

  @JsonKey(includeIfNull: false)
  double? lighteningLevel;

  @JsonKey(includeIfNull: false)
  double? smoothnessLevel;

  @JsonKey(includeIfNull: false)
  double? rednessLevel;

  BeautyOptions({
    this.lighteningContrastLevel,
    this.lighteningLevel,
    this.smoothnessLevel,
    this.rednessLevel,
  });

  factory BeautyOptions.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$BeautyOptionsFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$BeautyOptionsToJson(this);
}</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title>
                <text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/>
            </title>
            <parml>
                <plentry>
                    <pt>lighteningContrastLevel</pt>
                    <pd>contrast, often with <codeph>lighteningLevel</codeph> . The larger the
                        value, the greater the contrast between light and dark. For more details,
                        see <xref keyref="LIGHTENING_CONTRAST_LEVEL"/>.</pd>
                </plentry>
                <plentry>
                    <pt>lighteningLevel</pt>
                    <pd props="rtc"><ph>The brightness level. The value ranges from 0.0 (original)
                            to 1.0. The default is </ph>&gt;<ph props="ios mac">0.6</ph>
                        <ph props="android">0.6</ph>
                        <ph props="cpp">0.6</ph> . The greater the value, the greater the degree of
                        whitening.</pd>
                    <pd props="rtc-ng">The brightness level. The value ranges from 0.0 (original) to
                        1.0. The default is <ph props="ios">0.7</ph>
                        <ph props="android">0.6</ph>
                        <ph props="cpp">0.0</ph> . The greater the value, the greater the degree of
                        whitening.</pd>
                </plentry>
                <plentry>
                    <pt>smoothnessLevel</pt>
                    <pd props="rtc">The value ranges from 0.0 (original) to 1.0. The default value
                        is 0.5. The greater the value, the greater the degree of skin grinding.</pd>
                    <pd props="rtc-ng">The value ranges from 0.0 to 1.0, where 0.0 indicates the
                        original peeling degree. The default value is <ph props="ios">0.5</ph>
                        <ph props="android">0.5</ph>
                        <ph props="cpp">0.0</ph> . The greater the value, the greater the degree of
                        skin grinding.</pd>
                </plentry>
                <plentry>
                    <pt>rednessLevel</pt>
                    <pd props="rtc">The value ranges from 0.0 (original) to 1.0. The default value
                        is 0.1. The larger the value, the greater the rosy degree.</pd>
                    <pd props="rtc-ng">The sharpness level. The value ranges between 0 (original)
                        and 1. <ph props="ios">0.1</ph>
                        <ph props="android">0.1</ph>
                        <ph props="cpp">0.0</ph> . The larger the value, the greater the rosy
                        degree.</pd>
                </plentry>
                <plentry props="native cs">
                    <pt>sharpnessLevel</pt>
                    <pd props="rtc">The sharpness level. The value ranges from 0.0 (original) to
                        1.0. The default value is 0.10.30.0. The larger the value, the greater the
                        sharpening degree.</pd>
                    <pd props="rtc-ng">The sharpness level. The value ranges between 0 (original)
                        and 1. <ph props="ios">0.1</ph>
                        <ph props="android">0.3</ph>
                        <ph props="cpp">0.0</ph> . The larger the value, the greater the sharpening
                        degree.</pd>
                </plentry>
            </parml>
        </section>
    </refbody>
</reference>
