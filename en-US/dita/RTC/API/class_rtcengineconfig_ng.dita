<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_rtcengineconfig">
    <title><ph keyref="RtcEngineConfig"/></title>
    <shortdesc id="short"><ph id="shortdesc">Definition of <apiname keyref="RtcEngineConfig"/>.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class RtcEngineConfig {
  public Context mContext;
  public String mAppId;
  public Constants.AreaCode mAreaCode;
  public IAgoraEventHandler mEventHandler;
  public int mChannelProfile;
  public int mAudioScenario;
  public boolean mEnableAudioDevice;
  public List&lt;String> mExtensionList;
  public IMediaExtensionObserver mExtensionObserver;
  public LogConfig mLogConfig;
  public String mNativeLibPath;

  public static class LogConfig {
    public String filePath;
    public int fileSizeInKB;
    public int level = Constants.LogLevel.getValue(Constants.LogLevel.LOG_LEVEL_INFO);

    @CalledByNative("LogConfig")
    public String getFilePath() {
      return filePath;
    }

    @CalledByNative("LogConfig")
    public int getFileSize() {
      return fileSizeInKB;
    }

    @CalledByNative("LogConfig")
    public int getLevel() {
      return level;
    }
  }

  public RtcEngineConfig() {
    mContext = null;
    mAppId = "";
    mChannelProfile = Constants.CHANNEL_PROFILE_LIVE_BROADCASTING;
    mEventHandler = null;
    mEnableAudioDevice = true;
    mAudioScenario = Constants.AUDIO_SCENARIO_HIGH_DEFINITION;
    mAreaCode = Constants.AreaCode.AREA_CODE_GLOB;
    mExtensionList = new ArrayList&lt;>();
    mExtensionObserver = null;
    mLogConfig = new LogConfig();
  }

  public void addExtension(String providerName) {
    mExtensionList.add(providerName);
  }

  @CalledByNative
  public Context getContext() {
    return mContext;
  }

  @CalledByNative
  public String getAppId() {
    return mAppId;
  }

  @CalledByNative
  public int getChannelProfile() {
    return mChannelProfile;
  }

  @CalledByNative
  public int getAudioScenario() {
    return mAudioScenario;
  }

  @CalledByNative
  public boolean isAudioDeviceEnabled() {
    return mEnableAudioDevice;
  }

  @CalledByNative
  public int getAreaCode() {
    return Constants.AreaCode.getValue(mAreaCode);
  }

  @CalledByNative
  public IMediaExtensionObserver getExtensionObserver() {
    return mExtensionObserver;
  }

  @CalledByNative
  public LogConfig getLogConfig() {
    return mLogConfig;
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcEngineConfig: NSObject
 @property (copy, nonatomic) NSString * _Nullable appId;
 @property (assign, nonatomic) AgoraChannelProfile channelProfile;
 @property (assign, nonatomic) AgoraAudioScenario audioScenario;
 @property (assign, nonatomic) AgoraAreaCodeType areaCode;
 @property (strong, nonatomic) AgoraLogConfig * _Nullable logConfig;
 @property (copy, nonatomic) NSArray&lt;id&lt;AgoraMediaFilterExtensionDelegate>>* _Nullable mediaFilterExtensions;
 @property (weak, nonatomic) id&lt;AgoraMediaFilterEventDelegate> _Nullable eventDelegate;
@end</codeblock>
            <codeblock props="windows" outputclass="language-cpp">struct RtcEngineContext {
  IRtcEngineEventHandler* eventHandler;
  const char* appId;
  void* context;
  bool enableAudioDevice;
  CHANNEL_PROFILE_TYPE channelProfile;
  AUDIO_SCENARIO_TYPE audioScenario;
  unsigned int areaCode;
  commons::LogConfig logConfig;

  RtcEngineContext()
      : eventHandler(NULL), appId(NULL), context(NULL),
        enableAudioDevice(true), channelProfile(CHANNEL_PROFILE_LIVE_BROADCASTING),
        audioScenario(AUDIO_SCENARIO_HIGH_DEFINITION),
        areaCode(AREA_CODE_GLOB),
        logConfig() {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript"></codeblock>
            <codeblock props="unity" outputclass="language-csharp"></codeblock>
            <codeblock props="rn" outputclass="language-typescript"></codeblock>
            <codeblock props="flutter" outputclass="language-dart"></codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#metadata/property"/></title>
            <parml>
                <plentry props="windows android">
                    <pt props="windows">eventHandler</pt>
                    <pt props="android">mEventHandler</pt>
                    <pd id="eventhandler"><xref keyref="IRtcEngine"/> The event handler for . See <xref keyref="IRtcEngineEventHandler"
                        />.</pd>
                </plentry>
                <plentry>
                    <pt props="windows ios mac">appId</pt>
                    <pt props="android">mAppId</pt>
                    <pd id="appid">The App ID issued by Agora for your project.  Only users in apps with the same App ID can join the same channel and communicate with each other. An
                        App ID can only be used to create one <apiname keyref="IRtcEngine"/> instance. To change your App ID, call <xref
                            keyref="release"/> to destroy the current  <apiname keyref="IRtcEngine"/>instance and then create a new one.</pd>
                </plentry>
                <plentry props="android windows">
                    <pt props="windows">context</pt>
                    <pt props="android">mContext</pt>
                    <pd id="context">
                        <ul props="windows">
                            <li>For Windows, it is the window handle of the app. Once set, this parameter enables you to plug or unplug the video devices while they are powered.</li>
                            <li>For Android, it is the context of Android Activity.</li>
                        </ul>
                        <p props="android">The context of Android Activity.</p>
                    </pd>
                </plentry>
                <plentry props="android windows">
                    <pt props="windows">enableAudioDevice</pt>
                    <pt props="android">mEnableAudioDevice</pt>
                    <pd>Whether to allow the SDK to use audio devices:<ul>
                            <li><codeph><ph keyref="true"/></codeph>: (Default) Allow the SDK to use audio devices.</li>
                            <li><codeph><ph keyref="false"/></codeph>: Do not allow the SDK to use audio devices.</li>
                        </ul></pd>
                    <pd>
                        <note type="attention">
                            <p>If you need to get the mixed remote audio data through <xref keyref="pullAudioFrame"/>, ensure that you set this parameter as
<codeph><ph keyref="false"/></codeph>                                        .</p>
                        </note>
                    </pd>
                </plentry>
                <plentry>
                    <pt props="windows ios mac">channelProfile</pt>
                    <pt props="android">mChannelProfile</pt>
                        <pd conkeyref="setChannelProfile/channelprofiletype"/>
                </plentry>
                <plentry>
                    <pt props="windows ios mac">audioScenario</pt>
                    <pt props="android">mAudioScenario</pt>
                    <pd>The audio application scenarios. For details, see <xref keyref="AUDIO_SCENARIO_TYPE"/>.</pd>
                    <pd>
                        <note type="attention" props="hide">Agora recommends that you use the following scenarios.<ul>
                                    <li><ph keyref="AUDIO_SCENARIO_DEFAULT"/>(0).</li>
                                    <li><ph keyref="AUDIO_SCENARIO_GAME_STREAMING"/>(3).</li>
                                    <li><ph keyref="AUDIO_SCENARIO_HIGH_DEFINITION"/>(6).</li>
                                </ul>
                        </note>
                    </pd>
                </plentry>
                <plentry>
                    <pt props="windows ios mac">areaCode</pt>
                    <pt props="android">mAreaCode</pt>
                    <pd>The region for connection. This is an advanced feature and applies to scenarios that have regional restrictions. For details on supported regions, see <xref keyref="AREA_CODE"
                            />.<p>After specifying the region, the app integrated with the Agora SDK connects to the Agora servers within that region.</p></pd>
                </plentry>
                <plentry>
                    <pt props="windows ios mac">logConfig</pt>
                    <pt props="android">mLogConfig</pt>
                    <pd>
                        <p>The log files that the SDK outputs. For details, see <xref keyref="LogConfig"/>.</p>
                        <p>By default, the SDK outputs four log files:
<codeph>                                agorasdk.log</codeph>, <codeph>agorasdk1.log</codeph>, <codeph>agoraapi.log</codeph>, and<codeph>agoraapi1.log</codeph>
                            .  The <codeph>agorasdk.log</codeph> and
<codeph>                                agorasdk1.log</codeph> files each have a default size of 1,024
                                KB, and the <codeph>agoraapi.log</codeph> and <codeph>agoraapi1.log</codeph> files
                            each have a default size of 2.048 KB.  These log files are encoded in UTF-8.</p>
                        <p>The SDK writes the latest logs in <codeph>agorasdk.log</codeph> or <codeph>agoraapi.log</codeph>
                            . When <codeph>agorasdk.log</codeph> or <codeph>agoraapi.log</codeph> is full,
                            the SDK deletes <codeph>agorasdk1.log</codeph> and
<codeph>                            agoraapi1.log</codeph>, renames <codeph>agorasdk.log</codeph>
                                to <codeph>agorasdk1.log</codeph> and <codeph>agoraapi.log</codeph> to
<codeph>                                agoraapi1.log</codeph>, and creates a new <codeph>agorasdk.log</codeph>
                            or <codeph>agoraapi.log</codeph> to record the latest logs.</p>
                    </pd>
                </plentry>
                <plentry props="android">
                    <pt>mExtensionList</pt>
                    <pd>The list of extensions.</pd>
                </plentry>
                <plentry props="android ios mac">
                    <pt props="android">mExtensionObserver</pt>
                    <pt props="ios mac">eventDelegate</pt>
                    <pd> The <xref keyref="IMediaExtensionObserver"/> instance.</pd>
                </plentry>
                <plentry props="ios mac">
                    <pt>mediaFilterExtensions</pt>
                    <pd>
                         The <xref keyref="AgoraMediaFilterExtensionDelegate"/> instance.</pd>
                </plentry>
            </parml>
        </section>
    </refbody>
</reference>
