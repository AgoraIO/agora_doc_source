<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videoencoderconfiguration">
    <title><ph keyref="VideoEncoderConfiguration"/></title>
    <shortdesc id="short"><ph id="shortdesc">Video encoder configurations.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p props="rtc-ng" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public class VideoEncoderConfiguration {

  public VideoDimensions dimensions;
  public int frameRate;
  public int minFrameRate;
  public int bitrate;
  public int minBitrate;
  public ORIENTATION_MODE orientationMode;
  public DEGRADATION_PREFERENCE degradationPrefer;
  public MIRROR_MODE_TYPE mirrorMode;
}</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraVideoEncoderConfiguration : NSObject
@property(assign, nonatomic) CGSize dimensions;
@property(assign, nonatomic) AgoraVideoCodecType codecType;
@property(assign, nonatomic) AgoraVideoFrameRate frameRate;
@property(assign, nonatomic) NSInteger bitrate;
@property(assign, nonatomic) NSInteger minBitrate;
@property(assign, nonatomic) AgoraVideoOutputOrientationMode orientationMode;
@property(assign, nonatomic) AgoraVideoMirrorMode mirrorMode;
@property (assign, nonatomic) AgoraDegradationPreference degradationPreference;

- (instancetype _Nonnull)initWithSize:(CGSize)size
                            frameRate:(AgoraVideoFrameRate)frameRate
                              bitrate:(NSInteger)bitrate
                      orientationMode:(AgoraVideoOutputOrientationMode)orientationMode
                           mirrorMode:(AgoraVideoMirrorMode)mirrorMode;

- (instancetype _Nonnull)initWithWidth:(NSInteger)width
                                height:(NSInteger)height
                             frameRate:(AgoraVideoFrameRate)frameRate
                               bitrate:(NSInteger)bitrate
                       orientationMode:(AgoraVideoOutputOrientationMode)orientationMode
                            mirrorMode:(AgoraVideoMirrorMode)mirrorMode;
@end</codeblock>
                <codeblock props="windows" outputclass="language-cpp">struct VideoEncoderConfiguration {
  VIDEO_CODEC_TYPE codecType;
  VideoDimensions dimensions;
  int frameRate;
  int bitrate;
  int minBitrate;
  ORIENTATION_MODE orientationMode;
  DEGRADATION_PREFERENCE degradationPreference;
  VIDEO_MIRROR_MODE_TYPE mirrorMode;

  VideoEncoderConfiguration(const VideoDimensions&amp; d, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_DISABLED)
      : codecType(VIDEO_CODEC_H264),
        dimensions(d),
        frameRate(f),
        bitrate(b),
        minBitrate(DEFAULT_MIN_BITRATE),
        orientationMode(m),
        degradationPreference(MAINTAIN_QUALITY),
        mirrorMode(mirror) {}
  VideoEncoderConfiguration(int width, int height, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_DISABLED)
      : codecType(VIDEO_CODEC_H264),
        dimensions(width, height),
        frameRate(f),
        bitrate(b),
        minBitrate(DEFAULT_MIN_BITRATE),
        orientationMode(m),
        degradationPreference(MAINTAIN_QUALITY),
        mirrorMode(mirror) {}
  VideoEncoderConfiguration(const VideoEncoderConfiguration&amp; config)
      : codecType(config.codecType),
        dimensions(config.dimensions),
        frameRate(config.frameRate),
        bitrate(config.bitrate),
        minBitrate(config.minBitrate),
        orientationMode(config.orientationMode),
        degradationPreference(config.degradationPreference),
        mirrorMode(config.mirrorMode) {}
  VideoEncoderConfiguration()
      : codecType(VIDEO_CODEC_H264),
        dimensions(FRAME_WIDTH_640, FRAME_HEIGHT_360),
        frameRate(FRAME_RATE_FPS_15),
        bitrate(STANDARD_BITRATE),
        minBitrate(DEFAULT_MIN_BITRATE),
        orientationMode(ORIENTATION_MODE_ADAPTIVE),
        degradationPreference(MAINTAIN_QUALITY),
        mirrorMode(VIDEO_MIRROR_MODE_DISABLED) {}
};</codeblock>
            </p>
            <p props="rtc" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java"/>
                <codeblock props="ios mac" outputclass="language-objectivec"/>
                <codeblock props="windows unity" outputclass="language-cpp">struct VideoEncoderConfiguration {
    VideoDimensions dimensions;
    FRAME_RATE frameRate;
    int minFrameRate;
    int bitrate;
    int minBitrate;
    ORIENTATION_MODE orientationMode;
    DEGRADATION_PREFERENCE degradationPreference;
    VIDEO_MIRROR_MODE_TYPE mirrorMode;
    
    VideoEncoderConfiguration(
        const VideoDimensions&amp;amp; d, FRAME_RATE f,
        int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mr = VIDEO_MIRROR_MODE_AUTO)
        : dimensions(d), frameRate(f), minFrameRate(-1), bitrate(b),
        minBitrate(DEFAULT_MIN_BITRATE), orientationMode(m),
        degradationPreference(MAINTAIN_QUALITY), mirrorMode(mr)
    {}
    VideoEncoderConfiguration(
        int width, int height, FRAME_RATE f,
        int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mr = VIDEO_MIRROR_MODE_AUTO)
        : dimensions(width, height), frameRate(f),
        minFrameRate(-1), bitrate(b),
        minBitrate(DEFAULT_MIN_BITRATE), orientationMode(m),
        degradationPreference(MAINTAIN_QUALITY), mirrorMode(mr)
    {}
    VideoEncoderConfiguration()
        : dimensions(640, 480)
        , frameRate(FRAME_RATE_FPS_15)
        , minFrameRate(-1)
        , bitrate(STANDARD_BITRATE)
        , minBitrate(DEFAULT_MIN_BITRATE)
        , orientationMode(ORIENTATION_MODE_ADAPTIVE)
        , degradationPreference(MAINTAIN_QUALITY)
        , mirrorMode(VIDEO_MIRROR_MODE_AUTO)
    {}
    };</codeblock>
                <codeblock props="electron" outputclass="language-typescript">export interface VideoEncoderConfiguration {
    dimensions: VideoDimensions;
    frameRate: FRAME_RATE;
    minFrameRate: number;
    bitrate: number;
    minBitrate: number;
    orientationMode: ORIENTATION_MODE;
    degradationPreference: DEGRADATION_PREFERENCE;
    mirrorMode: VIDEO_MIRROR_MODE_TYPE;
    }</codeblock>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart"/>
            </p>
        </section>
        <section id="parameters">
   <title><text conref="../conref/conref_api_metadata.dita#metadata/property"/></title>
   <parml>
       <plentry>
  <pt>dimensions</pt>
  <pd>
      <p props="android windows">The dimensions of the encoded video (px). See <xref keyref="VideoDimensions"/>. This parameter measures the video encoding quality in the format of length × width. The default value is 640 × 360. You can set a custom value.</p>
      <p props="ios mac">The dimensions of the encoded video (px). This parameter measures the video encoding quality in the format of length × width. The default value is 640 × 360. You can set a custom value, or select from the following list:<ul>
              <li>AgoraVideoDimension120x120</li>
              <li>AgoraVideoDimension160x120</li>
              <li>AgoraVideoDimension180x180</li>
              <li>AgoraVideoDimension180x180</li>
              <li>AgoraVideoDimension320x180</li>
              <li>AgoraVideoDimension240x240</li>
              <li>AgoraVideoDimension320x240</li>
              <li>AgoraVideoDimension424x240</li>
              <li>AgoraVideoDimension360x360</li>
              <li>AgoraVideoDimension480x360</li>
              <li>AgoraVideoDimension640x360</li>
              <li>AgoraVideoDimension480x480</li>
              <li>AgoraVideoDimension640x480</li>
              <li>AgoraVideoDimension840x480</li>
              <li>AgoraVideoDimension960x720</li>
              <li>AgoraVideoDimension1280x720</li>
              <li>AgoraVideoDimension1920x1080 (macOS only)</li>
              <li props="hide">AgoraVideoDimension2540x1440 (macOS only)</li>
              <li props="hide">AgoraVideoDimension3840x2160 (macOS only)</li>
          </ul>
          <note type="attention">
              <ul>
                  <li>Whether the 720p resolution or above can be supported depends on the device. If the device cannot support 720p, the frame rate will be lower than the set value.</li>
                  <li>iPhones do not support video frame dimensions above 720p.</li>
                  </ul>
          </note>
      </p></pd>
       </plentry>
       <plentry props="rtc-ng">
                    <pt props="ios mac windows">codecType</pt>
           <pd props="ios mac windows">
                        <p>The codec type of the local video stream. See <xref keyref="VIDEO_CODEC_TYPE"/>.</p>
                    </pd>
                </plentry>
       <plentry>
  <pt>frameRate</pt>
  <pd>
      <p>The encoding frame rate (fps) of the video. See <xref keyref="FRAME_RATE"/>. The default value is 15.</p>
  </pd>
       </plentry>
       <plentry>
  <pt>minFramerate</pt>
  <pd>The minimum encoding frame rate of the video. The default value is -1.</pd>
       </plentry>
       <plentry>
  <pt>bitrate</pt>
  <pd>
      <p>The encoding bitrate (Kbps) of the video.</p>
      <p props="rtc">You can refer to the table below to set the bitrate according to your app scenario. If the bitrate you set is beyond the reasonable range, the SDK sets it within a reasonable range. You can also choose from the following options:</p>
      <ul props="rtc">
 <li><option keyref="STANDARD_BITRATE" /> : (Recommended)
     Standard bitrate mode. In this mode, the video bitrate of the Live-broadcasting profile is twice that of the Communication profile.</li>
 <li><option keyref="COMPATIBLE_BITRATE" />
     : Adaptive bitrate mode. In this mode, the bitrate differs between the Live-broadcasting and Communication profiles. If you choose this mode in the Live-broadcasting profile, the video frame rate may be lower than the set value.</li>
      </ul>
      <ul props="rtc-ng">
          <li><option keyref="STANDARD_BITRATE" /> : (Recommended)
              Standard bitrate mode. In this mode, the video bitrate is twice the base bitrate.</li>
          <li><option keyref="COMPATIBLE_BITRATE" />
              : Adaptive bitrate mode. In this mode, the video bitrate is the same as the base bitrate. If you choose this mode in the Live-broadcasting profile, the video frame rate may be lower than the set value.</li>
      </ul>
      <p props="rtc">Agora uses different video codecs for different profiles to optimize user experience. The Communication profile prioritizes smoothness while the Live-broadcasting profile prioritizes video quality (a higher bitrate).  Therefore, Agora recommends setting this parameter as
<option keyref="STANDARD_BITRATE" /> . You can also set the bitrate value of the Live-broadcasting profile to twice the bitrate value of the Communication profile.</p>
      <table props="rtc" id="table_bitrate">
 <tgroup cols="4">
     <colspec colnum="1" colname="col1"/>
     <colspec colnum="2" colname="col2"/>
     <colspec colnum="3" colname="col3"/>
     <colspec colnum="4" colname="col4"/>
     <thead>
<row>
    <entry>Dimensions</entry>
    <entry>Frame rate (fps)</entry>
    <entry>Bitrate (Kbps) for Communication</entry>
    <entry>Bitrate (Kbps) for Live-broadcasting</entry>
</row>
     </thead>
     <tbody>
<row>
    <entry>160 × 120</entry>
    <entry>15</entry>
    <entry>65</entry>
    <entry>130</entry>
</row>
<row>
    <entry>120 × 120</entry>
    <entry>15</entry>
    <entry>50</entry>
    <entry>100</entry>
</row>
<row>
    <entry>320 × 180</entry>
    <entry>15</entry>
    <entry>140</entry>
    <entry>280</entry>
</row>
<row>
    <entry>180 × 180</entry>
    <entry>15</entry>
    <entry>100</entry>
    <entry>200</entry>
</row>
<row>
    <entry>240 × 180</entry>
    <entry>15</entry>
    <entry>120</entry>
    <entry>240</entry>
</row>
<row>
    <entry>320 × 240</entry>
    <entry>15</entry>
    <entry>200</entry>
    <entry>400</entry>
</row>
<row>
    <entry>240 × 240</entry>
    <entry>15</entry>
    <entry>140</entry>
    <entry>280</entry>
</row>
<row>
    <entry>424 × 240</entry>
    <entry>15</entry>
    <entry>220</entry>
    <entry>440</entry>
</row>
<row>
    <entry>640 × 360</entry>
    <entry>15</entry>
    <entry>400</entry>
    <entry>800</entry>
</row>
<row>
    <entry>360 × 360</entry>
    <entry>15</entry>
    <entry>260</entry>
    <entry>520</entry>
</row>
<row>
    <entry>640 × 360</entry>
    <entry>30</entry>
    <entry>600</entry>
    <entry>1200</entry>
</row>
<row>
    <entry>360 × 360</entry>
    <entry>30</entry>
    <entry>400</entry>
    <entry>800</entry>
</row>
<row>
    <entry>480 × 360</entry>
    <entry>15</entry>
    <entry>320</entry>
    <entry>640</entry>
</row>
<row>
    <entry>480 × 360</entry>
    <entry>30</entry>
    <entry>490</entry>
    <entry>980</entry>
</row>
<row>
    <entry>640 × 480</entry>
    <entry>15</entry>
    <entry>500</entry>
    <entry>1000</entry>
</row>
<row>
    <entry>480 × 480</entry>
    <entry>15</entry>
    <entry>400</entry>
    <entry>800</entry>
</row>
<row>
    <entry>640 × 480</entry>
    <entry>30</entry>
    <entry>750</entry>
    <entry>1500</entry>
</row>
<row>
    <entry>480 × 480</entry>
    <entry>30</entry>
    <entry>600</entry>
    <entry>1200</entry>
</row>
<row>
    <entry>848 × 480</entry>
    <entry>15</entry>
    <entry>610</entry>
    <entry>1220</entry>
</row>
<row>
    <entry>848 × 480</entry>
    <entry>30</entry>
    <entry>930</entry>
    <entry>1860</entry>
</row>
<row>
    <entry>640 × 480</entry>
    <entry>10</entry>
    <entry>400</entry>
    <entry>800</entry>
</row>
<row>
    <entry>1280 × 720</entry>
    <entry>15</entry>
    <entry>1130</entry>
    <entry>2260</entry>
</row>
<row>
    <entry>1280 × 720</entry>
    <entry>30</entry>
    <entry>1710</entry>
    <entry>3420</entry>
</row>
<row>
    <entry>960 × 720</entry>
    <entry>15</entry>
    <entry>910</entry>
    <entry>1820</entry>
</row>
<row>
    <entry>960 × 720</entry>
    <entry>30</entry>
    <entry>1380</entry>
    <entry>2760</entry>
</row>
<row>
    <entry>1920 × 1080</entry>
    <entry>15</entry>
    <entry>2080</entry>
    <entry>4160</entry>
</row>
<row>
    <entry>1920 × 1080</entry>
    <entry>30</entry>
    <entry>3150</entry>
    <entry>6300</entry>
</row>
<row>
    <entry>1920 × 1080</entry>
    <entry>60</entry>
    <entry>4780</entry>
    <entry>6500</entry>
</row>
     </tbody>
 </tgroup>
      </table>
  </pd>
       </plentry>
       <plentry>
  <pt>minBitrate</pt>
  <pd>
      <p>The minimum encoding bitrate (Kbps) of the video.</p>
      <p>The SDK automatically adjusts the encoding bitrate to adapt to the network conditions. Using a value greater than the default value forces the video encoder to output high-quality images but may cause more packet loss and sacrifice the smoothness of the video transmission. Unless you have special requirements for image quality, Agora does not recommend changing this value.</p>
      <note type="attention">This parameter only applies to the Live-broadcasting profile.</note>
  </pd>
       </plentry>
       <plentry>
  <pt>orientationMode</pt>
  <pd>
      The orientation mode of the encoded video. See <xref keyref="ORIENTATION_MODE" />.</pd>
       </plentry>
       <plentry>
  <pt>degradationPreference</pt>
  <pd>Video degradation preference under limited bandwidth. For details, see <xref keyref="DEGRADATION_PREFERENCE" />.</pd>
       </plentry>
       <plentry>
  <pt>mirrorMode</pt>
  <pd>
      <dl outputclass="since" props="rtc">
 <dlentry>
     <dt>Since</dt>
     <dd>v3.3.0</dd>
 </dlentry>
      </dl>
      <p>
 Whether to mirror the video when encoding the video. It only affects the video that the remote user sees. <ph props="ios mac windows electron">For details, see <xref keyref="VIDEO_MIRROR_MODE_TYPE" />.</ph><ul conkeyref="setLocalRenderMode2/videomirrormodetype" props="android"><li/></ul>
      </p>
      <note type="attention">By default, the video is not mirrored.</note>
  </pd>
       </plentry>
   </parml>
        </section>
    </refbody>
</reference>
