<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaplayer_registeraudioframeobserver2">
    <title><ph keyref="registerAudioFrameObserver2_IMediaPlayer" /></title>
    <shortdesc id="short"><ph id="shortdesc">Registers an audio frame observer object.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="registerAudioFrameObserver2_IMediaPlayer" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock" props="rtc-ng">
            <codeblock props="cs" outputclass="language-csharp">public abstract void RegisterAudioFrameObserver(IAgoraRtcMediaPlayerAudioFrameObserver observer, RAW_AUDIO_FRAME_OP_MODE_TYPE mode);</codeblock> </p>
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int registerAudioFrameObserver(IMediaPlayerAudioFrameObserver audioFrameObserver, int mode);
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec" />
            <codeblock props="cpp" outputclass="language-cpp">virtual int registerAudioFrameObserver(media::base::IAudioFrameObserver observer, RAW_AUDIO_FRAME_OP_MODE_TYPE mode) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript" />
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart" /> </p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt props="android">audioFrameObserver</pt>
                <pt props="cpp">observer</pt>
                <pd>
                    <p>The audio frame observer, reporting the reception of each audio frame. See <xref keyref="IMediaPlayerAudioFrameObserver" props="android" /><xref keyref="IAudioFrameObserver" props="cpp" />.</p>
                </pd>
            </plentry>
            <plentry>
                <pt>mode</pt>
                <pd>
                    <p props="cpp">The use mode of the audio frame. See <xref keyref="RAW_AUDIO_FRAME_OP_MODE_TYPE" />.</p>
                    <p props="android" id="mode">The use mode of the audio frame:
                    
                    <ul>
                    <li><ph keyref="RAW_AUDIO_FRAME_OP_MODE_READ_ONLY" />(0): Read-only mode. Users only read the
 audio data without modifying anything. For example, when users acquire the data with the Agora SDK, then start the media push.</li>
                    <li props="rtc"><ph keyref="RAW_AUDIO_FRAME_OP_MODE_WRITE_ONLY" />(1): Write-only mode: Users replace the
 audio data with their own data and pass the data to the SDK for encoding. For example, when users acquire the data.</li>
                    <li><ph keyref="RAW_AUDIO_FRAME_OP_MODE_READ_WRITE" />(2): Read and write mode: Users read the
 data from AudioFrame, modify it, and then play it. For example, when users have their own audio-effect processing module and perform some voice pre-processing, such as a voice change.</li>
                    </ul> </p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values">
            <title>Returns</title>
            <ul id="ul_uns_l2y_hqb">
            <li>0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul> </section>
    </refbody>
</reference>