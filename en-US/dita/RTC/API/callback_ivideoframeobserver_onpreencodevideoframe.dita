<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_onpreencodevideoframe">
    <title><ph keyref="onPreEncodeVideoFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs each time the SDK receives a video frame before
            encoding.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onPreEncodeVideoFrame"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock" props="rtc-ng">
                <codeblock props="android" outputclass="language-java">boolean onPreEncodeVideoFrame(VideoFrame videoFrame);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)onPreEncodeVideoFrame:(AgoraOutputVideoFrame * _Nonnull)srcFrame dstFrame:(AgoraOutputVideoFrame *_Nullable* _Nullable)dstFrame;</codeblock>
                <codeblock props="cpp" outputclass="language-cpp">virtual bool onPreEncodeVideoFrame(VideoFrame&amp; videoFrame) = 0;</codeblock>
                <codeblock props="cs" outputclass="language-csharp"/>
            </p>
            <p outputclass="codeblock" props="rtc">
                <codeblock props="android" outputclass="language-java"/>
                <codeblock props="ios mac" outputclass="language-objectivec"/>
                <codeblock props="cpp" outputclass="language-cpp">virtual bool onPreEncodeVideoFrame(VideoFrame&amp; videoFrame) { return true; }</codeblock>
                <codeblock props="electron" outputclass="language-typescript"/>
                <codeblock props="cs" outputclass="language-csharp">public virtual bool OnPreEncodeVideoFrame(VideoFrame videoFrame)
        {
            return true;
        }</codeblock>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart"/>
            </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since" props="rtc">
                <dlentry props="native">
                    <dt>Since</dt>
                    <dd>v3.0.0</dd>
                </dlentry>
            </dl>
            <p>After you successfully register the video frame observer, the SDK triggers this
                callback each time it receives a video frame. In this callback, you can get the
                video data before encoding and then process the data according to your particular
                scenarios.</p>
            <p>After processing, you can send the processed video data back to the SDK in this
                callback.</p>
            <note type="attention">
                <ul>
                    <li>To get the video data captured from the second screen before encoding, you
                        need to set <apiname keyref="POSITION_PRE_ENCODER" props="hide"/>(1 &lt;&lt;
                        2) as a frame position through <xref keyref="getObservedFramePosition"
                        />.</li>
                    <li>The video data that this callback gets has been preprocessed, with its
                        content cropped and rotated, and the image enhanced.</li>
                    <li>This callback does not support sending processed RGBA video data back to the
                        SDK.</li>
                </ul></note>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
                <plentry conkeyref="onCaptureVideoFrame/videoframe">
                    <pt/>
                    <pd/>
                </plentry>
            </parml>
        </section>
        <section id="return_values">
            <title>Returns</title>
            <p conkeyref="onCaptureVideoFrame/return"/>
        </section>
    </refbody>
</reference>
