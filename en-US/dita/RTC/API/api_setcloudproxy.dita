<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_setcloudproxy">
    <title>
        <ph keyref="setCloudProxy" />
    </title>
    <shortdesc id="short"><ph id="shortdesc">Sets the Agora cloud proxy service.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setCloudProxy" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec" />
            <codeblock props="windows" outputclass="language-cpp">virtual int setCloudProxy(CLOUD_PROXY_TYPE proxyType) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">setCloudProxy(type: CLOUD_PROXY_TYPE): number</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int SetCloudProxy(CLOUD_PROXY_TYPE proxyType);</codeblock>
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setCloudProxy(CloudProxyType proxyType);</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since" props="rtc">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>3.3.0</dd>
            </dlentry>
            </dl>
            <p>When users' network access is restricted by a firewall, configure the firewall to allow specific IP addresses and ports provided by Agora; then, call this method to enable the cloud proxy and set the cloud proxy type with the <parmname>proxyType</parmname> parameter.</p>
            <p>After successfully connecting to the cloud proxy, the SDK triggers the <xref keyref="onConnectionStateChanged" /> (<ph keyref="CONNECTION_STATE_CONNECTING" />, <ph keyref="CONNECTION_CHANGED_SETTING_PROXY_SERVER" />) callback.</p>
            <p>As of v3.6.2, when a user calls this method and then joins a channel successfully, the SDK triggers the <xref keyref="onProxyConnected" /> callback to report the user ID, the proxy type connected, and the time elapsed from the user calling <xref keyref="joinChannel1" /> until this callback is triggered.</p>
            <p>To disable the cloud proxy that has been set, call <apiname>setCloudProxy</apiname>(<ph keyref="NONE_PROXY" />).</p>
            <p>To change the cloud proxy type that has been set, call <apiname>setCloudProxy</apiname>(<ph keyref="NONE_PROXY" />) first, and then call <apiname>setCloudProxy</apiname> with the desired <parmname>proxyType</parmname>.</p>
            <note type="attention">
            <ul>
            <li>Agora recommends that you call this method before joining the channel or after leaving the channel.</li>
            <li>For the SDK v3.3.x, when users use the Force UDP cloud proxy, the services for Media Push and cohosting across channels are not available; for the SDK v3.4.0 or later, when users behind a firewall use the Force UDP cloud proxy, the services for Media Push and cohosting across channels are not available.</li>
            <li>When you use the Force TCP cloud proxy, note the following:

                <ul>
                <li>An error occurs when calling  <xref keyref="startAudioMixing" /> to play online music files in the HTTP protocol.</li>
                <li>The services for Media Push and cohosting across channels use the cloud proxy with the TCP protocol.</li>
                </ul></li>
            </ul> </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>proxyType</pt>
                <pd>The type of the cloud proxy. See <xref keyref="CLOUD_PROXY_TYPE" /> . This parameter is required. The SDK reports an error if you do not pass in a value.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native electron unity">
            <title>Returns</title>
            <ul>
            <li>0: Success.</li>
            <li>
                    &lt; 0: Failure.

                <ul>
                <li>-2 (<codeph>ERR_INVALID_ARGUMENT</codeph>): The parameter is invalid.</li>
                <li>-7(<codeph>ERR_NOT_INITIALIZED</codeph>): The SDK is not initialized.</li>
                </ul> </li>
            </ul> </section>
    </refbody>
</reference>