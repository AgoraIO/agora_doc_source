<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_startscreencapturebydisplayid">
    <title><ph keyref="startScreenCaptureByDisplayId" /></title>
    <shortdesc id="short"><ph id="shortdesc">Shares the screen by specifying the display ID.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="startScreenCaptureByDisplayId" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock" props="rtc-ng">
            <codeblock props="mac" outputclass="language-objectivec">- (int)startScreenCaptureByDisplayId:(UInt32)displayId
                regionRect:(CGRect)regionRect
                captureParams:(AgoraScreenCaptureParameters *_Nonnull)captureParams;</codeblock> 
        </p>
        <p outputclass="codeblock" props="rtc">
            <codeblock props="mac" outputclass="language-objectivec">- (int)startScreenCaptureByDisplayId:(NSUInteger)displayId rectangle:(CGRect)rectangle parameters:(AgoraScreenCaptureParameters* _Nonnull)captureParams;</codeblock>
        </p>
        <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />  
            <codeblock props="windows" outputclass="language-cpp">virtual int startScreenCaptureByDisplayId(unsigned int displayId, const Rectangle&amp; regionRect,
                const ScreenCaptureParameters&amp; captureParams) = 0;
            </codeblock>
            <codeblock props="electron" outputclass="language-typescript" />
            <codeblock props="unity" outputclass="language-csharp">public abstract int StartScreenCaptureByDisplayId(uint displayId, Rectangle regionRect,
                ScreenCaptureParameters captureParams);</codeblock>
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startScreenCaptureByDisplayId(int displayId,
      [Rectangle? regionRect, ScreenCaptureParameters? captureParams]);</codeblock>
        </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since" props="rtc">
       <dlentry props="native">
  <dt>Since</dt>
  <dd>v2.4.0</dd>
       </dlentry>
   </dl>
   <p>This method shares a screen or part of the screen. You need to specify the ID of the screen to be shared in this method.</p>
   <note type="attention">
       <p props="mac">Call this method after joining a channel.</p>
       <ul props="windows flutter">
           <li>This method applies to macOS only.</li>
           <li>Call this method after joining a channel.</li>
       </ul>
   </note>
        </section>
        <section id="parameters"><title>Parameters</title>
   <parml>
       <plentry>
  <pt>displayId</pt>
  <pd>The display ID of the screen to be shared. This parameter specifies which screen you want to share.</pd>
       </plentry>
       <plentry props="windows unity flutter">
  <pt>regionRect</pt>
  <pd>(Optional) Sets the relative location of the region to the screen. If you do not set this parameter, the SDK shares the whole screen. For details, see <xref keyref="Rectangle" />. If the specified region overruns the screen, the SDK shares only the region within it; if you set width or height as 0, the SDK shares the whole screen.</pd>
       </plentry>
       <plentry props="mac">
           <pt props="rtc">rectangle</pt>
           <pt props="rtc-ng">regionRect</pt>
  <pd>(Optional) Sets the relative location of the region to the screen. If you do not set this parameter, the SDK shares the whole screen. It consists of the following parameters:<ul>
      <li>x: The horizontal offset from the top-left corner.</li>
      <li>y: The vertical offset from the top-left corner.</li>
      <li>width: The width of the region.</li>
      <li>height: The height of the region.</li>
  </ul>
      <p>If the specified region overruns the screen, the SDK shares only the region within it; if you set width or height as 0, the SDK shares the whole screen.</p></pd>
       </plentry>
       <plentry>
  <pt>captureParams</pt>
  <pd>Screen sharing configurations. The default video dimension is 1920 x 1080, that is, 2,073,600 pixels. Agora uses the value of this parameter to calculate the charges. For details, see <xref keyref="ScreenCaptureParameters" />.</pd>
       </plentry>
   </parml>
        </section>
        <section id="return_values" props="native electron unity">
   <title>Returns</title>
   <ul>
       <li>0: Success.</li>
       <li>&lt; 0: Failure.</li>
   </ul>
        </section></refbody>
</reference>