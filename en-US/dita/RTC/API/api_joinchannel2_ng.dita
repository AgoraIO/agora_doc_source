<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_joinchannel2">
    <title><ph keyref="joinChannel2"/></title>
    <shortdesc id="short"><ph id="shortdesc">Joins a channel with media options.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="joinChannel2" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public abstract int joinChannel(
      String token, String channelId, int uid, ChannelMediaOptions options);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (int)joinChannelByToken:(NSString * _Nullable)token
                channelId:(NSString * _Nonnull)channelId
                      uid:(NSUInteger)uid
             mediaOptions:(AgoraRtcChannelMediaOptions * _Nonnull)mediaOptions
              joinSuccess:(void(^ _Nullable)(NSString * _Nonnull channel, NSUInteger uid, NSInteger elapsed))joinSuccessBlock;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual int joinChannel(const char* token, const char* channelId, uid_t uid,
                          const ChannelMediaOptions&amp; options) = 0;</codeblock>
                <codeblock props="electron" outputclass="language-typescript">joinChannel(
    token: string,
    info: string,
    uid: number,
    options?: ChannelMediaOptions
    ): number</codeblock>
                <codeblock props="unity" outputclass="language-csharp"/>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart"/>
        </p>
        </section>
        <section id="detailed_desc">
            <p id="desc1">This method enables users to join a channel. Users in the same channel can talk to each other, and multiple users in the same channel can start a group chat.  Users with different App IDs
                cannot call each other.</p>
            <p id="desc2">A successful call of this method triggers the following callbacks: <ul>
                <li>The local client: The <xref keyref="onJoinChannelSuccess"/> and <xref keyref="onConnectionStateChanged"/> callbacks.</li>
                <li>The remote client: <xref keyref="onUserJoined"/>, if the user joining the channel is in the Communication profile or is a host in the Live-broadcasting profile.</li>
            </ul></p>
            <p id="desc3">When the connection between the client and Agora&apos;s server is interrupted due to poor network conditions, the SDK tries reconnecting to the server. When the local client successfully rejoins the channel, the SDK triggers the <xref keyref="onRejoinChannelSuccess"/> callback on the local client.</p>
            <p props="android ios mac windows">Compared to <xref keyref="joinChannel1"/>, this method adds
                    the <parmname>options</parmname> parameter to configure whether to automatically subscribe to all remote audio and video streams in the channel when the user joins the channel. 
                By default, the user subscribes to the audio and video streams of all the other users in the channel, giving rise to usage and billing. To stop subscribing to the stream, use the <parmname>options</parmname>
                parameter or the corresponding <apiname>mute</apiname> methods.</p>
           <note
                    id="note_cyz_w1l_mqb" type="attention">
                    <ul id="ul_sz1_y1l_mqb">
                        <li>This method allows users to join only one channel at a time.</li>
                        <li>Ensure that the App ID you use to generate the token is the same App ID that you pass in the <xref keyref="create2"/> method. Otherwise, you may fail to use a token
                            to join the channel.</li>
                    </ul>
                </note>
        </section>
        <section id="parameters"><title>Parameter</title>
   <parml>
       <plentry id="token">
  <pt>token</pt>
  <pd>
      <p>The token generated on your server for authentication. <ph props="ios android windows">See<xref keyref="guide-token"> Authenticate Your Users with Token</xref>.</ph></p>
      </pd>
       </plentry>
       <plentry id="channelID">
  <pt props="ios mac windows">channelId</pt>
  <pt props="android">channelName</pt>
  <pd>
      <p id="channelID_desc">The channel name. This parameter signifies the channel in which users engage in real-time audio and video interaction. With the same App ID, users who fill in the same channel name enter the same channel
          for audio and video interaction. The string length must be less than 64 bytes. Supported characters:<ul id="char_support">
     <li>The 26 lowercase English letters: a to z.</li>
     <li>The 26 uppercase English letters: A to Z.</li>
     <li>The 10 numeric characters: 0 to 9.</li>
     <li>Space</li>
     <li>&quot;!&quot;, &quot;#&quot;, &quot;$&quot;, &quot;%&quot;, &quot;&amp;&quot;, &quot;(&quot;, &quot;)&quot;, &quot;+&quot;, &quot;-&quot;, &quot;:&quot;, &quot;;&quot;, &quot;&lt;&quot;, &quot;=&quot;, &quot;.&quot;, &quot;>&quot;, &quot;?&quot;, &quot;@&quot;, &quot;[&quot;, &quot;]&quot;, &quot;^&quot;, &quot;_&quot;, &quot;{&quot;, &quot;}&quot;, &quot;|&quot;, &quot;~&quot;, &quot;,&quot;</li>
 </ul></p>
  </pd>
       </plentry>
       <plentry id="uid">
           <pt props="ios mac windows">uid</pt>
           <pt props="android">optionalUid</pt>
  <pd>User ID This parameter is used to identify the user in the channel for real-time audio and video interaction. You need to set and manage user IDs yourself, and ensure that each user ID in the same channel is unique.  This parameter is a 32-bit unsigned integer.  The value range is 1 to
                            2<sup>32</sup>-1. If the user ID is not assigned (or set to 0), the SDK assigns and returns a user ID in the <apiname
                            keyref="onJoinChannelSuccess"/> callback. Your app must maintain the returned user ID, because the SDK
                        does not do so.</pd>
       </plentry>
       <plentry id="options">
  <pt props="android windows electron">options</pt>
  <pt props="ios mac">mediaOptions</pt>
  <pd>The channel media options. For details, see <xref keyref="ChannelMediaOptions"/>.</pd>
       </plentry>
       <plentry props="ios mac" id="joinsuccessblock">
           <pt>joinSuccess</pt>
           <pd>The block of a user joining the specified channel. <codeph>joinSuccessBlock</codeph> takes higher priority than <xref keyref="onJoinChannelSuccess"/>. If you implement both callbacks, only <codeph>block</codeph> is triggered. Agora recommends
               setting <codeph>joinSuccessBlock</codeph> as <codeph>nil</codeph> to use the <xref keyref="IRtcEngineEventHandler"/> callback.</pd>
       </plentry>
   </parml>
        </section>
        <section id="return_values">
   <title>Returns</title>
   <ul>
       <li>0: Success.</li>
       <li>&lt; 0: Failure.</li>
   </ul>
        </section></refbody>
</reference>
