<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_registerlocaluseraccount">
    <title><ph keyref="registerLocalUserAccount"/></title>
    <shortdesc id="short"><ph id="shortdesc">Registers a user account.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="registerLocalUserAccount" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public abstract int registerLocalUserAccount(String appId, String userAccount);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (int)registerLocalUserAccountWithAppID:(NSString * _Nonnull)appID userAccount:(NSString * _Nonnull)userAccount;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual int registerLocalUserAccount(const char* appId, const char* userAccount) = 0;</codeblock>
                <codeblock props="electron" outputclass="language-typescript">registerLocalUserAccount(appId: string, userAccount: string): number</codeblock>
                <codeblock props="unity" outputclass="language-csharp"/>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart"/>
        </p>
        </section>
        <section id="detailed_desc">
   
   <dl outputclass="since" props="rtc">
       <dlentry>
  <dt>Since</dt>
  <dd>v2.8.0</dd>
       </dlentry>
   </dl>
   <p>Once registered, the user account can be used to identify the local user when the user joins the channel. After the registration is successful, the user account can identify the identity of the local user, and the user can use it to join the channel.</p>
   <p>After the user successfully registers a user account, the SDK triggers the <xref keyref="onLocalUserRegistered"/> callback on the local client, reporting the user ID and user account of the local user.</p>
   <p>This method is optional. To join a channel with a user account, you can choose either of the following ways:<ul>
       <li>Call <apiname keyref="registerLocalUserAccount"/> to to create a user account, and then call <apiname keyref="joinChannelWithUserAccount2"/> to join the channel.</li>
       <li>Call the <apiname keyref="joinChannelWithUserAccount2"/> method to join the channel.</li>
   </ul></p>
   <p>The difference between the two ways is that the time elapsed between calling the <apiname keyref="registerLocalUserAccount"/> method and joining the channel is shorter than directly calling <apiname keyref="joinChannelWithUserAccount2"/>.</p>
   <note type="attention">
       <ul>
  <li>Ensure that you set the <parmname>userAccount</parmname> parameter. Otherwise, this method does not take effect.</li>
  <li>Ensure that the user account is unique in the channel.</li>
  <li>To ensure smooth communication, use the same parameter type to identify the user. For example, if a user joins the channel with a user ID, then ensure all the other users use the user ID too. The same applies to the user account. If a user joins the channel with the Agora Web SDK, ensure that the uid of the user is set to the same parameter type.</li>
       </ul>
   </note>
        </section>
        <section id="parameters"><title>Parameter</title>
   <parml>
       <plentry>
  <pt props="android windows">appId</pt>
           <pt props="ios mac">appID</pt>
  <pd>The App ID of your project on Agora Console.</pd>
       </plentry>
       <plentry>
  <pt>userAccount</pt>
  <pd><p>The user account. This parameter is used to identify the user in the channel for real-time audio and video engagement. You need to set and manage user accounts yourself and ensure that each user account in the same channel is unique. The maximum length of this parameter is 255 bytes. Ensure that you set this parameter and do not set it as <ph keyref="NULL"/>. Supported characters are (89 in total):<ul>
      <li>The 26 lowercase English letters: a to z.</li>
      <li>The 26 uppercase English letters: A to Z.</li>
      <li>All numeric characters: 0 to 9.</li>
      <li>Space</li>
      <li>&quot;!&quot;、&quot;#&quot;、&quot;$&quot;、&quot;%&quot;、&quot;&amp;&quot;、&quot;(&quot;、&quot;)&quot;、&quot;+&quot;、&quot;-&quot;、&quot;:&quot;、&quot;;&quot;、&quot;&lt;&quot;、&quot;=&quot;、&quot;.&quot;、&quot;>&quot;、&quot;?&quot;、&quot;@&quot;、&quot;[&quot;、&quot;]&quot;、&quot;^&quot;、&quot;_&quot;、&quot;{&quot;、&quot;}&quot;、&quot;|&quot;、&quot;~&quot;、&quot;,&quot;</li>
  </ul></p></pd>
       </plentry>
   </parml>
        </section>
        <section id="return_values">
   <title>Returns</title>
   <ul>
       <li>0: Success.</li>
       <li>&lt; 0: Failure.</li>
   </ul>
        </section></refbody>
</reference>
