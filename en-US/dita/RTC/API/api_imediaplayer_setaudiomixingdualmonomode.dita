<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaplayer_setaudiomixingdualmonomode">
    <title><ph keyref="setAudioMixingDualMonoMode" /></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the channel mode of the current audio file.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="setAudioMixingDualMonoMode" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public abstract int setAudioMixingDualMonoMode(int mode);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (int)setAudioMixingDualMonoMode:(AgoraAudioMixingDualMonoMode)mode;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual int setAudioMixingDualMonoMode(agora::media::AUDIO_MIXING_DUAL_MONO_MODE mode) = 0;</codeblock>
                <codeblock props="electron" outputclass="language-typescript" />
                <codeblock props="unity" outputclass="language-csharp" />
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; setAudioMixingDualMonoMode(AudioMixingDualMonoMode mode);</codeblock>
            </p>
        </section>
        <section id="detailed_desc">
            <dl outputclass="since" props="rtc">
                <dlentry props="native">
                    <dt>Since</dt>
                    <dd>v3.5.1</dd>
                </dlentry>
            </dl>
            <p>In a stereo music file, the left and right channels can store different audio data. According to your needs, you can set the channel mode to original mode, left channel mode, right channel mode, or mixed channel mode. For example, in the KTV scenario, the left channel of the music file stores the musical accompaniment, and the right channel stores the singing voice. If you only need to listen to the accompaniment, call this method to set the channel mode of the music file to left channel mode; if you need to listen to the accompaniment and the singing voice at the same time, call this method to set the channel mode to mixed channel mode.</p>
            <note type="attention" id="note"><ul>
                <li>Call this method after calling <xref keyref="startAudioMixing2" /> and receiving the <xref keyref="onAudioMixingStateChanged" /> (<apiname keyref="AUDIO_MIXING_STATE_PLAYING" />) callback.</li>
                <li>This method only applies to stereo audio files.</li>
            </ul></note>
        </section>
        <section id="parameters"><title>Parameters</title>
            <parml>
                <plentry>
                    <pt>mode</pt>
                    <pd><ph>The channel mode.</ph><ph props="windows mac ios flutter"> For details, see <xref keyref="AUDIO_MIXING_DUAL_MONO_MODE" />.</ph><ul props="android">
                            <li><ph keyref="AUDIO_MIXING_DUAL_MONO_AUTO" /> (0): Original mode.</li>
                            <li><ph keyref="AUDIO_MIXING_DUAL_MONO_L" /> (1): Left channel mode. This mode replaces the audio of the right channel with the audio of the left channel, which means the user can only hear the audio of the left channel.</li>
                            <li><ph keyref="AUDIO_MIXING_DUAL_MONO_R" /> (2): Right channel mode. This mode replaces the audio of the left channel with the audio of the right channel, which means the user can only hear the audio of the right channel.</li>
                            <li><ph keyref="AUDIO_MIXING_DUAL_MONO_MIX" /> (3): Mixed channel mode. This mode mixes the audio of the left channel and the right channel, which means the user can hear the audio of the left channel and the right channel at the same time.</li>
                        </ul>
                    </pd>
                </plentry>
            </parml>
        </section>
        <section id="return_values" props="native unity electron">
            <title>Returns</title>
            <ul>
                <li>0: Success.</li>
                <li>&lt; 0: Failure.</li>
            </ul>
        </section>
    </refbody>
</reference>