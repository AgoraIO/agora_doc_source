<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_localvideostats">
    <title><ph keyref="LocalVideoStats" /></title>
    <shortdesc id="short"><ph id="shortdesc">The statistics of the local video stream.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p props="rtc-ng" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public static class LocalVideoStats {
    public int uid;
    public int sentBitrate;
    public int sentFrameRate;
    public int encoderOutputFrameRate;
    public int rendererOutputFrameRate;
    public int targetBitrate;
    public int targetFrameRate;
    public int qualityAdaptIndication;
    public int encodedBitrate;
    public int encodedFrameWidth;
    public int encodedFrameHeight;
    public int encodedFrameCount;
    public int codecType;
    public int txPacketLossRate;
  }</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcLocalVideoStats : NSObject
@property(assign, nonatomic) NSUInteger sentBitrate;
@property(assign, nonatomic) NSUInteger sentFrameRate;
@property(assign, nonatomic) NSUInteger uid;
@property(assign, nonatomic) NSInteger encoderOutputFrameRate;
@property(assign, nonatomic) NSInteger rendererOutputFrameRate;
@property(assign, nonatomic) NSInteger targetFrameRate;
@property(assign, nonatomic) AgoraVideoQualityAdaptIndication qualityAdaptIndication;
@property(assign, nonatomic) NSInteger targetBitrate;
@property(assign, nonatomic) NSInteger encodedBitrate;
@property(assign, nonatomic) NSInteger encodedFrameWidth;
@property(assign, nonatomic) NSInteger encodedFrameHeight;
@property(assign, nonatomic) NSInteger encodedFrameCount;
@property(assign, nonatomic) AgoraVideoCodecType codecType;
@property(assign, nonatomic) NSInteger txPacketLossRate;
@end</codeblock>
                <codeblock props="windows" outputclass="language-cpp">struct LocalVideoStats
{
    uid_t uid;
    int sentBitrate;
    int sentFrameRate;
    int encoderOutputFrameRate;
    int rendererOutputFrameRate;
    int targetBitrate;
    int targetFrameRate;
    QUALITY_ADAPT_INDICATION qualityAdaptIndication;
    int encodedBitrate;
    int encodedFrameWidth;
    int encodedFrameHeight;
    int encodedFrameCount;
    VIDEO_CODEC_TYPE codecType;
    int txPacketLossRate;
};</codeblock>
            </p>
            <p props="rtc" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public static class LocalVideoStats {
    public int sentBitrate;
    public int sentFrameRate;
    public int encoderOutputFrameRate;
    public int rendererOutputFrameRate;
    public int targetBitrate;
    public int targetFrameRate;
    public int qualityAdaptIndication;
    public int encodedBitrate;
    public int encodedFrameWidth;
    public int encodedFrameHeight;
    public int encodedFrameCount;
    public int codecType;
    public int txPacketLossRate;
    public int captureFrameRate;
    public int captureBrightnessLevel;
}</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcLocalVideoStats : NSObject
@property(assign, nonatomic) NSUInteger sentBitrate;
@property(assign, nonatomic) NSUInteger sentFrameRate;
@property(assign, nonatomic) NSUInteger encoderOutputFrameRate;
@property(assign, nonatomic) NSUInteger rendererOutputFrameRate;
@property(assign, nonatomic) NSUInteger sentTargetBitrate;
@property(assign, nonatomic) NSUInteger sentTargetFrameRate;
@property(assign, nonatomic) AgoraVideoQualityAdaptIndication qualityAdaptIndication;
@property(assign, nonatomic) NSUInteger encodedBitrate;
@property(assign, nonatomic) NSUInteger encodedFrameWidth;
@property(assign, nonatomic) NSUInteger encodedFrameHeight;
@property(assign, nonatomic) NSUInteger encodedFrameCount;
@property(assign, nonatomic) AgoraVideoCodecType codecType;
@property(assign, nonatomic) NSInteger txPacketLossRate;
@property(assign, nonatomic) NSInteger captureFrameRate;
@property(assign, nonatomic) AgoraCaptureBrightnessLevelType captureBrightnessLevel;
@end</codeblock>
                <codeblock props="windows unity" outputclass="language-cpp">struct LocalVideoStats {
  int sentBitrate;
  int sentFrameRate;
  int encoderOutputFrameRate;
  int rendererOutputFrameRate;
  int targetBitrate;
  int targetFrameRate;
  QUALITY_ADAPT_INDICATION qualityAdaptIndication;
  int encodedBitrate;
  int encodedFrameWidth;
  int encodedFrameHeight;
  int encodedFrameCount;
  VIDEO_CODEC_TYPE codecType;
  unsigned short txPacketLossRate;
  int captureFrameRate;
  CAPTURE_BRIGHTNESS_LEVEL_TYPE captureBrightnessLevel;
};</codeblock>
                <codeblock props="electron" outputclass="language-typescript">export interface LocalVideoStats {
     sentBitrate: number;
     sentFrameRate: number;
     encoderOutputFrameRate: number;
     rendererOutputFrameRate: number;
     targetBitrate: number;
     targetFrameRate: number;
     qualityAdaptIndication: QUALITY_ADAPT_INDICATION;
     encodedBitrate: number;
     encodedFrameWidth: number;
     encodedFrameHeight: number;
     encodedFrameCount: number;
     codecType: VIDEO_CODEC_TYPE;
     txPacketLossRate: number;
     captureFrameRate: number;   
     captureBrightnessLevel: CAPTURE_BRIGHTNESS_LEVEL_TYPE;
     }</codeblock>
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">class LocalVideoStats {
  
  int sentBitrate;
  int sentFrameRate;
  int encoderOutputFrameRate;
  int rendererOutputFrameRate;
  int targetBitrate;
  int targetFrameRate;
  VideoQualityAdaptIndication qualityAdaptIndication;
  int encodedBitrate;
  int encodedFrameWidth;
  int encodedFrameHeight;
  int encodedFrameCount;
  VideoCodecType codecType;
  int txPacketLossRate;
  int captureFrameRate;
  CaptureBrightnessLevelType captureBrightnessLevel;

  LocalVideoStats(
    this.sentBitrate,
    this.sentFrameRate,
    this.encoderOutputFrameRate,
    this.rendererOutputFrameRate,
    this.targetBitrate,
    this.targetFrameRate,
    this.qualityAdaptIndication,
    this.encodedBitrate,
    this.encodedFrameWidth,
    this.encodedFrameHeight,
    this.encodedFrameCount,
    this.codecType,
    this.txPacketLossRate,
    this.captureFrameRate,
    this.captureBrightnessLevel,
  );
}</codeblock>
            </p>
        </section>
        <section id="parameters">
   <title><text conref="../conref/conref_api_metadata.dita#metadata/property" /></title>
   <parml>
       <plentry props="rtc-ng">
                    <pt>uid</pt>
                    <pd>The ID of the local user.</pd>
                </plentry>
       <plentry>
  <pt>sentBitrate</pt>
  <pd>
      <p>The actual bitrate (Kbps) for sending the local video stream.<note type="attention">This value does not include the bitrate for resending the video after packet loss.</note></p>
  </pd>
       </plentry>
       <plentry>
  <pt>sentFrameRate</pt>
  <pd>The actual frame rate (Kbps) while sending the local video stream.<note type="attention">This value does not include the frame rate for resending the video after packet loss.</note></pd>
       </plentry>
       <plentry>
  <pt>encoderOutputFrameRate</pt>
  <pd>The output frame rate (fps) of the local video encoder.</pd>
       </plentry>
       <plentry>
  <pt>rendererOutputFrameRate</pt>
  <pd>The output frame rate (fps) of the local video renderer.</pd>
       </plentry>
       <plentry>
  <pt>targetBitrate</pt>
  <pd>The target bitrate (Kbps) of the current encoder. This is an estimate made by the SDK based on the current network conditions.</pd>
       </plentry>
       <plentry>
  <pt>targetFrameRate</pt>
  <pd>The target frame rate (fps) of the current encoder.</pd>
       </plentry>
       <plentry>
                    <pt>qualityAdaptIndication</pt>
                    <pd>
                        <dl outputclass="since" props="rtc">
                            <dlentry props="native">
                                <dt>Since</dt>
                                <dd>v2.4.0</dd>
                            </dlentry>
                        </dl>
                        Quality change of the local video in terms of target frame rate and target bit rate in this reported interval. <ph props="windows ios mac unity">For details, see <xref keyref="QUALITY_ADAPT_INDICATION" />.</ph><p props="android">
                            <ul>
                                <li><ph keyref="ADAPT_NONE" /> (0): The local video quality stays the same.</li>
                                <li><ph keyref="ADAPT_UP_BANDWIDTH" /> (1): The local video quality improves because the network bandwidth increases.</li>
                                <li><ph keyref="ADAPT_DOWN_BANDWIDTH" /> (2): The local video quality deteriorates because the network bandwidth decreases.</li>
                            </ul>
                        </p>
                    </pd>
                </plentry>
       <plentry>
  <pt>encodedBitrate</pt>
  <pd>
      <p>The bitrate (Kbps) for encoding the local video stream.<note type="attention">This value does not include the bitrate for resending the video after packet loss.</note></p>
  </pd>
       </plentry>
       <plentry>
  <pt>encodedFrameWidth</pt>
  <pd>The width of the encoded video (px).</pd>
       </plentry>
       <plentry>
  <pt>encodedFrameHeight</pt>
  <pd>The height of the encoded video (px).</pd>
       </plentry>
       <plentry>
  <pt>encodedFrameCount</pt>
  <pd>The number of the sent video frames, represented by an aggregate value.</pd>
       </plentry>
       <plentry>
  <pt>codecType</pt>
           <pd>The codec type of the local video. <ph props="ios mac windows unity">For details, see <xref keyref="VIDEO_CODEC_TYPE" />.</ph><p props="android">
               <ul>
                   <li><ph keyref="VIDEO_CODEC_VP8" /> (1): VP8.</li>
                   <li><ph keyref="VIDEO_CODEC_H264" /> (2): (Default) H.264.</li>
               </ul>
           </p>
           </pd>
       </plentry>
       <plentry>
                    <pt>txPacketLossRate</pt>
                    <pd>The video packet loss rate (%) from the local client to the Agora server before applying the anti-packet loss strategies.</pd>
                </plentry>
       <plentry props="rtc">
                    <pt>captureFrameRate</pt>
                    <pd>The frame rate (fps) for capturing the local video stream.</pd>
                </plentry>
       <plentry props="rtc">
                    <pt>captureBrightnessLevel</pt>
                    <pd>
                        <dl outputclass="since" props="rtc">
                            <dlentry props="native">
                                <dt>Since</dt>
                                <dd>v3.3.0</dd>
                            </dlentry>
                        </dl>
                        <p>The brightness level of the video image captured by the local camera. For details, see <xref keyref="CAPTURE_BRIGHTNESS_LEVEL_TYPE" />.</p>
                    </pd>
                </plentry>
   </parml>
        </section></refbody>
</reference>