<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_remoteaudiostats">
    <title><ph keyref="RemoteAudioStats" /></title>
    <shortdesc id="short"><ph id="shortdesc">Audio statistics of the remote user.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p props="rtc-ng" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public static class RemoteAudioStats {
    public int uid;
    public int quality;
    public int networkTransportDelay;
    public int jitterBufferDelay;
    public int audioLossRate;
    public int numChannels;
    public int receivedSampleRate;
    public int receivedBitrate;
    public int totalFrozenTime;
    public int frozenRate;
    public int mosValue;
    public long totalActiveTime;
    public long publishDuration;
  }</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcRemoteAudioStats : NSObject
@property(assign, nonatomic) NSUInteger uid;
@property(assign, nonatomic) NSUInteger quality;
@property(assign, nonatomic) NSUInteger networkTransportDelay;
@property(assign, nonatomic) NSUInteger jitterBufferDelay;
@property(assign, nonatomic) NSUInteger audioLossRate;
@property(assign, nonatomic) NSUInteger numChannels;
@property(assign, nonatomic) NSUInteger receivedSampleRate;
@property(assign, nonatomic) NSUInteger receivedBitrate;
@property(assign, nonatomic) NSUInteger totalFrozenTime;
@property(assign, nonatomic) NSUInteger totalActiveTime;
@property(assign, nonatomic) NSInteger publishDuration;
@property(assign, nonatomic) NSUInteger frozenRate;
@property(assign, nonatomic) NSUInteger mosValue;
@end</codeblock>
                <codeblock props="windows" outputclass="language-cpp">struct RemoteAudioStats
{
  uid_t uid;
  int quality;
  int networkTransportDelay;
  int jitterBufferDelay;
  int audioLossRate;
  int numChannels;
  int receivedSampleRate;
  int receivedBitrate;
  int totalFrozenTime;
  int frozenRate;
  int mosValue;
  int totalActiveTime;
  int publishDuration;
  RemoteAudioStats() :
    uid(0),
    quality(0),
    networkTransportDelay(0),
    jitterBufferDelay(0),
    audioLossRate(0),
    numChannels(0),
    receivedSampleRate(0),
    receivedBitrate(0),
    totalFrozenTime(0),
    frozenRate(0),
    mosValue(0),
    totalActiveTime(0),
    publishDuration(0){}
};</codeblock>
            </p>
            <p props="rtc" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public static class RemoteAudioStats {
    public int uid;
    public int quality;
    public int networkTransportDelay;
    public int jitterBufferDelay;
    public int audioLossRate;
    public int numChannels;
    public int receivedSampleRate;
    public int receivedBitrate;
    public int totalFrozenTime;
    public int frozenRate;
    public int totalActiveTime;
    public int publishDuration;
    public int qoeQuality;
    public int qualityChangedReason;
    public int mosValue;
}</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcRemoteAudioStats : NSObject
@property(assign, nonatomic) NSUInteger uid;
@property(assign, nonatomic) NSUInteger quality;
@property(assign, nonatomic) NSUInteger networkTransportDelay;
@property(assign, nonatomic) NSUInteger jitterBufferDelay;
@property(assign, nonatomic) NSUInteger audioLossRate;
@property(assign, nonatomic) NSUInteger numChannels;
@property(assign, nonatomic) NSUInteger receivedSampleRate;
@property(assign, nonatomic) NSUInteger receivedBitrate;
@property(assign, nonatomic) NSUInteger totalFrozenTime;
@property(assign, nonatomic) NSUInteger frozenRate;
@property(assign, nonatomic) NSUInteger totalActiveTime;
@property(assign, nonatomic) NSInteger publishDuration;
@property(assign, nonatomic) NSUInteger qoeQuality;
@property(assign, nonatomic) NSUInteger qualityChangedReason;
@property(assign, nonatomic) NSInteger mosValue;
@end</codeblock>
                <codeblock props="windows unity" outputclass="language-cpp">struct RemoteAudioStats {
  uid_t uid;
  int quality;
  int networkTransportDelay;
  int jitterBufferDelay;
  int audioLossRate;
  int numChannels;
  int receivedSampleRate;
  int receivedBitrate;
  int totalFrozenTime;
  int frozenRate;
  int totalActiveTime;
  int publishDuration;
  int qoeQuality;
  int qualityChangedReason;
  int mosValue;
};</codeblock>
                <codeblock props="electron" outputclass="language-typescript">export interface RemoteAudioStats {
    uid: number;
    quality: number;
    networkTransportDelay: number;
    jitterBufferDelay: number;
    audioLossRate: number;
    numChannels: number;
    receivedSampleRate: number;
    receivedBitrate: number;
    totalFrozenTime: number;
    frozenRate: number;
    totalActiveTime: number;
    publishDuration: number;
    qoeQuality: number;
    qualityChangedReason: number;
    mosValue: number;
    }</codeblock>
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">class RemoteAudioStats {
  
  int uid;
  NetworkQuality quality;
  int networkTransportDelay;
  int jitterBufferDelay;
  int audioLossRate;
  int numChannels;
  int receivedSampleRate;
  int receivedBitrate;
  int totalFrozenTime;
  int frozenRate;
  int totalActiveTime;
  int publishDuration;
  ExperienceQualityType qoeQuality;
  ExperiencePoorReason qualityChangedReason;
  int mosValue;

  RemoteAudioStats(
    this.uid,
    this.quality,
    this.networkTransportDelay,
    this.jitterBufferDelay,
    this.audioLossRate,
    this.numChannels,
    this.receivedSampleRate,
    this.receivedBitrate,
    this.totalFrozenTime,
    this.frozenRate,
    this.totalActiveTime,
    this.publishDuration,
    this.qoeQuality,
    this.qualityChangedReason,
    this.mosValue,
  );
}</codeblock>
            </p>
        </section>
        <section id="parameters">
   <title><text conref="../conref/conref_api_metadata.dita#metadata/property" /></title>
   <parml>
       <plentry>
  <pt>uid</pt>
  <pd>The ID of the remote user.</pd>
       </plentry>
       <plentry>
  <pt>quality</pt>
           <pd>The quality of the audio stream sent by the user.  <ph props="ios mac windows electron unity">For details, see <xref keyref="QUALITY_TYPE" />.</ph><p props="android">
                            <ul id="qualitytype">
                                <li><ph keyref="QUALITY_UNKNOWN" /> (0): The quality is unknown.</li>
                                <li><ph keyref="QUALITY_EXCELLENT" /> (1): The quality is excellent.</li>
                                <li><ph keyref="QUALITY_GOOD" /> (2): The network quality is quite good, but the bitrate may be slightly lower than excellent.</li>
                                <li><ph keyref="QUALITY_POOR" /> (3): Users can feel the communication slightly impaired.</li>
                                <li><ph keyref="QUALITY_BAD" /> (4): Users cannot communicate smoothly.</li>
                                <li><ph keyref="QUALITY_VBAD" /> (5): The quality is so bad that users can barely communicate.</li>
                                <li><ph keyref="QUALITY_DOWN" /> (6): The quality is down and users cannot communicate at all.</li>
                            </ul>
                        </p>
                    </pd>
       </plentry>
       <plentry>
  <pt>networkTransportDelay</pt>
  <pd>The network delay (ms) from the sender to the receiver.</pd>
       </plentry>
       <plentry>
  <pt>jitterBufferDelay</pt>
  <pd>
      <p>The network delay (ms) from the receiver to the jitter buffer.<note type="attention">This parameter does not take effect if the receiver is an audience member and <xref keyref="AUDIENCE_LATENCY_LEVEL_TYPE" /> is 1.</note></p>
  </pd>
       </plentry>
       <plentry>
  <pt>audioLossRate</pt>
  <pd>The frame loss rate (%) of the remote audio stream in the reported interval.</pd>
       </plentry>
       <plentry>
  <pt>numChannels</pt>
  <pd>The number of audio channels.</pd>
       </plentry>
       <plentry>
  <pt>receivedSampleRate</pt>
  <pd>The sampling rate of the received audio stream in the reported interval.</pd>
       </plentry>
       <plentry>
  <pt>receivedBitrate</pt>
  <pd>The average bitrate (Kbps) of the received audio stream in the reported interval.</pd>
       </plentry>
       <plentry>
  <pt>totalFrozenTime</pt>
  <pd>The total freeze time (ms) of the remote audio stream after the remote user joins the channel. In a session, audio freeze occurs when the audio frame loss rate reaches 4%.</pd>
       </plentry>
       <plentry>
  <pt>frozenRate</pt>
  <pd>The total audio freeze time as a percentage (%) of the total time when the audio is available. The audio is available means that the remote user neither stops sending the audio stream nor disables the audio module after joining the channel.</pd>
       </plentry>
       <plentry>
                    <pt>totalActiveTime</pt>
                    <pd>
                        <dl outputclass="since" props="rtc">
                            <dlentry props="native">
                                <dt>Since</dt>
                                <dd>v3.0.0</dd>
                            </dlentry>
                        </dl>
                        <p>The total active time (ms) between the start of the audio call and the callback of the remote user.</p>
                        <p>The active time refers to the total duration of the remote user without the mute state.</p></pd>
                </plentry>
       <plentry>
                    <pt>publishDuration</pt>
                    <pd>
                        <dl outputclass="since" props="rtc">
                            <dlentry props="native">
                                <dt>Since</dt>
                                <dd>v3.1.0</dd>
                            </dlentry>
                        </dl>
                        <p>The total duration (ms) of the remote audio stream.</p></pd>
                </plentry>
       <plentry props="rtc">
  <pt>qoeQuality</pt>
  <pd>
      <dl outputclass="since" props="rtc">
 <dlentry props="native">
     <dt>Since</dt>
     <dd>v3.3.0</dd>
 </dlentry>
      </dl>
      <p>Quality of experience (QoE) of the local user when receiving the remote audio stream. See <xref keyref="EXPERIENCE_QUALITY_TYPE" />.</p>
  </pd>
       </plentry>
       <plentry props="rtc">
  <pt>qualityChangedReason</pt>
  <pd>
      <dl outputclass="since" props="rtc">
 <dlentry props="native">
     <dt>Since</dt>
     <dd>v3.3.0</dd>
 </dlentry>
      </dl>
      <p>The reason for poor QoE of the local user when receiving the remote audio stream. See <xref keyref="EXPERIENCE_POOR_REASON" />.</p>
  </pd>
       </plentry>
       <plentry>
           <pt>mosValue</pt>
           <pd>
               <dl outputclass="since" props="rtc">
                   <dlentry props="native">
                       <dt>Since</dt>
                       <dd>v3.3.1</dd>
                   </dlentry>
               </dl>
               <p>The quality of the remote audio stream in the reported interval. The quality is determined by the Agora real-time audio MOS (Mean Opinion Score) measurement method. The return value range is [0, 500]. Dividing the return value by 100 gets the MOS score, which ranges from 0 to 5. The higher the score, the better the audio quality.</p>
               
               <p> The subjective perception of audio quality corresponding to the Agora real-time audio MOS scores is as follows:<simpletable>
                                <sthead>
                                    <stentry>MOS score</stentry>
                                    <stentry>Perception of audio quality</stentry>
                                </sthead>
                                <strow>
                                    <stentry>Greater than 4</stentry>
                                    <stentry>Excellent. The audio sounds clear and smooth.</stentry>
                                </strow>
                                <strow>
                                    <stentry>From 3.5 to 4</stentry>
                                    <stentry>Good. The audio has some perceptible impairment but still sounds clear.</stentry>
                                </strow>
                                <strow>
                                    <stentry>From 3 to 3.5</stentry>
                                    <stentry>Fair. The audio freezes occasionally and requires attentive listening.</stentry>
                                </strow>
                                <strow>
                                    <stentry>From 2.5 to 3</stentry>
                                    <stentry>Poor. The audio sounds choppy and requires considerable effort to understand.</stentry>
                                </strow>
                                <strow>
                                    <stentry>From 2 to 2.5</stentry>
                                    <stentry>Bad. The audio has occasional noise. Consecutive audio dropouts occur, resulting in some information loss. The users can communicate only with difficulty.</stentry>
                                </strow>
                                <strow>
                                    <stentry>Less than 2</stentry>
                                    <stentry>Very bad. The audio has persistent noise. Consecutive audio dropouts are frequent, resulting in severe information loss. Communication is nearly impossible.</stentry>
                                </strow>
                            </simpletable></p>
           </pd>
       </plentry>
   </parml>
        </section></refbody>
</reference>