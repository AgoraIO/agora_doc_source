<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencapturesourceinfo">
    <title><ph keyref="ScreenCaptureSourceInfo"/></title>
    <shortdesc id="short"><ph id="shortdesc">The information about the specified shareable window or screen. <ph props="cpp unreal bp">The information is returned in <xref keyref="IScreenCaptureSourceList"/>.</ph></ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="hmos" outputclass="language-arkts"></codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraScreenCaptureSourceInfo : NSObject
@property(assign, nonatomic) AgoraScreenCaptureSourceType type;
@property(assign, nonatomic) CGWindowID sourceId;
@property(copy, nonatomic) NSString* _Nonnull sourceName;
@property(strong, nonatomic) NSImage* _Nonnull thumbImage;
@property(strong, nonatomic) NSImage* _Nullable iconImage;
@property(copy, nonatomic) NSString* _Nonnull processPath;
@property(copy, nonatomic) NSString* _Nonnull sourceTitle;
@property(assign, nonatomic) CGRect position;
@property(assign, nonatomic) BOOL primaryMonitor;

@end
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct ScreenCaptureSourceInfo {
  ScreenCaptureSourceType type;
  int64_t sourceId;
  const char* sourceName;
  ThumbImageBuffer thumbImage;
  ThumbImageBuffer iconImage;
  const char* processPath;
  const char* sourceTitle;
  bool primaryMonitor;
  bool isOccluded;
  Rectangle position;
#if defined(_WIN32)
  bool minimizeWindow;
  int64_t sourceDisplayId;
  ScreenCaptureSourceInfo() : type(ScreenCaptureSourceType_Unknown), sourceId(0), sourceName(nullptr),
                              processPath(nullptr), sourceTitle(nullptr), primaryMonitor(false), isOccluded(false), minimizeWindow(false), sourceDisplayId(-2) {}
#else
  ScreenCaptureSourceInfo() : type(ScreenCaptureSourceType_Unknown), sourceId(0), sourceName(nullptr), processPath(nullptr), sourceTitle(nullptr), primaryMonitor(false), isOccluded(false) {}
#endif
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FScreenCaptureSourceInfo {
	GENERATED_BODY()
public:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	FENUMWRAP_ScreenCaptureSourceType type = FENUMWRAP_ScreenCaptureSourceType();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	int64 sourceId = 0;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	FString sourceName = &quot;&quot;;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	FThumbImageBuffer thumbImage = FThumbImageBuffer();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	FThumbImageBuffer iconImage = FThumbImageBuffer();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	FString processPath = &quot;&quot;;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	FString sourceTitle = &quot;&quot;;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	bool primaryMonitor = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	bool isOccluded = false;
	
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	FRectangle position = FRectangle();
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	bool minimizeWindow = false;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|FScreenCaptureSourceInfo&quot;)
	int64 sourceDisplayId = 0;
#if defined(_WIN32) || (defined(__APPLE__) &amp;&amp; TARGET_OS_MAC &amp;&amp; !TARGET_OS_IPHONE)
	FScreenCaptureSourceInfo(){}
	FScreenCaptureSourceInfo(const agora::rtc::ScreenCaptureSourceInfo &amp; AgoraData){
		type = AgoraData.type;
		sourceId = UABT::FromViewToInt(AgoraData.sourceId);
		sourceName = UTF8_TO_TCHAR(AgoraData.sourceName);
		thumbImage = FThumbImageBuffer(AgoraData.thumbImage);
		iconImage = FThumbImageBuffer(AgoraData.iconImage);
		processPath = UTF8_TO_TCHAR(AgoraData.processPath);
		sourceTitle = UTF8_TO_TCHAR(AgoraData.sourceTitle);
		primaryMonitor = AgoraData.primaryMonitor;
		isOccluded = AgoraData.isOccluded;
		position = FRectangle(AgoraData.position);
#if defined(_WIN32)
		minimizeWindow = AgoraData.minimizeWindow;
		sourceDisplayId = UABT::FromViewToInt(AgoraData.sourceDisplayId);
#endif
	}
	agora::rtc::ScreenCaptureSourceInfo CreateAgoraData() const {
		agora::rtc::ScreenCaptureSourceInfo AgoraData;
		AgoraData.type = static_cast&lt;agora::rtc::ScreenCaptureSourceType&gt;(type.GetRawValue());
		AgoraData.sourceId = UABT::ToView(sourceId);
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.sourceName, sourceName)
		AgoraData.thumbImage = thumbImage.CreateAgoraData();
		AgoraData.iconImage = iconImage.CreateAgoraData();
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.processPath, processPath)
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMALLOC(AgoraData.sourceTitle, sourceTitle)
		AgoraData.primaryMonitor = primaryMonitor;
		AgoraData.isOccluded = isOccluded;
		AgoraData.position = position.CreateAgoraData();
#if defined(_WIN32)
		AgoraData.minimizeWindow = minimizeWindow;
		AgoraData.sourceDisplayId = UABT::ToView(sourceDisplayId);
#endif
		return AgoraData;
	}
	void FreeAgoraData(agora::rtc::ScreenCaptureSourceInfo &amp; AgoraData) const {
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.sourceName)
		thumbImage.FreeAgoraData(AgoraData.thumbImage);
		thumbImage.FreeAgoraData(AgoraData.iconImage);
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.processPath)
		SET_UABT_FSTRING_TO_CONST_CHAR___MEMFREE(AgoraData.sourceTitle)
		position.FreeAgoraData(AgoraData.position);
	}
#endif
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ScreenCaptureSourceInfo {
  
  type?: ScreenCaptureSourceType;
  
  sourceId?: any;
  
  sourceName?: string;
  
  thumbImage?: ThumbImageBuffer;
  
  iconImage?: ThumbImageBuffer;
  
  processPath?: string;
  
  sourceTitle?: string;
  
  primaryMonitor?: boolean;

  position?: Rectangle;

  minimizeWindow?: boolean;

  sourceDisplayId?: any;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class ScreenCaptureSourceInfo
    {
        public ScreenCaptureSourceType type;
        public view_t sourceId;
        public string sourceName;
        public ThumbImageBuffer thumbImage;
        public ThumbImageBuffer iconImage;
        public string processPath;
        public string sourceTitle;
        public bool primaryMonitor;
        public Rectangle position;
        public view_t sourceDisplayId;
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript"></codeblock>
            <codeblock props="flutter" outputclass="language-dart">class ScreenCaptureSourceInfo {
  const ScreenCaptureSourceInfo(
      {this.type,
      this.sourceId,
      this.sourceName,
      this.thumbImage,
      this.iconImage,
      this.processPath,
      this.sourceTitle,
      this.primaryMonitor,
      this.position,
      this.minimizeWindow,
      this.sourceDisplayId});

  @JsonKey(name: 'type')
  final ScreenCaptureSourceType? type;

  @JsonKey(name: 'sourceId')
  final int? sourceId;

  @JsonKey(name: 'sourceName')
  final String? sourceName;

  @JsonKey(name: 'thumbImage')
  final ThumbImageBuffer? thumbImage;

  @JsonKey(name: 'iconImage')
  final ThumbImageBuffer? iconImage;

  @JsonKey(name: 'processPath')
  final String? processPath;

  @JsonKey(name: 'sourceTitle')
  final String? sourceTitle;

  @JsonKey(name: 'primaryMonitor')
  final bool? primaryMonitor;

  @JsonKey(name: 'position')
  final Rectangle? position;

  @JsonKey(name: 'minimizeWindow')
  final bool? minimizeWindow;

  @JsonKey(name: 'sourceDisplayId')
  final int? sourceDisplayId;

  factory ScreenCaptureSourceInfo.fromJson(Map&lt;String, dynamic> json) =>
      _$ScreenCaptureSourceInfoFromJson(json);

  Map&lt;String, dynamic> toJson() => _$ScreenCaptureSourceInfoToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>type</pt>
                <pd>The type of the shared target. See <xref keyref="ScreenCaptureSourceType"/>.</pd>
            </plentry>
            <plentry>
                <pt>sourceId</pt>
                <pd>The window ID for a window or the display ID for a screen.</pd>
            </plentry>
            <plentry>
                <pt>sourceName</pt>
                <pd>The name of the window or screen. UTF-8 encoding.</pd>
            </plentry>
            <plentry>
                <pt>thumbImage</pt>
                <pd><ph>The image content of the thumbnail. </ph><ph>See <xref keyref="ThumbImageBuffer" props="cpp unreal bp electron unity rn flutter"/><xref keyref="nsimage-link" props="mac"/></ph>.</pd>
            </plentry>
            <plentry>
                <pt>iconImage</pt>
                <pd><ph>The image content of the icon. </ph><ph>See <xref keyref="ThumbImageBuffer" props="cpp unreal bp electron unity rn flutter"/><xref keyref="nsimage-link" props="mac"/></ph>.</pd>
            </plentry>
            <plentry>
                <pt>processPath</pt>
                <pd>The process to which the window belongs. UTF-8 encoding.</pd>
            </plentry>
            <plentry>
                <pt>sourceTitle</pt>
                <pd>The title of the window. UTF-8 encoding.</pd>
            </plentry>
            <plentry>
                <pt>primaryMonitor</pt>
                <pd>Determines whether the screen is the primary display:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: The screen is the primary display.</li>
                    <li><codeph><ph keyref="false"/></codeph>: The screen is not the primary display.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>position</pt>
                <pd><ph>The position of a window relative to the entire screen space (including all shareable screens). </ph><ph props="cpp unreal bp unity electron flutter">See <xref keyref="Rectangle"/>. </ph><ph props="mac">See <xref keyref="rect-link"/>.</ph></pd>
            </plentry>
            <plentry props="cpp unreal bp flutter rn electron">
                <pt>minimizeWindow</pt>
                <pd>(For Windows only) Whether the window is minimized:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: The window is minimized.</li>
                    <li><codeph><ph keyref="false"/></codeph>: The window is not minimized.</li>
                    </ul></pd>
            </plentry>
            <plentry props="cpp unreal bp unity cs electron flutter">
                <pt>sourceDisplayId</pt>
                <pd>(For Windows only) Screen ID where the window is located. If the window is displayed across multiple screens, this parameter indicates the ID of the screen with which the window has the largest intersection area. If the window is located outside of the visible screens, the value of this member is -2.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
