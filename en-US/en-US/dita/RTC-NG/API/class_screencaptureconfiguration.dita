<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencaptureconfiguration">
    <title><ph keyref="ScreenCaptureConfiguration" /></title>
    <shortdesc id="short"> </shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">#if (!(TARGET_OS_IPHONE) &amp;&amp; (TARGET_OS_MAC))

__attribute__((visibility("default"))) @interface AgoraScreenCaptureConfiguration: NSObject

@property(assign, nonatomic) BOOL isCaptureWindow;

@property(assign, nonatomic) UInt32 displayId;

@property(assign, nonatomic) UInt32 windowId;

@property(strong, nonatomic) AgoraScreenCaptureParameters* _Nonnull params;

@property(assign, nonatomic) CGRect regionRect;

@end
#endif</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct ScreenCaptureConfiguration {
  bool isCaptureWindow;
  uint32_t displayId;
  Rectangle screenRect;
  view_t windowId;
  ScreenCaptureParameters params;
  Rectangle regionRect;

  ScreenCaptureConfiguration() : isCaptureWindow(false), displayId(0) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ScreenCaptureConfiguration {
  
  isCaptureWindow?: boolean;
  
  displayId?: number;
  
  screenRect?: Rectangle;
  
  windowId?: any;
  
  params?: ScreenCaptureParameters;
  
  regionRect?: Rectangle;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class ScreenCaptureConfiguration
    {
        public ScreenCaptureConfiguration()
        {
            isCaptureWindow = false;
            displayId = 0;
        }

        public bool isCaptureWindow { set; get; }
        public uint displayId { set; get; }
        public Rectangle screenRect { set; get; }
        public uint windowId { set; get; }
        public ScreenCaptureParameters parameters { set; get; }
        public Rectangle regionRect { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class ScreenCaptureConfiguration {
  
  isCaptureWindow?: boolean;
  
  displayId?: number;
  
  screenRect?: Rectangle;
  
  windowId?: any;
  
  params?: ScreenCaptureParameters;
  
  regionRect?: Rectangle;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class ScreenCaptureConfiguration {
  const ScreenCaptureConfiguration(
      {this.isCaptureWindow,
      this.displayId,
      this.screenRect,
      this.windowId,
      this.params,
      this.regionRect});

  @JsonKey(name: 'isCaptureWindow')
  final bool? isCaptureWindow;
  @JsonKey(name: 'displayId')
  final int? displayId;
  @JsonKey(name: 'screenRect')
  final Rectangle? screenRect;
  @JsonKey(name: 'windowId')
  final int? windowId;
  @JsonKey(name: 'params')
  final ScreenCaptureParameters? params;
  @JsonKey(name: 'regionRect')
  final Rectangle? regionRect;
  factory ScreenCaptureConfiguration.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$ScreenCaptureConfigurationFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$ScreenCaptureConfigurationToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp" /></p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt> </pt>
                <pd> <ul id="ul_ln3_hwd_mqb">
                    <li> </li>
                    <li> </li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <note id="note_w12_4wd_mqb" type="attention"> </note></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <note type="attention" id="note_ifh_swd_mqb"> </note></pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd> <note type="attention"> </note></pd>
            </plentry>
            <plentry>
                <pt props="cpp electron rn flutter"> </pt>
                <pt props="unity"> </pt>
                <pd> </pd>
            </plentry>
            <plentry>
                <pt> </pt>
                <pd>
                    <p> </p>
                    <p> </p>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>