<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_release">
    <title><ph keyref="release"/></title>
    <shortdesc id="short"><ph id="shortdesc">Releases all <apiname keyref="IRtcEngine" /> resources. </ph><ph id="shortdesc">Releases all <apiname keyref="IRtcEngine" /> resources.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="release" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        
        <p conref="../conref/conref_rtc_api.dita#apidef/release"/>
        </section>
        <section id="detailed_desc">
   
   <p>This method releases all resources used by the Agora SDK. This method releases all resources used by the Agora SDK. Some apps perform real-time audio and video communication only when the user needs them, and release resources for other operations when they are not needed. This method is suitable for such situations. Some apps perform real-time audio and video communication only when the user needs them, and release resources for other operations when they are not needed. This method is suitable for such situations.</p>
   <p props="windows">Once you call `release` to destroy the created `IRtcEngine` instance, you cannot use any method or callback in the SDK any more. Once you call `release` to destroy the created `IRtcEngine` instance, you cannot use any method or callback in the SDK any more. If you need to use the real-time audio and video communication function again, you must call the<xref keyref="createAgoraRtcEngine"/> and <xref keyref="create2"/>methods in turn to create a new<apiname keyref="IRtcEngine" /> object. If you need to use the real-time audio and video communication function again, you must call the<xref keyref="createAgoraRtcEngine"/> and <xref keyref="create2"/>methods in turn to create a new<apiname keyref="IRtcEngine" /> object.</p>
   <p props="android ios mac">Once you call `release` to destroy the created `IRtcEngine` instance, you cannot use any method or callback in the SDK any more. Once you call `release` to destroy the created `IRtcEngine` instance, you cannot use any method or callback in the SDK any more. If you need to use the real-time audio and video communication function again, you must call the method again in turn<xref keyref="create2"/> to create a new<apiname keyref="IRtcEngine" /> object. If you need to use the real-time audio and video communication function again, you must call the method again in turn<xref keyref="create2"/> to create a new<apiname keyref="IRtcEngine" /> object.</p>
   <note type="attention">@note If you want to create a new `IRtcEngine<apiname keyref="IRtcEngine"/>` instance<apiname keyref="release"/> after destroying the current one, ensure that you wait till the `release` method completes executing. @note If you want to create a new `IRtcEngine<apiname keyref="IRtcEngine"/>` instance<apiname keyref="release"/> after destroying the current one, ensure that you wait till the `release` method completes executing.</note>
        </section>
        <section id="parameters"><title>Parameter Parameter</title>
   <parml>
       <plentry>
  <pt>sync sync</pt>
  <pd>
      <ul>
 <li><ph keyref="true"/>This method is called synchronously. <ph keyref="true"/>This method is called synchronously. Agora suggests calling<apiname keyref="IRtcEngine"/> this method in a sub-thread to avoid congestion in the main thread because the synchronous call and the app cannot move on to another task until the execution completes. Agora suggests calling<apiname keyref="IRtcEngine"/> this method in a sub-thread to avoid congestion in the main thread because the synchronous call and the app cannot move on to another task until the execution completes. Besides, you cannot call this method in any method or callback of the SDK<apiname keyref="release"/>. Otherwise, the SDK cannot release the resources occupied by the `IRtcEngine` instance until the callbacks return results, which may result in a deadlock. Besides, you cannot call this method in any method or callback of the SDK<apiname keyref="release"/>. Otherwise, the SDK cannot release the resources occupied by the `IRtcEngine` instance until the callbacks return results, which may result in a deadlock. The SDK automatically detects the deadlock and converts this method into an asynchronous call, causing the test to take additional time. The SDK automatically detects the deadlock and converts this method into an asynchronous call, causing the test to take additional time.</li>
          <li><ph keyref="false"/>This method is called synchronously. <ph keyref="false"/>This method is called synchronously. There is no need to wait for<apiname keyref="IRtcEngine"/> resources to be released to perform other operations. There is no need to wait for<apiname keyref="IRtcEngine"/> resources to be released to perform other operations. Do not immediately uninstall the SDK&apos;s dynamic library after the call, or it may cause a crash due to the SDK clean-up thread not quitting. Do not immediately uninstall the SDK&apos;s dynamic library after the call, or it may cause a crash due to the SDK clean-up thread not quitting.</li>
      </ul>
  </pd>
       </plentry>
   </parml>
        </section>
    </refbody>
</reference>
