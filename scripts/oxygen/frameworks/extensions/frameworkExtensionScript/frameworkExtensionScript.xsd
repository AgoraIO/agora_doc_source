<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
  targetNamespace="http://www.oxygenxml.com/ns/framework/extend"
  xmlns:extend="http://www.oxygenxml.com/ns/framework/extend" attributeFormDefault="unqualified">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace"
    schemaLocation="http://www.w3.org/XML/1998/namespace"/>
  <xs:element name="script">
    <xs:annotation>
      <xs:documentation>A script that defines a framework through a set of operations performed over
        an existing framework.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:all>
        <xs:element ref="extend:name"/>
        <xs:element ref="extend:description"/>
        <xs:element ref="extend:initialPage" minOccurs="0"/>
        <xs:element ref="extend:associationRules" minOccurs="0"/>
        <xs:element ref="extend:priority" minOccurs="0"/>
        <xs:element ref="extend:classpath" minOccurs="0"/>
        <xs:element ref="extend:xmlCatalogs" minOccurs="0"/>
        <xs:element ref="extend:author" minOccurs="0"/>
        <xs:element ref="extend:documentTemplates" minOccurs="0"/>
        <xs:element ref="extend:transformationScenarios" minOccurs="0"/>
        <xs:element ref="extend:validationScenarios" minOccurs="0"/>
        <xs:element ref="extend:extensionPoints" minOccurs="0"/>
        <xs:element ref="extend:webResources" minOccurs="0"/>
      </xs:all>
      <xs:attribute name="base" type="xs:string">
        <xs:annotation>
          <xs:documentation>The name of the base framework. The operations defined in this script
            will be performed over this framework.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="name" type="xs:string">
    <xs:annotation>
      <xs:documentation>The name of the framework.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="initialPage" default="EditorSpecific">
    <xs:annotation>
      <xs:documentation>Sets the default edit mode when you open a document for the first time. For
        example, if the files are usually edited in the Author mode you can set it as the initial page. Possible values: <ul>
          <li><b>EditorSpecific</b> - the initial editing mode is determined based upon the editor
            type. You can find the mapping between editors and edit modes in the <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=preferences-editor-pages"/>Edit modes preferences page.</li>
          <li><b>Text</b> - the <b>Text</b> editing mode is designed to be a simple, yet powerful,
            XML source editor.</li>
          <li><b>Author</b> - the <b>Author</b> editing mode allows you to visually edit XML
            documents in a user-friendly interface that is similar to a WYSIWYG word processor.</li>
          <li><b>Grid</b> - the <b>Grid</b> editing mode displays the XML document as a structured
            grid of nested tables where the text content can be modified without directly
            interacting with the XML markup.</li>
          <li><b>Design</b> - available only for the XML Schema editor, the <b>Design</b> mode
            offers a diagram view of the XML Schema document by rendering all the XML Schema
            components.</li>
        </ul>
      </xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:string">
        <xs:enumeration value="EditorSpecific">
          <xs:annotation>
            <xs:documentation>The initial editing mode is determined based upon the editor type. You
              can find the mapping between editors and edit modes in the <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=preferences-editor-pages"/>Edit modes preferences page. </xs:documentation>
          </xs:annotation>
        </xs:enumeration>
        <xs:enumeration value="Text">
          <xs:annotation>
            <xs:documentation>
              The <b>Text</b> editing mode is designed to be a simple, yet powerful,
              XML source editor.
            </xs:documentation>
          </xs:annotation>
        </xs:enumeration>
        <xs:enumeration value="Author">
          <xs:annotation>
            <xs:documentation>The <b>Author</b> editing mode allows you to visually edit XML
              documents in a user-friendly interface that is similar to a WYSIWYG word processor.</xs:documentation>
          </xs:annotation>
        </xs:enumeration>
        <xs:enumeration value="Grid">
          <xs:annotation>
            <xs:documentation>The <b>Grid</b> editing mode displays the XML document as a structured
              grid of nested tables where the text content can be modified without directly
              interacting with the XML markup.</xs:documentation>
          </xs:annotation>
        </xs:enumeration>
        <xs:enumeration value="Design">
          <xs:annotation>
            <xs:documentation>Available only for the XML Schema editor, the <b>Design</b> mode
              offers a diagram view of the XML Schema document by rendering all the XML Schema
              components.</xs:documentation>
          </xs:annotation>
        </xs:enumeration>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <xs:element name="description" type="xs:string">
    <xs:annotation>
      <xs:documentation>A description for the framework.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="priority">
    <xs:annotation>
      <xs:documentation>When multiple frameworks match on a document, the one with the highest
        priority will be used.</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:string">
        <xs:enumeration value="Lowest"/>
        <xs:enumeration value="Low"/>
        <xs:enumeration value="Normal"/>
        <xs:enumeration value="High"/>
        <xs:enumeration value="Highest"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <xs:element name="classpath">
    <xs:annotation>
      <xs:documentation>A list of folders and JAR libraries that hold implementations for API
        extensions, implementations for custom Author mode operations, various resources (such as
        stylesheets), and framework translation files. Oxygen XML Editor loads the resources looking
        in the folders in the order they appear in the list.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="extend:addEntry">
              <xs:annotation>
                <xs:documentation>Adds a new classpath entry. Adding an entry before the ones
                  inherited from base allows to override base resources.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="extend:removeEntry"/>
          </xs:sequence>
          <xs:attributeGroup ref="extend:inheritAttributes"/>
          <xs:attribute name="parentClassLoaderID">
            <xs:annotation>
              <xs:documentation>Use this option to specify the ID of a <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=plugin">plugin</a>. 
                The current framework will have access to the Java classes loaded for the plugin.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- Web Author web resources -->
  <xs:element name="webResources">
    <xs:annotation>
      <xs:documentation>A list of JS file or folders containing JS file to be loaded in the WA
        client-side. Web Author loads the resources looking in the folders in the order they appear
        in the list.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="extend:addEntry">
              <xs:annotation>
                <xs:documentation>Adds a new js file/folder web resources entry. Adding an entry
                  before the ones inherited from base allows to override base
                  resources.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="extend:removeEntry"/>
          </xs:sequence>
          <xs:attributeGroup ref="extend:inheritAttributes"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="xmlCatalogs">
    <xs:annotation>
      <xs:documentation>A list of XML Catalogs, specifically for the edited framework, that are
        added to list of catalogs that Oxygen XML Editor uses to resolve
        resources.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="extend:addEntry"/>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="extend:removeEntry"/>
          </xs:sequence>
          <xs:attributeGroup ref="extend:inheritAttributes"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="documentTemplates">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="extend:addEntry"/>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="extend:removeEntry"/>
          </xs:sequence>
          <xs:attributeGroup ref="extend:inheritAttributes"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="addEntry">
    <xs:annotation>
      <xs:documentation>Adds a new entry in the current section.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="extend:pathAttributes"/>
      <xs:attributeGroup ref="extend:positionAttrs"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="removeEntry">
    <xs:annotation>
      <xs:documentation>Removed an entry from the ones inherited from the base
        framework.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="path" use="required">
        <xs:annotation>
          <xs:documentation>The path of the entry to remove.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="associationRules">
    <xs:annotation>
      <xs:documentation>Oxygen XML Editor identifies the framework associated with a document when
        the document matches at least one of the association rules.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="extend:addRule" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attributeGroup ref="extend:inheritAttributes"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="addRule">
    <xs:annotation>
      <xs:documentation>An association rule that matches a document to this
        framework.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="namespace" default="*">
        <xs:annotation>
          <xs:documentation>Specifies the namespace of the root element from the association rules
            set (* (any) by default). If you want to apply the rule only when the root element has
            no namespace, leave this field empty (remove the *).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rootElementLocalName" default="*">
        <xs:annotation>
          <xs:documentation>Specifies the local name of the root element (* (any) by
            default).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="fileName" default="*">
        <xs:annotation>
          <xs:documentation>Specifies the name of the file (* (any) by default).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="publicID" default="*">
        <xs:annotation>
          <xs:documentation>Specifies the Public ID of the matched document.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="attributeLocalName" default="*">
        <xs:annotation>
          <xs:documentation>Specifies the local name of the attributes for the root element (* (any)
            by default).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="attributeNamespace" default="*">
        <xs:annotation>
          <xs:documentation>Specifies the namespace of the attributes for the root element (* (any)
            by default).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="attributeValue" default="*">
        <xs:annotation>
          <xs:documentation>Specifies the value of the attributes for the root element (* (any) by
            default).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="javaRuleClass">
        <xs:annotation>
          <xs:documentation>Specified the name of the Java class that is used to determine if a
            document matches the rule. This Java class should implement the
            ro.sync.ecss.extensions.api.DocumentTypeCustomRuleMatcher interface.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="author">
    <xs:annotation>
      <xs:documentation>The Author section is a container that holds information regarding the CSS
        file used to render a document in the Author mode, and regarding framework-specific menus,
        contextual menus, toolbars, and content completion list of proposals.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:all>
            <xs:element name="authorActions" minOccurs="0">
              <xs:annotation>
                <xs:documentation> Author Actions are loaded from these directories: <ul>
                    <li><i>{framework_directory}</i>/externalAuthorActions</li>
                    <li><i>framework_directory}</i>/<i>{script_file_name}</i>_externalAuthorActions</li>
                  </ul>
                  <p>In this container you can specify the author actions that will <b>not</b> be
                    imported from the base framework. Moreover, these actions will be removed from
                    menus, toolbars and the content completion window, unless there are new actions
                    with identical IDs defined inside the new actions directory:
                      <i>{framework_directory}</i>/<i>{script_file_name}</i>_externalAuthorActions</p>
                </xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:complexContent>
                  <xs:extension base="extend:baseCT">
                    <xs:sequence maxOccurs="unbounded">
                      <xs:element ref="extend:removeAction">
                        <xs:annotation>
                          <xs:documentation>The specified action will <b>not</b> be imported from
                            the base framework configuration. Moreover, this action will be remove
                            from menus, toolbars and content completion unless there is an action
                            with the same ID defined inside the new frameworks actions directory:
                              <i>framework_directory}</i>/<i>{script_file_name}</i>_externalAuthorActions
                          </xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
            <xs:element ref="extend:css" minOccurs="0"/>
            <xs:element ref="extend:toolbars" minOccurs="0"/>
            <xs:element ref="extend:contextualMenu" minOccurs="0"/>
            <xs:element ref="extend:menu" minOccurs="0"/>
            <xs:element ref="extend:contentCompletion" minOccurs="0"/>
          </xs:all>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="css">
    <xs:annotation>
      <xs:documentation>Specifies the associated css files.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:choice maxOccurs="unbounded">
            <xs:element maxOccurs="unbounded" minOccurs="0" ref="extend:addCss"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" ref="extend:removeCss"/>
          </xs:choice>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="addCss">
    <xs:annotation>
      <xs:documentation>Specifies a new CSS association. If you want the extra added CSS to be used
        in addition to the existing CSSs, you need to leave the title empty and the Alternate
        checkbox unchecked.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="extend:pathAttributes"/>
      <xs:attribute name="alternate" use="optional" default="false" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>If true, marks the CSS as an alternate stylesheet to the main CSS. It
            will be activated when the user selects it's title from the Styles drop-down. If false,
            this CSS is an additional layer.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation>If a title is specified, this CSS is applied only when the user selects
            it from the Styles drop-down.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="extend:positionAttrs">
        <xs:annotation>
          <xs:documentation>Controls where this entry gets inserted relative to the entries
            inherited from base. Entries with the same position will be inserted in document order.
            CSSs that come last can override rules defined in the previous CSSs.</xs:documentation>
        </xs:annotation>
      </xs:attributeGroup>
    </xs:complexType>
  </xs:element>
  <xs:element name="removeCss">
    <xs:annotation>
      <xs:documentation>Removes a CSS association from the base framework.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="extend:pathAttributes"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="toolbars">
    <xs:annotation>
      <xs:documentation>In the Toolbar section you configure what framework-specific action the
        Oxygen XML Editor toolbar holds.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:element ref="extend:toolbar" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="toolbar">
    <xs:annotation>
      <xs:documentation>Adds a new toolbar or changes an existing one, if a toolbar with the same id
        already exists in the base framework.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:choice maxOccurs="unbounded">
              <xs:element ref="extend:addAction"/>
              <xs:element ref="extend:group"/>
              <xs:element ref="extend:separator"/>
              <xs:element ref="extend:removeAction"/>
              <xs:element ref="extend:removeGroup"/>
            </xs:choice>
          </xs:sequence>
          <xs:attribute name="name">
            <xs:annotation>
              <xs:documentation>A unique name for the toolbar. If a toolbar with the same name
                already exists in the base framework, the changes are performed on that toolbar. If
                missing, the first toolbar from the base framework will be
                configured.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="group">
    <xs:annotation>
      <xs:documentation>Adds a new group of actions in the toolbar or changes an existing one, if a
        group with the same id already exists in the base framework.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:choice maxOccurs="unbounded">
              <xs:element ref="extend:addAction"/>
              <xs:element ref="extend:removeAction"/>
            </xs:choice>
          </xs:sequence>
          <xs:attribute name="name" use="required" type="xs:string">
            <xs:annotation>
              <xs:documentation>An unique name for the group. If a group with the same name already
                exists in the base framework, the changes are performed on that
                toolbar.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attributeGroup ref="extend:iconPaths"/>
          <xs:attribute name="anchor" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of an existing action or group from the base configuration.
                The group will be added relative to this.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attributeGroup ref="extend:positionAttrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="removeGroup">
    <xs:annotation>
      <xs:documentation>Removes a group inherited from the base framework
        configuration.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Submenus are identify by names. The name of the base framework's group
            to remove.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="contextualMenu" type="extend:menuType">
    <xs:annotation>
      <xs:documentation>In the contextual menu section you configure what framework-specific actions
        are displayed in the contextual menu.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="menu" type="extend:menuType">
    <xs:annotation>
      <xs:documentation>In the menu section you configure what framework-specific actions are
        displayed in menu that appears in the application menu bar.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="menuType">
    <xs:complexContent>
      <xs:extension base="extend:baseCT">
        <xs:sequence>
          <xs:choice maxOccurs="unbounded">
            <xs:element ref="extend:separator"/>
            <xs:element ref="extend:addAction"/>
            <xs:element ref="extend:submenu"/>
            <xs:element ref="extend:removeAction"/>
            <xs:element ref="extend:removeSubmenu"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string">
          <xs:annotation>
            <xs:documentation>A name for the main menu. If missing, the name of the base framework
              is kept.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="separator">
    <xs:annotation>
      <xs:documentation>A separator between two entries.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="extend:anchorAttrs"/>
      <xs:attributeGroup ref="extend:positionAttrs"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="removeSubmenu">
    <xs:annotation>
      <xs:documentation>Removes a submenu inherited from the base framework
        configuration.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Submenus are identify by names. The name of the base framework's submenu
            to remove.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="submenu">
    <xs:annotation>
      <xs:documentation>Adds a new submenu or changes a submenu from the base framework
        configuration.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:menuType">
          <xs:attribute name="iconPath" type="xs:string">
            <xs:annotation>
              <xs:documentation>An icon for the submenu. Use ${framework} or ${frameworkDir} to give
                paths relative to the framework location.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="anchor" type="xs:string">
            <xs:annotation>
              <xs:documentation>Used when creating a new submenu. it represents the ID of an action
                or the label of a submenu already present in the parent menu. The newly created
                submenu will be placed relative to it.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attributeGroup ref="extend:positionAttrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="contentCompletion">
    <xs:annotation>
      <xs:documentation>In the Content Completion section you configure what the Content Completion
        Assistant and specific helper views and menu present.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:all>
            <xs:element ref="extend:schemaProposals" minOccurs="0"/>
            <xs:element ref="extend:authorActions" minOccurs="0"/>
          </xs:all>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="schemaProposals">
    <xs:annotation>
      <xs:documentation>Controls whether entries detected the schema are presented or not in the
        Content Completion Assistant or in some specific helper views or menus. </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:choice maxOccurs="unbounded">
              <xs:element ref="extend:addProposal"/>
              <xs:element ref="extend:removeProposal"/>
            </xs:choice>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="addProposal">
    <xs:annotation>
      <xs:documentation>Adds back a schema proposal that was filtered/removed in the base framework
        configuration.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="renderName" use="required" type="xs:NCName">
        <xs:annotation>
          <xs:documentation>The name of the entry as presented in the content completion assistant.
            For example: table, p, title.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="removeProposal">
    <xs:annotation>
      <xs:documentation>Removes a proposal either from the Content Completion Assistant or from some
        specific helper views or menus. </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="renderName" use="required" type="xs:NCName">
        <xs:annotation>
          <xs:documentation>The name of the entry as presented in the content completion assistant.
            For example: table, p, title.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="fromCCWindow" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>If set, the entry will not be presented in the content completion window
            which appears when the user presses ENTER.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="fromElementsView" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>If set, the entry will not be presented in the Elements
            view.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="fromEntitiesView" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>If set, the entry will not be presented in the Entities
            view.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="fromMenus" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>The element will not appear in the Append Child, Insert Before, or
            Insert After menus that are available in certain contextual menus (for example, the
            contextual menu of the Outline view).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="authorActions">
    <xs:annotation>
      <xs:documentation>In this section you can add author actions in the Content Completion
        Assistant or in some specific helper views or menus.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="addAction">
                <xs:annotation>
                  <xs:documentation>Adds an author action in the Content Completion Assistant or in
                    some specific helper views or menus.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:attribute name="id" use="required" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The id of the author action to add.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="alias" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>A label to be presented instead of the action
                        name.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="displayOnlyWhenElementAllowed" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>If true, this entry appears only if the schema permits the
                        replaced element in the current context.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="inCCWindow" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>If true, the action will appear in the Content Completion
                        Assistant.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="inElementsView" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>If true, the action will appear in the Elements
                        view.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="inMenus" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>If true, the action will appear in the Append Child, Insert
                        Before, or Insert After menus that are available in certain contextual menus
                        (for example, the contextual menu of the Outline view).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="replacedElement" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The local name of the replaced element from the
                        schema.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="replacedElementNs" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The namespace of the replaced element from the
                        schema.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="useReplaceElementName" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>If true, the action will use the name of replaced element
                        instead of its own name.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element ref="extend:removeAction"/>
            </xs:choice>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="removeAction">
    <xs:annotation>
      <xs:documentation>Removes an action that was added in the Content Completion Assistant from
        the base framework configuration.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="id" use="required" type="xs:NCName">
        <xs:annotation>
          <xs:documentation>Action ID.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="addAction">
    <xs:annotation>
      <xs:documentation>Adds an author action in the Content Completion Assistant or in some
        specific helper views or menus.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="id" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Action ID.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="extend:anchorAttrs"/>
      <xs:attributeGroup ref="extend:positionAttrs"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="transformationScenarios">
    <xs:annotation>
      <xs:documentation>In the Transformation Scenarios section, you can configure the
        transformation scenarios associated with the particular framework you are editing.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:element ref="extend:addScenarios" minOccurs="0"/>
            <xs:element ref="extend:removeScenario" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="extend:defaultScenarios" minOccurs="0"/>
          </xs:sequence>
          <xs:attributeGroup ref="extend:inheritAttributes"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="validationScenarios">
    <xs:annotation>
      <xs:documentation>In the Validation Scenarios section, you can configure the validation
        scenarios associated with the particular framework you are editing. </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:element ref="extend:addScenarios" minOccurs="0"/>
            <xs:element ref="extend:removeScenario" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="extend:defaultScenarios" minOccurs="0"/>
          </xs:sequence>
          <xs:attributeGroup ref="extend:inheritAttributes"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="addScenarios">
    <xs:annotation>
      <xs:documentation>Adds new scenarios to the framework.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="href" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Points to a scenarios export file which can be obtain by using the
            Export action from the Transformation tab to obtain such a file.
            https://www.oxygenxml.com/doc/versions/22.1/ug-editor/topics/document-type-transformation-tab.html
            . Use ${framework} or ${frameworkDir} to give paths relative to the framework
            location.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="removeScenario">
    <xs:annotation>
      <xs:documentation>Removes a scenario defined in the base framework
        configuration.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>The scenario's name.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="defaultScenarios">
    <xs:annotation>
      <xs:documentation>Overrides the default scenarios configured in the base
        framework.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="name" type="xs:string" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>A scenario name.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="extensionPoints">
    <xs:annotation>
      <xs:documentation>Sets or overrides extension points.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="extend:baseCT">
          <xs:sequence>
            <xs:element ref="extend:extension" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="extension">
    <xs:annotation>
      <xs:documentation>Sets or overrides a Java extension point.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="extensionsBundle">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p>A bundle for all supported extension points. The extensions bundle is
                      represented by the <span>ro.sync.ecss.extensions.api.ExtensionsBundle</span>
                      class.</p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=dg-extensions-bundle">Configuring an Extensions Bundle</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="schemaManagerFilterExtension">
              <xs:annotation>
                <xs:documentation>
                  <p>You can filter or contribute to proposals offered for content completion by
                    implementing the <a href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/contentcompletion/xml/SchemaManagerFilter.html">ro.sync.contentcompletion.xml.SchemaManagerFilter</a> interface.</p>
                  <p>
                    <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=dg-author-content-completion-handler">Configuring Content Completion Proposals</a>
                  </p>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="elementLocatorExtension">
              <xs:annotation>
                <xs:documentation>
                  <p>The link target reference finder represents the support for finding references
                    from links that indicate specific elements inside an XML document. This support
                    will only be available if a schema is associated with the document type.</p>
                  <p>The interface that should be implemented for a custom link target reference
                    finder is <a href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/link/ElementLocatorProvider.html">ro.sync.ecss.extensions.api.link.ElementLocatorProvider</a>. As an
                    alternative, the <a href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/commons/DefaultElementLocatorProvider.html">ro.sync.ecss.extensions.commons.DefaultElementLocatorProvider</a>
                    implementation can also be extended.</p>
                  <p>
                    <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=dg-author-link-target-reference-finder">Customizing the Link Target Reference Finder</a>
                  </p>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorSwingDndExtension">
              <xs:annotation>
                <xs:documentation>
                  <p>Sometimes it is useful to perform various operations when certain objects are
                    dropped from outside sources in the editing area. This extension point is
                    activated in the Author mode of the standalone version of the application.</p>
                  <p>The value must be an implementation of <a href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/exml/editor/xmleditor/pageauthor/AuthorDnDListener.html">ro.sync.exml.editor.xmleditor.pageauthor.AuthorDnDListener</a></p>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorSWTDndExtension">
              <xs:annotation>
                <xs:documentation>
                  <p>Sometimes it is useful to perform various operations when certain objects are
                    dropped from outside sources in the editing area. This extension point is
                    activated in the Author mode of the Eclipse plugin version of the
                    application.</p>
                  <p>The value must be an implementation of
                      <span>com.oxygenxml.editor.editors.author.AuthorDnDListener</span></p>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorReferenceResolver">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p>A handler for resolving references and obtain the content they reference. The
                      value must be an implementation of
                        <span>ro.sync.ecss.extensions.api.AuthorReferenceResolver
                      interface</span>.</p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=dg-author-references-resolver">Configuring a Reference Resolver</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorCssStylesFilterExtension">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p>You can modify the CSS styles for each
                        <span>ro.sync.ecss.extensions.api.node.AuthorNode</span> rendered in the
                      Author mode using an implementation of
                        <span>ro.sync.ecss.extensions.api.StylesFilter</span>.</p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=dg-author-css-styles-filter">Customizing the CSS Styles Filter</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorTableCellSpanProvider">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p> In a custom framework, a table can have cells that span over multiple
                      columns and rows. If you use the <span>@rowspan</span> and
                        <span>@colspan</span> attributes, Oxygen XML Editor can determine the cell
                      spanning automatically. If you use other attributes, you need to indicate
                      Oxygen XML Editor a method to determine the cell spanning. You will need to
                      implement a Java extension class for defining the cell spanning which
                      implements the
                        <span>ro.sync.ecss.extensions.api.AuthorTableCellSpanProvider</span>
                      interface. </p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=dg-table-column-width-provider">Configuring a Table Column Width Provider</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorTableCellSepProvider">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p> In a custom framework, a table can have separators between rows and columns.
                      If you use the <span>@rowsep</span> and <span>@colsep</span> attributes, or
                      your table is conforming to the CALS table model, Oxygen XML Editor can
                      determine the cell separators. If you use other attributes to define
                      separators, you need to implement
                        <span>ro.sync.ecss.extensions.api.AuthorTableCellSpanProvider</span>. </p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=dg-table-rowsep-colsep-provider">Configuring a Table Cell Row and Column Separator Provider</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorTableColumnWidthProvider">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p> In a custom framework, a table element as well as the table columns can have
                      specified widths. For these widths to be considered by Author mode, you need
                      to provide the means for determining them. The specified class must implement
                      the <span>ro.sync.ecss.extensions.api.AuthorTableColumnWidthProvider</span>
                      interface. </p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=dg-table-column-width-provider">Configuring a Table Column Width Provider</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorExtensionStateListener">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p>When the association rules of the framework (document type) configuration
                      match that of a document open in the Author editing mode, the activation event
                      received by this listener should be used to perform custom initializations and
                      to register listeners. The value of this extension point must be a class that
                      implements
                        <span>ro.sync.ecss.extensions.api.AuthorExtensionStateListener</span>.</p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=dg-author-extension-state-listener">Configuring a State Listener for Author Mode</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="attributesRecognizer">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p> With this extension point you can automatically generate unique IDs for
                      newly inserted elements. The value of this extension point must be a class
                      that implements
                        <span>ro.sync.ecss.extensions.api.UniqueAttributesRecognizer</span>.</p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=unique_attributes_recognizer">Configuring the Automatic ID Generation and Unique Attributes
                        Recognizer</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="xmlNodeCustomizerExtension">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p>You can use this API extension to customize the way an XML node is rendered
                      in the Outline view in Author mode, breadcrumb navigation bar in Author mode,
                      Outline view in Text mode, Content Completion Assistant window, or DITA Maps
                      Manager view.</p>
                    <p>The value must be an implementation of
                        <span>ro.sync.exml.workspace.api.node.customizer.XMLNodeRendererCustomizer</span>.</p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=configuring-xml-node-renderer-customizer">Customizing XML Node Rendering</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorModeExternalObjectInsertionHandler">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p>This extension can be used to configure how URLs or XHTML fragments from
                      external applications are handled when they are dropped or pasted in
                        <b>Author</b> mode. The value of this extension point must be a class that
                      implements
                        <span>ro.sync.ecss.extensions.api.AuthorExternalObjectInsertionHandler</span>.</p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=dg-drop-paste-handler">Handling When URLs or XHTML Fragments are Dropped or Pasted in Author
                        Mode</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="customAttributeValueEditor">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p>This extension point allows you customize the attribute value editing
                      mechanisms in Oxygen XML Editor. It changes the Browse button found in the
                      attribute editors to an Edit button. When a user clicks that Edit button, your
                      custom attribute value editor will be presented.</p>
                    <p>The value must extend the
                        <span>ro.sync.ecss.extensions.api.CustomAttributeValueEditor</span> abstract
                      class.</p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=custom-attribute-value-editor">Customizing Attribute Value Editors</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorEditPropertiesHandler">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p>This extension point allows you to present a specialized dialog box when the
                      action of double-clicking an element tag is intercepted in <b>Author</b> mode.
                      For example, you could use it to present a dialog box that allows the user to
                      editing the properties of an image. The value of this extension point must be
                      a class that implements
                        <span>ro.sync.ecss.extensions.api.EditPropertiesHandler</span>.</p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=edit-properties-handler">Presenting an Edit Properties Dialog Box for Actions in Author Mode</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorActionEventHandler">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p>The extension point allows you to handle certain <b>Author</b> mode actions
                      in a special way. For example, a specific use-case would be if you want to
                      insert new lines when you press <b>Enter</b> instead of it opening the Content
                      Completion Assistant. The value of this extension point must be a class that
                      implements
                      <span>ro.sync.ecss.extensions.api.AuthorActionEventHandler</span>.</p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=dg-author-schema-aware-editing-handler">Handling Author Mode Action Events</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="authorImageDecorator">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p>This extension point allows you to add a custom decorator over images in
                      Author mode. For example, you could use it to add a message over an image
                      informing the user that they can double-click the image to edit it. The value
                      of this extension point must be a class that implements
                        <span>ro.sync.ecss.extensions.api.AuthorImageDecorator</span>.</p>
                    <p>
                      <a href="https://www.oxygenxml.com/doc/help.php?product=editor&amp;platform=standalone&amp;pageId=author-image-decorator">Adding a Custom Image Decorator for Author Mode</a>
                    </p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="textModeExternalObjectInsertionHandler">
              <xs:annotation>
                <xs:documentation>
                  <html>
                    <p>This extension is notified when URLs are dropped or pasted from a file
                      explorer or from an Oxygen internal view to a Text Editor page. The value of
                      this extension point must be a class that implements
                        <span>ro.sync.ecss.extensions.api.text.TextPageExternalObjectInsertionHandler</span>.</p>
                  </html>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="textSWTDndExtension">
              <xs:annotation>
                <xs:documentation>
                  <p>Sometimes it is useful to perform various operations when certain objects are
                    dropped from outside sources in the editing area. This extension point is
                    activated in the Text mode of the Eclipse plugin version of the application.</p>
                  <p>The value must be an implementation of
                      <span>com.oxygenxml.editor.editors.TextDnDListener</span></p>
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="value" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <!-- Global attributes definitions -->
  <xs:element name="anchor">
    <xs:complexType>
      <xs:attribute name="actionID" use="required" type="xs:NCName"/>
      <xs:attribute name="position" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="positionAttrs">
    <xs:attribute name="position" default="after">
      <xs:annotation>
        <xs:documentation>Controls where this entry gets inserted relative to the entries inherited
          from base. Entries with the same position will be inserted in document
          order.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="before">
            <xs:annotation>
              <xs:documentation>This entry gets inserted in the list of entries before the entries
                inherited from base.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="after">
            <xs:annotation>
              <xs:documentation>This entry gets inserted in the list of entries after the entries
                inherited from base.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="iconPaths">
    <xs:attribute name="largeIconPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>Use ${framework} or ${frameworkDir} to give paths relative to the
          framework location.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="smallIconPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>Use ${framework} or ${frameworkDir} to give paths relative to the
          framework location.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="anchorAttrs">
    <xs:attribute name="anchor" type="xs:string">
      <xs:annotation>
        <xs:documentation>The ID of an entry already present in the menu/toolbar. It will serve as
          an anchor.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="inheritAttributes">
    <xs:attribute name="inherit" default="all">
      <xs:annotation>
        <xs:documentation>Specifies whether to inherit everything or nothing from the base
          framework.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="all">
            <xs:annotation>
              <xs:documentation>Inherit all the entries from the base framework.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="none">
            <xs:annotation>
              <xs:documentation>Don't inherit the entries from the base
                framework.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="pathAttributes">
    <xs:attribute name="path" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The path to the resource. Use ${framework} or ${frameworkDir} to give
          paths relative to the framework location.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:complexType name="baseCT">
    <xs:annotation>
      <xs:documentation>We accept xml:base because we want to enable xinclude for various
        fragments.</xs:documentation>
    </xs:annotation>
    <xs:attribute ref="xml:base"/>
  </xs:complexType>
</xs:schema>
