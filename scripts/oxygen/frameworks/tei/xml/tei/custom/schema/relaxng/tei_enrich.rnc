namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.w3.org/1999/xhtml"
namespace ns2 = "http://www.isocat.org/ns/dcr"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace s = "http://www.ascc.net/xml/schematron"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
default namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"
namespace xi = "http://www.w3.org/2001/XInclude"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2021-08-31T10:47:06Z. .
# TEI Edition: Version 4.3.0. Last updated on
#         31st August 2021, revision b4f72b1ff
# TEI Edition Location: https://www.tei-c.org/Vault/P5/Version 4.3.0/
#

# This material is dual-licensed.
# [http://creativecommons.org/licenses/by-sa/3.0/] Distributed under a Creative Commons Attribution-ShareAlike 3.0 Unported License  [http://www.opensource.org/licenses/BSD-2-Clause] Copyright 2013 TEI Consortium. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. This software is provided by the copyright holders and contributors "as is" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages which treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of TEI content in a software environment. For further information or clarification, please contact the  TEI Consortium .
macro.paraContent =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.global
   | lg
   | model.lLike)*
macro.limitedContent = (text | model.limitedPhrase | model.inter)*
macro.phraseSeq =
  (text
   | model.gLike
   | model.attributable
   | model.phrase
   | model.global)*
macro.phraseSeq.limited = (text | model.limitedPhrase | model.global)*
macro.specialPara =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.divPart
   | model.global)*
macro.xtext = (text | model.gLike)*
anyElement-xenoData =
  element * - (tei:* | teix:egXML) {
    attribute * { text }*,
    (text | anyElement-xenoData)*
  }
att.anchoring.attributes =
  att.anchoring.attribute.anchored, att.anchoring.attribute.targetEnd
att.anchoring.attribute.anchored =
  
  ## (anchored) indicates whether the copy text shows the exact place of reference for the note.
  [ a:defaultValue = "true" ] attribute anchored { xsd:boolean }?
att.anchoring.attribute.targetEnd =
  
  ## (target end) points to the end of the span to which the note is attached, if the note is not embedded in the text at that point.
  attribute targetEnd {
    list { xsd:anyURI+ }
  }?
att.ascribed.attributes = att.ascribed.attribute.who
att.ascribed.attribute.who =
  
  ## indicates the person, or group of people, to whom the element content is ascribed.
  attribute who {
    list { xsd:anyURI+ }
  }?
att.ascribed.directed.attributes =
  att.ascribed.attributes, att.ascribed.directed.attribute.toWhom
att.ascribed.directed.attribute.toWhom =
  
  ## indicates the person, or group of people, to whom a speech act or action is directed.
  attribute toWhom {
    list { xsd:anyURI+ }
  }?
att.canonical.attributes =
  att.canonical.attribute.key, att.canonical.attribute.ref
att.canonical.attribute.key =
  
  ## provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind.
  attribute key { xsd:string }?
att.canonical.attribute.ref =
  
  ## (reference) provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.
  attribute ref {
    list { xsd:anyURI+ }
  }?
att.ranging.attributes =
  att.ranging.attribute.atLeast,
  att.ranging.attribute.atMost,
  att.ranging.attribute.min,
  att.ranging.attribute.max,
  att.ranging.attribute.confidence
att.ranging.attribute.atLeast =
  
  ## gives a minimum estimated value for the approximate measurement.
  attribute atLeast {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.ranging.attribute.atMost =
  
  ## gives a maximum estimated value for the approximate measurement.
  attribute atMost {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.ranging.attribute.min =
  
  ## where the measurement summarizes more than one observation or a range, supplies the minimum value observed.
  attribute min {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.ranging.attribute.max =
  
  ## where the measurement summarizes more than one observation or a range, supplies the maximum value observed.
  attribute max {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.ranging.attribute.confidence =
  [
    a:documentation [
      "specifies the degree of statistical confidence (between zero and one) that a value falls within the range specified by "
      ns1:code [ "@min" ]
      " and "
      ns1:code [ "@max" ]
      ", or the proportion of observed values that fall within that range."
    ]
  ]
  attribute confidence { xsd:double }?
att.dimensions.attributes =
  att.ranging.attributes,
  att.dimensions.attribute.unit,
  att.dimensions.attribute.quantity,
  att.dimensions.attribute.extent,
  att.dimensions.attribute.scope
att.dimensions.attribute.unit =
  
  ## names the unit used for the measurement
  [ a:defaultValue = "mm" ]
  attribute unit {
    
    ##
    "cm"
    | 
      ##
      "mm"
    | 
      ##
      "in"
    | 
      ##
      "lines"
    | 
      ##
      "chars"
  }?
att.dimensions.attribute.quantity =
  
  ## specifies the length in the units specified
  attribute quantity {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.dimensions.attribute.extent =
  
  ## indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words.
  attribute extent { xsd:string }?
att.dimensions.attribute.scope =
  
  ## where the measurement summarizes more than one observation, specifies the applicability of this measurement.
  ## Sample values include: 1] all; 2] most; 3] range
  attribute scope {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.written.attributes = att.written.attribute.hand
att.written.attribute.hand =
  [
    a:documentation [
      "points to a "
      ns1:code [ "<handNote>" ]
      " element describing the hand considered responsible for the content of the element concerned."
    ]
  ]
  attribute hand { xsd:anyURI }?
att.damaged.attributes =
  att.dimensions.attributes,
  att.written.attributes,
  att.damaged.attribute.agent,
  att.damaged.attribute.degree,
  att.damaged.attribute.group
att.damaged.attribute.agent =
  
  ## categorizes the cause of the damage, if it can be identified.
  ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
  attribute agent {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.damaged.attribute.degree =
  [
    a:documentation [
      "provides a coded representation of the degree of damage, either as a number between 0 (undamaged) and 1 (very extensively damaged), or as one of the codes high, medium, low, or unknown. The "
      ns1:code [ "<damage>" ]
      " element with the "
      ns1:code [ "@degree" ]
      " attribute should only be used where the text may be read with some confidence; text supplied from other sources should be tagged as "
      ns1:code [ "<supplied>" ]
      "."
    ]
  ]
  attribute degree {
    xsd:double
    | (
       ##
       "high"
       | 
         ##
         "medium"
       | 
         ##
         "low"
       | 
         ##
         "unknown")
  }?
att.damaged.attribute.group =
  
  ## assigns an arbitrary number to each stretch of damage regarded as forming part of the same physical phenomenon.
  attribute group { xsd:nonNegativeInteger }?
att.breaking.attributes = att.breaking.attribute.break
att.breaking.attribute.break =
  
  ## indicates whether or not the element bearing this attribute should be considered to mark the end of an orthographic token in the same way as whitespace.
  attribute break {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.cReferencing.attributes = att.cReferencing.attribute.cRef
att.cReferencing.attribute.cRef =
  [
    a:documentation [
      "(canonical reference) specifies the destination of the pointer by supplying a canonical reference expressed using the scheme defined in a "
      ns1:code [ "<refsDecl>" ]
      " element in the TEI header"
    ]
  ]
  attribute cRef { xsd:string }?
att.datable.w3c.attributes =
  att.datable.w3c.attribute.when,
  att.datable.w3c.attribute.notBefore,
  att.datable.w3c.attribute.notAfter,
  att.datable.w3c.attribute.from,
  att.datable.w3c.attribute.to
att.datable.w3c.attribute.when =
  
  ## supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd.
  attribute when {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.datable.w3c.attribute.notBefore =
  
  ## specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notBefore {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.datable.w3c.attribute.notAfter =
  
  ## specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notAfter {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.datable.w3c.attribute.from =
  
  ## indicates the starting point of the period in standard form, e.g. yyyy-mm-dd.
  attribute from {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.datable.w3c.attribute.to =
  
  ## indicates the ending point of the period in standard form, e.g. yyyy-mm-dd.
  attribute to {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
sch:pattern [
  id =
    "tei_enrich-att.datable.w3c-att-datable-w3c-when-constraint-rule-1"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@when]"
    "\x{a}" ~
    "         "
    sch:report [
      test = "@notBefore|@notAfter|@from|@to"
      role = "nonfatal"
      "The @when attribute cannot be used with any other att.datable.w3c attributes."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id =
    "tei_enrich-att.datable.w3c-att-datable-w3c-from-constraint-rule-2"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@from]"
    "\x{a}" ~
    "         "
    sch:report [
      test = "@notBefore"
      role = "nonfatal"
      "The @from and @notBefore attributes cannot be used together."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "tei_enrich-att.datable.w3c-att-datable-w3c-to-constraint-rule-3"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@to]"
    "\x{a}" ~
    "         "
    sch:report [
      test = "@notAfter"
      role = "nonfatal"
      "The @to and @notAfter attributes cannot be used together."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.datable.attributes =
  att.datable.w3c.attributes,
  att.datable.custom.attributes,
  att.datable.attribute.calendar,
  att.datable.attribute.period
att.datable.attribute.calendar =
  
  ## indicates one or more systems or calendars to which the date represented by the content of this element belongs.
  attribute calendar {
    list { xsd:anyURI+ }
  }?
sch:pattern [
  id = "tei_enrich-att.datable-calendar-calendar-constraint-rule-4"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@calendar]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "string-length(.) gt 0"
      " @calendar indicates one or more systems or calendars to\x{a}" ~
      "              which the date represented by the content of this element belongs, but this\x{a}" ~
      "              "
      sch:name [ ]
      " element has no textual content."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.datable.attribute.period =
  [
    a:documentation [
      "supplies pointers to one or more definitions of named periods of time (typically "
      ns1:code [ "<category>" ]
      "s or "
      ns1:code [ "<calendar>" ]
      "s) within which the datable item is understood to have occurred."
    ]
  ]
  attribute period {
    list { xsd:anyURI+ }
  }?
att.datcat.attributes =
  att.datcat.attribute.datcat, att.datcat.attribute.valueDatcat
att.datcat.attribute.datcat =
  
  ## contains a PID (persistent identifier) that aligns the given element with the appropriate Data Category (or categories) in ISOcat.
  attribute ns2:datcat {
    list { xsd:anyURI+ }
  }?
att.datcat.attribute.valueDatcat =
  
  ## contains a PID (persistent identifier) that aligns the content of the given element or the value of the given attribute with the appropriate simple Data Category (or categories) in ISOcat.
  attribute ns2:valueDatcat {
    list { xsd:anyURI+ }
  }?
att.declarable.attributes = att.declarable.attribute.default
att.declarable.attribute.default =
  
  ## indicates whether or not this element is selected by default when its parent is selected.
  [ a:defaultValue = "false" ]
  attribute default {
    
    ## This element is selected if its parent is selected
    "true"
    | 
      ## This element can only be selected explicitly, unless it is the only one of its kind, in which case it is selected if its parent is selected.
      "false"
  }?
att.declaring.attributes = att.declaring.attribute.decls
att.declaring.attribute.decls =
  
  ## identifies one or more declarable elements within the header, which are understood to apply to the element bearing this attribute and its content.
  attribute decls {
    list { xsd:anyURI+ }
  }?
att.fragmentable.attributes = att.fragmentable.attribute.part
att.fragmentable.attribute.part =
  
  ## specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers.
  [ a:defaultValue = "N" ]
  attribute part {
    
    ## (yes) the element is fragmented in some (unspecified) respect
    "Y"
    | 
      ## (no) the element is not fragmented, or no claim is made as to its completeness
      "N"
    | 
      ## (initial) this is the initial part of a fragmented element
      "I"
    | 
      ## (medial) this is a medial part of a fragmented element
      "M"
    | 
      ## (final) this is the final part of a fragmented element
      "F"
  }?
att.divLike.attributes =
  att.fragmentable.attributes,
  att.divLike.attribute.org,
  att.divLike.attribute.sample
att.divLike.attribute.org =
  
  ## (organization) specifies how the content of the division is organized.
  [ a:defaultValue = "uniform" ]
  attribute org {
    
    ## no claim is made about the sequence in which the immediate contents of this division are to be processed, or their inter-relationships.
    "composite"
    | 
      ## the immediate contents of this element are regarded as forming a logical unit, to be processed in sequence.
      "uniform"
  }?
att.divLike.attribute.sample =
  
  ## indicates whether this division is a sample of the original source and if so, from which part.
  [ a:defaultValue = "complete" ]
  attribute sample {
    
    ## division lacks material present at end in source.
    "initial"
    | 
      ## division lacks material at start and end.
      "medial"
    | 
      ## division lacks material at start.
      "final"
    | 
      ## position of sampled material within original unknown.
      "unknown"
    | 
      ## division is not a sample.
      "complete"
  }?
att.docStatus.attributes = att.docStatus.attribute.status
att.docStatus.attribute.status =
  
  ## describes the status of a document either currently or, when associated with a dated element, at the time indicated.
  ## Sample values include: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn
  [ a:defaultValue = "draft" ]
  attribute status {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.global.responsibility.attributes =
  att.global.responsibility.attribute.cert,
  att.global.responsibility.attribute.resp
att.global.responsibility.attribute.cert =
  
  ## (certainty) signifies the degree of certainty associated with the intervention or interpretation.
  attribute cert {
    xsd:double
    | (
       ##
       "high"
       | 
         ##
         "medium"
       | 
         ##
         "low"
       | 
         ##
         "unknown")
  }?
att.global.responsibility.attribute.resp =
  
  ## (responsible party) indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber.
  attribute resp {
    list { xsd:anyURI+ }
  }?
att.editLike.attributes =
  att.editLike.attribute.evidence, att.editLike.attribute.instant
att.editLike.attribute.evidence =
  
  ## indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation.
  ## Suggested values include: 1] internal; 2] external; 3] conjecture
  attribute evidence {
    list {
      (
       ## there is internal evidence to support the intervention.
       "internal"
       | 
         ## there is external evidence to support the intervention.
         "external"
       | 
         ## the intervention or interpretation has been made by the editor, cataloguer, or scholar on the basis of their expertise.
         "conjecture"
       | xsd:token { pattern = "[^\p{C}\p{Z}]+" })+
    }
  }?
att.editLike.attribute.instant =
  
  ## indicates whether this is an instant revision or not.
  [ a:defaultValue = "false" ]
  attribute instant {
    xsd:boolean
    | (
       ##
       "unknown"
       | 
         ##
         "inapplicable")
  }?
att.global.rendition.attributes =
  att.global.rendition.attribute.rend,
  att.global.rendition.attribute.style
att.global.rendition.attribute.rend =
  
  ## (rendition) indicates how the element in question was rendered or presented in the source text.
  attribute rend {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.global.rendition.attribute.style =
  
  ## contains an expression in some formal style definition language which defines the rendering or presentation used for this element in the source text
  attribute style { xsd:string }?
att.global.source.attributes = att.global.source.attribute.source
att.global.source.attribute.source =
  
  ## specifies the source from which some aspect of this element is drawn.
  attribute source {
    list { xsd:anyURI+ }
  }?
att.global.attributes =
  att.global.rendition.attributes,
  att.global.facs.attributes,
  att.global.change.attributes,
  att.global.responsibility.attributes,
  att.global.source.attributes,
  att.global.attribute.xmlid,
  att.global.attribute.n,
  att.global.attribute.xmllang,
  att.global.attribute.xmlbase,
  att.global.attribute.xmlspace
att.global.attribute.xmlid =
  
  ## (identifier) provides a unique identifier for the element bearing the attribute.
  attribute xml:id { xsd:ID }?
att.global.attribute.n =
  
  ## (number) gives a number (or other label) for an element, which is not necessarily unique within the document.
  attribute n { xsd:string }?
att.global.attribute.xmllang =
  [
    a:documentation [
      "(language) indicates the language of the element content using a tag generated according to "
      ns1:a [
        href = "http://www.rfc-editor.org/rfc/bcp/bcp47.txt"
        "BCP 47"
      ]
      "."
    ]
  ]
  attribute xml:lang {
    xsd:language
    | (
       ##
       "")
  }?
att.global.attribute.xmlbase =
  
  ## provides a base URI reference with which applications can resolve relative URI references into absolute URI references.
  attribute xml:base { xsd:anyURI }?
att.global.attribute.xmlspace =
  
  ## signals an intention about how white space should be managed by applications.
  attribute xml:space {
    
    ## signals that the application's default white-space processing modes are acceptable
    "default"
    | 
      ## indicates the intent that applications preserve all white space
      "preserve"
  }?
att.handFeatures.attributes =
  att.handFeatures.attribute.scribe,
  att.handFeatures.attribute.scribeRef,
  att.handFeatures.attribute.script,
  att.handFeatures.attribute.scriptRef,
  att.handFeatures.attribute.medium,
  att.handFeatures.attribute.scope
att.handFeatures.attribute.scribe =
  
  ## gives a name or other identifier for the scribe believed to be responsible for this hand.
  attribute scribe { xsd:Name }?
att.handFeatures.attribute.scribeRef =
  [
    a:documentation [
      "points to a full description of the scribe concerned, typically supplied by a "
      ns1:code [ "<person>" ]
      " element elsewhere in the description."
    ]
  ]
  attribute scribeRef {
    list { xsd:anyURI+ }
  }?
att.handFeatures.attribute.script =
  
  ## characterizes the particular script or writing style used by this hand, for example secretary, copperplate, Chancery, Italian, etc.
  attribute script {
    list { xsd:Name+ }
  }?
att.handFeatures.attribute.scriptRef =
  [
    a:documentation [
      "points to a full description of the script or writing style used by this hand, typically supplied by a "
      ns1:code [ "<scriptNote>" ]
      " element elsewhere in the description."
    ]
  ]
  attribute scriptRef {
    list { xsd:anyURI+ }
  }?
att.handFeatures.attribute.medium =
  
  ## describes the tint or type of ink, e.g. brown, or other writing medium, e.g. pencil
  attribute medium {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.handFeatures.attribute.scope =
  
  ## specifies how widely this hand is used in the manuscript.
  attribute scope {
    
    ## only this hand is used throughout the manuscript
    "sole"
    | 
      ## this hand is used through most of the manuscript
      "major"
    | 
      ## this hand is used occasionally in the manuscript
      "minor"
  }?
att.internetMedia.attributes = att.internetMedia.attribute.mimeType
att.internetMedia.attribute.mimeType =
  
  ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
  attribute mimeType {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.media.attributes =
  att.internetMedia.attributes,
  att.media.attribute.width,
  att.media.attribute.height,
  att.media.attribute.scale
att.media.attribute.width =
  
  ## Where the media are displayed, indicates the display width
  attribute width {
    xsd:token {
      pattern =
        "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
    }
  }?
att.media.attribute.height =
  
  ## Where the media are displayed, indicates the display height
  attribute height {
    xsd:token {
      pattern =
        "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
    }
  }?
att.media.attribute.scale =
  
  ## Where the media are displayed, indicates a scale factor to be applied when generating the desired display size
  attribute scale {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.resourced.attributes = att.resourced.attribute.url
att.resourced.attribute.url =
  
  ## (uniform resource locator) specifies the URL from which the media concerned may be obtained.
  attribute url { xsd:anyURI }
att.measurement.attributes =
  att.measurement.attribute.unit,
  att.measurement.attribute.unitRef,
  att.measurement.attribute.quantity,
  att.measurement.attribute.commodity
att.measurement.attribute.unit =
  
  ## (unit) indicates the units used for the measurement, usually using the standard symbol for the desired units.
  ## Suggested values include: 1] m (metre); 2] kg (kilogram); 3] s (second); 4] Hz (hertz); 5] Pa (pascal); 6] Ω (ohm); 7] L (litre); 8] t (tonne); 9] ha (hectare); 10] Å (ångström); 11] mL (millilitre); 12] cm (centimetre); 13] dB (decibel); 14] kbit (kilobit); 15] Kibit (kibibit); 16] kB (kilobyte); 17] KiB (kibibyte); 18] MB (megabyte); 19] MiB (mebibyte)
  attribute unit {
    
    ## (metre) SI base unit of length
    "m"
    | 
      ## (kilogram) SI base unit of mass
      "kg"
    | 
      ## (second) SI base unit of time
      "s"
    | 
      ## (hertz) SI unit of frequency
      "Hz"
    | 
      ## (pascal) SI unit of pressure or stress
      "Pa"
    | 
      ## (ohm) SI unit of electric resistance
      "Ω"
    | 
      ## (litre) 1 dm³
      "L"
    | 
      ## (tonne) 10³ kg
      "t"
    | 
      ## (hectare) 1 hm²
      "ha"
    | 
      ## (ångström) 10⁻¹⁰ m
      "Å"
    | 
      ## (millilitre) 
      "mL"
    | 
      ## (centimetre) 
      "cm"
    | 
      ## (decibel) see remarks, below
      "dB"
    | 
      ## (kilobit) 10³ or 1000 bits
      "kbit"
    | 
      ## (kibibit) 2¹⁰ or 1024 bits
      "Kibit"
    | 
      ## (kilobyte) 10³ or 1000 bytes
      "kB"
    | 
      ## (kibibyte) 2¹⁰ or 1024 bytes
      "KiB"
    | 
      ## (megabyte) 10⁶ or 1 000 000 bytes
      "MB"
    | 
      ## (mebibyte) 2²⁰ or 1 048 576 bytes
      "MiB"
    | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.measurement.attribute.unitRef =
  [
    a:documentation [
      "points to a unique identifier stored in the "
      ns1:code [ "@xml:id" ]
      " of a "
      ns1:code [ "<unitDef>" ]
      " element that defines a unit of measure."
    ]
  ]
  attribute unitRef { xsd:anyURI }?
att.measurement.attribute.quantity =
  
  ## (quantity) specifies the number of the specified units that comprise the measurement
  attribute quantity {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.measurement.attribute.commodity =
  
  ## (commodity) indicates the substance that is being measured
  attribute commodity {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
sch:pattern [
  id =
    "tei_enrich-att.measurement-att-measurement-unitRef-constraint-rule-5"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@unitRef]"
    "\x{a}" ~
    "         "
    sch:report [
      test = "@unit"
      role = "info"
      "The @unit attribute may be unnecessary when @unitRef is present."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.naming.attributes =
  att.canonical.attributes,
  att.naming.attribute.role,
  att.naming.attribute.nymRef
att.naming.attribute.role =
  
  ## may be used to specify further information about the entity referenced by this name in the form of a set of whitespace-separated values, for example the occupation of a person, or the status of a place.
  attribute role {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.naming.attribute.nymRef =
  
  ## (reference to the canonical name) provides a means of locating the canonical form (nym) of the names associated with the object named by the element bearing it.
  attribute nymRef {
    list { xsd:anyURI+ }
  }?
att.notated.attributes = att.notated.attribute.notation
att.notated.attribute.notation =
  
  ## names the notation used for the content of the element.
  attribute notation {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.placement.attributes = att.placement.attribute.place
att.placement.attribute.place =
  
  ## specifies where this item is placed.
  ## Suggested values include: 1] top; 2] bottom; 3] margin; 4] opposite; 5] overleaf; 6] above; 7] right; 8] below; 9] left; 10] end; 11] inline; 12] inspace
  attribute place {
    list {
      (
       ## at the top of the page
       "top"
       | 
         ## at the foot of the page
         "bottom"
       | 
         ## in the margin (left, right, or both)
         "margin"
       | 
         ## on the opposite, i.e. facing, page
         "opposite"
       | 
         ## on the other side of the leaf
         "overleaf"
       | 
         ## above the line
         "above"
       | 
         ## to the right, e.g. to the right of a vertical line of text, or to the right of a figure
         "right"
       | 
         ## below the line
         "below"
       | 
         ## to the left, e.g. to the left of a vertical line of text, or to the left of a figure
         "left"
       | 
         ## at the end of e.g. chapter or volume.
         "end"
       | 
         ## within the body of the text.
         "inline"
       | 
         ## in a predefined space, for example left by an earlier scribe.
         "inspace"
       | xsd:token { pattern = "[^\p{C}\p{Z}]+" })+
    }
  }?
att.typed.attributes =
  att.typed.attribute.type, att.typed.attribute.subtype
att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient classification scheme or typology.
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.typed.attribute.subtype =
  
  ## (subtype) provides a sub-categorization of the element, if needed
  attribute subtype {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
sch:pattern [
  id = "tei_enrich-att.typed-subtypeTyped-constraint-rule-6"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@subtype]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@type"
      "The "
      sch:name [ ]
      " element should not be categorized in detail with @subtype unless also categorized in general with @type"
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.pointing.attributes =
  att.pointing.attribute.targetLang,
  att.pointing.attribute.target,
  att.pointing.attribute.evaluate
att.pointing.attribute.targetLang =
  [
    a:documentation [
      "specifies the language of the content to be found at the destination referenced by "
      ns1:code [ "@target" ]
      ", using a language tag generated according to "
      ns1:a [
        href = "http://www.rfc-editor.org/rfc/bcp/bcp47.txt"
        "BCP 47"
      ]
      "."
    ]
  ]
  attribute targetLang {
    xsd:language
    | (
       ##
       "")
  }?
sch:pattern [
  id = "tei_enrich-att.pointing-targetLang-targetLang-constraint-rule-7"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[not(self::tei:schemaSpec)][@targetLang]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@target"
      "@targetLang should only be used on "
      sch:name [ ]
      " if @target is specified."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.pointing.attribute.target =
  
  ## specifies the destination of the reference by supplying one or more URI References
  attribute target {
    list { xsd:anyURI+ }
  }?
att.pointing.attribute.evaluate =
  
  ## (evaluate) specifies the intended meaning when the target of a pointer is itself a pointer.
  attribute evaluate {
    
    ## if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.
    "all"
    | 
      ## if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.
      "one"
    | 
      ## no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.
      "none"
  }?
att.segLike.attributes =
  att.datcat.attributes,
  att.fragmentable.attributes,
  att.segLike.attribute.function
att.segLike.attribute.function =
  
  ## (function) characterizes the function of the segment.
  attribute function {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.sortable.attributes = att.sortable.attribute.sortKey
att.sortable.attribute.sortKey =
  
  ## supplies the sort key for this element in an index, list or group which contains it.
  attribute sortKey {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.edition.attributes =
  att.edition.attribute.ed, att.edition.attribute.edRef
att.edition.attribute.ed =
  
  ## (edition) supplies a sigil or other arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute ed {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.edition.attribute.edRef =
  
  ## (edition reference) provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute edRef {
    list { xsd:anyURI+ }
  }?
att.spanning.attributes = att.spanning.attribute.spanTo
att.spanning.attribute.spanTo =
  
  ## indicates the end of a span initiated by the element bearing this attribute.
  attribute spanTo { xsd:anyURI }?
sch:pattern [
  id = "tei_enrich-att.spanning-spanTo-spanTo-2-constraint-rule-8"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@spanTo]"
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "id(substring(@spanTo,2)) and following::*[@xml:id=substring(current()/@spanTo,2)]"
      "\x{a}" ~
      "The element indicated by @spanTo ("
      sch:value-of [ select = "@spanTo" ]
      ") must follow the current element "
      sch:name [ ]
      "\x{a}" ~
      "         "
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.styleDef.attributes =
  att.styleDef.attribute.scheme, att.styleDef.attribute.schemeVersion
att.styleDef.attribute.scheme =
  
  ## identifies the language used to describe the rendition.
  attribute scheme {
    
    ## Cascading Stylesheet Language
    "css"
    | 
      ## Extensible Stylesheet Language Formatting Objects
      "xslfo"
    | 
      ## Informal free text description
      "free"
    | 
      ## A user-defined rendition description language
      "other"
  }?
att.styleDef.attribute.schemeVersion =
  [
    a:documentation [
      "supplies a version number for the style language provided in "
      ns1:code [ "@scheme" ]
      "."
    ]
  ]
  attribute schemeVersion {
    xsd:token { pattern = "[\d]+[a-z]*[\d]*(\.[\d]+[a-z]*[\d]*){0,3}" }
  }?
sch:pattern [
  id =
    "tei_enrich-att.styleDef-schemeVersion-schemeVersionRequiresScheme-constraint-rule-9"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@schemeVersion]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@scheme and not(@scheme = 'free')"
      "\x{a}" ~
      "              @schemeVersion can only be used if @scheme is specified.\x{a}" ~
      "            "
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.timed.attributes =
  att.timed.attribute.start, att.timed.attribute.end
att.timed.attribute.start =
  
  ## indicates the location within a temporal alignment at which this element begins.
  attribute start { xsd:anyURI }?
att.timed.attribute.end =
  
  ## indicates the location within a temporal alignment at which this element ends.
  attribute end { xsd:anyURI }?
att.transcriptional.attributes =
  att.editLike.attributes,
  att.written.attributes,
  att.transcriptional.attribute.status,
  att.transcriptional.attribute.cause,
  att.transcriptional.attribute.seq
att.transcriptional.attribute.status =
  
  ## indicates the effect of the intervention, for example in the case of a deletion, strikeouts which include too much or too little text, or in the case of an addition, an insertion which duplicates some of the text already present.
  ## Sample values include: 1] duplicate; 2] duplicate-partial; 3] excessStart; 4] excessEnd; 5] shortStart; 6] shortEnd; 7] partial; 8] unremarkable
  [ a:defaultValue = "unremarkable" ]
  attribute status {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.transcriptional.attribute.cause =
  
  ## documents the presumed cause for the intervention.
  attribute cause {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.transcriptional.attribute.seq =
  
  ## (sequence) assigns a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.
  attribute seq { xsd:nonNegativeInteger }?
att.citing.attributes =
  att.citing.attribute.unit,
  att.citing.attribute.from,
  att.citing.attribute.to
att.citing.attribute.unit =
  
  ## identifies the unit of information conveyed by the element, e.g. columns, pages, volume, entry.
  ## Suggested values include: 1] volume (volume); 2] issue; 3] page (page); 4] line; 5] chapter (chapter); 6] part; 7] column; 8] entry
  attribute unit {
    
    ## (volume) the element contains a volume number.
    "volume"
    | 
      ## the element contains an issue number, or volume and issue numbers.
      "issue"
    | 
      ## (page) the element contains a page number or page range.
      "page"
    | 
      ## the element contains a line number or line range.
      "line"
    | 
      ## (chapter) the element contains a chapter indication (number and/or title)
      "chapter"
    | 
      ## the element identifies a part of a book or collection.
      "part"
    | 
      ## the element identifies a column.
      "column"
    | 
      ## the element identifies an entry number or label in a list of entries.
      "entry"
    | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.citing.attribute.from =
  [
    a:documentation [
      "specifies the starting point of the range of units indicated by the "
      ns1:code [ "@unit" ]
      " attribute."
    ]
  ]
  attribute from {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.citing.attribute.to =
  [
    a:documentation [
      "specifies the end-point of the range of units indicated by the "
      ns1:code [ "@unit" ]
      " attribute."
    ]
  ]
  attribute to {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
model.nameLike.agent = name | orgName | persName
model.nameLike.agent_alternation = name | orgName | persName
model.nameLike.agent_sequence = name, orgName, persName
model.nameLike.agent_sequenceOptional = name?, orgName?, persName?
model.nameLike.agent_sequenceOptionalRepeatable =
  name*, orgName*, persName*
model.nameLike.agent_sequenceRepeatable = name+, orgName+, persName+
model.segLike = seg
model.hiLike = hi | q
model.hiLike_alternation = hi | q
model.hiLike_sequence = hi, q
model.hiLike_sequenceOptional = hi?, q?
model.hiLike_sequenceOptionalRepeatable = hi*, q*
model.hiLike_sequenceRepeatable = hi+, q+
model.emphLike = foreign | gloss | term | title
model.emphLike_alternation = foreign | gloss | term | title
model.emphLike_sequence = foreign, gloss, term, title
model.emphLike_sequenceOptional = foreign?, gloss?, term?, title?
model.emphLike_sequenceOptionalRepeatable =
  foreign*, gloss*, term*, title*
model.emphLike_sequenceRepeatable = foreign+, gloss+, term+, title+
model.highlighted = model.hiLike | model.emphLike
model.dateLike = date
model.dateLike_alternation = date
model.dateLike_sequence = date
model.dateLike_sequenceOptional = date?
model.dateLike_sequenceOptionalRepeatable = date*
model.dateLike_sequenceRepeatable = date+
model.dimLike = height | depth | width
model.measureLike = unit | dim | height | depth | width | geo
model.measureLike_alternation =
  unit | dim | height | depth | width | geo
model.measureLike_sequence = unit, dim, height, depth, width, geo
model.measureLike_sequenceOptional =
  unit?, dim?, height?, depth?, width?, geo?
model.measureLike_sequenceOptionalRepeatable =
  unit*, dim*, height*, depth*, width*, geo*
model.measureLike_sequenceRepeatable =
  unit+, dim+, height+, depth+, width+, geo+
model.egLike = notAllowed
model.egLike_alternation = notAllowed
model.egLike_sequence = empty
model.egLike_sequenceOptional = empty
model.egLike_sequenceOptionalRepeatable = empty
model.egLike_sequenceRepeatable = notAllowed
model.graphicLike = media | graphic | formula
model.offsetLike = offset | geogFeat
model.offsetLike_alternation = offset | geogFeat
model.offsetLike_sequence = offset, geogFeat
model.offsetLike_sequenceOptional = offset?, geogFeat?
model.offsetLike_sequenceOptionalRepeatable = offset*, geogFeat*
model.offsetLike_sequenceRepeatable = offset+, geogFeat+
model.pPart.msdesc =
  catchwords
  | dimensions
  | heraldry
  | locus
  | locusGrp
  | material
  | objectType
  | origDate
  | origPlace
  | secFol
  | signatures
  | stamp
  | watermark
model.pPart.editorial = choice | abbr | expan | ex | am | subst
model.pPart.editorial_alternation =
  choice | abbr | expan | ex | am | subst
model.pPart.editorial_sequence = choice, abbr, expan, ex, am, subst
model.pPart.editorial_sequenceOptional =
  choice?, abbr?, expan?, ex?, am?, subst?
model.pPart.editorial_sequenceOptionalRepeatable =
  choice*, abbr*, expan*, ex*, am*, subst*
model.pPart.editorial_sequenceRepeatable =
  choice+, abbr+, expan+, ex+, am+, subst+
model.pPart.transcriptional =
  sic
  | corr
  | reg
  | orig
  | add
  | del
  | unclear
  | damage
  | handShift
  | restore
  | supplied
  | surplus
  | secl
  | mod
  | redo
  | retrace
  | undo
model.pPart.transcriptional_alternation =
  sic
  | corr
  | reg
  | orig
  | add
  | del
  | unclear
  | damage
  | handShift
  | restore
  | supplied
  | surplus
  | secl
  | mod
  | redo
  | retrace
  | undo
model.pPart.transcriptional_sequence =
  sic,
  corr,
  reg,
  orig,
  add,
  del,
  unclear,
  damage,
  handShift,
  restore,
  supplied,
  surplus,
  secl,
  mod,
  redo,
  retrace,
  undo
model.pPart.transcriptional_sequenceOptional =
  sic?,
  corr?,
  reg?,
  orig?,
  add?,
  del?,
  unclear?,
  damage?,
  handShift?,
  restore?,
  supplied?,
  surplus?,
  secl?,
  mod?,
  redo?,
  retrace?,
  undo?
model.pPart.transcriptional_sequenceOptionalRepeatable =
  sic*,
  corr*,
  reg*,
  orig*,
  add*,
  del*,
  unclear*,
  damage*,
  handShift*,
  restore*,
  supplied*,
  surplus*,
  secl*,
  mod*,
  redo*,
  retrace*,
  undo*
model.pPart.transcriptional_sequenceRepeatable =
  sic+,
  corr+,
  reg+,
  orig+,
  add+,
  del+,
  unclear+,
  damage+,
  handShift+,
  restore+,
  supplied+,
  surplus+,
  secl+,
  mod+,
  redo+,
  retrace+,
  undo+
model.pPart.edit = model.pPart.editorial | model.pPart.transcriptional
model.linePart =
  model.hiLike
  | choice
  | add
  | del
  | unclear
  | seg
  | zone
  | path
  | damage
  | handShift
  | restore
  | line
  | mod
  | redo
  | retrace
  | undo
model.ptrLike = ptr | ref
model.lPart = notAllowed
model.global.meta = index | substJoin | listTranspose
model.milestoneLike = milestone | gb | pb | lb | cb | anchor | fw
model.gLike = g
model.oddDecl = notAllowed
model.oddDecl_alternation = notAllowed
model.oddDecl_sequence = empty
model.oddDecl_sequenceOptional = empty
model.oddDecl_sequenceOptionalRepeatable = empty
model.oddDecl_sequenceRepeatable = notAllowed
model.phrase.xml = notAllowed
model.specDescLike = notAllowed
model.biblLike = bibl | listBibl | msDesc
model.biblLike_alternation = bibl | listBibl | msDesc
model.biblLike_sequence = bibl, listBibl, msDesc
model.biblLike_sequenceOptional = bibl?, listBibl?, msDesc?
model.biblLike_sequenceOptionalRepeatable = bibl*, listBibl*, msDesc*
model.biblLike_sequenceRepeatable = bibl+, listBibl+, msDesc+
model.headLike = head
model.headLike_alternation = head
model.headLike_sequence = head
model.headLike_sequenceOptional = head?
model.headLike_sequenceOptionalRepeatable = head*
model.headLike_sequenceRepeatable = head+
model.labelLike = desc | label
model.labelLike_alternation = desc | label
model.labelLike_sequence = desc, label
model.labelLike_sequenceOptional = desc?, label?
model.labelLike_sequenceOptionalRepeatable = desc*, label*
model.labelLike_sequenceRepeatable = desc+, label+
model.listLike =
  \list
  | listOrg
  | listEvent
  | listPerson
  | listPlace
  | listRelation
  | listObject
model.listLike_alternation =
  \list
  | listOrg
  | listEvent
  | listPerson
  | listPlace
  | listRelation
  | listObject
model.listLike_sequence =
  \list,
  listOrg,
  listEvent,
  listPerson,
  listPlace,
  listRelation,
  listObject
model.listLike_sequenceOptional =
  \list?,
  listOrg?,
  listEvent?,
  listPerson?,
  listPlace?,
  listRelation?,
  listObject?
model.listLike_sequenceOptionalRepeatable =
  \list*,
  listOrg*,
  listEvent*,
  listPerson*,
  listPlace*,
  listRelation*,
  listObject*
model.listLike_sequenceRepeatable =
  \list+,
  listOrg+,
  listEvent+,
  listPerson+,
  listPlace+,
  listRelation+,
  listObject+
model.noteLike = note | noteGrp
model.lLike = l
model.lLike_alternation = l
model.lLike_sequence = l
model.lLike_sequenceOptional = l?
model.lLike_sequenceOptionalRepeatable = l*
model.lLike_sequenceRepeatable = l+
model.pLike = p
model.pLike_alternation = p
model.pLike_sequence = p
model.pLike_sequenceOptional = p?
model.pLike_sequenceOptionalRepeatable = p*
model.pLike_sequenceRepeatable = p+
model.stageLike = notAllowed
model.stageLike_alternation = notAllowed
model.stageLike_sequence = empty
model.stageLike_sequenceOptional = empty
model.stageLike_sequenceOptionalRepeatable = empty
model.stageLike_sequenceRepeatable = notAllowed
model.eventLike = event | listEvent
model.global.edit =
  gap | ellipsis | addSpan | damageSpan | delSpan | space
model.divPart = model.lLike | model.pLike | lg
model.persStateLike =
  persName
  | affiliation
  | age
  | education
  | faith
  | floruit
  | langKnowledge
  | nationality
  | occupation
  | persona
  | persPronouns
  | residence
  | sex
  | socecStatus
  | trait
model.personLike = org | person | personGrp
model.personPart =
  model.biblLike
  | model.eventLike
  | model.persStateLike
  | name
  | idno
  | birth
  | death
model.placeNamePart =
  placeName | bloc | country | region | settlement | district | geogName
model.placeNamePart_alternation =
  placeName | bloc | country | region | settlement | district | geogName
model.placeNamePart_sequence =
  placeName, bloc, country, region, settlement, district, geogName
model.placeNamePart_sequenceOptional =
  placeName?,
  bloc?,
  country?,
  region?,
  settlement?,
  district?,
  geogName?
model.placeNamePart_sequenceOptionalRepeatable =
  placeName*,
  bloc*,
  country*,
  region*,
  settlement*,
  district*,
  geogName*
model.placeNamePart_sequenceRepeatable =
  placeName+,
  bloc+,
  country+,
  region+,
  settlement+,
  district+,
  geogName+
model.placeStateLike =
  model.placeNamePart | location | population | trait
model.placeStateLike_alternation =
  model.placeNamePart_alternation | location | population | trait
model.placeStateLike_sequence =
  model.placeNamePart_sequence, location, population, trait
model.placeStateLike_sequenceOptional =
  model.placeNamePart_sequenceOptional?, location?, population?, trait?
model.placeStateLike_sequenceOptionalRepeatable =
  model.placeNamePart_sequenceOptionalRepeatable*,
  location*,
  population*,
  trait*
model.placeStateLike_sequenceRepeatable =
  model.placeNamePart_sequenceRepeatable+,
  location+,
  population+,
  trait+
model.orgPart = model.eventLike | listOrg | listPerson | listPlace
model.publicationStmtPart.agency = publisher | distributor | authority
model.publicationStmtPart.detail =
  model.ptrLike | date | pubPlace | idno | availability
model.availabilityPart = licence
model.certLike = notAllowed
model.descLike = desc
model.quoteLike = quote
model.quoteLike_alternation = quote
model.quoteLike_sequence = quote
model.quoteLike_sequenceOptional = quote?
model.quoteLike_sequenceOptionalRepeatable = quote*
model.quoteLike_sequenceRepeatable = quote+
model.attributable = model.quoteLike
model.attributable_alternation = model.quoteLike_alternation
model.attributable_sequence = model.quoteLike_sequence
model.attributable_sequenceOptional = model.quoteLike_sequenceOptional?
model.attributable_sequenceOptionalRepeatable =
  model.quoteLike_sequenceOptionalRepeatable*
model.attributable_sequenceRepeatable =
  model.quoteLike_sequenceRepeatable+
model.respLike =
  author | editor | respStmt | sponsor | funder | principal
model.divWrapper = docAuthor
model.divTopPart = model.headLike
model.divTop = model.divWrapper | model.divTopPart
model.frontPart.drama = notAllowed
model.pLike.front =
  head | docTitle | titlePart | docAuthor | docEdition | docImprint
model.divBottomPart = notAllowed
model.divBottom = model.divWrapper | model.divBottomPart
model.titlepagePart =
  graphic | docTitle | titlePart | docAuthor | docEdition | docImprint
model.msQuoteLike =
  title | colophon | explicit | finalRubric | incipit | rubric
model.msItemPart =
  model.biblLike
  | model.quoteLike
  | model.respLike
  | model.msQuoteLike
  | textLang
  | idno
  | filiation
  | msItem
  | decoNote
model.choicePart =
  sic
  | corr
  | reg
  | orig
  | unclear
  | abbr
  | expan
  | seg
  | ex
  | am
  | supplied
model.imprintPart = publisher | biblScope | pubPlace | distributor
model.catDescPart = notAllowed
model.addressLike = affiliation
model.addressLike_alternation = affiliation
model.addressLike_sequence = affiliation
model.addressLike_sequenceOptional = affiliation?
model.addressLike_sequenceOptionalRepeatable = affiliation*
model.addressLike_sequenceRepeatable = affiliation+
model.nameLike =
  model.nameLike.agent
  | model.offsetLike
  | model.placeStateLike
  | idno
  | model.persNamePart
  | objectName
model.nameLike_alternation =
  model.nameLike.agent_alternation
  | model.offsetLike_alternation
  | model.placeStateLike_alternation
  | idno
  | model.persNamePart_alternation
  | objectName
model.nameLike_sequence =
  model.nameLike.agent_sequence,
  model.offsetLike_sequence,
  model.placeStateLike_sequence,
  idno,
  model.persNamePart_sequence,
  objectName
model.nameLike_sequenceOptional =
  model.nameLike.agent_sequenceOptional?,
  model.offsetLike_sequenceOptional?,
  model.placeStateLike_sequenceOptional?,
  idno?,
  model.persNamePart_sequenceOptional?,
  objectName?
model.nameLike_sequenceOptionalRepeatable =
  model.nameLike.agent_sequenceOptionalRepeatable*,
  model.offsetLike_sequenceOptionalRepeatable*,
  model.placeStateLike_sequenceOptionalRepeatable*,
  idno*,
  model.persNamePart_sequenceOptionalRepeatable*,
  objectName*
model.nameLike_sequenceRepeatable =
  model.nameLike.agent_sequenceRepeatable+,
  model.offsetLike_sequenceRepeatable+,
  model.placeStateLike_sequenceRepeatable+,
  idno+,
  model.persNamePart_sequenceRepeatable+,
  objectName+
model.global =
  model.global.meta
  | model.milestoneLike
  | model.noteLike
  | model.global.edit
  | notatedMusic
  | figure
  | metamark
model.biblPart =
  model.respLike
  | model.imprintPart
  | citedRange
  | bibl
  | relatedItem
  | textLang
  | edition
  | extent
  | availability
  | msIdentifier
  | explicit
  | incipit
  | decoNote
  | listRelation
  | objectIdentifier
model.frontPart = model.frontPart.drama | listBibl | divGen | titlePage
model.pPart.data =
  model.dateLike
  | model.measureLike
  | model.addressLike
  | model.nameLike
model.inter =
  model.egLike
  | model.oddDecl
  | model.biblLike
  | model.labelLike
  | model.listLike
  | model.stageLike
  | model.attributable
model.common = model.divPart | model.inter | q
model.phrase =
  model.segLike
  | model.highlighted
  | model.graphicLike
  | model.pPart.msdesc
  | model.pPart.edit
  | model.ptrLike
  | model.lPart
  | model.phrase.xml
  | model.specDescLike
  | model.pPart.data
  | ruby
model.limitedPhrase =
  model.hiLike
  | model.emphLike
  | model.pPart.msdesc
  | model.pPart.editorial
  | model.ptrLike
  | model.phrase.xml
  | model.pPart.data
model.divLike = \div
model.divGenLike = divGen
model.div1Like = notAllowed
model.annotationLike = note | annotation
model.annotationPart.body = ptr | ref | note
model.teiHeaderPart = encodingDesc | profileDesc | xenoData
model.sourceDescPart = notAllowed
model.encodingDescPart =
  schemaRef
  | projectDesc
  | editorialDecl
  | styleDefDecl
  | listPrefixDef
  | classDecl
  | geoDecl
  | unitDecl
  | charDecl
model.editorialDeclPart = punctuation
model.profileDescPart =
  abstract
  | creation
  | langUsage
  | textClass
  | calendarDesc
  | correspDesc
  | handNotes
  | listTranspose
model.standOffPart =
  model.global.meta
  | model.biblLike
  | model.listLike
  | model.annotationLike
  | listChange
  | seg
  | listAnnotation
  | zone
att.formula.attributes = att.formula.attribute.formula
att.formula.attribute.formula =
  [
    a:documentation [
      "A "
      ns1:code [ "@formula" ]
      " is provided to describe a mathematical calculation such as a conversion between measurement systems."
    ]
  ]
  attribute formula { text }?
att.locatable.attributes = att.locatable.attribute.where
att.locatable.attribute.where =
  [
    a:documentation [
      "indicates one or more locations by pointing to a "
      ns1:code [ "<place>" ]
      " element or other canonical description."
    ]
  ]
  attribute where {
    list { xsd:anyURI+ }
  }?
model.correspActionPart =
  model.dateLike | model.addressLike | model.nameLike | note | noteGrp
model.correspContextPart = model.ptrLike | model.pLike | note | noteGrp
model.correspDescPart = note | noteGrp | correspAction | correspContext
model.resource = \text | standOff | facsimile | sourceDoc
model.objectLike = object | listObject
att.personal.attributes =
  att.naming.attributes,
  att.personal.attribute.full,
  att.personal.attribute.sort
att.personal.attribute.full =
  
  ## indicates whether the name component is given in full, as an abbreviation or simply as an initial.
  [ a:defaultValue = "yes" ]
  attribute full {
    
    ## (yes) the name component is spelled out in full.
    "yes"
    | 
      ## (abbreviated) the name component is given in an abbreviated form.
      "abb"
    | 
      ## (initial letter) the name component is indicated only by one initial.
      "init"
  }?
att.personal.attribute.sort =
  
  ## (sort) specifies the sort order of the name component in relation to others within the name.
  attribute sort { xsd:nonNegativeInteger }?
model.placeLike = place
att.milestoneUnit.attributes = att.milestoneUnit.attribute.unit
att.milestoneUnit.attribute.unit =
  
  ## provides a conventional name for the kind of section changing at this milestone.
  ## Suggested values include: 1] page; 2] column; 3] line; 4] book; 5] poem; 6] canto; 7] speaker; 8] stanza; 9] act; 10] scene; 11] section; 12] absent; 13] unnumbered
  attribute unit {
    [
      a:documentation [
        "physical page breaks (synonymous with the "
        ns1:code [ "<pb>" ]
        " element)."
      ]
    ]
    "page"
    | 
      ## column breaks.
      "column"
    | [
        a:documentation [
          "line breaks (synonymous with the "
          ns1:code [ "<lb>" ]
          " element)."
        ]
      ]
      "line"
    | 
      ## any units termed book, liber, etc.
      "book"
    | 
      ## individual poems in a collection.
      "poem"
    | 
      ## cantos or other major sections of a poem.
      "canto"
    | 
      ## changes of speaker or narrator.
      "speaker"
    | 
      ## stanzas within a poem, book, or canto.
      "stanza"
    | 
      ## acts within a play.
      "act"
    | 
      ## scenes within a play or act.
      "scene"
    | 
      ## sections of any kind.
      "section"
    | 
      ## passages not present in the reference edition.
      "absent"
    | 
      ## passages present in the text, but not to be included as part of the reference.
      "unnumbered"
    | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }
p =
  
  ## (paragraph) marks paragraphs in prose. [3.1. Paragraphs 7.2.5. Speech Contents]
  element p {
    macro.paraContent
    >> sch:pattern [
         id =
           "tei_enrich-p-abstractModel-structure-p-constraint-report-5"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:p"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "not(ancestor::tei:floatingText) and (ancestor::tei:p or ancestor::tei:ab)          and not(parent::tei:exemplum                |parent::tei:item                |parent::tei:note                |parent::tei:q                |parent::tei:quote                |parent::tei:remarks                |parent::tei:said                |parent::tei:sp                |parent::tei:stage                |parent::tei:cell                |parent::tei:figure                )"
             "\x{a}" ~
             "        Abstract model violation: Paragraphs may not occur inside other paragraphs or ab elements.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "tei_enrich-p-abstractModel-structure-l-constraint-report-6"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:p"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "(ancestor::tei:l or ancestor::tei:lg) and not(parent::tei:figure or parent::tei:note or ancestor::tei:floatingText)"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level structural elements such as div, p, or ab, unless p is a child of figure or note, or is a descendant of floatingText.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.declaring.attributes,
    att.fragmentable.attributes,
    att.written.attributes,
    empty
  }
foreign =
  
  ## (foreign) identifies a word or phrase as belonging to some language other than that of the surrounding text. [3.3.2.1. Foreign Words or Expressions]
  element foreign { macro.phraseSeq, att.global.attributes, empty }
hi =
  
  ## (highlighted) marks a word or phrase as graphically distinct from the surrounding text, for reasons concerning which no claim is made. [3.3.2.2. Emphatic Words and Phrases 3.3.2. Emphasis, Foreign Words, and Unusual Language]
  element hi {
    macro.paraContent,
    att.global.attribute.xmlid,
    att.global.attribute.n,
    att.global.attribute.xmllang,
    att.global.attribute.xmlbase,
    att.global.attribute.xmlspace,
    att.global.rendition.attribute.style,
    att.global.facs.attribute.facs,
    att.global.change.attribute.change,
    att.global.responsibility.attribute.cert,
    att.global.responsibility.attribute.resp,
    att.global.source.attribute.source,
    att.written.attributes,
    
    ## (rendition) indicates how the element in question was rendered or presented in the source text.
    attribute rend {
      list {
        (
         ##
         "hyphenated"
         | 
           ##
           "underline"
         | 
           ##
           "double-underline"
         | 
           ##
           "bold"
         | 
           ##
           "caps"
         | 
           ##
           "italic"
         | 
           ##
           "sup"
         | 
           ##
           "rubric")+
      }
    },
    empty
  }
quote =
  
  ## (quotation) contains a phrase or passage attributed by the narrator or author to some agency external to the text. [3.3.3. Quotation 4.3.1. Grouped Texts]
  element quote {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    att.notated.attributes,
    empty
  }
q =
  
  ## (quoted) contains material which is distinguished from the surrounding text using quotation marks or a similar method, for any one of a variety of reasons including, but not limited to: direct speech or thought, technical terms or jargon, authorial distance, quotations from elsewhere, and passages that are mentioned but not used. [3.3.3. Quotation]
  element q {
    macro.specialPara,
    att.global.attributes,
    att.ascribed.directed.attributes,
    
    ## (type) may be used to indicate whether the offset passage is spoken or thought, or to characterize it more finely.
    ## Suggested values include: 1] spoken (spoken); 2] thought (thought); 3] written (written); 4] soCalled (so called); 5] foreign (foreign); 6] distinct (distinct); 7] term; 8] emph (emph); 9] mentioned (mentioned)
    attribute type {
      
      ## (spoken) representation of speech
      "spoken"
      | 
        ## (thought) representation of thought, e.g. internal monologue
        "thought"
      | 
        ## (written) quotation from a written source
        "written"
      | 
        ## (so called) authorial distance
        "soCalled"
      | 
        ## (foreign) 
        "foreign"
      | 
        ## (distinct) linguistically distinct
        "distinct"
      | 
        ## technical term
        "term"
      | 
        ## (emph) rhetorically emphasized
        "emph"
      | 
        ## (mentioned) refering to itself, not its normal referent
        "mentioned"
      | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
desc =
  
  ## (description) contains a short description of the purpose, function, or use of its parent element, or when the parent is a documentation element, describes or defines the object being documented.  [22.4.1. Description of Components]
  element desc {
    macro.limitedContent
    >> sch:pattern [
         id =
           "tei_enrich-desc-deprecationInfo-only-in-deprecated-constraint-rule-10"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:desc[ @type eq 'deprecationInfo']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "../@validUntil"
             "Information about a\x{a}" ~
             "        deprecation should only be present in a specification element\x{a}" ~
             "        that is being deprecated: that is, only an element that has a\x{a}" ~
             "        @validUntil attribute should have a child <desc\x{a}" ~
             '        type="deprecationInfo">.'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Suggested values include: 1] deprecationInfo (deprecation information)
    attribute type {
      
      ## (deprecation
      ##           information) This element describes why or how its parent element is being deprecated, typically including recommendations for alternate encoding.
      "deprecationInfo"
      | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
gloss =
  
  ## (gloss) identifies a phrase or word used to provide a gloss or definition for some other word or phrase. [3.4.1. Terms and Glosses 22.4.1. Description of Components]
  element gloss {
    macro.phraseSeq,
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    att.pointing.attributes,
    att.cReferencing.attributes,
    empty
  }
term =
  
  ## (term) contains a single-word, multi-word, or symbolic designation which is regarded as a technical term. [3.4.1. Terms and Glosses]
  element term {
    macro.phraseSeq,
    att.global.attributes,
    att.declaring.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    att.canonical.attributes,
    att.sortable.attributes,
    att.cReferencing.attributes,
    empty
  }
ruby =
  
  ## (ruby container) contains a passage of base text along with its associated ruby gloss(es). [3.4.2. Ruby Annotations]
  element ruby {
    (rb, rt+), att.global.attributes, att.typed.attributes, empty
  }
rb =
  
  ## (ruby base) contains the base text annotated by a ruby gloss. [3.4.2. Ruby Annotations]
  element rb {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
rt =
  
  ## (ruby text) contains a ruby text, an annotation closely associated with a passage of the main text. [3.4.2. Ruby Annotations]
  element rt {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.placement.attributes,
    att.transcriptional.attributes,
    (
     ## supplies a pointer to the base being glossed by this ruby text.
     attribute target { xsd:anyURI }?)
    >> sch:pattern [
         id =
           "tei_enrich-rt-target-rt-target-not-span-constraint-report-7"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:rt/@target"
           "\x{a}" ~
           "               "
           sch:report [
             test = "../@from | ../@to"
             "When target= is\x{a}" ~
             "            present, neither from= nor to= should be."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    (
     ## points to the starting point of the span of text being glossed by this ruby text.
     attribute from { xsd:anyURI }?)
    >> sch:pattern [
         id = "tei_enrich-rt-from-rt-from-constraint-assert-7"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:rt/@from"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "../@to"
             "When from= is present, the to=\x{a}" ~
             "            attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    (
     ## points to the ending point of the span of text being glossed.
     attribute to { xsd:anyURI }?)
    >> sch:pattern [
         id = "tei_enrich-rt-to-rt-to-constraint-assert-8"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:rt/@to"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "../@from"
             "When to= is present, the from=\x{a}" ~
             "            attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    empty
  }
sic =
  
  ## (Latin for thus or so) contains text reproduced although apparently incorrect or inaccurate. [3.5.1. Apparent Errors]
  element sic { macro.paraContent, att.global.attributes, empty }
corr =
  
  ## (correction) contains the correct form of a passage apparently erroneous in the copy text. [3.5.1. Apparent Errors]
  element corr {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
choice =
  
  ## (choice) groups a number of alternative encodings for the same point in a text. [3.5. Simple Editorial Changes]
  element choice {
    (model.choicePart | choice)+, att.global.attributes, empty
  }
reg =
  
  ## (regularization) contains a reading which has been regularized or normalized in some sense. [3.5.2. Regularization and
  ## Normalization 12. Critical Apparatus]
  element reg {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
orig =
  
  ## (original form) contains a reading which is marked as following the original, rather than being normalized or corrected. [3.5.2. Regularization and
  ## Normalization 12. Critical Apparatus]
  element orig { macro.paraContent, att.global.attributes, empty }
gap =
  
  ## (gap) indicates a point where material has been omitted in a transcription, whether for editorial reasons described in the TEI header, as part of sampling practice, or because the material is illegible, invisible, or inaudible. [3.5.3. Additions, Deletions, and Omissions]
  element gap {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.timed.attributes,
    att.editLike.attributes,
    att.dimensions.attribute.quantity,
    att.dimensions.attribute.extent,
    att.dimensions.attribute.scope,
    att.ranging.attribute.atLeast,
    att.ranging.attribute.atMost,
    att.ranging.attribute.min,
    att.ranging.attribute.max,
    att.ranging.attribute.confidence,
    
    ## names the unit used for describing the extent of the gap
    [ a:defaultValue = "mm" ]
    attribute unit {
      
      ## written characters
      "chars"
      | 
        ## leaves
        "leaves"
      | 
        ## lines
        "lines"
      | 
        ## millimetres
        "mm"
      | 
        ## pages
        "pages"
      | 
        ## words
        "words"
    }?,
    
    ## (reason) gives the reason for omission of this material from the transcription.
    attribute reason {
      list {
        (
         ## medium is damaged
         "damage"
         | 
           ## material cannot be reliably read
           "illegible"
         | 
           ## material can be read but has been cancelled by scribe
           "cancelled"
         | 
           ## material is not regarded as relevant by the transcriber
           "irrelevant"
         | 
           ## material omitted by transcriber
           "omitted"
         | 
           ## material missing from the source
           "lacuna")+
      }
    },
    
    ## (agent) in the case of text omitted because of damage, categorizes the cause of the damage, if it can be identified.
    ## Sample values include: 1] rubbing (rubbing); 2] mildew (mildew); 3] smoke (smoke)
    attribute agent {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
ellipsis =
  
  ## (deliberately marked omission) indicates a purposeful marking in the source document signalling that content has been omitted, and may also supply or describe the omitted content. [3.5.3. Additions, Deletions, and Omissions]
  element ellipsis {
    (metamark, model.descLike?, supplied?),
    att.global.attributes,
    att.dimensions.attributes,
    att.timed.attributes,
    empty
  }
add =
  
  ## (addition) contains letters, words, or phrases inserted in the source text by an author, scribe, or a previous annotator or corrector. [3.5.3. Additions, Deletions, and Omissions]
  element add {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.placement.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
del =
  
  ## (deletion) contains a letter, word, or passage deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, or a previous annotator or corrector. [3.5.3. Additions, Deletions, and Omissions]
  element del {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
unclear =
  
  ## (unclear) contains a word, phrase, or passage which cannot be transcribed with certainty because it is illegible or inaudible in the source. [11.3.3.1. Damage, Illegibility, and Supplied Text 3.5.3. Additions, Deletions, and Omissions]
  element unclear {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.dimensions.attributes,
    
    ## indicates why the material is hard to transcribe.
    ## Suggested values include: 1] illegible (illegible); 2] inaudible (inaudible); 3] faded (faded); 4] background_noise (background_noise); 5] eccentric_ductus (eccentric_ductus)
    attribute reason {
      list {
        (
         ## (illegible) 
         "illegible"
         | 
           ## (inaudible) 
           "inaudible"
         | 
           ## (faded) 
           "faded"
         | 
           ## (background_noise) 
           "background_noise"
         | 
           ## (eccentric_ductus) indicates illegibility due to an unusual, awkward, or incompetent execution of a glyph or glyphs 
           "eccentric_ductus"
         | xsd:token { pattern = "[^\p{C}\p{Z}]+" })+
      }
    }?,
    
    ## Where the difficulty in transcription arises from damage, categorizes the cause of the damage, if it can be identified.
    ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
    attribute agent {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
name =
  
  ## (name, proper noun) contains a proper noun or noun phrase. [3.6.1. Referring Strings]
  element name {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      
      ##
      "person"
      | 
        ##
        "place"
      | 
        ##
        "org"
      | 
        ##
        "unknown"
    },
    empty
  }
unit =
  
  ## contains a symbol, a word or a phrase referring to a unit of measurement in any kind of formal or informal system. [3.6.3. Numbers and
  ## Measures]
  element unit {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.measurement.attributes,
    empty
  }
date =
  
  ## (date) contains a date in any format. [3.6.4. Dates and Times 2.2.4. Publication, Distribution, Licensing, etc. 2.6. The Revision Description 3.12.2.4. Imprint, Size of a Document, and Reprint Information 15.2.3. The Setting Description 13.4. Dates]
  element date {
    ((text | model.gLike | model.phrase | model.global)*)
    >> sch:pattern [
         id = "tei_enrich-date-dates-constraint-assert-9"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:date"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "@when or (@notAfter and @notBefore) or    (@from and @to)"
             "\x{a}" ~
             "                You must provide either @when or @to/@from, or @notAfter/@notBefore."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.canonical.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.dimensions.attributes,
    att.typed.attributes,
    empty
  }
abbr =
  
  ## (abbreviation) contains an abbreviation of any sort. [3.6.5. Abbreviations and Their Expansions]
  element abbr {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attribute.subtype,
    
    ## (type) allows the encoder to classify the abbreviation according to some convenient typology.
    ## Sample values include: 1] suspension (suspension); 2] contraction (contraction); 3] brevigraph; 4] superscription (superscription); 5] acronym (acronym); 6] title (title); 7] organization (organization); 8] geographic (geographic)
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
expan =
  
  ## (expansion) contains the expansion of an abbreviation. [3.6.5. Abbreviations and Their Expansions]
  element expan {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    empty
  }
ptr =
  
  ## (pointer) defines a pointer to another location. [3.7. Simple Links and Cross-References 16.1. Links]
  element ptr {
    empty
    >> sch:pattern [
         id = "tei_enrich-ptr-ptrAtts-constraint-report-8"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ptr"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "attributes @target and @cRef may be supplied on "
             sch:name [ ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.cReferencing.attributes,
    att.declaring.attributes,
    att.global.attributes,
    att.internetMedia.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    empty
  }
ref =
  
  ## (reference) defines a reference to another location, possibly modified by additional text or comment. [3.7. Simple Links and Cross-References 16.1. Links]
  element ref {
    macro.paraContent
    >> sch:pattern [
         id = "tei_enrich-ref-refAtts-constraint-report-9"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ref"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "	attributes @target' and @cRef' may be supplied on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.cReferencing.attributes,
    att.declaring.attributes,
    att.global.attributes,
    att.internetMedia.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    empty
  }
\list =
  
  ## (list) contains any sequence of items organized as a list. [3.8. Lists]
  element list {
    ((model.divTop | model.global | desc*)*,
     ((item, model.global*)+
      | (label, model.global*, item, model.global*)+),
     (model.divBottom, model.global*)*)
    >> sch:pattern [
         id =
           "tei_enrich-list-gloss-list-must-have-labels-constraint-rule-11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:list[@type='gloss']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "tei:label"
             'The content of a "gloss" list should include a sequence of one or more pairs of a label element followed by an item element'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.sortable.attributes,
    att.typed.attribute.subtype,
    
    ## (type) describes the nature of the items in the list.
    ## Suggested values include: 1] gloss (gloss); 2] index (index); 3] instructions (instructions); 4] litany (litany); 5] syllogism (syllogism)
    attribute type {
      [
        a:documentation [
          "(gloss) each list item glosses some term or concept, which is given by a "
          ns1:code [ "<label>" ]
          " element preceding the list item."
        ]
      ]
      "gloss"
      | 
        ## (index) each list item is an entry in an index such as the alphabetical topical index at the back of a print volume.
        "index"
      | 
        ## (instructions) each list item is a step in a sequence of instructions, as in a recipe.
        "instructions"
      | 
        ## (litany) each list item is one of a sequence of petitions, supplications or invocations, typically in a religious ritual.
        "litany"
      | 
        ## (syllogism) each list item is part of an argument consisting of two or more propositions and a final conclusion derived from them.
        "syllogism"
      | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
item =
  
  ## (item) contains one component of a list. [3.8. Lists 2.6. The Revision Description]
  element item {
    macro.specialPara,
    att.global.attributes,
    att.sortable.attributes,
    empty
  }
label =
  
  ## (label) contains any label or heading used to identify part of a text, typically but not exclusively in a list or glossary. [3.8. Lists]
  element label {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.placement.attributes,
    att.written.attributes,
    empty
  }
head =
  
  ## (heading) contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. [4.2.1. Headings and Trailers]
  element head {
    (text
     | lg
     | model.gLike
     | model.phrase
     | model.inter
     | model.lLike
     | model.global)*,
    att.global.attributes,
    att.typed.attributes,
    att.placement.attributes,
    att.written.attributes,
    empty
  }
note =
  
  ## (note) contains a note or annotation. [3.9.1. Notes and Simple Annotation 2.2.6. The Notes Statement 3.12.2.8. Notes and Statement of Language 9.3.5.4. Notes within Entries]
  element note {
    macro.specialPara,
    att.global.attributes,
    att.placement.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    att.written.attributes,
    att.anchoring.attributes,
    empty
  }
noteGrp =
  
  ## contains a group of notes [3.9.1.1. Encoding Grouped Notes]
  element noteGrp {
    (desc*, (note | noteGrp)+),
    att.global.attributes,
    att.placement.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    att.written.attributes,
    att.anchoring.attributes,
    empty
  }
index =
  
  ## (index entry) marks a location to be indexed for whatever purpose. [3.9.2. Index Entries]
  element index {
    (term, index?)*,
    att.global.attributes,
    att.spanning.attributes,
    
    ## a single word which follows the rules defining a legal XML name (see ), supplying a name to specify which index (of several) the index entry belongs to.
    attribute indexName { xsd:Name }?,
    empty
  }
media =
  
  ## indicates the location of any form of external media such as an audio or video clip etc. [3.10. Graphics and Other Non-textual Components]
  element media {
    model.descLike*,
    att.typed.attributes,
    att.global.attributes,
    att.media.attribute.width,
    att.media.attribute.height,
    att.media.attribute.scale,
    att.resourced.attributes,
    att.declaring.attributes,
    att.timed.attributes,
    
    ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
    attribute mimeType {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    },
    empty
  }
graphic =
  
  ## (graphic) indicates the location of a graphic or illustration, either forming part of a text, or providing an image of it. [3.10. Graphics and Other Non-textual Components 11.1. Digital Facsimiles]
  element graphic {
    model.descLike*,
    att.global.attributes,
    att.media.attributes,
    att.resourced.attributes,
    att.declaring.attributes,
    empty
  }
milestone =
  
  ## (milestone) marks a boundary point separating any kind of section of a text, typically but not necessarily indicating a point at which some part of a standard reference system changes, where the change is not represented by a structural element. [3.11.3. Milestone
  ## Elements]
  element milestone {
    empty,
    att.global.attributes,
    att.milestoneUnit.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
gb =
  
  ## (gathering beginning) marks the beginning of a new gathering or quire in a transcribed codex. [3.11.3. Milestone
  ## Elements]
  element gb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    att.edition.attributes,
    empty
  }
pb =
  
  ## (page beginning) marks the beginning of a new page in a paginated document. [3.11.3. Milestone
  ## Elements]
  element pb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
lb =
  
  ## (line beginning) marks the beginning of a new (typographic) line in some edition or version of a text. [3.11.3. Milestone
  ## Elements 7.2.5. Speech Contents]
  element lb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
cb =
  
  ## (column beginning) marks the beginning of a new column of a text on a multi-column page. [3.11.3. Milestone
  ## Elements]
  element cb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
author =
  
  ## (author) in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement]
  element author {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.datable.attributes,
    empty
  }
editor =
  
  ## contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc. [3.12.2.2. Titles, Authors, and Editors]
  element editor {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.datable.attributes,
    empty
  }
respStmt =
  
  ## (statement of responsibility) supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.2. The Edition Statement 2.2.5. The Series Statement]
  element respStmt {
    (((resp+, model.nameLike.agent+) | (model.nameLike.agent+, resp+)),
     note*),
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
resp =
  
  ## (responsibility) contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.2. The Edition Statement 2.2.5. The Series Statement]
  element resp {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.canonical.attributes,
    att.datable.attributes,
    empty
  }
title =
  
  ## (title) contains a title for any kind of work. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.5. The Series Statement]
  element title {
    macro.paraContent,
    att.global.attributes,
    att.typed.attribute.subtype,
    att.canonical.attributes,
    att.datable.attributes,
    
    ## classifies the title according to some convenient typology.
    ## Sample values include: 1] main; 2] sub (subordinate); 3] alt (alternate); 4] short; 5] desc (descriptive)
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## indicates the bibliographic level for a title, that is, whether it identifies an article, book, journal, series, or unpublished material.
    attribute level {
      
      ## (analytic) the title applies to an analytic item, such as an article, poem, or other work published as part of a larger item.
      "a"
      | 
        ## (monographic) the title applies to a monograph such as a book or other item considered to be a distinct publication, including single volumes of multi-volume works
        "m"
      | 
        ## (journal) the title applies to any serial or periodical publication such as a journal, magazine, or newspaper
        "j"
      | 
        ## (series) the title applies to a series of otherwise distinct publications such as a collection
        "s"
      | 
        ## (unpublished) the title applies to any unpublished material (including theses and dissertations unless published by a commercial press)
        "u"
    }?,
    empty
  }
publisher =
  
  ## (publisher) provides the name of the organization responsible for the publication or distribution of a bibliographic item. [3.12.2.4. Imprint, Size of a Document, and Reprint Information 2.2.4. Publication, Distribution, Licensing, etc.]
  element publisher {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
biblScope =
  
  ## (scope of bibliographic reference) defines the scope of a bibliographic reference, for example as a list of page numbers, or a named subdivision of a larger work. [3.12.2.5. Scopes and Ranges in Bibliographic Citations]
  element biblScope {
    macro.phraseSeq,
    att.global.attributes,
    att.citing.attribute.from,
    att.citing.attribute.to,
    
    ## identifies the unit of information conveyed by the element, e.g. columns, pages, volume, entry.
    attribute unit {
      
      ##
      "volume"
      | 
        ##
        "pages"
    },
    empty
  }
citedRange =
  
  ## (cited range) defines the range of cited content, often represented by pages or other units [3.12.2.5. Scopes and Ranges in Bibliographic Citations]
  element citedRange {
    macro.phraseSeq,
    att.global.attributes,
    att.pointing.attributes,
    att.citing.attributes,
    empty
  }
pubPlace =
  
  ## (publication place) contains the name of the place where a bibliographic item was published. [3.12.2.4. Imprint, Size of a Document, and Reprint Information]
  element pubPlace {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
bibl =
  
  ## (bibliographic citation) contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. [3.12.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]
  element bibl {
    (text
     | model.gLike
     | model.highlighted
     | model.pPart.data
     | model.pPart.edit
     | model.segLike
     | model.ptrLike
     | model.biblPart
     | model.global)*,
    att.global.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    att.docStatus.attributes,
    empty
  }
listBibl =
  
  ## (citation list) contains a list of bibliographic citations of any kind. [3.12.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]
  element listBibl {
    (model.headLike*,
     desc*,
     (model.milestoneLike | relation | listRelation)*,
     (model.biblLike+,
      (model.milestoneLike | relation | listRelation)*)+),
    att.global.attributes,
    att.sortable.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    empty
  }
relatedItem =
  
  ## contains or references some other bibliographic item which is related to the present one in some specified manner, for example as a constituent or alternative version of it. [3.12.2.7. Related Items]
  element relatedItem {
    ((model.biblLike | model.ptrLike)?)
    >> sch:pattern [
         id =
           "tei_enrich-relatedItem-targetorcontent1-constraint-report-10"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relatedItem"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and count( child::* ) > 0"
             "\x{a}" ~
             "If the @target attribute on "
             sch:name [ ]
             " is used, the\x{a}" ~
             "relatedItem element must be empty"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@target or child::*"
             "A relatedItem element should have either a 'target' attribute\x{a}" ~
             "        or a child element to indicate the related bibliographic item"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.typed.attributes,
    
    ## points to the related bibliographic element by means of an absolute or relative URI reference
    attribute target { xsd:anyURI }?,
    empty
  }
l =
  
  ## (verse line) contains a single, possibly incomplete, line of verse. [3.13.1. Core Tags for Verse 3.13. Passages of Verse or Drama 7.2.5. Speech Contents]
  element l {
    ((text | model.gLike | model.phrase | model.inter | model.global)*)
    >> sch:pattern [
         id =
           "tei_enrich-l-abstractModel-structure-l-constraint-report-11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:l"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:l[not(.//tei:note//tei:l[. = current()])]"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain lines or lg elements.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.fragmentable.attributes,
    empty
  }
lg =
  
  ## (line group) contains one or more verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. [3.13.1. Core Tags for Verse 3.13. Passages of Verse or Drama 7.2.5. Speech Contents]
  element lg {
    ((model.divTop | model.global)*,
     (model.lLike | model.stageLike | model.labelLike | lg),
     (model.lLike
      | model.stageLike
      | model.labelLike
      | model.global
      | lg)*,
     (model.divBottom, model.global*)*)
    >> sch:pattern [
         id = "tei_enrich-lg-atleast1oflggapl-constraint-assert-12"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:lg"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count(descendant::tei:lg|descendant::tei:l|descendant::tei:gap) > 0"
             "An lg element\x{a}" ~
             "        must contain at least one child l, lg, or gap element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "tei_enrich-lg-abstractModel-structure-l-constraint-report-12"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:lg"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:l[not(.//tei:note//tei:lg[. = current()])]"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain line groups.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
divGen =
  
  ## (automatically generated text division) indicates the location at which a textual division generated automatically by a text-processing application is to appear. [3.9.2. Index Entries]
  element divGen {
    model.headLike*,
    att.global.attributes,
    att.typed.attribute.subtype,
    
    ## specifies what type of generated text division (e.g. index, table of contents, etc.) is to appear.
    ## Sample values include: 1] index; 2] toc; 3] figlist; 4] tablist
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
textLang =
  
  ## (text language) describes the languages and writing systems identified within the bibliographic work being described, rather than its description. [3.12.2.4. Imprint, Size of a Document, and Reprint Information 10.6.6. Languages and Writing Systems]
  element textLang {
    macro.phraseSeq,
    att.global.attributes,
    
    ## (main language) supplies a code which identifies the chief language used in the bibliographic work.
    attribute mainLang {
      xsd:language
      | (
         ##
         "")
    },
    
    ## (other languages) one or more codes identifying any other languages used in the bibliographic work.
    attribute otherLangs {
      list {
        (xsd:language
         | (
            ##
            ""))*
      }
    }?,
    empty
  }
att.citeStructurePart.attributes = att.citeStructurePart.attribute.use
att.citeStructurePart.attribute.use =
  [
    a:documentation [
      "(use) supplies an XPath selection pattern using the syntax defined in . The XPath pattern is relative to the context given in "
      ns1:code [ "@match" ]
      ", which will either be a sibling attribute in the case of `<citeStructure>` or on the parent `<citeStructure>` in the case of `<citeData>`."
    ]
  ]
  attribute use { text }
att.patternReplacement.attributes =
  att.patternReplacement.attribute.matchPattern,
  att.patternReplacement.attribute.replacementPattern
att.patternReplacement.attribute.matchPattern =
  
  ## specifies a regular expression against which the values of other attributes can be matched.
  attribute matchPattern { xsd:token }
att.patternReplacement.attribute.replacementPattern =
  [
    a:documentation [
      "specifies a replacement pattern, that is, the skeleton of a relative or absolute URI containing references to groups in the "
      ns1:code [ "@matchPattern" ]
      " which, once subpattern substitution has been performed, complete the URI."
    ]
  ]
  attribute replacementPattern { text }
teiHeader =
  
  ## (TEI header) supplies descriptive and declarative metadata associated with a digital resource or set of resources. [2.1.1. The TEI Header and Its Components 15.1. Varieties of Composite Text]
  element teiHeader {
    (fileDesc, model.teiHeaderPart*, revisionDesc?),
    att.global.attributes,
    empty
  }
fileDesc =
  
  ## (file description) contains a full bibliographic description of an electronic file. [2.2. The File Description 2.1.1. The TEI Header and Its Components]
  element fileDesc {
    ((titleStmt,
      editionStmt?,
      extent?,
      publicationStmt,
      seriesStmt*,
      notesStmt?),
     sourceDesc+),
    att.global.attributes,
    empty
  }
titleStmt =
  
  ## (title statement) groups information about the title of a work and those responsible for its content. [2.2.1. The Title Statement 2.2. The File Description]
  element titleStmt {
    (title+, model.respLike*), att.global.attributes, empty
  }
sponsor =
  
  ## (sponsor) specifies the name of a sponsoring organization or institution. [2.2.1. The Title Statement]
  element sponsor {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.canonical.attributes,
    att.datable.attributes,
    empty
  }
funder =
  
  ## (funding body) specifies the name of an individual, institution, or organization responsible for the funding of a project or text. [2.2.1. The Title Statement]
  element funder {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.canonical.attributes,
    att.datable.attributes,
    empty
  }
principal =
  
  ## (principal researcher) supplies the name of the principal researcher responsible for the creation of an electronic text. [2.2.1. The Title Statement]
  element principal {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.canonical.attributes,
    att.datable.attributes,
    empty
  }
editionStmt =
  
  ## (edition statement) groups information relating to one edition of a text. [2.2.2. The Edition Statement 2.2. The File Description]
  element editionStmt {
    (model.pLike+ | (edition, model.respLike*)),
    att.global.attributes,
    empty
  }
edition =
  
  ## (edition) describes the particularities of one edition of a text. [2.2.2. The Edition Statement]
  element edition { macro.phraseSeq, att.global.attributes, empty }
extent =
  
  ## (extent) describes the approximate size of a text stored on some carrier medium or of some other object, digital or non-digital, specified in any convenient units. [2.2.3. Type and Extent of File 2.2. The File Description 3.12.2.4. Imprint, Size of a Document, and Reprint Information 10.7.1. Object Description]
  element extent { macro.phraseSeq, att.global.attributes, empty }
publicationStmt =
  
  ## (publication statement) groups information concerning the publication or distribution of an electronic or other text. [2.2.4. Publication, Distribution, Licensing, etc. 2.2. The File Description]
  element publicationStmt {
    ((model.publicationStmtPart.agency,
      model.publicationStmtPart.detail*)+
     | model.pLike+),
    att.global.attributes,
    empty
  }
distributor =
  
  ## (distributor) supplies the name of a person or other agency responsible for the distribution of a text. [2.2.4. Publication, Distribution, Licensing, etc.]
  element distributor {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
authority =
  
  ## (release authority) supplies the name of a person or other agency responsible for making a work available, other than a publisher or distributor. [2.2.4. Publication, Distribution, Licensing, etc.]
  element authority {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
idno =
  
  ## (identifier) supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. [13.3.1. Basic Principles 2.2.4. Publication, Distribution, Licensing, etc. 2.2.5. The Series Statement 3.12.2.4. Imprint, Size of a Document, and Reprint Information]
  element idno {
    (text | model.gLike | idno)*,
    att.global.attributes,
    att.sortable.attributes,
    att.datable.attributes,
    att.typed.attribute.subtype,
    
    ## categorizes the identifier, for example as an ISBN, Social Security number, etc.
    ## Suggested values include: 1] ISBN; 2] ISSN; 3] DOI; 4] URI; 5] VIAF; 6] ESTC; 7] OCLC
    attribute type {
      [
        a:documentation [
          "International Standard Book Number: a 13- or (if assigned prior to 2007) 10-digit identifying number assigned by the publishing industry to a published book or similar item, registered with the "
          ns1:a [
            href = "https://www.isbn-international.org"
            " International ISBN Agency."
          ]
          "\x{a}" ~
          "                  "
        ]
      ]
      "ISBN"
      | 
        ## International Standard Serial Number: an eight-digit number to uniquely identify a serial publication.
        "ISSN"
      | 
        ## Digital Object Identifier: a unique string of letters and numbers assigned to an electronic document.
        "DOI"
      | 
        ## Uniform Resource Identifier: a string of characters to uniquely identify a resource which usually contains indication of the means of accessing that resource, the name of its host, and its filepath.
        "URI"
      | 
        ## A data number in the Virtual Internet Authority File assigned to link different names in catalogs around the world for the same entity.
        "VIAF"
      | 
        ## English Short-Title Catalogue number: an identifying number assigned to a document in English printed in the British Isles or North America before 1801.
        "ESTC"
      | 
        ## OCLC control number (record number) for the union catalog record in WorldCat, a union catalog for member libraries in the Online Computer Library Center global cooperative.
        "OCLC"
      | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
availability =
  
  ## (availability) supplies information about the availability of a text, for example any restrictions on its use or distribution, its copyright status, any licence applying to it, etc. [2.2.4. Publication, Distribution, Licensing, etc.]
  element availability {
    (model.availabilityPart | model.pLike)+,
    att.global.attributes,
    att.declarable.attributes,
    
    ## (status) supplies a code identifying the current availability of the text.
    attribute status {
      
      ##
      "free"
      | 
        ##
        "unknown"
      | 
        ##
        "restricted"
    },
    empty
  }
licence =
  
  ## contains information about a licence or other legal agreement applicable to the text. [2.2.4. Publication, Distribution, Licensing, etc.]
  element licence {
    macro.specialPara,
    att.global.attributes,
    att.pointing.attributes,
    att.datable.attributes,
    empty
  }
seriesStmt =
  
  ## (series statement) groups information about the series, if any, to which a publication belongs. [2.2.5. The Series Statement 2.2. The File Description]
  element seriesStmt {
    (model.pLike+
     | (title+, (editor | respStmt)*, (idno | biblScope)*)),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
notesStmt =
  
  ## (notes statement) collects together any notes providing information about a text additional to that recorded in other parts of the bibliographic description. [2.2.6. The Notes Statement 2.2. The File Description]
  element notesStmt {
    (model.noteLike | relatedItem)+, att.global.attributes, empty
  }
sourceDesc =
  
  ## (source description) describes the source(s) from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as "born digital" for a text which has no previous existence. [2.2.7. The Source Description]
  element sourceDesc {
    (model.pLike+
     | (model.biblLike | model.sourceDescPart | model.listLike)+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
encodingDesc =
  
  ## (encoding description) documents the relationship between an electronic text and the source or sources from which it was derived. [2.3. The Encoding Description 2.1.1. The TEI Header and Its Components]
  element encodingDesc {
    (model.encodingDescPart | model.pLike)+,
    att.global.attributes,
    empty
  }
schemaRef =
  
  ## (schema reference) describes or points to a related customization or schema file [2.3.10. The Schema Specification]
  element schemaRef {
    model.descLike?,
    att.global.attributes,
    att.typed.attributes,
    att.resourced.attributes,
    
    ## the identifier used for the customization or schema
    attribute key { xsd:NCName }?,
    empty
  }
projectDesc =
  
  ## (project description) describes in detail the aim or purpose for which an electronic file was encoded, together with any other relevant information concerning the process by which it was assembled or collected. [2.3.1. The Project Description 2.3. The Encoding Description 15.3.2. Declarable Elements]
  element projectDesc {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
editorialDecl =
  
  ## (editorial practice declaration) provides details of editorial principles and practices applied during the encoding of a text. [2.3.3. The Editorial Practices Declaration 2.3. The Encoding Description 15.3.2. Declarable Elements]
  element editorialDecl {
    (model.pLike | model.editorialDeclPart)+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
punctuation =
  
  ## specifies editorial practice adopted with respect to punctuation marks in the original. [2.3.3. The Editorial Practices Declaration 3.2. Treatment of Punctuation]
  element punctuation {
    model.pLike*,
    att.declarable.attributes,
    att.global.attributes,
    
    ## indicates whether or not punctation marks have been retained as content within the text.
    attribute marks {
      
      ## no punctuation marks have been retained
      "none"
      | 
        ## some punctuation marks have been retained
        "some"
      | 
        ## all punctuation marks have been retained
        "all"
    }?,
    
    ## indicates the positioning of punctuation marks that are associated with marked up text as being encoded within the element surrounding the text or immediately before or after it.
    attribute placement {
      
      ## punctuation marks found at the start or end of a marked up text component are included within its surrounding element;
      "internal"
      | 
        ## punctuation marks found at the start or end of a marked up text component appear immediately before or after the surrounding element
        "external"
    }?,
    empty
  }
styleDefDecl =
  
  ## (style definition language declaration) specifies the name of the formal language in which style or renditional information is supplied elsewhere in the document. The specific version of the scheme may also be supplied. [2.3.5. The Default Style Definition Language Declaration]
  element styleDefDecl {
    model.pLike*,
    att.global.attributes,
    att.declarable.attributes,
    att.styleDef.attributes,
    empty
  }
citeStructure =
  
  ## (citation structure) declares a structure and method for citing the current document. [3.11.4. Declaring Reference Systems 16.2.5.4. Citation Structures]
  element citeStructure {
    (citeData*, citeStructure*, model.descLike*),
    att.global.attributes,
    att.citeStructurePart.attributes,
    (
     ## (delimiter) supplies a delimiting string preceding the structural component.
     attribute delim {
       xsd:string { pattern = ".+" }
     }?)
    >> sch:pattern [
         id =
           "tei_enrich-citeStructure-delim-citestructure-inner-delim-constraint-rule-12"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:citeStructure[parent::tei:citeStructure]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@delim"
             "A "
             sch:name [ ]
             " with a parent "
             sch:name [ ]
             " must have a @delim attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    [
      a:documentation [
        "(match) supplies an XPath selection pattern using the syntax defined in  which identifies a set of nodes which are citable structural components. The expression may be absolute (beginning with `/`) or relative. "
        ns1:code [ "@match" ]
        " on a "
        ns1:code [ "<citeStructure>" ]
        " without a "
        ns1:code [ "<citeStructure>" ]
        " parent must be an absolute XPath. If it is relative, its context is set by the "
        ns1:code [ "@match" ]
        " of the parent "
        ns1:code [ "<citeStructure>" ]
        "."
      ]
    ]
    attribute match { text }
    >> sch:pattern [
         id =
           "tei_enrich-citeStructure-match-citestructure-outer-match-constraint-rule-13"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:citeStructure[not(parent::tei:citeStructure)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "starts-with(@match,'/')"
             "An XPath in @match on the outer "
             sch:name [ ]
             " must start with '/'."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "tei_enrich-citeStructure-match-citestructure-inner-match-constraint-rule-14"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:citeStructure[parent::tei:citeStructure]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(starts-with(@match,'/'))"
             "An XPath in @match must not start with '/' except on the outer "
             sch:name [ ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    [
      a:documentation [
        "(unit) describes the structural unit indicated by the "
        ns1:code [ "<citeStructure>" ]
        ".\x{a}" ~
        "Sample values include: 1] book; 2] chapter; 3] entry; 4] poem; 5] letter; 6] line; 7] section; 8] verse; 9] volume"
      ]
    ]
    attribute unit {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
citeData =
  
  ## (citation data) specifies how information may be extracted from citation structures. [3.11.4. Declaring Reference Systems 16.2.5.4. Citation Structures]
  element citeData {
    empty,
    att.global.attributes,
    att.citeStructurePart.attributes,
    
    ## (property) A URI indicating a property definition.
    attribute property { xsd:anyURI },
    empty
  }
prefixDef =
  
  ## (prefix definition) defines a prefixing scheme used in teidata.pointer values, showing how abbreviated URIs using the scheme may be expanded into full URIs. [16.2.3. Using Abbreviated Pointers]
  element prefixDef {
    model.pLike*,
    att.global.attributes,
    att.patternReplacement.attributes,
    
    ## supplies a name which functions as the prefix for an abbreviated pointing scheme such as a private URI scheme. The prefix constitutes the text preceding the first colon.
    attribute ident {
      xsd:token { pattern = "[a-z][a-z0-9\+\.\-]*" }
    },
    empty
  }
listPrefixDef =
  
  ## (list of prefix definitions) contains a list of definitions of prefixing schemes used in teidata.pointer values, showing how abbreviated URIs using each scheme may be expanded into full URIs. [16.2.3. Using Abbreviated Pointers]
  element listPrefixDef {
    (desc*, (prefixDef | listPrefixDef)+),
    att.global.attributes,
    empty
  }
classDecl =
  
  ## (classification declarations) contains one or more taxonomies defining any classificatory codes used elsewhere in the text. [2.3.7. The Classification Declaration 2.3. The Encoding Description]
  element classDecl { taxonomy+, att.global.attributes, empty }
taxonomy =
  
  ## (taxonomy) defines a typology either implicitly, by means of a bibliographic citation, or explicitly by a structured taxonomy. [2.3.7. The Classification Declaration]
  element taxonomy {
    (((category | taxonomy)+
      | ((model.descLike | gloss)+, (category | taxonomy)*))
     | (model.biblLike, (category | taxonomy)*)),
    att.global.attributes,
    empty
  }
category =
  
  ## (category) contains an individual descriptive category, possibly nested within a superordinate category, within a user-defined taxonomy. [2.3.7. The Classification Declaration]
  element category {
    ((catDesc+ | (model.descLike | gloss)*),
     category*),
    att.global.attributes,
    empty
  }
catDesc =
  [
    a:documentation [
      "(category description) describes some category within a taxonomy or text typology, either in the form of a brief prose description or in terms of the situational parameters used by the TEI formal "
      ns1:code [ "<textDesc>" ]
      ". [2.3.7. The Classification Declaration]"
    ]
  ]
  element catDesc {
    (text | model.limitedPhrase | model.catDescPart)*,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
geoDecl =
  [
    a:documentation [
      "(geographic coordinates declaration) documents the notation and the datum used for geographic coordinates expressed as content of the "
      ns1:code [ "<geo>" ]
      " element elsewhere within the document. [2.3.8. The Geographic Coordinates Declaration]"
    ]
  ]
  element geoDecl {
    macro.phraseSeq,
    att.global.attributes,
    att.declarable.attributes,
    
    ## supplies a commonly used code name for the datum employed.
    ## Suggested values include: 1] WGS84 (World Geodetic System); 2] MGRS (Military Grid Reference System); 3] OSGB36 (ordnance survey great britain); 4] ED50 (European Datum coordinate system)
    [ a:defaultValue = "WGS84" ]
    attribute datum {
      
      ## (World Geodetic System) a pair of numbers to be interpreted as latitude followed by longitude according to the World Geodetic System.
      "WGS84"
      | 
        ## (Military Grid Reference System) the values supplied are geospatial entity object codes, based on
        "MGRS"
      | 
        ## (ordnance survey great britain) the value supplied is to be interpreted as a British National Grid Reference.
        "OSGB36"
      | 
        ## (European Datum coordinate system) the value supplied is to be interpreted as latitude followed by longitude according to the European Datum coordinate system.
        "ED50"
      | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
unitDecl =
  
  ## (unit declarations) provides information about units of measurement that are not members of the International System of Units. [2.3.9. The Unit Declaration]
  element unitDecl {
    unitDef+,
    att.canonical.attributes,
    att.datable.attributes,
    att.global.attributes,
    empty
  }
unitDef =
  
  ## (unit definition) contains descriptive information related to a specific unit of measurement. [2.3.9. The Unit Declaration]
  element unitDef {
    (model.labelLike | model.placeNamePart? | conversion? | unit?)+,
    att.global.attributes,
    att.datable.attributes,
    att.canonical.attributes,
    att.typed.attributes,
    empty
  }
conversion =
  
  ## defines how to calculate one unit of measure in terms of another. [2.3.9. The Unit Declaration]
  element conversion {
    empty,
    att.global.attributes,
    att.datable.attributes,
    att.formula.attributes,
    att.locatable.attributes,
    [
      a:documentation [
        "indicates a source unit of measure that is to be converted into another unit indicated in "
        ns1:code [ "@toUnit" ]
        "."
      ]
    ]
    attribute fromUnit { xsd:anyURI },
    [
      a:documentation [
        "the target unit of measurement for a conversion from a source unit referenced in "
        ns1:code [ "@fromUnit" ]
        "."
      ]
    ]
    attribute toUnit { xsd:anyURI },
    empty
  }
profileDesc =
  
  ## (text-profile description) provides a detailed description of non-bibliographic aspects of a text, specifically the languages and sublanguages used, the situation in which it was produced, the participants and their setting. [2.4. The Profile Description 2.1.1. The TEI Header and Its Components]
  element profileDesc {
    model.profileDescPart*, att.global.attributes, empty
  }
handNote =
  
  ## (note on hand) describes a particular style or hand distinguished within a manuscript. [10.7.2. Writing, Decoration, and Other Notations]
  element handNote {
    macro.specialPara,
    att.global.attributes,
    att.handFeatures.attribute.scribe,
    att.handFeatures.attribute.scribeRef,
    att.handFeatures.attribute.scriptRef,
    att.handFeatures.attribute.medium,
    
    ## characterizes the particular script or writing style used by this hand, for example secretary, copperplate, Chancery, Italian, etc.
    attribute script {
      list {
        (
         ##
         "carolmin"
         | 
           ##
           "textualis"
         | 
           ##
           "cursiva"
         | 
           ##
           "hybrida"
         | 
           ##
           "humbook"
         | 
           ##
           "humcursiva"
         | 
           ## script other than one of these
           "other"
         | 
           ## script information not available
           "unknown")+
      }
    },
    
    ## specifies how widely this hand is used in the manuscript.
    attribute scope {
      
      ##
      "sole"
      | 
        ##
        "major"
      | 
        ##
        "minor"
    },
    empty
  }
abstract =
  
  ## contains a summary or formal abstract prefixed to an existing source document by the encoder. [2.4.4. Abstracts]
  element abstract {
    (model.pLike | model.listLike)+, att.global.attributes, empty
  }
creation =
  
  ## (creation) contains information about the creation of a text. [2.4.1. Creation 2.4. The Profile Description]
  element creation {
    (text | model.limitedPhrase | listChange)*,
    att.global.attributes,
    att.datable.attributes,
    empty
  }
langUsage =
  
  ## (language usage) describes the languages, sublanguages, registers, dialects, etc. represented within a text. [2.4.2. Language Usage 2.4. The Profile Description 15.3.2. Declarable Elements]
  element langUsage {
    (model.pLike+ | language+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
language =
  
  ## (language) characterizes a single language or sublanguage used within a text. [2.4.2. Language Usage]
  element language {
    macro.phraseSeq.limited,
    att.global.attributes,
    [
      a:documentation [
        "(identifier) Supplies a language code constructed as defined in "
        ns1:a [ href = "https://tools.ietf.org/html/bcp47" "BCP 47" ]
        " which is used to identify the language documented by this element, and which is referenced by the global "
        ns1:code [ "@xml:lang" ]
        " attribute."
      ]
    ]
    attribute ident {
      xsd:language
      | (
         ##
         "")
    },
    
    ## specifies the approximate percentage (by volume) of the text which uses this language.
    attribute usage { xsd:nonNegativeInteger }?,
    empty
  }
textClass =
  
  ## (text classification) groups information which describes the nature or topic of a text in terms of a standard classification scheme, thesaurus, etc. [2.4.3. The Text Classification]
  element textClass {
    (classCode | catRef | keywords)*,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
keywords =
  
  ## (keywords) contains a list of keywords or phrases identifying the topic or nature of a text. [2.4.3. The Text Classification]
  element keywords {
    (term+ | \list),
    att.global.attributes,
    [
      a:documentation [
        "identifies the controlled vocabulary within which the set of keywords concerned is defined, for example by a "
        ns1:code [ "<taxonomy>" ]
        " element, or by some other resource."
      ]
    ]
    attribute scheme { xsd:anyURI }?,
    empty
  }
classCode =
  
  ## (classification code) contains the classification code used for this text in some standard classification system. [2.4.3. The Text Classification]
  element classCode {
    macro.phraseSeq.limited,
    att.global.attributes,
    [
      a:documentation [
        "identifies the classification system in use, as defined by, e.g. a "
        ns1:code [ "<taxonomy>" ]
        " element, or some other resource."
      ]
    ]
    attribute scheme { xsd:anyURI },
    empty
  }
catRef =
  
  ## (category reference) specifies one or more defined categories within some taxonomy or text typology. [2.4.3. The Text Classification]
  element catRef {
    empty,
    att.global.attributes,
    att.pointing.attributes,
    [
      a:documentation [
        "identifies the classification scheme within which the set of categories concerned is defined, for example by a "
        ns1:code [ "<taxonomy>" ]
        " element, or by some other resource."
      ]
    ]
    attribute scheme { xsd:anyURI }?,
    empty
  }
calendarDesc =
  
  ## (calendar description) contains a description of the calendar system used in any dating expression found in the text. [2.4. The Profile Description 2.4.5. Calendar Description]
  element calendarDesc { calendar+, att.global.attributes, empty }
calendar =
  
  ## (calendar) describes a calendar or dating system used in a dating formula in the text. [2.4.5. Calendar Description]
  element calendar {
    model.pLike+, att.global.attributes, att.pointing.attributes, empty
  }
correspDesc =
  
  ## (correspondence
  ##     description) contains a description of the actions related to one act of correspondence. [2.4.6. Correspondence Description]
  element correspDesc {
    (model.correspDescPart+ | model.pLike+),
    att.declarable.attributes,
    att.canonical.attributes,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
correspAction =
  
  ## (correspondence action) contains a structured description of the place, the name of a person/organization and the date related to the sending/receiving of a message or any other action related to the correspondence. [2.4.6. Correspondence Description]
  element correspAction {
    (model.correspActionPart+ | model.pLike+),
    att.global.attributes,
    att.typed.attribute.subtype,
    att.sortable.attributes,
    
    ## describes the nature of the action.
    ## Suggested values include: 1] sent; 2] received; 3] transmitted; 4] redirected; 5] forwarded
    attribute type {
      
      ## information concerning the sending or dispatch of a message.
      "sent"
      | 
        ## information concerning the receipt of a message.
        "received"
      | 
        ## information concerning the transmission of a message, i.e. between the dispatch and the next receipt, redirect or forwarding.
        "transmitted"
      | 
        ## information concerning the redirection of an unread message.
        "redirected"
      | 
        ## information concerning the forwarding of a message.
        "forwarded"
      | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
correspContext =
  
  ## (correspondence context) provides references to preceding or following correspondence related to this piece of correspondence. [2.4.6. Correspondence Description]
  element correspContext {
    model.correspContextPart+, att.global.attributes, empty
  }
xenoData =
  
  ## (non-TEI metadata) provides a container element into which metadata in non-TEI formats may be placed. [2.5. Non-TEI Metadata]
  element xenoData {
    (text | anyElement-xenoData),
    att.global.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    empty
  }
revisionDesc =
  
  ## (revision description) summarizes the revision history for a file. [2.6. The Revision Description 2.1.1. The TEI Header and Its Components]
  element revisionDesc {
    (\list | listChange | change+),
    att.global.attributes,
    att.docStatus.attributes,
    empty
  }
change =
  
  ## (change) documents a change or set of changes made during the production of a source document, or during the revision of an electronic file. [2.6. The Revision Description 2.4.1. Creation 11.7. Identifying Changes and Revisions]
  element change {
    macro.specialPara,
    att.ascribed.attributes,
    att.datable.attributes,
    att.docStatus.attributes,
    att.global.attributes,
    att.typed.attributes,
    
    ## (target) points to one or more elements that belong to this change.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
scriptNote =
  
  ## describes a particular script distinguished within the description of a manuscript or similar resource. [10.7.2. Writing, Decoration, and Other Notations]
  element scriptNote {
    macro.specialPara,
    att.global.attributes,
    att.handFeatures.attributes,
    empty
  }
listChange =
  
  ## groups a number of change descriptions associated with either the creation of a source text or the revision of an encoded text. [2.6. The Revision Description 11.7. Identifying Changes and Revisions]
  element listChange {
    (desc*, (listChange | change)+),
    att.global.attributes,
    att.sortable.attributes,
    att.typed.attributes,
    [
      a:defaultValue = "true"
      a:documentation [
        "indicates whether the ordering of its child "
        ns1:code [ "<change>" ]
        " elements is to be considered significant or not"
      ]
    ]
    attribute ordered { xsd:boolean }?,
    empty
  }
TEI =
  [
    a:documentation [
      "(TEI document) contains a single TEI-conformant document, combining a single TEI header with one or more members of the model.resource class. Multiple "
      ns1:code [ "<TEI>" ]
      " elements may be combined within a "
      ns1:code [ "<TEI>" ]
      " (or "
      ns1:code [ "<teiCorpus>" ]
      ") element. [4. Default Text Structure 15.1. Varieties of Composite Text]"
    ]
  ]
  element TEI {
    (teiHeader,
     ((model.resource+, TEI*) | TEI+))
    >> sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
    >> sch:ns [ prefix = "xs" uri = "http://www.w3.org/2001/XMLSchema" ]
    >> sch:ns [
         prefix = "rng"
         uri = "http://relaxng.org/ns/structure/1.0"
       ],
    att.global.attributes,
    att.typed.attributes,
    
    ## specifies the version number of the TEI Guidelines against which this document is valid.
    attribute version {
      xsd:token { pattern = "[\d]+(\.[\d]+){0,2}" }
    }?,
    empty
  }
\text =
  
  ## (text) contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. [4. Default Text Structure 15.1. Varieties of Composite Text]
  element text {
    (model.global*,
     (front, model.global*)?,
     (body | group),
     model.global*,
     (back, model.global*)?),
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    att.written.attributes,
    empty
  }
body =
  
  ## (text body) contains the whole body of a single unitary text, excluding any front or back matter. [4. Default Text Structure]
  element body {
    (model.global*,
     (model.divTop, (model.global | model.divTop)*)?,
     (model.divGenLike, (model.global | model.divGenLike)*)?,
     ((model.divLike, (model.global | model.divGenLike)*)+
      | (model.div1Like, (model.global | model.divGenLike)*)+
      | ((model.common, model.global*)+,
         ((model.divLike, (model.global | model.divGenLike)*)+
          | (model.div1Like, (model.global | model.divGenLike)*)+)?)),
     (model.divBottom, model.global*)*),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
group =
  
  ## (group) contains the body of a composite text, grouping together a sequence of distinct texts (or groups of such texts) which are regarded as a unit for some purpose, for example the collected works of an author, a sequence of prose essays, etc. [4. Default Text Structure 4.3.1. Grouped Texts 15.1. Varieties of Composite Text]
  element group {
    ((model.divTop | model.global)*,
     ((\text | group), (\text | group | model.global)*),
     model.divBottom*),
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
\div =
  
  ## (text division) contains a subdivision of the front, body, or back of a text. [4.1. Divisions of the Body]
  element div {
    ((model.divTop | model.global)*,
     ((((model.divLike | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.divLike | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?)
    >> sch:pattern [
         id =
           "tei_enrich-div-abstractModel-structure-l-constraint-report-13"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:div"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "(ancestor::tei:l or ancestor::tei:lg) and not(ancestor::tei:floatingText)"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level structural elements such as div, unless div is a descendant of floatingText.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "tei_enrich-div-abstractModel-structure-p-constraint-report-14"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:div"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "(ancestor::tei:p or ancestor::tei:ab) and not(ancestor::tei:floatingText)"
             "\x{a}" ~
             "        Abstract model violation: p and ab may not contain higher-level structural elements such as div, unless div is a descendant of floatingText.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    att.written.attributes,
    empty
  }
titlePage =
  
  ## (title page) contains the title page of a text, appearing within the front or back matter. [4.6. Title Pages]
  element titlePage {
    (model.global*,
     model.titlepagePart,
     (model.titlepagePart | model.global)*),
    att.global.attributes,
    att.typed.attribute.subtype,
    
    ## classifies the title page according to any convenient typology.
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
docTitle =
  
  ## (document title) contains the title of a document, including all its constituents, as given on a title page. [4.6. Title Pages]
  element docTitle {
    (model.global*, (titlePart, model.global*)+),
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
titlePart =
  
  ## (title part) contains a subsection or division of the title of a work, as indicated on a title page. [4.6. Title Pages]
  element titlePart {
    macro.paraContent,
    att.global.attributes,
    att.typed.attribute.subtype,
    
    ## (type) specifies the role of this subdivision of the title.
    ## Suggested values include: 1] main (main); 2] sub (subordinate); 3] alt (alternate); 4] short (short); 5] desc (descriptive)
    [ a:defaultValue = "main" ]
    attribute type {
      
      ## (main) main title of the work
      "main"
      | 
        ## (subordinate) subtitle of the work
        "sub"
      | 
        ## (alternate) alternative title of the work
        "alt"
      | 
        ## (short) abbreviated form of title
        "short"
      | 
        ## (descriptive) descriptive paraphrase of the work
        "desc"
      | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
docAuthor =
  
  ## (document author) contains the name of the author of the document, as given on the title page (often but not always contained in a byline). [4.6. Title Pages]
  element docAuthor {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
docEdition =
  
  ## (document edition) contains an edition statement as presented on a title page of a document. [4.6. Title Pages]
  element docEdition { macro.paraContent, att.global.attributes, empty }
docImprint =
  
  ## (document imprint) contains the imprint statement (place and date of publication, publisher name), as given (usually) at the foot of a title page. [4.6. Title Pages]
  element docImprint {
    (text
     | model.gLike
     | model.phrase
     | pubPlace
     | publisher
     | model.global)*,
    att.global.attributes,
    empty
  }
front =
  
  ## (front matter) contains any prefatory matter (headers, abstracts, title page, prefaces, dedications, etc.) found at the start of a document, before the main body. [4.6. Title Pages 4. Default Text Structure]
  element front {
    ((model.frontPart
      | model.pLike
      | model.pLike.front
      | model.global)*,
     (((model.div1Like,
        (model.div1Like | model.frontPart | model.global)*)
       | (model.divLike,
          (model.divLike | model.frontPart | model.global)*)),
      (model.divBottom, (model.divBottom | model.global)*)?)?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
back =
  
  ## (back matter) contains any appendixes, etc. following the main part of a text. [4.7. Back Matter 4. Default Text Structure]
  element back {
    ((model.frontPart
      | model.pLike.front
      | model.pLike
      | model.listLike
      | model.global)*,
     ((model.div1Like,
       (model.frontPart | model.div1Like | model.global)*)
      | (model.divLike,
         (model.frontPart | model.divLike | model.global)*))?,
     (model.divBottomPart, (model.divBottomPart | model.global)*)?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
att.msExcerpt.attributes = att.msExcerpt.attribute.defective
att.msExcerpt.attribute.defective =
  
  ## indicates whether the passage being quoted is defective, i.e. incomplete through loss or damage.
  attribute defective {
    xsd:boolean
    | (
       ##
       "unknown"
       | 
         ##
         "inapplicable")
  }?
att.msClass.attributes = att.msClass.attribute.class
att.msClass.attribute.class =
  
  ## identifies the text types or classifications applicable to this item by pointing to other elements or resources defining the classification concerned. 
  attribute class {
    list { xsd:anyURI+ }
  }?
msDesc =
  
  ## (manuscript description) contains a description of a single identifiable manuscript or other text-bearing object such as early printed books. [10.1. Overview]
  element msDesc {
    (msIdentifier,
     model.headLike*,
     (model.pLike+
      | (msContents?,
         physDesc?,
         history?,
         additional?,
         (msPart* | msFrag*)))),
    att.global.attribute.n,
    att.global.attribute.xmlbase,
    att.global.attribute.xmlspace,
    att.global.rendition.attribute.rend,
    att.global.rendition.attribute.style,
    att.global.facs.attribute.facs,
    att.global.change.attribute.change,
    att.global.responsibility.attribute.cert,
    att.global.responsibility.attribute.resp,
    att.global.source.attribute.source,
    att.sortable.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    att.docStatus.attributes,
    
    ## (identifier) provides a unique identifier for the element bearing the attribute.
    attribute xml:id { xsd:ID },
    [
      a:documentation [
        "(language) indicates the language of the element content using a tag generated according to "
        ns1:a [
          href = "http://www.rfc-editor.org/rfc/bcp/bcp47.txt"
          "BCP 47"
        ]
        "."
      ]
    ]
    attribute xml:lang {
      xsd:language
      | (
         ##
         "")
    },
    empty
  }
catchwords =
  
  ## (catchwords) describes the system used to ensure correct ordering of the quires or similar making up a codex, incunable, or other object typically by means of annotations at the foot of the page. [10.3.7. Catchwords, Signatures, Secundo Folio]
  element catchwords {
    macro.phraseSeq
    >> sch:pattern [
         id =
           "tei_enrich-catchwords-catchword_in_msDesc-constraint-assert-16"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:catchwords"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "ancestor::tei:msDesc or ancestor::tei:egXML"
             "The "
             sch:name [ ]
             " element should not be used outside of msDesc."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    empty
  }
dimensions =
  
  ## (dimensions) contains a dimensional specification. [10.3.4. Dimensions]
  element dimensions {
    ((dim | model.dimLike)*)
    >> sch:pattern [
         id = "tei_enrich-dimensions-duplicateDim-constraint-report-15"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:width)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:height)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:depth)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.dimensions.attributes,
    att.typed.attribute.subtype,
    
    ## indicates which aspect of the object is being measured.
    attribute type {
      
      ##
      "leaf"
      | 
        ##
        "binding"
      | 
        ##
        "slip"
      | 
        ##
        "written"
      | 
        ##
        "boxed"
      | 
        ##
        "unknown"
    },
    empty
  }
dim =
  
  ## contains any single measurement forming part of a dimensional specification of some sort. [10.3.4. Dimensions]
  element dim {
    macro.xtext,
    att.global.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
height =
  
  ## (height) contains a measurement measured along the axis at a right angle to the bottom of the object. [10.3.4. Dimensions]
  element height {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
depth =
  [
    a:documentation [
      "(depth) contains a measurement from the front to the back of an object, perpendicular to the measurement given by the "
      ns1:code [ "<width>" ]
      " element. [10.3.4. Dimensions]"
    ]
  ]
  element depth {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
width =
  
  ## (width) contains a measurement of an object along the axis parallel to its bottom, e.g. perpendicular to the spine of a book or codex. [10.3.4. Dimensions]
  element width {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
heraldry =
  
  ## (heraldry) contains a heraldic formula or phrase, typically found as part of a blazon, coat of arms, etc.  [10.3.8. Heraldry]
  element heraldry { macro.phraseSeq, att.global.attributes, empty }
locus =
  
  ## (locus) defines a location within a manuscript, manuscript part, or other object typically as a (possibly discontinuous) sequence of folio references. [10.3.5. References to Locations within a Manuscript]
  element locus {
    (text | model.gLike | hi | locus)*,
    att.global.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    [
      a:documentation [
        "(scheme) identifies the foliation scheme in terms of which the location is being specified by pointing to some "
        ns1:code [ "<foliation>" ]
        " element defining it, or to some other equivalent resource."
      ]
    ]
    attribute scheme { xsd:anyURI }?,
    
    ## (from) specifies the starting point of the location in a normalized form, typically a page number.
    attribute from {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## (to) specifies the end-point of the location in a normalized form, typically as a page number.
    attribute to {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
locusGrp =
  
  ## (locus group) groups a number of locations which together form a distinct but discontinuous item within a manuscript, manuscript part, or other object. [10.3.5. References to Locations within a Manuscript]
  element locusGrp {
    locus+,
    att.global.attributes,
    [
      a:documentation [
        "(scheme) identifies the foliation scheme in terms of which all the locations contained by the group are specified by pointing to some "
        ns1:code [ "<foliation>" ]
        " element defining it, or to some other equivalent resource."
      ]
    ]
    attribute scheme { xsd:anyURI }?,
    empty
  }
material =
  
  ## (material) contains a word or phrase describing the material of which the object being described is composed. [10.3.2. Material and Object Type]
  element material {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    att.typed.attributes,
    
    ## describes the function or use of the material in relation to the object as a whole.
    ## Sample values include: 1] binding; 2] endband; 3] slipcase; 4] support; 5] tie
    attribute function {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## identifies one or more elements to which the metamark applies.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
objectType =
  
  ## (object type) contains a word or phrase describing the type of object being referred to. [10.3.2. Material and Object Type]
  element objectType {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
origDate =
  
  ## (origin date) contains any form of date, used to identify the date of origin for a manuscript, manuscript part, or other object. [10.3.1. Origination]
  element origDate {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.datable.attributes,
    att.dimensions.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
origPlace =
  
  ## (origin place) contains any form of place name, used to identify the place of origin for a manuscript, manuscript part, or other object. [10.3.1. Origination]
  element origPlace {
    macro.phraseSeq,
    att.typed.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.naming.attributes,
    empty
  }
secFol =
  
  ## (second folio) marks the word or words taken from a fixed point in a codex (typically the beginning of the second leaf) in order to provide a unique identifier for it.  [10.3.7. Catchwords, Signatures, Secundo Folio]
  element secFol {
    macro.phraseSeq
    >> sch:pattern [
         id = "tei_enrich-secFol-secFol_in_msDesc-constraint-assert-17"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:secFol"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "ancestor::tei:msDesc or ancestor::tei:egXML"
             "The "
             sch:name [ ]
             " element should not be used outside of msDesc."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    empty
  }
signatures =
  
  ## (signatures) contains discussion of the leaf or quire signatures found within a codex or similar object. [10.3.7. Catchwords, Signatures, Secundo Folio]
  element signatures {
    macro.specialPara
    >> sch:pattern [
         id =
           "tei_enrich-signatures-signatures_in_msDesc-constraint-assert-18"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:signatures"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "ancestor::tei:msDesc or ancestor::tei:egXML"
             "The "
             sch:name [ ]
             " element should not be used outside of msDesc."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    empty
  }
stamp =
  
  ## (stamp) contains a word or phrase describing a stamp or similar device. [10.3.3. Watermarks and Stamps]
  element stamp {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
watermark =
  
  ## (watermark) contains a word or phrase describing a watermark or similar device. [10.3.3. Watermarks and Stamps]
  element watermark { macro.phraseSeq, att.global.attributes, empty }
msIdentifier =
  
  ## (manuscript identifier) contains the information required to identify the manuscript or similar object being described. [10.4. The Manuscript Identifier]
  element msIdentifier {
    ((placeName?,
      bloc?,
      country?,
      region?,
      settlement?,
      district?,
      geogName?,
      institution?,
      repository?,
      collection*,
      idno*),
     (msName | objectName | altIdentifier)*)
    >> sch:pattern [
         id =
           "tei_enrich-msIdentifier-msId_minimal-constraint-report-18"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:msIdentifier"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "not(parent::tei:msPart) and (local-name(*[1])='idno' or local-name(*[1])='altIdentifier' or normalize-space(.)='')"
             "An msIdentifier must contain either a repository or location."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    empty
  }
institution =
  
  ## (institution) contains the name of an organization such as a university or library, with which a manuscript or other object is identified, generally its holding institution. [10.4. The Manuscript Identifier]
  element institution {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.naming.attributes,
    empty
  }
repository =
  
  ## (repository) contains the name of a repository within which manuscripts or other objects are stored, possibly forming part of an institution. [10.4. The Manuscript Identifier]
  element repository {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.naming.attributes,
    empty
  }
collection =
  
  ## (collection) contains the name of a collection of manuscripts or other objects, not necessarily located within a single repository. [10.4. The Manuscript Identifier]
  element collection {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
altIdentifier =
  
  ## (alternative identifier) contains an alternative or former structured identifier used for a manuscript or other object, such as a former catalogue number. [10.4. The Manuscript Identifier]
  element altIdentifier {
    (placeName?,
     bloc?,
     country?,
     region?,
     settlement?,
     district?,
     geogName?,
     institution?,
     repository?,
     collection?,
     idno,
     note?),
    att.global.attributes,
    att.typed.attribute.subtype,
    att.datable.attributes,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      
      ## former catalogue or shelf number
      "former"
      | 
        ## former system identifier (Manuscriptorium specific)
        "system"
      | 
        ## identifier of a previously distinct item
        "partial"
      | 
        ## internal project identifier
        "internal"
      | 
        ## unspecified
        "other"
    },
    empty
  }
msName =
  
  ## (alternative name) contains any form of unstructured alternative name used for a manuscript or other object, such as an ocellus nominum, or nickname. [10.4. The Manuscript Identifier]
  element msName {
    (text | model.gLike | name)*,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
colophon =
  
  ## (colophon) contains the colophon of an item: that is, a statement providing information regarding the date, place, agency, or reason for production of the manuscript or other object. [10.6.1. The msItem and msItemStruct Elements]
  element colophon {
    macro.phraseSeq,
    att.global.attributes,
    att.msExcerpt.attributes,
    empty
  }
explicit =
  
  ## (explicit) contains the explicit of a item, that is, the closing words of the text proper, exclusive of any rubric or colophon which might follow it. [10.6.1. The msItem and msItemStruct Elements]
  element explicit {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    empty
  }
filiation =
  
  ## (filiation) contains information concerning the manuscript or other object's filiation, i.e. its relationship to other surviving manuscripts or other objects of the same text or contents, its protographs, antigraphs and apographs. [10.6.1. The msItem and msItemStruct Elements]
  element filiation {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
finalRubric =
  
  ## (final rubric) contains the string of words that denotes the end of a text division, often with an assertion as to its author and title, usually set off from the text itself by red ink, by a different size or type of script, or by some other such visual device. [10.6.1. The msItem and msItemStruct Elements]
  element finalRubric {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    empty
  }
incipit =
  
  ## contains the incipit of a manuscript or similar object item, that is the opening words of the text proper, exclusive of any rubric which might precede it, of sufficient length to identify the work uniquely; such incipits were, in former times, frequently used a means of reference to a work, in place of a title. [10.6.1. The msItem and msItemStruct Elements]
  element incipit {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    empty
  }
msContents =
  
  ## (manuscript contents) describes the intellectual content of a manuscript, manuscript part, or other object either as a series of paragraphs or as a series of structured manuscript items. [10.6. Intellectual Content]
  element msContents {
    (model.pLike+ | (summary?, textLang?, titlePage?, msItem*)),
    att.global.attributes,
    att.msExcerpt.attributes,
    att.msClass.attributes,
    empty
  }
msItem =
  
  ## (manuscript item) describes an individual work or item within the intellectual content of a manuscript, manuscript part, or other object. [10.6.1. The msItem and msItemStruct Elements]
  element msItem {
    ((locus | locusGrp)*,
     (model.pLike+
      | (model.titlepagePart | model.msItemPart | model.global)+)),
    att.global.attributes,
    att.msExcerpt.attributes,
    att.msClass.attributes,
    empty
  }
rubric =
  
  ## (rubric) contains the text of any rubric or heading attached to a particular manuscript item, that is, a string of words through which a manuscript or other object signals the beginning of a text division, often with an assertion as to its author and title, which is in some way set off from the text itself, typically in red ink, or by use of different size or type of script, or some other such visual device. [10.6.1. The msItem and msItemStruct Elements]
  element rubric {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    empty
  }
summary =
  
  ## contains an overview of the available information concerning some aspect of an item or object (for example, its intellectual content, history, layout, typography etc.) as a complement or alternative to the more detailed information carried by more specific elements. [10.6. Intellectual Content]
  element summary { macro.specialPara, att.global.attributes, empty }
physDesc =
  
  ## (physical description) contains a full physical description of a manuscript, manuscript part, or other object optionally subdivided using more specialized elements from the model.physDescPart class. [10.7. Physical Description]
  element physDesc {
    (model.pLike*,
     objectDesc?,
     handDesc?,
     typeDesc?,
     scriptDesc?,
     musicNotation?,
     decoDesc?,
     additions?,
     bindingDesc?,
     sealDesc?,
     accMat?),
    att.global.attributes,
    empty
  }
objectDesc =
  
  ## (object description) contains a description of the physical components making up the object which is being described. [10.7.1. Object Description]
  element objectDesc {
    (model.pLike+ | (supportDesc?, layoutDesc?)),
    att.global.attributes,
    
    ## (form) a short project-specific name identifying the physical form of the carrier, for example as a codex, roll, fragment, partial leaf, cutting etc.
    attribute form {
      
      ## a bound codex
      "codex"
      | 
        ## a loose leaf
        "leaf"
      | 
        ## a scroll
        "scroll"
      | 
        ## any other format
        "other"
    },
    empty
  }
supportDesc =
  
  ## (support description) groups elements describing the physical support for the written part of a manuscript or other object. [10.7.1. Object Description]
  element supportDesc {
    (model.pLike+
     | (support?, extent?, foliation*, collation?, condition?)),
    att.global.attributes,
    
    ## (material) a short project-defined name for the material composing the majority of the support
    attribute material {
      
      ## parchment
      "perg"
      | 
        ## paper
        "chart"
      | 
        ## mixture of paper and parchment, or other materials
        "mixed"
      | 
        ##
        "unknown"
    },
    empty
  }
support =
  
  ## (support) contains a description of the materials etc. which make up the physical support for the written part of a manuscript or other object. [10.7.1. Object Description]
  element support { macro.specialPara, att.global.attributes, empty }
collation =
  
  ## (collation) contains a description of how the leaves, bifolia, or similar objects are physically arranged. [10.7.1. Object Description]
  element collation { macro.specialPara, att.global.attributes, empty }
foliation =
  
  ## (foliation) describes the numbering system or systems used to count the leaves or pages in a codex or similar object. [10.7.1.4. Foliation]
  element foliation { macro.specialPara, att.global.attributes, empty }
condition =
  
  ## (condition) contains a description of the physical condition of the manuscript or object. [10.7.1.5. Condition]
  element condition { macro.specialPara, att.global.attributes, empty }
layoutDesc =
  
  ## (layout description) collects the set of layout descriptions applicable to a manuscript or other object. [10.7.2. Writing, Decoration, and Other Notations]
  element layoutDesc {
    (model.pLike+ | (summary?, layout+)),
    att.global.attributes,
    empty
  }
layout =
  
  ## (layout) describes how text is laid out on the page or surface of the object, including information about any ruling, pricking, or other evidence of page-preparation techniques. [10.7.2. Writing, Decoration, and Other Notations]
  element layout {
    macro.specialPara,
    att.global.attributes,
    
    ## (columns) specifies the number of columns per page
    attribute columns {
      list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
    },
    
    ## (textual streams) indicates the number of streams per page, each of which contains an independent textual stream
    attribute streams {
      list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
    }?,
    
    ## (ruled lines) specifies the number of ruled lines per column
    attribute ruledLines {
      list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
    }?,
    
    ## (written lines) specifies the number of written lines per column
    attribute writtenLines {
      list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
    }?,
    empty
  }
handDesc =
  
  ## (description of hands) contains a description of all the different hands used in a manuscript or other object. [10.7.2. Writing, Decoration, and Other Notations]
  element handDesc {
    (model.pLike+ | (summary?, handNote+)),
    att.global.attributes,
    
    ## (hands) specifies the number of distinct hands identified within the manuscript
    attribute hands { xsd:nonNegativeInteger }?,
    empty
  }
typeDesc =
  
  ## (typeface description) contains a description of the typefaces or other aspects of the printing of an incunable or other printed source. [10.7.2.1. Writing]
  element typeDesc {
    (model.pLike+ | (summary?, typeNote+)),
    att.global.attributes,
    empty
  }
typeNote =
  
  ## (typographic note) describes a particular font or other significant typographic feature distinguished within the description of a printed resource. [10.7.2. Writing, Decoration, and Other Notations]
  element typeNote {
    macro.specialPara,
    att.global.attributes,
    att.handFeatures.attributes,
    empty
  }
scriptDesc =
  
  ## contains a description of the scripts used in a manuscript or other object. [10.7.2.1. Writing]
  element scriptDesc {
    (model.pLike+ | (summary?, scriptNote+)),
    att.global.attributes,
    empty
  }
musicNotation =
  
  ## (music notation) contains description of type of musical notation. [10.7.2. Writing, Decoration, and Other Notations]
  element musicNotation {
    macro.specialPara, att.global.attributes, empty
  }
decoDesc =
  [
    a:documentation [
      "(decoration description) contains a description of the decoration of a manuscript or other object, either as in paragraphs, or as one or more "
      ns1:code [ "<decoNote>" ]
      " elements. [10.7.3. Bindings, Seals, and Additional Material]"
    ]
  ]
  element decoDesc {
    (model.pLike+ | (summary?, decoNote+)),
    att.global.attributes,
    empty
  }
decoNote =
  
  ## (note on decoration) contains a note describing either a decorative component of a manuscript or other object, or a fairly homogenous class of such components. [10.7.3. Bindings, Seals, and Additional Material]
  element decoNote {
    macro.specialPara,
    att.global.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    [ a:defaultValue = "other" ]
    attribute type {
      
      ##
      "border"
      | 
        ##
        "diagram"
      | 
        ##
        "initial"
      | 
        ##
        "marginal"
      | 
        ##
        "miniature"
      | 
        ##
        "mixed"
      | 
        ##
        "paratext"
      | 
        ##
        "secondary"
      | 
        ##
        "other"
      | 
        ##
        "illustration"
      | 
        ##
        "printmark"
      | 
        ##
        "publishmark"
      | 
        ##
        "vignette"
      | 
        ##
        "frieze"
      | 
        ##
        "map"
      | 
        ##
        "unspecified"
    }?,
    empty
  }
additions =
  
  ## (additions) contains a description of any significant additions found within a manuscript or other object, such as marginalia or other annotations. [10.7.2. Writing, Decoration, and Other Notations]
  element additions { macro.specialPara, att.global.attributes, empty }
bindingDesc =
  [
    a:documentation [
      "(binding description) describes the present and former bindings of a manuscript or other object, either as a series of paragraphs or as a series of distinct "
      ns1:code [ "<binding>" ]
      " elements, one for each binding of the manuscript. [10.7.3.1. Binding Descriptions]"
    ]
  ]
  element bindingDesc {
    ((model.pLike | decoNote | condition)+ | binding+),
    att.global.attributes,
    empty
  }
binding =
  
  ## (binding) contains a description of one binding, i.e. type of covering, boards, etc. applied to a manuscript or other object. [10.7.3.1. Binding Descriptions]
  element binding {
    (model.pLike | condition | decoNote)+,
    att.global.attributes,
    att.datable.attributes,
    
    ## (contemporary) specifies whether or not the binding is contemporary with the majority of its contents
    attribute contemporary {
      xsd:boolean
      | (
         ##
         "unknown"
         | 
           ##
           "inapplicable")
    }?,
    empty
  }
sealDesc =
  [
    a:documentation [
      "(seal description) describes the seals or similar items related to the object described, either as a series of paragraphs or as a series of "
      ns1:code [ "<seal>" ]
      " elements. [10.7.3.2. Seals]"
    ]
  ]
  element sealDesc {
    (model.pLike+
     | (summary?, (decoNote | seal | condition)+)),
    att.global.attributes,
    empty
  }
seal =
  
  ## (seal) contains a description of one seal or similar applied to the object described [10.7.3.2. Seals]
  element seal {
    (model.pLike | decoNote)+,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    
    ## (contemporary) specifies whether or not the seal is contemporary with the item to which it is affixed
    attribute contemporary {
      xsd:boolean
      | (
         ##
         "unknown"
         | 
           ##
           "inapplicable")
    }?,
    empty
  }
accMat =
  
  ## (accompanying material) contains details of any significant additional material which may be closely associated with the manuscript or object being described, such as non-contemporaneous documents or fragments bound in with it at some earlier historical period. [10.7.3.3. Accompanying Material]
  element accMat {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
history =
  
  ## (history) groups elements describing the full history of a manuscript, manuscript part, or other object. [10.8. History]
  element history {
    (model.pLike+ | (summary?, origin?, provenance*, acquisition?)),
    att.global.attributes,
    empty
  }
origin =
  
  ## (origin) contains any descriptive or other information concerning the origin of a manuscript, manuscript part, or other object. [10.8. History]
  element origin {
    macro.specialPara,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    empty
  }
provenance =
  
  ## (provenance) contains any descriptive or other information concerning a single identifiable episode during the history of a manuscript, manuscript part, or other object after its creation but before its acquisition. [10.8. History]
  element provenance {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    att.typed.attributes,
    empty
  }
acquisition =
  
  ## (acquisition) contains any descriptive or other information concerning the process by which a manuscript or manuscript part or other object entered the holding institution. [10.8. History]
  element acquisition {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    empty
  }
additional =
  
  ## (additional) groups additional information, combining bibliographic information about a manuscript or other object, or surrogate copies of it, with curatorial or administrative information. [10.9. Additional Information]
  element additional {
    (adminInfo?, surrogates?, listBibl?), att.global.attributes, empty
  }
adminInfo =
  
  ## (administrative information) contains information about the present custody and availability of the manuscript or other object, and also about the record description itself. [10.9.1. Administrative Information]
  element adminInfo {
    (recordHist?, availability?, custodialHist?, model.noteLike?),
    att.global.attributes,
    empty
  }
recordHist =
  
  ## (recorded history) provides information about the source and revision status of the parent manuscript or object description itself. [10.9.1. Administrative Information]
  element recordHist {
    (model.pLike+ | source), att.global.attributes, empty
  }
source =
  
  ## (source) describes the original source for the information contained with a manuscript or object description. [10.9.1.1. Record History]
  element source { macro.specialPara, att.global.attributes, empty }
custodialHist =
  
  ## (custodial history) contains a description of a manuscript or other object's custodial history, either as running prose or as a series of dated custodial events. [10.9.1.2. Availability and Custodial History]
  element custodialHist {
    (model.pLike+ | custEvent+), att.global.attributes, empty
  }
custEvent =
  
  ## (custodial event) describes a single event during the custodial history of a manuscript or other object. [10.9.1.2. Availability and Custodial History]
  element custEvent {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      
      ##
      "check"
      | 
        ##
        "conservation"
      | 
        ##
        "description"
      | 
        ##
        "exhibition"
      | 
        ##
        "loan"
      | 
        ##
        "photography"
      | 
        ##
        "other"
    },
    empty
  }
surrogates =
  
  ## (surrogates) contains information about any non-digital representations of the manuscript being described which may exist in the holding institution or elsewhere.  [10.9. Additional Information]
  element surrogates { macro.specialPara, att.global.attributes, empty }
msPart =
  
  ## (manuscript part) contains information about an originally distinct manuscript or part of a manuscript, which is now part of a composite manuscript. [10.10. Manuscript Parts]
  element msPart {
    (msIdentifier,
     model.headLike*,
     (model.pLike+
      | (msContents?, physDesc?, history?, additional?, msPart*))),
    att.global.attributes,
    att.typed.attributes,
    empty
  }
msFrag =
  
  ## (manuscript fragment) contains information about a fragment described in relation to a prior context, typically as a description of a virtual reconstruction of a manuscript or other object whose fragments were catalogued separately [10.11. Manuscript Fragments]
  element msFrag {
    ((altIdentifier | msIdentifier),
     model.headLike*,
     (model.pLike+ | (msContents?, physDesc?, history?, additional?))),
    att.global.attributes,
    att.typed.attributes,
    empty
  }
anchor =
  
  ## (anchor point) attaches an identifier to a point within a text, whether or not it corresponds with a textual element. [8.4.2. Synchronization and Overlap 16.5. Correspondence and Alignment]
  element anchor {
    empty, att.global.attributes, att.typed.attributes, empty
  }
seg =
  
  ## (arbitrary segment) represents any segmentation of text below the chunk level. [16.3. Blocks, Segments, and Anchors 6.2. Components of the Verse Line 7.2.5. Speech Contents]
  element seg {
    macro.paraContent,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    att.written.attributes,
    att.notated.attributes,
    empty
  }
standOff =
  
  ## Functions as a container element for linked data, contextual information, and stand-off annotations embedded in a TEI document. [16.10. The standOff Container]
  element standOff {
    (model.standOffPart+)
    >> sch:pattern [
         id =
           "tei_enrich-standOff-nested_standOff_should_be_typed-constraint-assert-19"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:standOff"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@type or not(ancestor::tei:standOff)"
             "This\x{a}" ~
             "      "
             sch:name [ ]
             " element must have a @type attribute, since it is\x{a}" ~
             "      nested inside a "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
listAnnotation =
  [
    a:documentation [
      "contains a list of annotations, typically encoded as "
      ns1:code [ "<annotation>" ]
      ", "
      ns1:code [ "<annotationBlock>" ]
      ", or "
      ns1:code [ "<note>" ]
      ", possibly organized with nested "
      ns1:code [ "<listAnnotation>" ]
      " elements. [16.10. The standOff Container]"
    ]
  ]
  element listAnnotation {
    (model.headLike*,
     model.labelLike*,
     (model.annotationLike | listAnnotation)+),
    att.global.attributes,
    att.typed.attributes,
    att.notated.attributes,
    att.declaring.attributes,
    empty
  }
annotation =
  [
    a:documentation [
      "represents an annotation following the "
      ns1:a [
        href = "#WADM"
        "Web\x{a}" ~
        "      Annotation Data Model"
      ]
      ". [16.10. The standOff Container]"
    ]
  ]
  element annotation {
    (respStmt*, revisionDesc*, licence*, model.annotationPart.body*),
    att.global.attribute.n,
    att.global.attribute.xmllang,
    att.global.attribute.xmlbase,
    att.global.attribute.xmlspace,
    att.global.rendition.attribute.rend,
    att.global.rendition.attribute.style,
    att.global.facs.attribute.facs,
    att.global.change.attribute.change,
    att.global.responsibility.attribute.cert,
    att.global.responsibility.attribute.resp,
    att.global.source.attribute.source,
    att.pointing.attribute.targetLang,
    att.pointing.attribute.evaluate,
    
    ## (identifier) provides a unique identifier for the element bearing the attribute.
    attribute xml:id { xsd:ID },
    
    ## specifies the destination of the reference by supplying one or more URI References
    attribute target {
      list { xsd:anyURI+ }
    },
    
    ##
    attribute motivation {
      list {
        (
         ## intent is to assess the target resource in some way, rather than simply make a comment about it
         "assessing"
         | 
           ## intent is to create a bookmark to the target or part thereof
           "bookmarking"
         | 
           ## intent is to classify the target in some way
           "classifying"
         | 
           ## intent is to comment about the target
           "commenting"
         | 
           ## intent is to describe the target, rather than (for example) comment on it
           "describing"
         | 
           ## intent is to request an edit or a change to the target resource
           "editing"
         | 
           ## intent is to highlight the target resource or a segment thereof
           "highlighting"
         | 
           ## intent is to assign an identity to the target
           "identifying"
         | 
           ## intent is to link to a resource related to the target
           "linking"
         | 
           ## intent is to assign some value or quality to the target
           "moderating"
         | 
           ## intent is to ask a question about the target
           "questioning"
         | 
           ## intent is to reply to a previous statement, either an annotation or another resource
           "replying"
         | 
           ## intent is to associate a tag with the target
           "tagging")+
      }
    }?,
    empty
  }
att.datable.custom.attributes =
  att.datable.custom.attribute.when-custom,
  att.datable.custom.attribute.notBefore-custom,
  att.datable.custom.attribute.notAfter-custom,
  att.datable.custom.attribute.from-custom,
  att.datable.custom.attribute.to-custom,
  att.datable.custom.attribute.datingPoint,
  att.datable.custom.attribute.datingMethod
att.datable.custom.attribute.when-custom =
  
  ## supplies the value of a date or time in some custom standard form.
  attribute when-custom {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.datable.custom.attribute.notBefore-custom =
  
  ## specifies the earliest possible date for the event in some custom standard form.
  attribute notBefore-custom {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.datable.custom.attribute.notAfter-custom =
  
  ## specifies the latest possible date for the event in some custom standard form.
  attribute notAfter-custom {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.datable.custom.attribute.from-custom =
  
  ## indicates the starting point of the period in some custom standard form.
  attribute from-custom {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.datable.custom.attribute.to-custom =
  
  ## indicates the ending point of the period in some custom standard form.
  attribute to-custom {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.datable.custom.attribute.datingPoint =
  
  ## supplies a pointer to some location defining a named point in time with reference to which the datable item is understood to have occurred
  attribute datingPoint { xsd:anyURI }?
att.datable.custom.attribute.datingMethod =
  [
    a:documentation [
      "supplies a pointer to a "
      ns1:code [ "<calendar>" ]
      " element or other means of interpreting the values of the custom dating attributes."
    ]
  ]
  attribute datingMethod { xsd:anyURI }?
model.persNamePart =
  surname
  | forename
  | genName
  | nameLink
  | addName
  | roleName
  | persPronouns
model.persNamePart_alternation =
  surname
  | forename
  | genName
  | nameLink
  | addName
  | roleName
  | persPronouns
model.persNamePart_sequence =
  surname, forename, genName, nameLink, addName, roleName, persPronouns
model.persNamePart_sequenceOptional =
  surname?,
  forename?,
  genName?,
  nameLink?,
  addName?,
  roleName?,
  persPronouns?
model.persNamePart_sequenceOptionalRepeatable =
  surname*,
  forename*,
  genName*,
  nameLink*,
  addName*,
  roleName*,
  persPronouns*
model.persNamePart_sequenceRepeatable =
  surname+,
  forename+,
  genName+,
  nameLink+,
  addName+,
  roleName+,
  persPronouns+
orgName =
  
  ## (organization name) contains an organizational name. [13.2.2. Organizational Names]
  element orgName {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
persName =
  
  ## (personal name) contains a proper noun or proper-noun phrase referring to a person, possibly including one or more of the person's forenames, surnames, honorifics, added names, etc. [13.2.1. Personal Names]
  element persName {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
surname =
  
  ## (surname) contains a family (inherited) name, as opposed to a given, baptismal, or nick name. [13.2.1. Personal Names]
  element surname {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
forename =
  
  ## (forename) contains a forename, given or baptismal name. [13.2.1. Personal Names]
  element forename {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
genName =
  
  ## (generational name component) contains a name component used to distinguish otherwise similar names on the basis of the relative ages or generations of the persons named. [13.2.1. Personal Names]
  element genName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
nameLink =
  
  ## (name link) contains a connecting phrase or link used within a name but not regarded as part of it, such as van der or of. [13.2.1. Personal Names]
  element nameLink {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
addName =
  
  ## (additional name) contains an additional name component, such as a nickname, epithet, or alias, or any other descriptive phrase used within a personal name. [13.2.1. Personal Names]
  element addName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
roleName =
  
  ## (role name) contains a name component which indicates that the referent has a particular role or position in society, such as an official title or rank. [13.2.1. Personal Names]
  element roleName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
placeName =
  
  ## (place name) contains an absolute or relative place name. [13.2.3. Place Names]
  element placeName {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
bloc =
  
  ## (bloc) contains the name of a geo-political unit consisting of two or more nation states or countries. [13.2.3. Place Names]
  element bloc {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
country =
  
  ## (country) contains the name of a geo-political unit, such as a nation, country, colony, or commonwealth, larger than or administratively superior to a region and smaller than a bloc. [13.2.3. Place Names]
  element country {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
region =
  
  ## (region) contains the name of an administrative unit such as a state, province, or county, larger than a settlement, but smaller than a country. [13.2.3. Place Names]
  element region {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    att.datable.attributes,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      
      ##
      "parish"
      | 
        ##
        "county"
      | 
        ##
        "compass"
      | 
        ##
        "geog"
      | 
        ##
        "state"
      | 
        ##
        "unknown"
    },
    empty
  }
settlement =
  
  ## (settlement) contains the name of a settlement such as a city, town, or village identified as a single geo-political or administrative unit. [13.2.3. Place Names]
  element settlement {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
district =
  
  ## (district) contains the name of any kind of subdivision of a settlement, such as a parish, ward, or other administrative or geographic unit. [13.2.3. Place Names]
  element district {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
offset =
  
  ## (offset) marks that part of a relative temporal or spatial expression which indicates the direction of the offset between the two place names, dates, or times involved in the expression. [13.2.3. Place Names]
  element offset {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
geogName =
  
  ## (geographical name) identifies a name associated with some geographical feature such as Windrush Valley or Mount Sinai. [13.2.3. Place Names]
  element geogName {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
geogFeat =
  
  ## (geographical feature name) contains a common noun identifying some geographical feature contained within a geographic name, such as valley, mount, etc. [13.2.3. Place Names]
  element geogFeat {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
affiliation =
  
  ## (affiliation) contains an informal description of a person's present or past affiliation with some organization, for example an employer or sponsor. [15.2.2. The Participant Description]
  element affiliation {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] sponsor; 2] recommend; 3] discredit; 4] pledged
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
age =
  
  ## (age) specifies the age of a person. [13.3.2.1. Personal Characteristics]
  element age {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.typed.attribute.subtype,
    att.dimensions.attributes,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] western; 2] sui; 3] subjective; 4] objective; 5] inWorld (in world); 6] chronological; 7] biological; 8] psychological; 9] functional
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## supplies a numeric code representing the age or age group
    attribute value { xsd:nonNegativeInteger }?,
    empty
  }
birth =
  
  ## (birth) contains information about a person's birth, such as its date and place. [15.2.2. The Participant Description]
  element birth {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.dimensions.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] caesarean (caesarean section); 2] vaginal (vaginal delivery); 3] exNihilo (ex nihilo); 4] incorporated; 5] founded; 6] established
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
death =
  
  ## (death) contains information about a person's death, such as its date and place. [15.2.2. The Participant Description]
  element death {
    macro.phraseSeq,
    att.datable.attributes,
    att.dimensions.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] proclaimed; 2] assumed; 3] verified; 4] clinical; 5] brain; 6] natural; 7] unnatural; 8] fragmentation; 9] dissolution
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
education =
  
  ## (education) contains a description of the educational experience of a person. [15.2.2. The Participant Description]
  element education {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] primary; 2] secondary; 3] undergraduate; 4] graduate; 5] residency; 6] apprenticeship
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
event =
  
  ## (event) contains data relating to any kind of significant event associated with a person, place, or organization. [13.3.1. Basic Principles]
  element event {
    (idno*,
     model.headLike*,
     (model.pLike+ | model.labelLike+),
     (model.noteLike | model.biblLike | idno | ptr)*,
     event*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    att.naming.attributes,
    att.sortable.attributes,
    att.locatable.attributes,
    empty
  }
faith =
  
  ## (faith) specifies the faith, religion, or belief set of a person. [13.3.2.1. Personal Characteristics]
  element faith {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.canonical.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] practicing; 2] clandestine; 3] patrilineal; 4] matrilineal; 5] convert
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
floruit =
  
  ## (floruit) contains information about a person's period of activity. [13.3.2.1. Personal Characteristics]
  element floruit {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.dimensions.attributes,
    att.editLike.attributes,
    empty
  }
geo =
  
  ## (geographical coordinates) contains any expression of a set of geographic coordinates, representing a point, line, or area on the surface of the earth in some notation. [13.3.4.1. Varieties of Location]
  element geo {
    text, att.global.attributes, att.declaring.attributes, empty
  }
langKnowledge =
  [
    a:documentation [
      "(language knowledge) summarizes the state of a person's linguistic knowledge, either as prose or by a list of "
      ns1:code [ "<langKnown>" ]
      " elements. [13.3.2.1. Personal Characteristics]"
    ]
  ]
  element langKnowledge {
    (model.pLike | langKnown+),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] listening; 2] speaking; 3] reading; 4] writing
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## supplies one or more valid language tags for the languages specified
    attribute tags {
      list {
        (xsd:language
         | (
            ##
            ""))+
      }
    }?,
    empty
  }
langKnown =
  
  ## (language known) summarizes the state of a person's linguistic competence, i.e., knowledge of a single language. [15.2.2. The Participant Description]
  element langKnown {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    
    ## supplies a valid language tag for the language concerned.
    attribute tag {
      xsd:language
      | (
         ##
         "")
    },
    
    ## a code indicating the person's level of knowledge for this language
    attribute level {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
listOrg =
  
  ## (list of organizations) contains a list of elements, each of which provides information about an identifiable organization. [13.2.2. Organizational Names]
  element listOrg {
    (model.headLike*,
     desc*,
     (relation | listRelation)*,
     ((org | listOrg)+, (relation | listRelation)*)+),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
listEvent =
  
  ## (list of events) contains a list of descriptions, each of which provides information about an identifiable event. [13.3.1. Basic Principles]
  element listEvent {
    (model.headLike*,
     desc*,
     (relation | listRelation)*,
     (model.eventLike+, (relation | listRelation)*)+),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
listPerson =
  
  ## (list of persons) contains a list of descriptions, each of which provides information about an identifiable person or a group of people, for example the participants in a language interaction, or the people referred to in a historical source. [13.3.2. The Person Element 15.2. Contextual Information 2.4. The Profile Description 15.3.2. Declarable Elements]
  element listPerson {
    (model.headLike*,
     desc*,
     (relation | listRelation)*,
     ((model.personLike | listPerson)+, (relation | listRelation)*)+),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
listPlace =
  
  ## (list of places) contains a list of places, optionally followed by a list of relationships (other than containment) defined amongst them. [2.2.7. The Source Description 13.3.4. Places]
  element listPlace {
    (model.headLike*,
     desc*,
     (relation | listRelation)*,
     ((model.placeLike | listPlace)+, (relation | listRelation)*)+),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
listRelation =
  
  ## provides information about relationships identified amongst people, places, and organizations, either informally as prose or as formally expressed relation links. [13.3.2.3. Personal Relationships]
  element listRelation {
    (model.headLike*,
     desc*,
     (model.pLike | (relation | listRelation)+)),
    att.global.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    empty
  }
location =
  
  ## (location) defines the location of a place as a set of geographical coordinates, in terms of other named geo-political entities, or as an address. [13.3.4. Places]
  element location {
    (model.labelLike
     | model.placeNamePart
     | model.offsetLike
     | model.measureLike
     | model.addressLike
     | model.noteLike
     | model.biblLike)*,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    empty
  }
nationality =
  
  ## (nationality) contains an informal description of a person's present or past nationality or citizenship. [15.2.2. The Participant Description]
  element nationality {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] birth; 2] naturalised; 3] self-assigned
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
occupation =
  
  ## (occupation) contains an informal description of a person's trade, profession or occupation. [15.2.2. The Participant Description]
  element occupation {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] primary; 2] other; 3] paid; 4] unpaid
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    [
      a:documentation [
        "indicates the classification system or taxonomy in use, for example by supplying the identifier of a "
        ns1:code [ "<taxonomy>" ]
        " element, or pointing to some other resource."
      ]
    ]
    attribute scheme { xsd:anyURI }?,
    [
      a:documentation [
        "identifies an occupation code defined within the classification system or taxonomy defined by the "
        ns1:code [ "@scheme" ]
        " attribute."
      ]
    ]
    attribute code { xsd:anyURI }?,
    empty
  }
org =
  
  ## (organization) provides information about an identifiable organization such as a business, a tribe, or any other grouping of people. [13.3.3. Organizational Data]
  element org {
    (model.headLike*,
     (model.pLike*
      | (model.labelLike
         | model.nameLike
         | model.placeLike
         | model.orgPart
         | model.milestoneLike)*),
     (model.noteLike | model.biblLike | ptr)*,
     model.personLike*),
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    att.sortable.attributes,
    
    ## specifies a primary role or classification for the organization.
    attribute role {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
person =
  
  ## (person) provides information about an identifiable individual, for example a participant in a language interaction, or a person referred to in a historical source. [13.3.2. The Person Element 15.2.2. The Participant Description]
  element person {
    (model.pLike+ | (model.personPart | model.global | ptr)*),
    att.global.attributes,
    att.editLike.attributes,
    att.sortable.attributes,
    
    ## specifies a primary role or classification for the person.
    attribute role {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    
    ## specifies the sex of the person.
    attribute sex {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    },
    
    ## specifies an age group for the person.
    attribute age {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
persona =
  
  ## provides information about one of the personalities identified for a given individual, where an individual has multiple personalities. [13.3.2. The Person Element]
  element persona {
    (model.pLike+ | (model.personPart | model.global)*),
    att.global.attributes,
    att.editLike.attributes,
    att.sortable.attributes,
    
    ## specifies a primary role or classification for the persona.
    attribute role {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    
    ## specifies the sex of the persona.
    attribute sex {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    
    ## specifies an age group for the persona.
    attribute age {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
personGrp =
  
  ## (personal group) describes a group of individuals treated as a single person for analytic purposes. [15.2.2. The Participant Description]
  element personGrp {
    (model.pLike+ | (model.personPart | model.global)*),
    att.global.attributes,
    att.sortable.attributes,
    
    ## specifies the role of this group of participants in the interaction.
    attribute role {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## specifies the sex of the participant group.
    attribute sex {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    
    ## specifies the age group of the participants.
    attribute age {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## describes informally the size or approximate size of the group for example by means of a number and an indication of accuracy e.g. approx 200.
    attribute size {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
persPronouns =
  
  ## (personal pronouns) indicates the personal pronouns used, or assumed to be used, by the individual being described. [13.3.2.1. Personal Characteristics]
  element persPronouns {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.typed.attributes,
    
    ## (evidence) indicates support for the listed personal pronouns.
    ## Suggested values include: 1] conjecture (conjecture); 2] selfIdentification (self identification); 3] trustedThirdParty (trusted third party)
    attribute evidence {
      
      ## (conjecture) The given value was selected based on assumptions by someone besides the person to whom this pronoun applies. As a result, the value may be erroneous.
      "conjecture"
      | 
        ## (self identification) The given value has been explicitly stated or confirmed by the person to whom this pronoun applies.
        "selfIdentification"
      | 
        ## (trusted third party) The given value has been supplied by another individual trusted by the encoder to know the preferences of the person to whom this pronoun applies.
        "trustedThirdParty"
      | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## (value) supplies a regularized value for personal pronouns.
    ## Sample values include: 1] e (e); 2] he (he); 3] she (she); 4] they (they)
    attribute value {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
place =
  
  ## (place) contains data about a geographic location [13.3.4. Places]
  element place {
    (model.headLike*,
     (model.pLike*
      | (model.labelLike
         | model.placeStateLike
         | model.eventLike
         | name)*),
     (model.noteLike | model.biblLike | idno | ptr)*,
     (model.placeLike | listPlace)*),
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    att.sortable.attributes,
    empty
  }
population =
  
  ## (population) contains information about the population of a place. [13.3.4.3. States, Traits, and Events]
  element population {
    (model.headLike*,
     ((model.pLike+ | model.labelLike+),
      (model.noteLike | model.biblLike)*)?,
     population*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
relation =
  
  ## (relationship) describes any kind of relationship or linkage amongst a specified group of places, events, persons, objects or other items. [13.3.2.3. Personal Relationships]
  element relation {
    (desc?)
    >> sch:pattern [
         id = "tei_enrich-relation-reforkeyorname-constraint-assert-20"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@ref or @key or @name"
             "One of the attributes  'name', 'ref' or 'key' must be supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "tei_enrich-relation-activemutual-constraint-report-19"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@active and @mutual"
             "Only one of the attributes @active and @mutual may be supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "tei_enrich-relation-activepassive-constraint-report-20"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@passive and not(@active)"
             "the attribute 'passive' may be supplied only if the attribute 'active' is supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.canonical.attributes,
    att.sortable.attributes,
    att.typed.attributes,
    
    ## supplies a name for the kind of relationship of which this is an instance.
    attribute name {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    (
     ## identifies the active participants in a non-mutual relationship, or all the participants in a mutual one.
     attribute active {
       list { xsd:anyURI+ }
     }?
     | 
       ## supplies a list of participants amongst all of whom the relationship holds equally.
       attribute mutual {
         list { xsd:anyURI+ }
       }?),
    
    ## identifies the passive participants in a non-mutual relationship.
    attribute passive {
      list { xsd:anyURI+ }
    }?,
    empty
  }
residence =
  
  ## (residence) describes a person's present or past places of residence. [15.2.2. The Participant Description]
  element residence {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] primary; 2] secondary; 3] temporary; 4] permanent
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
sex =
  
  ## (sex) specifies the sex of a person. [13.3.2.1. Personal Characteristics]
  element sex {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] explicit; 2] implicit
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## supplies a coded value for sex
    attribute value {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
socecStatus =
  
  ## (socio-economic status) contains an informal description of a person's perceived social or economic status. [15.2.2. The Participant Description]
  element socecStatus {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] atBirth; 2] atDeath; 3] dependent; 4] inherited; 5] independent
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    [
      a:documentation [
        "identifies the classification system or taxonomy in use, for example by pointing to a locally-defined "
        ns1:code [ "<taxonomy>" ]
        " element or by supplying a URI for an externally-defined system."
      ]
    ]
    attribute scheme { xsd:anyURI }?,
    [
      a:documentation [
        "identifies a status code defined within the classification system or taxonomy defined by the "
        ns1:code [ "@scheme" ]
        " attribute."
      ]
    ]
    attribute code { xsd:anyURI }?,
    empty
  }
trait =
  
  ## (trait) contains a description of some status or quality attributed to a person, place, or organization typically, but not necessarily, independent of the volition or action of the holder and usually not at some specific time or for a specific date range. [13.3.1. Basic Principles 13.3.2.1. Personal Characteristics]
  element trait {
    (trait+
     | (model.headLike*,
        model.pLike+,
        (model.noteLike | model.biblLike)*)
     | (model.labelLike | model.noteLike | model.biblLike)*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
objectName =
  
  ## (name of an object) contains a proper noun or noun phrase used to refer to an object. [13.2.4. Object Names]
  element objectName {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
object =
  
  ## contains a description of a single identifiable physical object. [13.3.5. Objects]
  element object {
    (objectIdentifier+,
     model.headLike*,
     (model.pLike* | (msContents?, physDesc?, history?, additional?)),
     (model.noteLike | model.biblLike)*,
     object*),
    att.global.attributes,
    att.sortable.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    att.docStatus.attributes,
    att.canonical.attributes,
    empty
  }
listObject =
  
  ## (list of objects) contains a list of descriptions, each of which provides information about an identifiable physical object. [13.3.5. Objects]
  element listObject {
    (model.headLike*,
     desc*,
     (relation | listRelation)*,
     (model.objectLike+, (relation | listRelation)*)+),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
objectIdentifier =
  
  ## (object identifier) groups one or more identifiers or pieces of locating information concerning a single object. [13.3.5. Objects]
  element objectIdentifier {
    ((model.placeNamePart
      | institution
      | repository
      | collection
      | idno
      | msName
      | objectName
      | altIdentifier)*)
    >> sch:pattern [
         id =
           "tei_enrich-objectIdentifier-objectIdentifier_minimal-constraint-report-21"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:objectIdentifier"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(count(*) gt 0)"
             "An objectIdentifier must contain at minimum a single piece of locating or identifying information."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    empty
  }
formula =
  
  ## (formula) contains a mathematical or other formula. [14.2. Formulæ and Mathematical Expressions]
  element formula {
    (text | model.graphicLike | model.hiLike)*,
    att.global.attributes,
    att.notated.attributes,
    empty
  }
notatedMusic =
  
  ## encodes the presence of music notation in a text [14.3. Notated Music in Written Text]
  element notatedMusic {
    (model.labelLike | model.ptrLike | graphic | seg)*,
    att.global.attributes,
    att.placement.attributes,
    att.typed.attributes,
    empty
  }
figure =
  
  ## (figure) groups elements representing or containing graphic information such as an illustration, formula, or figure. [14.4. Specific Elements for Graphic Images]
  element figure {
    (model.headLike
     | model.common
     | figDesc
     | model.graphicLike
     | model.global
     | model.divBottom)*,
    att.global.attributes,
    att.placement.attributes,
    att.typed.attributes,
    att.written.attributes,
    empty
  }
figDesc =
  
  ## (description of figure) contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it. [14.4. Specific Elements for Graphic Images]
  element figDesc { macro.limitedContent, att.global.attributes, empty }
att.global.facs.attributes = att.global.facs.attribute.facs
att.global.facs.attribute.facs =
  
  ## (facsimile) points to one or more images, portions of an image, or surfaces which correspond to the current element.
  attribute facs {
    list { xsd:anyURI+ }
  }?
att.global.change.attributes = att.global.change.attribute.change
att.global.change.attribute.change =
  [
    a:documentation [
      "points to one or more "
      ns1:code [ "<change>" ]
      " elements documenting a state or revision campaign to which the element bearing this attribute and its children have been assigned by the encoder."
    ]
  ]
  attribute change {
    list { xsd:anyURI+ }
  }?
att.coordinated.attributes =
  att.coordinated.attribute.start,
  att.coordinated.attribute.ulx,
  att.coordinated.attribute.uly,
  att.coordinated.attribute.lrx,
  att.coordinated.attribute.lry,
  att.coordinated.attribute.points
att.coordinated.attribute.start =
  
  ## indicates the element within a transcription of the text containing at least the start of the writing represented by this zone or surface.
  attribute start { xsd:anyURI }?
att.coordinated.attribute.ulx =
  
  ## gives the x coordinate value for the upper left corner of a rectangular space.
  attribute ulx {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.coordinated.attribute.uly =
  
  ## gives the y coordinate value for the upper left corner of a rectangular space.
  attribute uly {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.coordinated.attribute.lrx =
  
  ## gives the x coordinate value for the lower right corner of a rectangular space.
  attribute lrx {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.coordinated.attribute.lry =
  
  ## gives the y coordinate value for the lower right corner of a rectangular space.
  attribute lry {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.coordinated.attribute.points =
  
  ## identifies a two dimensional area by means of a series of pairs of numbers, each of which gives the x,y coordinates of a point on a line enclosing the area.
  attribute points {
    list {
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      },
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      },
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      },
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      }*
    }
  }?
facsimile =
  
  ## contains a representation of some written source in the form of a set of images rather than as transcribed or encoded text. [11.1. Digital Facsimiles]
  element facsimile {
    (front?, (model.graphicLike | surface | surfaceGrp)+, back?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
sourceDoc =
  
  ## contains a transcription or other representation of a single source document potentially forming part of a dossier génétique or collection of sources. [11.1. Digital Facsimiles 11.2.2. Embedded Transcription]
  element sourceDoc {
    (model.global | model.graphicLike | surface | surfaceGrp)+,
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
surface =
  
  ## defines a written surface as a two-dimensional coordinate space, optionally grouping one or more graphic representations of that space, zones of interest within that space, and transcriptions of the writing within them. [11.1. Digital Facsimiles 11.2.2. Embedded Transcription]
  element surface {
    ((model.global | model.labelLike | model.graphicLike)*,
     ((zone | line | path | surface | surfaceGrp), model.global*)*),
    att.global.attributes,
    att.coordinated.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    
    ## describes the method by which this surface is or was connected to the main surface
    ## Sample values include: 1] glued; 2] pinned; 3] sewn
    attribute attachment {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## indicates whether the surface is attached and folded in such a way as to provide two writing surfaces
    attribute flipping { xsd:boolean }?,
    empty
  }
surfaceGrp =
  
  ## defines any kind of useful grouping of written surfaces, for example the recto and verso of a single leaf, which the encoder wishes to treat as a single unit. [11.1. Digital Facsimiles]
  element surfaceGrp {
    (model.global | surface | surfaceGrp)+,
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
zone =
  [
    a:documentation [
      "defines any two-dimensional area within a "
      ns1:code [ "<surface>" ]
      " element. [11.1. Digital Facsimiles 11.2.2. Embedded Transcription]"
    ]
  ]
  element zone {
    (text
     | model.gLike
     | model.graphicLike
     | model.global
     | surface
     | model.linePart)*,
    att.global.attributes,
    att.coordinated.attributes,
    att.typed.attributes,
    att.written.attributes,
    [
      a:defaultValue = "0"
      a:documentation [
        "indicates the amount by which this zone has been rotated clockwise, with respect to the normal orientation of the parent "
        ns1:code [ "<surface>" ]
        " element as implied by the dimensions given in the "
        ns1:code [ "<msDesc>" ]
        " element or by the coordinates of the "
        ns1:code [ "<surface>" ]
        " itself. The orientation is expressed in arc degrees."
      ]
    ]
    attribute rotate { xsd:nonNegativeInteger }?,
    empty
  }
path =
  [
    a:documentation [
      "(path) defines any line passing through two or more points within a "
      ns1:code [ "<surface>" ]
      " element. [11.1. Digital Facsimiles 11.2.2. Embedded Transcription]"
    ]
  ]
  element path {
    empty
    >> sch:pattern [
         id = "tei_enrich-path-pathmustnotbeclosed-constraint-rule-15"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:path[@points]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "firstPair"
             value = "tokenize( normalize-space( @points ), ' ')[1]"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "lastPair"
             value =
               "tokenize( normalize-space( @points ), ' ')[last()]"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "firstX"
             value = "xs:float( substring-before( $firstPair, ',') )"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "firstY"
             value = "xs:float( substring-after( $firstPair, ',') )"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "lastX"
             value = "xs:float( substring-before( $lastPair, ',') )"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "lastY"
             value = "xs:float( substring-after( $lastPair, ',') )"
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "$firstX eq $lastX  and  $firstY eq $lastY"
             "The first and\x{a}" ~
             "          last elements of this path are the same. To specify a closed polygon, use\x{a}" ~
             "          the zone element rather than the path element. "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.coordinated.attribute.start,
    att.coordinated.attribute.ulx,
    att.coordinated.attribute.uly,
    att.coordinated.attribute.lrx,
    att.coordinated.attribute.lry,
    att.typed.attributes,
    att.written.attributes,
    
    ## identifies a line within the container or bounding box specified by the parent element by means of a series of two or more pairs of numbers, each of which gives the x,y coordinates of a point on the line.
    attribute points {
      list {
        xsd:token {
          pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
        },
        xsd:token {
          pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
        },
        xsd:token {
          pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
        }*
      }
    }?,
    empty
  }
addSpan =
  [
    a:documentation [
      "(added span of text) marks the beginning of a longer sequence of text added by an author, scribe, annotator or corrector (see also "
      ns1:code [ "<add>" ]
      "). [11.3.1.4. Additions and Deletions]"
    ]
  ]
  element addSpan {
    empty
    >> sch:pattern [
         id = "tei_enrich-addSpan-spanTo-constraint-assert-21"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "tei_enrich-addSpan-spanTo_fr-constraint-assert-22"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.placement.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    att.dimensions.attributes,
    empty
  }
damage =
  
  ## (damage) contains an area of damage to the text witness. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element damage {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    att.damaged.attributes,
    empty
  }
damageSpan =
  
  ## (damaged span of text) marks the beginning of a longer sequence of text which is damaged in some way but still legible. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element damageSpan {
    empty
    >> sch:pattern [
         id = "tei_enrich-damageSpan-spanTo-constraint-assert-23"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "\x{a}" ~
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "tei_enrich-damageSpan-spanTo_fr-constraint-assert-24"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.damaged.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
delSpan =
  
  ## (deleted span of text) marks the beginning of a longer sequence of text deleted, marked as deleted, or otherwise signaled as superfluous or spurious by an author, scribe, annotator, or corrector. [11.3.1.4. Additions and Deletions]
  element delSpan {
    empty
    >> sch:pattern [
         id = "tei_enrich-delSpan-spanTo-constraint-assert-25"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "tei_enrich-delSpan-spanTo_fr-constraint-assert-26"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    att.dimensions.attributes,
    empty
  }
ex =
  
  ## (editorial expansion) contains a sequence of letters added by an editor or transcriber when expanding an abbreviation. [11.3.1.2. Abbreviation and Expansion]
  element ex {
    macro.xtext,
    att.global.attributes,
    att.editLike.attributes,
    att.dimensions.attributes,
    empty
  }
fw =
  
  ## (forme work) contains a running head (e.g. a header, footer), catchword, or similar material appearing on the current page. [11.6. Headers, Footers, and Similar Matter]
  element fw {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attribute.subtype,
    att.placement.attributes,
    att.written.attributes,
    
    ## classifies the material encoded according to some useful typology.
    ## Sample values include: 1] header; 2] footer; 3] pageNum (page number); 4] lineNum (line number); 5] sig (signature); 6] catch (catchword)
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
handNotes =
  [
    a:documentation [
      "contains one or more "
      ns1:code [ "<handNote>" ]
      " elements documenting the different hands identified within the source texts. [11.3.2.1. Document Hands]"
    ]
  ]
  element handNotes { handNote+, att.global.attributes, empty }
handShift =
  
  ## (handwriting shift) marks the beginning of a sequence of text written in a new hand, or the beginning of a scribal stint. [11.3.2.1. Document Hands]
  element handShift {
    empty,
    att.global.attributes,
    att.handFeatures.attributes,
    [
      a:documentation [
        "indicates a "
        ns1:code [ "<handNote>" ]
        " element describing the hand concerned."
      ]
    ]
    attribute new { xsd:anyURI }?,
    empty
  }
am =
  
  ## (abbreviation marker) contains a sequence of letters or signs present in an abbreviation which are omitted or replaced in the expanded form of the abbreviation. [11.3.1.2. Abbreviation and Expansion]
  element am {
    (text | model.gLike | model.pPart.transcriptional)*,
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    empty
  }
restore =
  
  ## (restore) indicates restoration of text to an earlier state by cancellation of an editorial or authorial marking or instruction. [11.3.1.6. Cancellation of Deletions and Other Markings]
  element restore {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
space =
  
  ## (space) indicates the location of a significant space in the text. [11.4.1. Space]
  element space {
    (model.descLike | model.certLike)*,
    att.global.attribute.xmlid,
    att.global.attribute.n,
    att.global.attribute.xmllang,
    att.global.attribute.xmlbase,
    att.global.attribute.xmlspace,
    att.global.rendition.attribute.rend,
    att.global.rendition.attribute.style,
    att.global.facs.attribute.facs,
    att.global.change.attribute.change,
    att.global.responsibility.attribute.cert,
    att.global.source.attribute.source,
    att.typed.attributes,
    att.dimensions.attributes,
    
    ## (responsible party) (responsible party) indicates the individual responsible for identifying and measuring the space
    attribute resp {
      list { xsd:anyURI+ }
    }?,
    
    ## (dimension) indicates whether the space is horizontal or vertical.
    attribute dim {
      
      ## the space is horizontal.
      "horizontal"
      | 
        ## the space is vertical.
        "vertical"
    }?,
    empty
  }
subst =
  
  ## (substitution) groups one or more deletions (or surplus text) with one or more additions when the combination is to be regarded as a single intervention in the text. [11.3.1.5. Substitutions]
  element subst {
    ((add | surplus | del | model.milestoneLike)+)
    >> sch:pattern [
         id = "tei_enrich-subst-substContents1-constraint-assert-27"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:subst"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "child::tei:add and (child::tei:del or child::tei:surplus)"
             "\x{a}" ~
             "                  "
             sch:name [ ]
             " must have at least one child add and at least one child del or surplus"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.dimensions.attributes,
    empty
  }
substJoin =
  
  ## (substitution join) identifies a series of possibly fragmented additions, deletions, or other revisions on a manuscript that combine to make up a single intervention in the text [11.3.1.5. Substitutions]
  element substJoin {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.pointing.attributes,
    att.transcriptional.attributes,
    att.dimensions.attributes,
    empty
  }
supplied =
  
  ## (supplied) signifies text supplied by the transcriber or editor for any reason; for example because the original cannot be read due to physical damage, or because of an obvious omission by the author or scribe. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element supplied {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.dimensions.attributes,
    
    ## one or more words indicating why the text has had to be supplied, e.g. overbinding, faded-ink, lost-folio, omitted-in-original.
    attribute reason {
      list {
        (
         ##
         "omitted"
         | 
           ##
           "illegible"
         | 
           ##
           "damage"
         | 
           ##
           "unknown")+
      }
    },
    empty
  }
surplus =
  
  ## (surplus) marks text present in the source which the editor believes to be superfluous or redundant. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element surplus {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.dimensions.attributes,
    
    ## one or more words indicating why this text is believed to be superfluous, e.g. repeated, interpolated etc.
    attribute reason {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
secl =
  
  ## (secluded text) Secluded. Marks text present in the source which the editor believes to be genuine but out of its original place (which is unknown). [11.3.1.7. Text Omitted from or Supplied in the Transcription]
  element secl {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.dimensions.attributes,
    
    ## one or more words indicating why this text has been secluded, e.g. interpolated etc.
    attribute reason {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
line =
  
  ## contains the transcription of a topographic line in the source document [11.2.2. Embedded Transcription]
  element line {
    (text | model.global | model.gLike | model.linePart)*,
    att.typed.attributes,
    att.global.attributes,
    att.coordinated.attributes,
    att.written.attributes,
    empty
  }
listTranspose =
  
  ## supplies a list of transpositions, each of which is indicated at some point in a document typically by means of metamarks. [11.3.4.5. Transpositions]
  element listTranspose {
    (desc*, transpose+), att.global.attributes, empty
  }
metamark =
  
  ## contains or describes any kind of graphic or written signal within a document the function of which is to determine how it should be read rather than forming part of the actual content of the document. [11.3.4.2. Metamarks]
  element metamark {
    macro.specialPara,
    att.spanning.attributes,
    att.placement.attributes,
    att.global.attributes,
    
    ## describes the function (for example status, insertion, deletion, transposition) of the metamark.
    attribute function {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## identifies one or more elements to which the metamark applies.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
mod =
  
  ## represents any kind of modification identified within a single document. [11.3.4.1. Generic Modification]
  element mod {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    att.dimensions.attributes,
    empty
  }
redo =
  
  ## indicates one or more cancelled interventions in a document which have subsequently been marked as reaffirmed or repeated. [11.3.4.4. Confirmation, Cancellation, and Reinstatement of Modifications]
  element redo {
    empty,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    att.dimensions.attributes,
    
    ## points to one or more elements representing the interventions which are being reasserted.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
retrace =
  
  ## contains a sequence of writing which has been retraced, for example by over-inking, to clarify or fix it. [11.3.4.3. Fixation and Clarification]
  element retrace {
    macro.paraContent,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    att.dimensions.attributes,
    empty
  }
transpose =
  
  ## describes a single textual transposition as an ordered list of at least two pointers specifying the order in which the elements indicated should be re-combined. [11.3.4.5. Transpositions]
  element transpose { (ptr, ptr, ptr*), att.global.attributes, empty }
undo =
  
  ## indicates one or more marked-up interventions in a document which have subsequently been marked for cancellation. [11.3.4.4. Confirmation, Cancellation, and Reinstatement of Modifications]
  element undo {
    empty,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    att.dimensions.attributes,
    
    ## points to one or more elements representing the interventions which are to be reverted or undone.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
att.gaijiProp.attributes =
  att.gaijiProp.attribute.name,
  att.gaijiProp.attribute.value,
  att.gaijiProp.attribute.version
att.gaijiProp.attribute.name =
  
  ## provides the name of the character or glyph property being defined.
  attribute name { xsd:NCName }
att.gaijiProp.attribute.value =
  
  ## provides the value of the character or glyph property being defined.
  attribute value { xsd:string }
att.gaijiProp.attribute.version =
  
  ## specifies the version number of the Unicode Standard in which this property name is defined.
  ## Suggested values include: 1] 1.0.1; 2] 1.1; 3] 2.0; 4] 2.1; 5] 3.0; 6] 3.1; 7] 3.2; 8] 4.0; 9] 4.1; 10] 5.0; 11] 5.1; 12] 5.2; 13] 6.0; 14] 6.1; 15] 6.2; 16] 6.3; 17] 7.0; 18] 8.0; 19] 9.0; 20] 10.0; 21] 11.0; 22] 12.0; 23] 12.1; 24] unassigned
  attribute version {
    
    ##
    "1.0.1"
    | 
      ##
      "1.1"
    | 
      ##
      "2.0"
    | 
      ##
      "2.1"
    | 
      ##
      "3.0"
    | 
      ##
      "3.1"
    | 
      ##
      "3.2"
    | 
      ##
      "4.0"
    | 
      ##
      "4.1"
    | 
      ##
      "5.0"
    | 
      ##
      "5.1"
    | 
      ##
      "5.2"
    | 
      ##
      "6.0"
    | 
      ##
      "6.1"
    | 
      ##
      "6.2"
    | 
      ##
      "6.3"
    | 
      ##
      "7.0"
    | 
      ##
      "8.0"
    | 
      ##
      "9.0"
    | 
      ##
      "10.0"
    | 
      ##
      "11.0"
    | 
      ##
      "12.0"
    | 
      ##
      "12.1"
    | 
      ##
      "unassigned"
    | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
g =
  
  ## (character or glyph) represents a glyph, or a non-standard character. [5. Characters, Glyphs, and Writing Modes]
  element g {
    text,
    att.global.attributes,
    att.typed.attributes,
    
    ## points to a description of the character or glyph intended.
    attribute ref { xsd:anyURI }?,
    empty
  }
charDecl =
  
  ## (character declarations) provides information about nonstandard characters and glyphs. [5.2. Markup Constructs for Representation of Characters and Glyphs]
  element charDecl {
    (desc?, (char | glyph)+),
    att.global.attributes,
    empty
  }
char =
  
  ## (character) provides descriptive information about a character. [5.2. Markup Constructs for Representation of Characters and Glyphs]
  element char {
    (charName
     | charProp
     | unicodeProp
     | unihanProp
     | localProp
     | mapping
     | figure
     | model.graphicLike
     | model.noteLike
     | model.descLike)*,
    att.global.attributes,
    empty
  }
glyph =
  
  ## (character glyph) provides descriptive information about a character glyph. [5.2. Markup Constructs for Representation of Characters and Glyphs]
  element glyph {
    (glyphName
     | charProp
     | unicodeProp
     | unihanProp
     | localProp
     | mapping
     | figure
     | model.graphicLike
     | model.noteLike
     | model.descLike)*,
    att.global.attributes,
    empty
  }
localProp =
  
  ## (locally defined property) provides a locally defined character (or glyph) property. [5.2.1. Character Properties]
  element localProp {
    empty, att.global.attributes, att.gaijiProp.attributes, empty
  }
mapping =
  [
    a:documentation [
      "(character mapping) contains one or more characters which are related to the parent character or glyph in some respect, as specified by the "
      ns1:code [ "@type" ]
      " attribute. [5.2. Markup Constructs for Representation of Characters and Glyphs]"
    ]
  ]
  element mapping {
    macro.xtext, att.global.attributes, att.typed.attributes, empty
  }
unihanProp =
  
  ## (unihan property) holds the name and value of a normative or informative Unihan character (or glyph) property as part of its attributes. [5.2.1. Character Properties]
  element unihanProp {
    empty,
    att.global.attributes,
    att.gaijiProp.attribute.version,
    
    ## specifies the normalized name of a unicode han database (Unihan) property
    attribute name {
      
      ##
      "kZVariant"
      | 
        ##
        "kAccountingNumeric"
      | 
        ##
        "kBigFive"
      | 
        ##
        "kCCCII"
      | 
        ##
        "kCNS1986"
      | 
        ##
        "kCNS1992"
      | 
        ##
        "kCangjie"
      | 
        ##
        "kCantonese"
      | 
        ##
        "kCheungBauer"
      | 
        ##
        "kCheungBauerIndex"
      | 
        ##
        "kCihaiT"
      | 
        ##
        "kCompatibilityVariant"
      | 
        ##
        "kCowles"
      | 
        ##
        "kDaeJaweon"
      | 
        ##
        "kDefinition"
      | 
        ##
        "kEACC"
      | 
        ##
        "kFenn"
      | 
        ##
        "kFennIndex"
      | 
        ##
        "kFourCornerCode"
      | 
        ##
        "kFrequency"
      | 
        ##
        "kGB0"
      | 
        ##
        "kGB1"
      | 
        ##
        "kGB3"
      | 
        ##
        "kGB5"
      | 
        ##
        "kGB7"
      | 
        ##
        "kGB8"
      | 
        ##
        "kGSR"
      | 
        ##
        "kGradeLevel"
      | 
        ##
        "kHDZRadBreak"
      | 
        ##
        "kHKGlyph"
      | 
        ##
        "kHKSCS"
      | 
        ##
        "kHanYu"
      | 
        ##
        "kHangul"
      | 
        ##
        "kHanyuPinlu"
      | 
        ##
        "kHanyuPinyin"
      | 
        ##
        "kIBMJapan"
      | 
        ##
        "kIICore"
      | 
        ##
        "kIRGDaeJaweon"
      | 
        ##
        "kIRGDaiKanwaZiten"
      | 
        ##
        "kIRGHanyuDaZidian"
      | 
        ##
        "kIRGKangXi"
      | 
        ##
        "kIRG_GSource"
      | 
        ##
        "kIRG_HSource"
      | 
        ##
        "kIRG_JSource"
      | 
        ##
        "kIRG_KPSource"
      | 
        ##
        "kIRG_KSource"
      | 
        ##
        "kIRG_MSource"
      | 
        ##
        "kIRG_TSource"
      | 
        ##
        "kIRG_USource"
      | 
        ##
        "kIRG_VSource"
      | 
        ##
        "kJIS0213"
      | 
        ##
        "kJa"
      | 
        ##
        "kJapaneseKun"
      | 
        ##
        "kJapaneseOn"
      | 
        ##
        "kJinmeiyoKanji"
      | 
        ##
        "kJis0"
      | 
        ##
        "kJis1"
      | 
        ##
        "kJoyoKanji"
      | 
        ##
        "kKPS0"
      | 
        ##
        "kKPS1"
      | 
        ##
        "kKSC0"
      | 
        ##
        "kKSC1"
      | 
        ##
        "kKangXi"
      | 
        ##
        "kKarlgren"
      | 
        ##
        "kKorean"
      | 
        ##
        "kKoreanEducationHanja"
      | 
        ##
        "kKoreanName"
      | 
        ##
        "kLau"
      | 
        ##
        "kMainlandTelegraph"
      | 
        ##
        "kMandarin"
      | 
        ##
        "kMatthews"
      | 
        ##
        "kMeyerWempe"
      | 
        ##
        "kMorohashi"
      | 
        ##
        "kNelson"
      | 
        ##
        "kOtherNumeric"
      | 
        ##
        "kPhonetic"
      | 
        ##
        "kPrimaryNumeric"
      | 
        ##
        "kPseudoGB1"
      | 
        ##
        "kRSAdobe_Japan1_6"
      | 
        ##
        "kRSJapanese"
      | 
        ##
        "kRSKanWa"
      | 
        ##
        "kRSKangXi"
      | 
        ##
        "kRSKorean"
      | 
        ##
        "kRSUnicode"
      | 
        ##
        "kSBGY"
      | 
        ##
        "kSemanticVariant"
      | 
        ##
        "kSimplifiedVariant"
      | 
        ##
        "kSpecializedSemanticVariant"
      | 
        ##
        "kTGH"
      | 
        ##
        "kTaiwanTelegraph"
      | 
        ##
        "kTang"
      | 
        ##
        "kTotalStrokes"
      | 
        ##
        "kTraditionalVariant"
      | 
        ##
        "kVietnamese"
      | 
        ##
        "kXHC1983"
      | 
        ##
        "kXerox"
    },
    
    ## specifies the value of a named Unihan property
    attribute value {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    },
    empty
  }
unicodeProp =
  
  ## (unicode property) provides a Unicode property for a character (or glyph). [5.2.1. Character Properties]
  element unicodeProp {
    empty,
    att.global.attributes,
    att.gaijiProp.attribute.version,
    
    ## specifies the normalized name of a Unicode property.
    attribute name {
      
      ##
      "Age"
      | 
        ##
        "AHex"
      | 
        ##
        "Alpha"
      | 
        ##
        "Alphabetic"
      | 
        ##
        "ASCII_Hex_Digit"
      | 
        ##
        "bc"
      | 
        ##
        "Bidi_C"
      | 
        ##
        "Bidi_Class"
      | 
        ##
        "Bidi_Control"
      | 
        ##
        "Bidi_M"
      | 
        ##
        "Bidi_Mirrored"
      | 
        ##
        "Bidi_Mirroring_Glyph"
      | 
        ##
        "Bidi_Paired_Bracket"
      | 
        ##
        "Bidi_Paired_Bracket_Type"
      | 
        ##
        "blk"
      | 
        ##
        "Block"
      | 
        ##
        "bmg"
      | 
        ##
        "bpb"
      | 
        ##
        "bpt"
      | 
        ##
        "Canonical_Combining_Class"
      | 
        ##
        "Case_Folding"
      | 
        ##
        "Case_Ignorable"
      | 
        ##
        "Cased"
      | 
        ##
        "ccc"
      | 
        ##
        "CE"
      | 
        ##
        "cf"
      | 
        ##
        "Changes_When_Casefolded"
      | 
        ##
        "Changes_When_Casemapped"
      | 
        ##
        "Changes_When_Lowercased"
      | 
        ##
        "Changes_When_NFKC_Casefolded"
      | 
        ##
        "Changes_When_Titlecased"
      | 
        ##
        "Changes_When_Uppercased"
      | 
        ##
        "CI"
      | 
        ##
        "Comp_Ex"
      | 
        ##
        "Composition_Exclusion"
      | 
        ##
        "CWCF"
      | 
        ##
        "CWCM"
      | 
        ##
        "CWKCF"
      | 
        ##
        "CWL"
      | 
        ##
        "CWT"
      | 
        ##
        "CWU"
      | 
        ##
        "Dash"
      | 
        ##
        "Decomposition_Mapping"
      | 
        ##
        "Decomposition_Type"
      | 
        ##
        "Default_Ignorable_Code_Point"
      | 
        ##
        "Dep"
      | 
        ##
        "Deprecated"
      | 
        ##
        "DI"
      | 
        ##
        "Dia"
      | 
        ##
        "Diacritic"
      | 
        ##
        "dm"
      | 
        ##
        "dt"
      | 
        ##
        "ea"
      | 
        ##
        "East_Asian_Width"
      | 
        ##
        "EqUIdeo"
      | 
        ##
        "Equivalent_Unified_Ideograph"
      | 
        ##
        "Expands_On_NFC"
      | 
        ##
        "Expands_On_NFD"
      | 
        ##
        "Expands_On_NFKC"
      | 
        ##
        "Expands_On_NFKD"
      | 
        ##
        "Ext"
      | 
        ##
        "Extender"
      | 
        ##
        "FC_NFKC"
      | 
        ##
        "FC_NFKC_Closure"
      | 
        ##
        "Full_Composition_Exclusion"
      | 
        ##
        "gc"
      | 
        ##
        "GCB"
      | 
        ##
        "General_Category"
      | 
        ##
        "Gr_Base"
      | 
        ##
        "Gr_Ext"
      | 
        ##
        "Gr_Link"
      | 
        ##
        "Grapheme_Base"
      | 
        ##
        "Grapheme_Cluster_Break"
      | 
        ##
        "Grapheme_Extend"
      | 
        ##
        "Grapheme_Link"
      | 
        ##
        "Hangul_Syllable_Type"
      | 
        ##
        "Hex"
      | 
        ##
        "Hex_Digit"
      | 
        ##
        "hst"
      | 
        ##
        "Hyphen"
      | 
        ##
        "ID_Continue"
      | 
        ##
        "ID_Start"
      | 
        ##
        "IDC"
      | 
        ##
        "Ideo"
      | 
        ##
        "Ideographic"
      | 
        ##
        "IDS"
      | 
        ##
        "IDS_Binary_Operator"
      | 
        ##
        "IDS_Trinary_Operator"
      | 
        ##
        "IDSB"
      | 
        ##
        "IDST"
      | 
        ##
        "Indic_Positional_Category"
      | 
        ##
        "Indic_Syllabic_Category"
      | 
        ##
        "InPC"
      | 
        ##
        "InSC"
      | 
        ##
        "isc"
      | 
        ##
        "ISO_Comment"
      | 
        ##
        "Jamo_Short_Name"
      | 
        ##
        "jg"
      | 
        ##
        "Join_C"
      | 
        ##
        "Join_Control"
      | 
        ##
        "Joining_Group"
      | 
        ##
        "Joining_Type"
      | 
        ##
        "JSN"
      | 
        ##
        "jt"
      | 
        ##
        "kAccountingNumeric"
      | 
        ##
        "kCompatibilityVariant"
      | 
        ##
        "kIICore"
      | 
        ##
        "kIRG_GSource"
      | 
        ##
        "kIRG_HSource"
      | 
        ##
        "kIRG_JSource"
      | 
        ##
        "kIRG_KPSource"
      | 
        ##
        "kIRG_KSource"
      | 
        ##
        "kIRG_MSource"
      | 
        ##
        "kIRG_TSource"
      | 
        ##
        "kIRG_USource"
      | 
        ##
        "kIRG_VSource"
      | 
        ##
        "kOtherNumeric"
      | 
        ##
        "kPrimaryNumeric"
      | 
        ##
        "kRSUnicode"
      | 
        ##
        "lb"
      | 
        ##
        "lc"
      | 
        ##
        "Line_Break"
      | 
        ##
        "LOE"
      | 
        ##
        "Logical_Order_Exception"
      | 
        ##
        "Lower"
      | 
        ##
        "Lowercase"
      | 
        ##
        "Lowercase_Mapping"
      | 
        ##
        "Math"
      | 
        ##
        "na"
      | 
        ##
        "na1"
      | 
        ##
        "Name"
      | 
        ##
        "Name_Alias"
      | 
        ##
        "NChar"
      | 
        ##
        "NFC_QC"
      | 
        ##
        "NFC_Quick_Check"
      | 
        ##
        "NFD_QC"
      | 
        ##
        "NFD_Quick_Check"
      | 
        ##
        "NFKC_Casefold"
      | 
        ##
        "NFKC_CF"
      | 
        ##
        "NFKC_QC"
      | 
        ##
        "NFKC_Quick_Check"
      | 
        ##
        "NFKD_QC"
      | 
        ##
        "NFKD_Quick_Check"
      | 
        ##
        "Noncharacter_Code_Point"
      | 
        ##
        "nt"
      | 
        ##
        "Numeric_Type"
      | 
        ##
        "Numeric_Value"
      | 
        ##
        "nv"
      | 
        ##
        "OAlpha"
      | 
        ##
        "ODI"
      | 
        ##
        "OGr_Ext"
      | 
        ##
        "OIDC"
      | 
        ##
        "OIDS"
      | 
        ##
        "OLower"
      | 
        ##
        "OMath"
      | 
        ##
        "Other_Alphabetic"
      | 
        ##
        "Other_Default_Ignorable_Code_Point"
      | 
        ##
        "Other_Grapheme_Extend"
      | 
        ##
        "Other_ID_Continue"
      | 
        ##
        "Other_ID_Start"
      | 
        ##
        "Other_Lowercase"
      | 
        ##
        "Other_Math"
      | 
        ##
        "Other_Uppercase"
      | 
        ##
        "OUpper"
      | 
        ##
        "Pat_Syn"
      | 
        ##
        "Pat_WS"
      | 
        ##
        "Pattern_Syntax"
      | 
        ##
        "Pattern_White_Space"
      | 
        ##
        "PCM"
      | 
        ##
        "Prepended_Concatenation_Mark"
      | 
        ##
        "QMark"
      | 
        ##
        "Quotation_Mark"
      | 
        ##
        "Radical"
      | 
        ##
        "Regional_Indicator"
      | 
        ##
        "RI"
      | 
        ##
        "SB"
      | 
        ##
        "sc"
      | 
        ##
        "scf"
      | 
        ##
        "Script"
      | 
        ##
        "Script_Extensions"
      | 
        ##
        "scx"
      | 
        ##
        "SD"
      | 
        ##
        "Sentence_Break"
      | 
        ##
        "Sentence_Terminal"
      | 
        ##
        "Simple_Case_Folding"
      | 
        ##
        "Simple_Lowercase_Mapping"
      | 
        ##
        "Simple_Titlecase_Mapping"
      | 
        ##
        "Simple_Uppercase_Mapping"
      | 
        ##
        "slc"
      | 
        ##
        "Soft_Dotted"
      | 
        ##
        "stc"
      | 
        ##
        "STerm"
      | 
        ##
        "suc"
      | 
        ##
        "tc"
      | 
        ##
        "Term"
      | 
        ##
        "Terminal_Punctuation"
      | 
        ##
        "Titlecase_Mapping"
      | 
        ##
        "uc"
      | 
        ##
        "UIdeo"
      | 
        ##
        "Unicode_1_Name"
      | 
        ##
        "Unified_Ideograph"
      | 
        ##
        "Upper"
      | 
        ##
        "Uppercase"
      | 
        ##
        "Uppercase_Mapping"
      | 
        ##
        "Variation_Selector"
      | 
        ##
        "Vertical_Orientation"
      | 
        ##
        "vo"
      | 
        ##
        "VS"
      | 
        ##
        "WB"
      | 
        ##
        "White_Space"
      | 
        ##
        "Word_Break"
      | 
        ##
        "WSpace"
      | 
        ##
        "XID_Continue"
      | 
        ##
        "XID_Start"
      | 
        ##
        "XIDC"
      | 
        ##
        "XIDS"
      | 
        ##
        "XO_NFC"
      | 
        ##
        "XO_NFD"
      | 
        ##
        "XO_NFKC"
      | 
        ##
        "XO_NFKD"
    },
    
    ## specifies the value of a named Unicode property.
    attribute value { xsd:string },
    empty
  }
value =
  
  ## (value) contains a single value for some property, attribute, or other analysis. [5.2.1. Character Properties]
  element value { macro.xtext, att.global.attributes, empty }
unicodeName =
  
  ## (Unicode property name) contains the name of a registered Unicode normative or informative property. [5.2.1. Character Properties]
  element unicodeName {
    text,
    att.global.attributes,
    
    ## specifies the version number of the Unicode Standard in which this property name is defined.
    attribute version {
      xsd:token { pattern = "[\d]+(\.[\d]+){0,2}" }
    }?,
    empty
  }
localName =
  
  ## (locally-defined property name) contains a locally defined name for some property. [5.2.1. Character Properties]
  element localName { text, att.global.attributes, empty }
glyphName =
  
  ## (character glyph name) contains the name of a glyph, expressed following Unicode conventions for character names. [5.2. Markup Constructs for Representation of Characters and Glyphs]
  element glyphName { text, att.global.attributes, empty }
charProp =
  
  ## (character property) provides a name and value for some property of the parent character or glyph. [5.2. Markup Constructs for Representation of Characters and Glyphs]
  element charProp {
    ((unicodeName | localName), value),
    att.global.attributes,
    att.typed.attributes,
    empty
  }
charName =
  
  ## (character name) contains the name of a character, expressed following Unicode conventions. [5.2. Markup Constructs for Representation of Characters and Glyphs]
  element charName { text, att.global.attributes, empty }
start = TEI | msDesc | teiHeader
