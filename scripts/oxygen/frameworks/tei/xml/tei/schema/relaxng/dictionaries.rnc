namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.w3.org/1999/xhtml"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"

# Schema generated 2021-08-31T10:24:16Z
# Edition: VersionÂ 4.3.0. Last updated on
#         31st August 2021, revision b4f72b1ff
# This material is dual-licensed.
# [http://creativecommons.org/licenses/by/3.0/] Distributed under a Creative Commons Attribution 3.0 Unported License.  [http://www.opensource.org/licenses/BSD-2-Clause] Copyright 2021 TEI Consortium. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. This software is provided by the copyright holders and contributors "as is" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages which treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of TEI content in a software environment. For further information or clarification, please contact the  TEI
#           Consortium . Dictionaries

# Definitions from module dictionaries

# Set global predeclared macros

# Set predeclared macros

# 0. predeclared macros

# 1. classes
model.entryLike = superEntry | entry | entryFree
model.entryLike_alternation = superEntry | entry | entryFree
model.entryLike_sequence = superEntry, entry, entryFree
model.entryLike_sequenceOptional = superEntry?, entry?, entryFree?
model.entryLike_sequenceOptionalRepeatable =
  superEntry*, entry*, entryFree*
model.entryLike_sequenceRepeatable = superEntry+, entry+, entryFree+
att.entryLike.attributes =
  att.entryLike.attribute.type, att.typed.attribute.subtype
att.entryLike.attribute.type =
  
  ## indicates type of entry, in dictionaries with multiple types.
  ## Suggested values include: 1] main; 2] hom (homograph); 3] xref (cross reference); 4] affix; 5] abbr (abbreviation); 6] supplemental; 7] foreign
  [ a:defaultValue = "main" ]
  attribute type {
    
    ## a main entry (default).
    "main"
    | 
      ## (homograph) groups information relating to one homograph within an entry.
      "hom"
    | 
      ## (cross reference) a reduced entry whose only function is to point to another main entry (e.g. for forms of an irregular verb or for variant spellings: was pointing to be, or esthete to aesthete).
      "xref"
    | 
      ## an entry for a prefix, infix, or suffix.
      "affix"
    | 
      ## (abbreviation) an entry for an abbreviation.
      "abbr"
    | 
      ## a supplemental entry (for use in dictionaries which issue supplements to their main work in which they include updated information about entries).
      "supplemental"
    | 
      ## an entry for a foreign word in a monolingual dictionary.
      "foreign"
    | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.lexicographic.attributes =
  att.datcat.attributes,
  att.lexicographic.normalized.attributes,
  att.lexicographic.attribute.expand,
  att.lexicographic.attribute.split,
  att.lexicographic.attribute.value,
  att.lexicographic.attribute.location,
  att.lexicographic.attribute.mergedIn,
  att.lexicographic.attribute.opt
att.lexicographic.attribute.expand =
  
  ## (expand) gives an expanded form of information presented more concisely in the dictionary
  attribute expand { xsd:string }?
att.lexicographic.attribute.split =
  
  ## (split) gives the list of split values for a merged form
  attribute split { xsd:string }?
att.lexicographic.attribute.value =
  
  ## (value) gives a value which lacks any realization in the printed source text.
  attribute value { xsd:string }?
att.lexicographic.attribute.location =
  [
    a:documentation [
      "(location) indicates an "
      ns1:code [ "<anchor>" ]
      " element typically elsewhere in the document, but possibly in another document, which is the original location of this component."
    ]
  ]
  attribute location { xsd:anyURI }?
att.lexicographic.attribute.mergedIn =
  
  ## (merged into) gives a reference to another element, where the original appears as a merged form.
  attribute mergedIn { xsd:anyURI }?
att.lexicographic.attribute.opt =
  
  ## (optional) indicates whether the element is optional or not
  [ a:defaultValue = "false" ] attribute opt { xsd:boolean }?
model.morphLike = gram | gen | number | case | per | tns | mood | iType
model.morphLike_alternation =
  gram | gen | number | case | per | tns | mood | iType
model.morphLike_sequence =
  gram, gen, number, case, per, tns, mood, iType
model.morphLike_sequenceOptional =
  gram?, gen?, number?, case?, per?, tns?, mood?, iType?
model.morphLike_sequenceOptionalRepeatable =
  gram*, gen*, number*, case*, per*, tns*, mood*, iType*
model.morphLike_sequenceRepeatable =
  gram+, gen+, number+, case+, per+, tns+, mood+, iType+
model.lexicalRefinement = gramGrp | pos | subc | colloc | usg | lbl
model.lexicalRefinement_alternation =
  gramGrp | pos | subc | colloc | usg | lbl
model.lexicalRefinement_sequence = gramGrp, pos, subc, colloc, usg, lbl
model.lexicalRefinement_sequenceOptional =
  gramGrp?, pos?, subc?, colloc?, usg?, lbl?
model.lexicalRefinement_sequenceOptionalRepeatable =
  gramGrp*, pos*, subc*, colloc*, usg*, lbl*
model.lexicalRefinement_sequenceRepeatable =
  gramGrp+, pos+, subc+, colloc+, usg+, lbl+
model.gramPart = model.morphLike | model.lexicalRefinement
model.gramPart_alternation =
  model.morphLike_alternation | model.lexicalRefinement_alternation
model.gramPart_sequence =
  model.morphLike_sequence, model.lexicalRefinement_sequence
model.gramPart_sequenceOptional =
  model.morphLike_sequenceOptional?,
  model.lexicalRefinement_sequenceOptional?
model.gramPart_sequenceOptionalRepeatable =
  model.morphLike_sequenceOptionalRepeatable*,
  model.lexicalRefinement_sequenceOptionalRepeatable*
model.gramPart_sequenceRepeatable =
  model.morphLike_sequenceRepeatable+,
  model.lexicalRefinement_sequenceRepeatable+
model.formPart =
  form | orth | pron | hyph | syll | stress | model.gramPart
model.formPart_alternation =
  form | orth | pron | hyph | syll | stress | model.gramPart_alternation
model.formPart_sequence =
  form, orth, pron, hyph, syll, stress, model.gramPart_sequence
model.formPart_sequenceOptional =
  form?,
  orth?,
  pron?,
  hyph?,
  syll?,
  stress?,
  model.gramPart_sequenceOptional?
model.formPart_sequenceOptionalRepeatable =
  form*,
  orth*,
  pron*,
  hyph*,
  syll*,
  stress*,
  model.gramPart_sequenceOptionalRepeatable*
model.formPart_sequenceRepeatable =
  form+,
  orth+,
  pron+,
  hyph+,
  syll+,
  stress+,
  model.gramPart_sequenceRepeatable+
model.ptrLike.form = oRef | pRef
model.ptrLike.form_alternation = oRef | pRef
model.ptrLike.form_sequence = oRef, pRef
model.ptrLike.form_sequenceOptional = oRef?, pRef?
model.ptrLike.form_sequenceOptionalRepeatable = oRef*, pRef*
model.ptrLike.form_sequenceRepeatable = oRef+, pRef+
# 2. elements
case =
  
  ## (case) contains grammatical case information given by a dictionary for a given form. []
  element case { case.content, case.localattributes }
case.content = macro.paraContent
case.localattributes =
  att.global.attributes, att.lexicographic.attributes, empty
colloc =
  
  ## (collocate) contains any sequence of words that co-occur with the headword with significant frequency. []
  element colloc { colloc.content, colloc.localattributes }
colloc.content = macro.paraContent
colloc.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.typed.attributes,
  empty
def =
  
  ## (definition) contains definition text in a dictionary entry. []
  element def { def.content, def.localattributes }
def.content = macro.paraContent
def.localattributes =
  att.global.attributes, att.lexicographic.attributes, empty
dictScrap =
  
  ## (dictionary scrap) encloses a part of a dictionary entry in which other phrase-level dictionary elements are freely combined. [ ]
  element dictScrap { dictScrap.content, dictScrap.localattributes }
dictScrap.content =
  (text
   | model.gLike
   | model.entryPart
   | model.morphLike
   | model.phrase
   | model.inter
   | model.global)*
dictScrap.localattributes = att.global.attributes, empty
entry =
  
  ## (entry) contains a single structured entry in any kind of lexical resource, such as a dictionary or lexicon. [ ]
  element entry { entry.content, entry.localattributes }
entry.content =
  (hom
   | sense
   | pc
   | model.entryPart.top
   | model.global
   | model.ptrLike)+
entry.localattributes =
  att.global.attributes,
  att.entryLike.attributes,
  att.sortable.attributes,
  empty
entryFree =
  
  ## (unstructured entry) contains a single unstructured entry in any kind of lexical resource, such as a dictionary or lexicon. [ ]
  element entryFree { entryFree.content, entryFree.localattributes }
entryFree.content =
  (text
   | model.gLike
   | model.entryPart
   | model.morphLike
   | model.phrase
   | model.inter
   | model.global)*
entryFree.localattributes =
  att.global.attributes,
  att.entryLike.attributes,
  att.lexicographic.attributes,
  att.sortable.attributes,
  empty
etym =
  
  ## (etymology) encloses the etymological information in a dictionary entry. []
  element etym { etym.content, etym.localattributes }
etym.content =
  (text
   | model.gLike
   | model.global
   | model.inter
   | model.phrase
   | def
   | etym
   | gramGrp
   | lbl
   | usg
   | xr)*
etym.localattributes =
  att.global.attributes,
  att.typed.attributes,
  att.lexicographic.attributes,
  empty
form =
  
  ## (form information group) groups all the information on the written and spoken forms of one headword. []
  element form { form.content, form.localattributes }
form.content =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.formPart
   | model.global)*
form.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.typed.attribute.subtype,
  
  ## classifies form as simple, compound, etc.
  ## Suggested values include: 1] simple; 2] lemma; 3] variant; 4] compound; 5] derivative; 6] inflected; 7] phrase
  attribute type {
    
    ## single free lexical item
    "simple"
    | 
      ## the headword itself
      "lemma"
    | 
      ## a variant form
      "variant"
    | 
      ## word formed from simple lexical items
      "compound"
    | 
      ## word derived from headword
      "derivative"
    | 
      ## word in other than usual dictionary form
      "inflected"
    | 
      ## multiple-word lexical item
      "phrase"
    | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
gen =
  
  ## (gender) identifies the morphological gender of a lexical item, as given in the dictionary. []
  element gen { gen.content, gen.localattributes }
gen.content = macro.paraContent
gen.localattributes =
  att.global.attributes, att.lexicographic.attributes, empty
gram =
  
  ## (grammatical information) within an entry in a dictionary or a terminological data file, contains grammatical information relating to a term, word, or form. []
  element gram { gram.content, gram.localattributes }
gram.content = macro.paraContent
gram.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.typed.attribute.subtype,
  [
    a:documentation [
      "classifies the grammatical information given according to some convenient typologyâin the case of terminological information, preferably the dictionary of data element types specified in "
      ns1:a [ href = "http://www.isocat.org/" "ISO 12620" ]
      ".\x{a}" ~
      "Sample values include: 1] pos (part of speech); 2] gen (gender); 3] num (number); 4] animate; 5] proper"
    ]
  ]
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
gramGrp =
  [
    a:documentation [
      "(grammatical information group) groups morpho-syntactic information about a lexical item, e.g. "
      ns1:code [ "<pos>" ]
      ", "
      ns1:code [ "<gen>" ]
      ", "
      ns1:code [ "<number>" ]
      ", "
      ns1:code [ "<case>" ]
      ", or "
      ns1:code [ "<iType>" ]
      " (inflectional class). []"
    ]
  ]
  element gramGrp { gramGrp.content, gramGrp.localattributes }
gramGrp.content =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.gramPart
   | model.global)*
gramGrp.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.typed.attributes,
  empty
hom =
  
  ## (homograph) groups information relating to one homograph within an entry. []
  element hom { hom.content, hom.localattributes }
hom.content = (sense | pc | model.entryPart.top | model.global)*
hom.localattributes =
  att.global.attributes, att.lexicographic.attributes, empty
hyph =
  
  ## (hyphenation) contains a hyphenated form of a dictionary headword, or hyphenation information in some other form. []
  element hyph { hyph.content, hyph.localattributes }
hyph.content = macro.paraContent
hyph.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.notated.attributes,
  empty
iType =
  
  ## (inflectional class) indicates the inflectional class associated with a lexical item. []
  element iType { iType.content, iType.localattributes }
iType.content = macro.paraContent
iType.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.typed.attribute.subtype,
  
  ## indicates the type of indicator used to specify the inflection class, when it is necessary to distinguish between the usual abbreviated indications (e.g. inv) and other kinds of indicators, such as special codes referring to conjugation patterns, etc.
  ## Sample values include: 1] abbrev; 2] verbTable
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
lang =
  
  ## (language name) contains the name of a language mentioned in etymological or other linguistic discussion. []
  element lang { lang.content, lang.localattributes }
lang.content = macro.paraContent
lang.localattributes =
  att.global.attributes, att.lexicographic.attributes, empty
lbl =
  
  ## (label) contains a label for a form, example, translation, or other piece of information, e.g. abbreviation for, contraction of, literally, approximately, synonyms:, etc. [  ]
  element lbl { lbl.content, lbl.localattributes }
lbl.content = macro.paraContent
lbl.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.typed.attribute.subtype,
  
  ## classifies the label using any convenient typology.
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
mood =
  
  ## (mood) contains information about the grammatical mood of verbs (e.g. indicative, subjunctive, imperative). []
  element mood { mood.content, mood.localattributes }
mood.content = macro.paraContent
mood.localattributes =
  att.global.attributes, att.lexicographic.attributes, empty
number =
  
  ## (number) indicates grammatical number associated with a form, as given in a dictionary. [ ]
  element number { number.content, number.localattributes }
number.content = macro.paraContent
number.localattributes =
  att.global.attributes, att.lexicographic.attributes, empty
oRef =
  
  ## (orthographic-form reference) in a dictionary example, indicates a reference to the orthographic form(s) of the headword. []
  element oRef { oRef.content, oRef.localattributes }
oRef.content = (text | model.gLike | oRef)*
oRef.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.pointing.attributes,
  att.notated.attributes,
  att.typed.attribute.subtype,
  
  ## indicates the kind of typographic modification made to the headword in the reference.
  ## Sample values include: 1] cap (capital); 2] noHyph (no hyphen)
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
orth =
  
  ## (orthographic form) gives the orthographic form of a dictionary headword. []
  element orth { orth.content, orth.localattributes }
orth.content = macro.paraContent
orth.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.partials.attributes,
  att.notated.attributes,
  att.typed.attribute.subtype,
  
  ## gives the type of spelling.
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
pRef =
  
  ## (pronunciation reference) in a dictionary example, indicates a reference to the pronunciation(s) of the headword. []
  element pRef { pRef.content, pRef.localattributes }
pRef.content = (text | model.gLike | pRef)*
pRef.localattributes =
  att.global.attributes,
  att.pointing.attributes,
  att.lexicographic.attributes,
  att.notated.attributes,
  empty
per =
  
  ## (person) contains an indication of the grammatical person (1st, 2nd, 3rd, etc.) associated with a given inflected form in a dictionary. []
  element per { per.content, per.localattributes }
per.content = macro.paraContent
per.localattributes =
  att.global.attributes, att.lexicographic.attributes, empty
pos =
  
  ## (part of speech) indicates the part of speech assigned to a dictionary headword such as noun, verb, or adjective. []
  element pos { pos.content, pos.localattributes }
pos.content = macro.paraContent
pos.localattributes =
  att.global.attributes, att.lexicographic.attributes, empty
pron =
  
  ## (pronunciation) contains the pronunciation(s) of the word. []
  element pron { pron.content, pron.localattributes }
pron.content = macro.paraContent
pron.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.notated.attributes,
  att.partials.attributes,
  att.typed.attributes,
  empty
re =
  
  ## (related entry) contains a dictionary entry for a lexical item related to the headword, such as a compound phrase or derived form, embedded inside a larger entry. []
  element re { re.content, re.localattributes }
re.content =
  (text
   | model.gLike
   | sense
   | model.entryPart.top
   | model.phrase
   | model.global)*
re.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.typed.attributes,
  empty
sense =
  
  ## groups together all information relating to one word sense in a dictionary entry, for example definitions, examples, and translation equivalents. []
  element sense { sense.content, sense.localattributes }
sense.content =
  (text
   | model.gLike
   | sense
   | model.entryPart.top
   | model.phrase
   | model.global)*
sense.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  
  ## gives the nesting depth of this sense.
  attribute level { xsd:nonNegativeInteger }?,
  empty
stress =
  
  ## (stress) contains the stress pattern for a dictionary headword, if given separately. []
  element stress { stress.content, stress.localattributes }
stress.content = macro.paraContent
stress.localattributes =
  att.global.attributes, att.notated.attributes, empty
subc =
  
  ## (subcategorization) contains subcategorization information (transitive/intransitive, countable/non-countable, etc.) []
  element subc { subc.content, subc.localattributes }
subc.content = macro.paraContent
subc.localattributes =
  att.global.attributes, att.lexicographic.attributes, empty
superEntry =
  
  ## (super entry) groups a sequence of entries within any kind of lexical resource, such as a dictionary or lexicon which function as a single unit, for example a set of homographs. []
  element superEntry { superEntry.content, superEntry.localattributes }
superEntry.content = (form?, entry+) | dictScrap
superEntry.localattributes =
  att.global.attributes,
  att.entryLike.attributes,
  att.sortable.attributes,
  empty
syll =
  
  ## (syllabification) contains the syllabification of the headword. []
  element syll { syll.content, syll.localattributes }
syll.content = macro.paraContent
syll.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.notated.attributes,
  empty
tns =
  
  ## (tense) indicates the grammatical tense associated with a given inflected form in a dictionary. []
  element tns { tns.content, tns.localattributes }
tns.content = macro.paraContent
tns.localattributes =
  att.global.attributes, att.lexicographic.attributes, empty
usg =
  
  ## (usage) contains usage information in a dictionary entry. []
  element usg { usg.content, usg.localattributes }
usg.content = macro.paraContent
usg.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.typed.attribute.subtype,
  
  ## classifies the usage information using any convenient typology.
  ## Sample values include: 1] geo (geographic); 2] time; 3] dom (domain); 4] register (register); 5] style; 6] plev (preference level); 7] lang (language); 8] gram (grammatical); 9] syn (synonym); 10] hyper (hypernym); 11] colloc (collocation); 12] comp (complement); 13] obj (object); 14] subj (subject); 15] verb; 16] hint
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
xr =
  
  ## (cross-reference phrase) contains a phrase, sentence, or icon referring the reader to some other location in this or another text. []
  element xr { xr.content, xr.localattributes }
xr.content =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | usg
   | lbl
   | model.global)*
xr.localattributes =
  att.global.attributes,
  att.lexicographic.attributes,
  att.typed.attribute.subtype,
  
  ## indicates the type of cross reference, using any convenient typology.
  ## Sample values include: 1] syn (synonym); 2] etym (etymological); 3] cf (compare or consult); 4] illus (illustration)
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
# 3. macros
