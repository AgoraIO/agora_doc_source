namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.w3.org/1999/xhtml"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"

# Schema generated 2021-08-31T10:24:16Z
# Edition: VersionÂ 4.3.0. Last updated on
#         31st August 2021, revision b4f72b1ff
# This material is dual-licensed.
# [http://creativecommons.org/licenses/by/3.0/] Distributed under a Creative Commons Attribution 3.0 Unported License.  [http://www.opensource.org/licenses/BSD-2-Clause] Copyright 2021 TEI Consortium. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. This software is provided by the copyright holders and contributors "as is" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages which treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of TEI content in a software environment. For further information or clarification, please contact the  TEI
#           Consortium . Manuscript Description

# Definitions from module msdescription

# Set global predeclared macros

# Set predeclared macros

# 0. predeclared macros

# 1. classes
model.physDescPart =
  objectDesc
  | handDesc
  | typeDesc
  | scriptDesc
  | musicNotation
  | decoDesc
  | additions
  | bindingDesc
  | sealDesc
  | accMat
model.physDescPart_alternation =
  objectDesc
  | handDesc
  | typeDesc
  | scriptDesc
  | musicNotation
  | decoDesc
  | additions
  | bindingDesc
  | sealDesc
  | accMat
model.physDescPart_sequence =
  objectDesc,
  handDesc,
  typeDesc,
  scriptDesc,
  musicNotation,
  decoDesc,
  additions,
  bindingDesc,
  sealDesc,
  accMat
model.physDescPart_sequenceOptional =
  objectDesc?,
  handDesc?,
  typeDesc?,
  scriptDesc?,
  musicNotation?,
  decoDesc?,
  additions?,
  bindingDesc?,
  sealDesc?,
  accMat?
model.physDescPart_sequenceOptionalRepeatable =
  objectDesc*,
  handDesc*,
  typeDesc*,
  scriptDesc*,
  musicNotation*,
  decoDesc*,
  additions*,
  bindingDesc*,
  sealDesc*,
  accMat*
model.physDescPart_sequenceRepeatable =
  objectDesc+,
  handDesc+,
  typeDesc+,
  scriptDesc+,
  musicNotation+,
  decoDesc+,
  additions+,
  bindingDesc+,
  sealDesc+,
  accMat+
att.msExcerpt.attributes = att.msExcerpt.attribute.defective
att.msExcerpt.attribute.defective =
  
  ## indicates whether the passage being quoted is defective, i.e. incomplete through loss or damage.
  attribute defective {
    xsd:boolean
    | (
       ##
       "unknown"
       | 
         ##
         "inapplicable")
  }?
att.msClass.attributes = att.msClass.attribute.class
att.msClass.attribute.class =
  
  ## identifies the text types or classifications applicable to this item by pointing to other elements or resources defining the classification concerned. 
  attribute class {
    list { xsd:anyURI+ }
  }?
# 2. elements
accMat =
  
  ## (accompanying material) contains details of any significant additional material which may be closely associated with the manuscript or object being described, such as non-contemporaneous documents or fragments bound in with it at some earlier historical period. []
  element accMat { accMat.content, accMat.localattributes }
accMat.content = macro.specialPara
accMat.localattributes =
  att.global.attributes, att.typed.attributes, empty
acquisition =
  
  ## (acquisition) contains any descriptive or other information concerning the process by which a manuscript or manuscript part or other object entered the holding institution. []
  element acquisition {
    acquisition.content, acquisition.localattributes
  }
acquisition.content = macro.specialPara
acquisition.localattributes =
  att.global.attributes, att.datable.attributes, empty
additional =
  
  ## (additional) groups additional information, combining bibliographic information about a manuscript or other object, or surrogate copies of it, with curatorial or administrative information. []
  element additional { additional.content, additional.localattributes }
additional.content = adminInfo?, surrogates?, listBibl?
additional.localattributes = att.global.attributes, empty
additions =
  
  ## (additions) contains a description of any significant additions found within a manuscript or other object, such as marginalia or other annotations. []
  element additions { additions.content, additions.localattributes }
additions.content = macro.specialPara
additions.localattributes = att.global.attributes, empty
adminInfo =
  
  ## (administrative information) contains information about the present custody and availability of the manuscript or other object, and also about the record description itself. []
  element adminInfo { adminInfo.content, adminInfo.localattributes }
adminInfo.content =
  recordHist?, availability?, custodialHist?, model.noteLike?
adminInfo.localattributes = att.global.attributes, empty
altIdentifier =
  
  ## (alternative identifier) contains an alternative or former structured identifier used for a manuscript or other object, such as a former catalogue number. []
  element altIdentifier {
    altIdentifier.content, altIdentifier.localattributes
  }
altIdentifier.content =
  placeName?,
  bloc?,
  country?,
  region?,
  settlement?,
  district?,
  geogName?,
  institution?,
  repository?,
  collection?,
  idno,
  note?
altIdentifier.localattributes =
  att.global.attributes,
  att.typed.attributes,
  att.datable.attributes,
  empty
binding =
  
  ## (binding) contains a description of one binding, i.e. type of covering, boards, etc. applied to a manuscript or other object. []
  element binding { binding.content, binding.localattributes }
binding.content = (model.pLike | condition | decoNote)+
binding.localattributes =
  att.global.attributes,
  att.datable.attributes,
  
  ## (contemporary) specifies whether or not the binding is contemporary with the majority of its contents
  attribute contemporary {
    xsd:boolean
    | (
       ##
       "unknown"
       | 
         ##
         "inapplicable")
  }?,
  empty
bindingDesc =
  [
    a:documentation [
      "(binding description) describes the present and former bindings of a manuscript or other object, either as a series of paragraphs or as a series of distinct "
      ns1:code [ "<binding>" ]
      " elements, one for each binding of the manuscript. []"
    ]
  ]
  element bindingDesc {
    bindingDesc.content, bindingDesc.localattributes
  }
bindingDesc.content = (model.pLike | decoNote | condition)+ | binding+
bindingDesc.localattributes = att.global.attributes, empty
catchwords =
  
  ## (catchwords) describes the system used to ensure correct ordering of the quires or similar making up a codex, incunable, or other object typically by means of annotations at the foot of the page. []
  element catchwords { catchwords.content, catchwords.localattributes }
catchwords.content =
  macro.phraseSeq
  >> sch:pattern [
       id = "catchwords-catchword_in_msDesc-constraint-assert-16"
       "\x{a}" ~
       "         "
       sch:rule [
         context = "tei:catchwords"
         "\x{a}" ~
         "            "
         sch:assert [
           test = "ancestor::tei:msDesc or ancestor::tei:egXML"
           "The "
           sch:name [ ]
           " element should not be used outside of msDesc."
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
catchwords.localattributes = att.global.attributes, empty
collation =
  
  ## (collation) contains a description of how the leaves, bifolia, or similar objects are physically arranged. []
  element collation { collation.content, collation.localattributes }
collation.content = macro.specialPara
collation.localattributes = att.global.attributes, empty
collection =
  
  ## (collection) contains the name of a collection of manuscripts or other objects, not necessarily located within a single repository. []
  element collection { collection.content, collection.localattributes }
collection.content = macro.phraseSeq.limited
collection.localattributes =
  att.global.attributes,
  att.naming.attributes,
  att.typed.attributes,
  empty
colophon =
  
  ## (colophon) contains the colophon of an item: that is, a statement providing information regarding the date, place, agency, or reason for production of the manuscript or other object. []
  element colophon { colophon.content, colophon.localattributes }
colophon.content = macro.phraseSeq
colophon.localattributes =
  att.global.attributes, att.msExcerpt.attributes, empty
condition =
  
  ## (condition) contains a description of the physical condition of the manuscript or object. []
  element condition { condition.content, condition.localattributes }
condition.content = macro.specialPara
condition.localattributes = att.global.attributes, empty
custEvent =
  
  ## (custodial event) describes a single event during the custodial history of a manuscript or other object. []
  element custEvent { custEvent.content, custEvent.localattributes }
custEvent.content = macro.specialPara
custEvent.localattributes =
  att.global.attributes,
  att.datable.attributes,
  att.typed.attributes,
  empty
custodialHist =
  
  ## (custodial history) contains a description of a manuscript or other object's custodial history, either as running prose or as a series of dated custodial events. []
  element custodialHist {
    custodialHist.content, custodialHist.localattributes
  }
custodialHist.content = model.pLike+ | custEvent+
custodialHist.localattributes = att.global.attributes, empty
decoDesc =
  [
    a:documentation [
      "(decoration description) contains a description of the decoration of a manuscript or other object, either as in paragraphs, or as one or more "
      ns1:code [ "<decoNote>" ]
      " elements. []"
    ]
  ]
  element decoDesc { decoDesc.content, decoDesc.localattributes }
decoDesc.content = model.pLike+ | (summary?, decoNote+)
decoDesc.localattributes = att.global.attributes, empty
decoNote =
  
  ## (note on decoration) contains a note describing either a decorative component of a manuscript or other object, or a fairly homogenous class of such components. []
  element decoNote { decoNote.content, decoNote.localattributes }
decoNote.content = macro.specialPara
decoNote.localattributes =
  att.global.attributes, att.typed.attributes, empty
depth =
  [
    a:documentation [
      "(depth) contains a measurement from the front to the back of an object, perpendicular to the measurement given by the "
      ns1:code [ "<width>" ]
      " element. []"
    ]
  ]
  element depth { depth.content, depth.localattributes }
depth.content = macro.xtext
depth.localattributes =
  att.global.attributes, att.dimensions.attributes, empty
dim =
  
  ## contains any single measurement forming part of a dimensional specification of some sort. []
  element dim { dim.content, dim.localattributes }
dim.content = macro.xtext
dim.localattributes =
  att.global.attributes,
  att.typed.attributes,
  att.dimensions.attributes,
  empty
dimensions =
  
  ## (dimensions) contains a dimensional specification. []
  element dimensions { dimensions.content, dimensions.localattributes }
dimensions.content =
  ((dim | model.dimLike)*)
  >> sch:pattern [
       id = "dimensions-duplicateDim-constraint-report-16"
       "\x{a}" ~
       "         "
       sch:rule [
         context = "tei:dimensions"
         "\x{a}" ~
         "            "
         sch:report [
           test = "count(tei:width)> 1"
           "\x{a}" ~
           "The element "
           sch:name [ ]
           " may appear once only\x{a}" ~
           "      "
         ]
         "\x{a}" ~
         "            "
         sch:report [
           test = "count(tei:height)> 1"
           "\x{a}" ~
           "The element "
           sch:name [ ]
           " may appear once only\x{a}" ~
           "      "
         ]
         "\x{a}" ~
         "            "
         sch:report [
           test = "count(tei:depth)> 1"
           "\x{a}" ~
           "The element "
           sch:name [ ]
           " may appear once only\x{a}" ~
           "      "
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
dimensions.localattributes =
  att.global.attributes,
  att.dimensions.attributes,
  att.typed.attribute.subtype,
  
  ## indicates which aspect of the object is being measured.
  ## Sample values include: 1] leaves; 2] ruled; 3] pricked; 4] written; 5] miniatures; 6] binding; 7] box
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
explicit =
  
  ## (explicit) contains the explicit of a item, that is, the closing words of the text proper, exclusive of any rubric or colophon which might follow it. []
  element explicit { explicit.content, explicit.localattributes }
explicit.content = macro.phraseSeq
explicit.localattributes =
  att.global.attributes,
  att.typed.attributes,
  att.msExcerpt.attributes,
  empty
filiation =
  
  ## (filiation) contains information concerning the manuscript or other object's filiation, i.e. its relationship to other surviving manuscripts or other objects of the same text or contents, its protographs, antigraphs and apographs. []
  element filiation { filiation.content, filiation.localattributes }
filiation.content = macro.specialPara
filiation.localattributes =
  att.global.attributes, att.typed.attributes, empty
finalRubric =
  
  ## (final rubric) contains the string of words that denotes the end of a text division, often with an assertion as to its author and title, usually set off from the text itself by red ink, by a different size or type of script, or by some other such visual device. []
  element finalRubric {
    finalRubric.content, finalRubric.localattributes
  }
finalRubric.content = macro.phraseSeq
finalRubric.localattributes =
  att.global.attributes,
  att.typed.attributes,
  att.msExcerpt.attributes,
  empty
foliation =
  
  ## (foliation) describes the numbering system or systems used to count the leaves or pages in a codex or similar object. []
  element foliation { foliation.content, foliation.localattributes }
foliation.content = macro.specialPara
foliation.localattributes = att.global.attributes, empty
handDesc =
  
  ## (description of hands) contains a description of all the different hands used in a manuscript or other object. []
  element handDesc { handDesc.content, handDesc.localattributes }
handDesc.content = model.pLike+ | (summary?, handNote+)
handDesc.localattributes =
  att.global.attributes,
  
  ## (hands) specifies the number of distinct hands identified within the manuscript
  attribute hands { xsd:nonNegativeInteger }?,
  empty
height =
  
  ## (height) contains a measurement measured along the axis at a right angle to the bottom of the object. []
  element height { height.content, height.localattributes }
height.content = macro.xtext
height.localattributes =
  att.global.attributes, att.dimensions.attributes, empty
heraldry =
  
  ## (heraldry) contains a heraldic formula or phrase, typically found as part of a blazon, coat of arms, etc.  []
  element heraldry { heraldry.content, heraldry.localattributes }
heraldry.content = macro.phraseSeq
heraldry.localattributes = att.global.attributes, empty
history =
  
  ## (history) groups elements describing the full history of a manuscript, manuscript part, or other object. []
  element history { history.content, history.localattributes }
history.content =
  model.pLike+ | (summary?, origin?, provenance*, acquisition?)
history.localattributes = att.global.attributes, empty
incipit =
  
  ## contains the incipit of a manuscript or similar object item, that is the opening words of the text proper, exclusive of any rubric which might precede it, of sufficient length to identify the work uniquely; such incipits were, in former times, frequently used a means of reference to a work, in place of a title. []
  element incipit { incipit.content, incipit.localattributes }
incipit.content = macro.phraseSeq
incipit.localattributes =
  att.global.attributes,
  att.typed.attributes,
  att.msExcerpt.attributes,
  empty
institution =
  
  ## (institution) contains the name of an organization such as a university or library, with which a manuscript or other object is identified, generally its holding institution. []
  element institution {
    institution.content, institution.localattributes
  }
institution.content = macro.phraseSeq.limited
institution.localattributes =
  att.global.attributes, att.naming.attributes, empty
layout =
  
  ## (layout) describes how text is laid out on the page or surface of the object, including information about any ruling, pricking, or other evidence of page-preparation techniques. []
  element layout { layout.content, layout.localattributes }
layout.content = macro.specialPara
layout.localattributes =
  att.global.attributes,
  
  ## (columns) specifies the number of columns per page
  attribute columns {
    list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
  }?,
  
  ## (textual streams) indicates the number of streams per page, each of which contains an independent textual stream
  attribute streams {
    list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
  }?,
  
  ## (ruled lines) specifies the number of ruled lines per column
  attribute ruledLines {
    list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
  }?,
  
  ## (written lines) specifies the number of written lines per column
  attribute writtenLines {
    list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
  }?,
  empty
layoutDesc =
  
  ## (layout description) collects the set of layout descriptions applicable to a manuscript or other object. []
  element layoutDesc { layoutDesc.content, layoutDesc.localattributes }
layoutDesc.content = model.pLike+ | (summary?, layout+)
layoutDesc.localattributes = att.global.attributes, empty
locus =
  
  ## (locus) defines a location within a manuscript, manuscript part, or other object typically as a (possibly discontinuous) sequence of folio references. []
  element locus { locus.content, locus.localattributes }
locus.content = (text | model.gLike | hi | locus)*
locus.localattributes =
  att.global.attributes,
  att.pointing.attributes,
  att.typed.attributes,
  [
    a:documentation [
      "(scheme) identifies the foliation scheme in terms of which the location is being specified by pointing to some "
      ns1:code [ "<foliation>" ]
      " element defining it, or to some other equivalent resource."
    ]
  ]
  attribute scheme { xsd:anyURI }?,
  
  ## (from) specifies the starting point of the location in a normalized form, typically a page number.
  attribute from {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  
  ## (to) specifies the end-point of the location in a normalized form, typically as a page number.
  attribute to {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
locusGrp =
  
  ## (locus group) groups a number of locations which together form a distinct but discontinuous item within a manuscript, manuscript part, or other object. []
  element locusGrp { locusGrp.content, locusGrp.localattributes }
locusGrp.content = locus+
locusGrp.localattributes =
  att.global.attributes,
  [
    a:documentation [
      "(scheme) identifies the foliation scheme in terms of which all the locations contained by the group are specified by pointing to some "
      ns1:code [ "<foliation>" ]
      " element defining it, or to some other equivalent resource."
    ]
  ]
  attribute scheme { xsd:anyURI }?,
  empty
material =
  
  ## (material) contains a word or phrase describing the material of which the object being described is composed. []
  element material { material.content, material.localattributes }
material.content = macro.phraseSeq
material.localattributes =
  att.global.attributes,
  att.canonical.attributes,
  att.typed.attributes,
  
  ## describes the function or use of the material in relation to the object as a whole.
  ## Sample values include: 1] binding; 2] endband; 3] slipcase; 4] support; 5] tie
  attribute function {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  
  ## identifies one or more elements to which the metamark applies.
  attribute target {
    list { xsd:anyURI+ }
  }?,
  empty
msContents =
  
  ## (manuscript contents) describes the intellectual content of a manuscript, manuscript part, or other object either as a series of paragraphs or as a series of structured manuscript items. []
  element msContents { msContents.content, msContents.localattributes }
msContents.content =
  model.pLike+
  | (summary?, textLang?, titlePage?, (msItem | msItemStruct)*)
msContents.localattributes =
  att.global.attributes,
  att.msExcerpt.attributes,
  att.msClass.attributes,
  empty
msDesc =
  
  ## (manuscript description) contains a description of a single identifiable manuscript or other text-bearing object such as early printed books. []
  element msDesc { msDesc.content, msDesc.localattributes }
msDesc.content =
  msIdentifier,
  model.headLike*,
  (model.pLike+
   | (msContents?,
      physDesc?,
      history?,
      additional?,
      (msPart* | msFrag*)))
msDesc.localattributes =
  att.global.attributes,
  att.sortable.attributes,
  att.typed.attributes,
  att.declaring.attributes,
  att.docStatus.attributes,
  empty
msFrag =
  
  ## (manuscript fragment) contains information about a fragment described in relation to a prior context, typically as a description of a virtual reconstruction of a manuscript or other object whose fragments were catalogued separately []
  element msFrag { msFrag.content, msFrag.localattributes }
msFrag.content =
  (altIdentifier | msIdentifier),
  model.headLike*,
  (model.pLike+ | (msContents?, physDesc?, history?, additional?))
msFrag.localattributes =
  att.global.attributes, att.typed.attributes, empty
msIdentifier =
  
  ## (manuscript identifier) contains the information required to identify the manuscript or similar object being described. []
  element msIdentifier {
    msIdentifier.content, msIdentifier.localattributes
  }
msIdentifier.content =
  ((placeName?,
    bloc?,
    country?,
    region?,
    settlement?,
    district?,
    geogName?,
    institution?,
    repository?,
    collection*,
    idno*),
   (msName | objectName | altIdentifier)*)
  >> sch:pattern [
       id = "msIdentifier-msId_minimal-constraint-report-19"
       "\x{a}" ~
       "         "
       sch:rule [
         context = "tei:msIdentifier"
         "\x{a}" ~
         "            "
         sch:report [
           test =
             "not(parent::tei:msPart) and (local-name(*[1])='idno' or local-name(*[1])='altIdentifier' or normalize-space(.)='')"
           "An msIdentifier must contain either a repository or location."
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
msIdentifier.localattributes = att.global.attributes, empty
msItem =
  
  ## (manuscript item) describes an individual work or item within the intellectual content of a manuscript, manuscript part, or other object. []
  element msItem { msItem.content, msItem.localattributes }
msItem.content =
  (locus | locusGrp)*,
  (model.pLike+
   | (model.titlepagePart | model.msItemPart | model.global)+)
msItem.localattributes =
  att.global.attributes,
  att.msExcerpt.attributes,
  att.msClass.attributes,
  empty
msItemStruct =
  
  ## (structured manuscript item) contains a structured description for an individual work or item within the intellectual content of a manuscript, manuscript part, or other object. []
  element msItemStruct {
    msItemStruct.content, msItemStruct.localattributes
  }
msItemStruct.content =
  (locus | locusGrp)?,
  (model.pLike+
   | (author*,
      respStmt*,
      title*,
      rubric?,
      incipit?,
      msItemStruct*,
      explicit?,
      finalRubric?,
      colophon*,
      decoNote*,
      listBibl*,
      (bibl | biblStruct)*,
      filiation?,
      model.noteLike*,
      textLang?))
msItemStruct.localattributes =
  att.global.attributes,
  att.msExcerpt.attributes,
  att.msClass.attributes,
  empty
msName =
  
  ## (alternative name) contains any form of unstructured alternative name used for a manuscript or other object, such as an ocellus nominum, or nickname. []
  element msName { msName.content, msName.localattributes }
msName.content = (text | model.gLike | rs | name)*
msName.localattributes =
  att.global.attributes, att.typed.attributes, empty
msPart =
  
  ## (manuscript part) contains information about an originally distinct manuscript or part of a manuscript, which is now part of a composite manuscript. []
  element msPart { msPart.content, msPart.localattributes }
msPart.content =
  msIdentifier,
  model.headLike*,
  (model.pLike+
   | (msContents?, physDesc?, history?, additional?, msPart*))
msPart.localattributes =
  att.global.attributes, att.typed.attributes, empty
musicNotation =
  
  ## (music notation) contains description of type of musical notation. []
  element musicNotation {
    musicNotation.content, musicNotation.localattributes
  }
musicNotation.content = macro.specialPara
musicNotation.localattributes = att.global.attributes, empty
objectDesc =
  
  ## (object description) contains a description of the physical components making up the object which is being described. []
  element objectDesc { objectDesc.content, objectDesc.localattributes }
objectDesc.content = model.pLike+ | (supportDesc?, layoutDesc?)
objectDesc.localattributes =
  att.global.attributes,
  
  ## (form) a short project-specific name identifying the physical form of the carrier, for example as a codex, roll, fragment, partial leaf, cutting etc.
  attribute form {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
objectType =
  
  ## (object type) contains a word or phrase describing the type of object being referred to. []
  element objectType { objectType.content, objectType.localattributes }
objectType.content = macro.phraseSeq
objectType.localattributes =
  att.global.attributes, att.canonical.attributes, empty
origDate =
  
  ## (origin date) contains any form of date, used to identify the date of origin for a manuscript, manuscript part, or other object. []
  element origDate { origDate.content, origDate.localattributes }
origDate.content = (text | model.gLike | model.phrase | model.global)*
origDate.localattributes =
  att.global.attributes,
  att.datable.attributes,
  att.dimensions.attributes,
  att.editLike.attributes,
  att.typed.attributes,
  empty
origPlace =
  
  ## (origin place) contains any form of place name, used to identify the place of origin for a manuscript, manuscript part, or other object. []
  element origPlace { origPlace.content, origPlace.localattributes }
origPlace.content = macro.phraseSeq
origPlace.localattributes =
  att.global.attributes,
  att.naming.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  att.typed.attributes,
  empty
origin =
  
  ## (origin) contains any descriptive or other information concerning the origin of a manuscript, manuscript part, or other object. []
  element origin { origin.content, origin.localattributes }
origin.content = macro.specialPara
origin.localattributes =
  att.global.attributes,
  att.editLike.attributes,
  att.datable.attributes,
  empty
physDesc =
  
  ## (physical description) contains a full physical description of a manuscript, manuscript part, or other object optionally subdivided using more specialized elements from the model.physDescPart class. []
  element physDesc { physDesc.content, physDesc.localattributes }
physDesc.content =
  model.pLike*,
  objectDesc?,
  handDesc?,
  typeDesc?,
  scriptDesc?,
  musicNotation?,
  decoDesc?,
  additions?,
  bindingDesc?,
  sealDesc?,
  accMat?
physDesc.localattributes = att.global.attributes, empty
provenance =
  
  ## (provenance) contains any descriptive or other information concerning a single identifiable episode during the history of a manuscript, manuscript part, or other object after its creation but before its acquisition. []
  element provenance { provenance.content, provenance.localattributes }
provenance.content = macro.specialPara
provenance.localattributes =
  att.global.attributes,
  att.datable.attributes,
  att.typed.attributes,
  empty
recordHist =
  
  ## (recorded history) provides information about the source and revision status of the parent manuscript or object description itself. []
  element recordHist { recordHist.content, recordHist.localattributes }
recordHist.content = model.pLike+ | (source, change*)
recordHist.localattributes = att.global.attributes, empty
repository =
  
  ## (repository) contains the name of a repository within which manuscripts or other objects are stored, possibly forming part of an institution. []
  element repository { repository.content, repository.localattributes }
repository.content = macro.phraseSeq.limited
repository.localattributes =
  att.global.attributes, att.naming.attributes, empty
rubric =
  
  ## (rubric) contains the text of any rubric or heading attached to a particular manuscript item, that is, a string of words through which a manuscript or other object signals the beginning of a text division, often with an assertion as to its author and title, which is in some way set off from the text itself, typically in red ink, or by use of different size or type of script, or some other such visual device. []
  element rubric { rubric.content, rubric.localattributes }
rubric.content = macro.phraseSeq
rubric.localattributes =
  att.global.attributes,
  att.typed.attributes,
  att.msExcerpt.attributes,
  empty
scriptDesc =
  
  ## contains a description of the scripts used in a manuscript or other object. []
  element scriptDesc { scriptDesc.content, scriptDesc.localattributes }
scriptDesc.content = model.pLike+ | (summary?, scriptNote+)
scriptDesc.localattributes = att.global.attributes, empty
seal =
  
  ## (seal) contains a description of one seal or similar applied to the object described []
  element seal { seal.content, seal.localattributes }
seal.content = (model.pLike | decoNote)+
seal.localattributes =
  att.global.attributes,
  att.typed.attributes,
  att.datable.attributes,
  
  ## (contemporary) specifies whether or not the seal is contemporary with the item to which it is affixed
  attribute contemporary {
    xsd:boolean
    | (
       ##
       "unknown"
       | 
         ##
         "inapplicable")
  }?,
  empty
sealDesc =
  [
    a:documentation [
      "(seal description) describes the seals or similar items related to the object described, either as a series of paragraphs or as a series of "
      ns1:code [ "<seal>" ]
      " elements. []"
    ]
  ]
  element sealDesc { sealDesc.content, sealDesc.localattributes }
sealDesc.content =
  model.pLike+
  | (summary?, (decoNote | seal | condition)+)
sealDesc.localattributes = att.global.attributes, empty
secFol =
  
  ## (second folio) marks the word or words taken from a fixed point in a codex (typically the beginning of the second leaf) in order to provide a unique identifier for it.  []
  element secFol { secFol.content, secFol.localattributes }
secFol.content =
  macro.phraseSeq
  >> sch:pattern [
       id = "secFol-secFol_in_msDesc-constraint-assert-17"
       "\x{a}" ~
       "         "
       sch:rule [
         context = "tei:secFol"
         "\x{a}" ~
         "            "
         sch:assert [
           test = "ancestor::tei:msDesc or ancestor::tei:egXML"
           "The "
           sch:name [ ]
           " element should not be used outside of msDesc."
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
secFol.localattributes = att.global.attributes, empty
signatures =
  
  ## (signatures) contains discussion of the leaf or quire signatures found within a codex or similar object. []
  element signatures { signatures.content, signatures.localattributes }
signatures.content =
  macro.specialPara
  >> sch:pattern [
       id = "signatures-signatures_in_msDesc-constraint-assert-18"
       "\x{a}" ~
       "         "
       sch:rule [
         context = "tei:signatures"
         "\x{a}" ~
         "            "
         sch:assert [
           test = "ancestor::tei:msDesc or ancestor::tei:egXML"
           "The "
           sch:name [ ]
           " element should not be used outside of msDesc."
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
signatures.localattributes = att.global.attributes, empty
source =
  
  ## (source) describes the original source for the information contained with a manuscript or object description. []
  element source { source.content, source.localattributes }
source.content = macro.specialPara
source.localattributes = att.global.attributes, empty
stamp =
  
  ## (stamp) contains a word or phrase describing a stamp or similar device. []
  element stamp { stamp.content, stamp.localattributes }
stamp.content = macro.phraseSeq
stamp.localattributes =
  att.global.attributes,
  att.typed.attributes,
  att.datable.attributes,
  empty
summary =
  
  ## contains an overview of the available information concerning some aspect of an item or object (for example, its intellectual content, history, layout, typography etc.) as a complement or alternative to the more detailed information carried by more specific elements. []
  element summary { summary.content, summary.localattributes }
summary.content = macro.specialPara
summary.localattributes = att.global.attributes, empty
support =
  
  ## (support) contains a description of the materials etc. which make up the physical support for the written part of a manuscript or other object. []
  element support { support.content, support.localattributes }
support.content = macro.specialPara
support.localattributes = att.global.attributes, empty
supportDesc =
  
  ## (support description) groups elements describing the physical support for the written part of a manuscript or other object. []
  element supportDesc {
    supportDesc.content, supportDesc.localattributes
  }
supportDesc.content =
  model.pLike+ | (support?, extent?, foliation*, collation?, condition?)
supportDesc.localattributes =
  att.global.attributes,
  
  ## (material) a short project-defined name for the material composing the majority of the support
  ## Suggested values include: 1] paper; 2] parch (parchment); 3] mixed
  attribute material {
    
    ##
    "paper"
    | 
      ## (parchment) 
      "parch"
    | 
      ##
      "mixed"
    | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
surrogates =
  
  ## (surrogates) contains information about any representations of the manuscript or other object being described which may exist in the holding institution or elsewhere. []
  element surrogates { surrogates.content, surrogates.localattributes }
surrogates.content = macro.specialPara
surrogates.localattributes = att.global.attributes, empty
typeDesc =
  
  ## (typeface description) contains a description of the typefaces or other aspects of the printing of an incunable or other printed source. []
  element typeDesc { typeDesc.content, typeDesc.localattributes }
typeDesc.content = model.pLike+ | (summary?, typeNote+)
typeDesc.localattributes = att.global.attributes, empty
typeNote =
  
  ## (typographic note) describes a particular font or other significant typographic feature distinguished within the description of a printed resource. []
  element typeNote { typeNote.content, typeNote.localattributes }
typeNote.content = macro.specialPara
typeNote.localattributes =
  att.global.attributes, att.handFeatures.attributes, empty
watermark =
  
  ## (watermark) contains a word or phrase describing a watermark or similar device. []
  element watermark { watermark.content, watermark.localattributes }
watermark.content = macro.phraseSeq
watermark.localattributes = att.global.attributes, empty
width =
  
  ## (width) contains a measurement of an object along the axis parallel to its bottom, e.g. perpendicular to the spine of a book or codex. []
  element width { width.content, width.localattributes }
width.content = macro.xtext
width.localattributes =
  att.global.attributes, att.dimensions.attributes, empty
# 3. macros
