namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.w3.org/1999/xhtml"
namespace ns2 = "http://purl.oclc.org/dsdl/schematron"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"
namespace xi = "http://www.w3.org/2001/XInclude"

# Schema generated 2021-08-31T10:24:16Z
# Edition: VersionÂ 4.3.0. Last updated on
#         31st August 2021, revision b4f72b1ff
# This material is dual-licensed.
# [http://creativecommons.org/licenses/by/3.0/] Distributed under a Creative Commons Attribution 3.0 Unported License.  [http://www.opensource.org/licenses/BSD-2-Clause] Copyright 2021 TEI Consortium. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. This software is provided by the copyright holders and contributors "as is" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages which treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of TEI content in a software environment. For further information or clarification, please contact the  TEI
#           Consortium . Simple analytic mechanisms

# Definitions from module analysis

# Set global predeclared macros

# Set predeclared macros

# 0. predeclared macros

# 1. classes
att.lexicographic.normalized.attributes =
  att.lexicographic.normalized.attribute.norm,
  att.lexicographic.normalized.attribute.orig
att.lexicographic.normalized.attribute.norm =
  
  ## (normalized) provides the normalized/standardized form of information present in the source text in a non-normalized form
  attribute norm { xsd:string }?
att.lexicographic.normalized.attribute.orig =
  
  ## (original) gives the original string or is the empty string when the element does not appear in the source text.
  attribute orig { xsd:string }?
att.linguistic.attributes =
  att.lexicographic.normalized.attributes,
  att.linguistic.attribute.lemma,
  att.linguistic.attribute.lemmaRef,
  att.linguistic.attribute.pos,
  att.linguistic.attribute.msd,
  att.linguistic.attribute.join
att.linguistic.attribute.lemma =
  
  ## provides a lemma (base form) for the word, typically uninflected and serving both as an identifier (e.g. in dictionary contexts, as a headword), and as a basis for potential inflections.
  attribute lemma { xsd:string }?
att.linguistic.attribute.lemmaRef =
  
  ## provides a pointer to a definition of the lemma for the word, for example in an online lexicon.
  attribute lemmaRef { xsd:anyURI }?
att.linguistic.attribute.pos =
  
  ## (part of speech) indicates the part of speech assigned to a token (i.e. information on whether it is a noun, adjective, or verb), usually according to some official reference vocabulary (e.g. for German: STTS, for English: CLAWS, for Polish: NKJP, etc.).
  attribute pos { xsd:string }?
att.linguistic.attribute.msd =
  [
    a:documentation [
      "(morphosyntactic description) supplies morphosyntactic information for a token, usually according to some official reference vocabulary (e.g. for German: "
      ns1:a [
        href =
          "http://www.ims.uni-stuttgart.de/forschung/ressourcen/lexika/TagSets/stts-1999.pdf"
        "STTS-large tagset"
      ]
      "; for a feature description system designed as (pragmatically) universal, see "
      ns1:a [
        href = "http://universaldependencies.org/u/feat/index.html"
        "Universal Features"
      ]
      ")."
    ]
  ]
  attribute msd { xsd:string }?
att.linguistic.attribute.join =
  
  ## when present, it provides information on whether the token in question is adjacent to another, and if so, on which side. The definition of this attribute is adapted from ISO MAF (Morpho-syntactic Annotation Framework), ISO 24611:2012.
  attribute join {
    
    ## (the token is not adjacent to another) 
    "no"
    | 
      ## (there is no whitespace on the left side of the token) 
      "left"
    | 
      ## (there is no whitespace on the right side of the token) 
      "right"
    | 
      ## (there is no whitespace on either side of the token) 
      "both"
    | 
      ## (the token overlaps with another; other devices (specifying the extent and the area of overlap) are needed to more precisely locate this token in the character stream) 
      "overlap"
  }?
att.global.analytic.attributes = att.global.analytic.attribute.ana
att.global.analytic.attribute.ana =
  [
    a:documentation [
      "(analysis) indicates one or more elements containing interpretations of the element on which the "
      ns1:code [ "@ana" ]
      " attribute appears."
    ]
  ]
  attribute ana {
    list { xsd:anyURI+ }
  }?
# 2. elements
c =
  
  ## (character) represents a character. []
  element c { c.content, c.localattributes }
c.content = macro.xtext
c.localattributes =
  att.global.attributes,
  att.segLike.attributes,
  att.typed.attributes,
  att.notated.attributes,
  empty
cl =
  
  ## (clause) represents a grammatical clause. []
  element cl { cl.content, cl.localattributes }
cl.content = macro.phraseSeq
cl.localattributes =
  att.global.attributes,
  att.segLike.attributes,
  att.typed.attributes,
  att.notated.attributes,
  empty
interp =
  
  ## (interpretation) summarizes a specific interpretative annotation which can be linked to a span of text. []
  element interp { interp.content, interp.localattributes }
interp.content = (text | model.gLike | model.descLike | model.certLike)*
interp.localattributes =
  att.global.attributes,
  att.interpLike.attribute.inst,
  att.typed.attribute.subtype,
  
  ## indicates what kind of phenomenon is being noted in the passage.
  ## Sample values include: 1] image; 2] character; 3] theme; 4] allusion
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
interpGrp =
  
  ## (interpretation group) collects together a set of related interpretations which share responsibility or type. []
  element interpGrp { interpGrp.content, interpGrp.localattributes }
interpGrp.content = model.descLike*, interp+
interpGrp.localattributes =
  att.global.attributes,
  att.interpLike.attribute.inst,
  att.typed.attribute.subtype,
  
  ## indicates what kind of phenomenon is being noted in the passage.
  ## Sample values include: 1] image; 2] character; 3] theme; 4] allusion
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
m =
  
  ## (morpheme) represents a grammatical morpheme. []
  element m { m.content, m.localattributes }
m.content =
  (text | model.gLike | model.hiLike | seg | m | c | model.global)*
m.localattributes =
  att.global.attributes,
  att.segLike.attributes,
  att.typed.attributes,
  att.notated.attributes,
  
  ## supplies the morpheme's base form.
  attribute baseForm {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
pc =
  
  ## (punctuation character) contains a character or string of characters regarded as constituting a single punctuation mark. [ ]
  element pc { pc.content, pc.localattributes }
pc.content = (text | model.gLike | c | model.pPart.edit)*
pc.localattributes =
  att.global.attributes,
  att.segLike.attributes,
  att.typed.attributes,
  att.linguistic.attributes,
  
  ## indicates the extent to which this punctuation mark conventionally separates words or phrases
  attribute force {
    
    ## the punctuation mark is a word separator
    "strong"
    | 
      ## the punctuation mark is not a word separator
      "weak"
    | 
      ## the punctuation mark may or may not be a word separator
      "inter"
  }?,
  
  ## provides a name for the kind of unit delimited by this punctuation mark.
  attribute unit {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  
  ## indicates whether this punctuation mark precedes or follows the unit it delimits.
  attribute pre { xsd:boolean }?,
  empty
phr =
  
  ## (phrase) represents a grammatical phrase. []
  element phr { phr.content, phr.localattributes }
phr.content = macro.phraseSeq
phr.localattributes =
  att.global.attributes,
  att.segLike.attributes,
  att.typed.attributes,
  att.notated.attributes,
  empty
s =
  
  ## (s-unit) contains a sentence-like division of a text. [ ]
  element s { s.content, s.localattributes }
s.content =
  macro.phraseSeq
  >> ns2:pattern [
       id = "s-noNestedS-constraint-report-26"
       "\x{a}" ~
       "         "
       ns2:rule [
         context = "tei:s"
         "\x{a}" ~
         "            "
         ns2:report [
           test = "tei:s"
           "You may not nest one s element within\x{a}" ~
           "      another: use seg instead"
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
s.localattributes =
  att.global.attributes,
  att.segLike.attributes,
  att.typed.attributes,
  att.notated.attributes,
  empty
span =
  
  ## associates an interpretative annotation directly with a span of text. []
  element span { span.content, span.localattributes }
span.content =
  macro.phraseSeq.limited
  >> ns2:pattern [
       id = "span-targetfrom-constraint-report-27"
       "\x{a}" ~
       "         "
       ns2:rule [
         context = "tei:span"
         "\x{a}" ~
         "            "
         ns2:report [
           test = "@from and @target"
           "\x{a}" ~
           "Only one of the attributes @target and @from may be supplied on "
           ns2:name [ ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
  >> ns2:pattern [
       id = "span-targetto-constraint-report-28"
       "\x{a}" ~
       "         "
       ns2:rule [
         context = "tei:span"
         "\x{a}" ~
         "            "
         ns2:report [
           test = "@to and @target"
           "\x{a}" ~
           "Only one of the attributes @target and @to may be supplied on "
           ns2:name [ ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
  >> ns2:pattern [
       id = "span-tonotfrom-constraint-report-29"
       "\x{a}" ~
       "         "
       ns2:rule [
         context = "tei:span"
         "\x{a}" ~
         "            "
         ns2:report [
           test = "@to and not(@from)"
           "\x{a}" ~
           "If @to is supplied on "
           ns2:name [ ]
           ", @from must be supplied as well"
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
  >> ns2:pattern [
       id = "span-tofrom-constraint-report-30"
       "\x{a}" ~
       "         "
       ns2:rule [
         context = "tei:span"
         "\x{a}" ~
         "            "
         ns2:report [
           test =
             "contains(normalize-space(@to),' ') or contains(normalize-space(@from),' ')"
           "\x{a}" ~
           "The attributes @to and @from on "
           ns2:name [ ]
           " may each contain only a single value"
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
span.localattributes =
  att.global.attributes,
  att.pointing.attributes,
  att.interpLike.attribute.inst,
  att.typed.attribute.subtype,
  
  ## indicates what kind of phenomenon is being noted in the passage.
  ## Sample values include: 1] image; 2] character; 3] theme; 4] allusion
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  [
    a:documentation [
      "gives the identifier of the node which is the starting point of the span of text being annotated; if not accompanied by a "
      ns1:code [ "@to" ]
      " attribute, gives the identifier of the node of the entire span of text being annotated."
    ]
  ]
  attribute from { xsd:anyURI }?,
  
  ## gives the identifier of the node which is the end-point of the span of text being annotated.
  attribute to { xsd:anyURI }?,
  empty
spanGrp =
  
  ## (span group) collects together span tags. []
  element spanGrp { spanGrp.content, spanGrp.localattributes }
spanGrp.content = model.descLike*, span*
spanGrp.localattributes =
  att.global.attributes,
  att.interpLike.attribute.inst,
  att.typed.attribute.subtype,
  
  ## indicates what kind of phenomenon is being noted in the passage.
  ## Sample values include: 1] image; 2] character; 3] theme; 4] allusion
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?,
  empty
w =
  
  ## (word) represents a grammatical (not necessarily orthographic) word. [ ]
  element w { w.content, w.localattributes }
w.content =
  (text
   | model.gLike
   | seg
   | w
   | m
   | c
   | pc
   | model.global
   | model.lPart
   | model.hiLike
   | model.pPart.edit)*
w.localattributes =
  att.global.attributes,
  att.segLike.attributes,
  att.typed.attributes,
  att.linguistic.attributes,
  att.notated.attributes,
  empty
# 3. macros
